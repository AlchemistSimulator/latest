{
  "ownKey": "kotlindoc",
  "childrenPages": {"kotlindoc": {
    "ownKey": "kotlindoc",
    "childrenPages": {"it": {
      "ownKey": "it",
      "childrenPages": {"unibo": {
        "ownKey": "unibo",
        "childrenPages": {"alchemist": {
          "ownKey": "alchemist",
          "childrenPages": {
            "boundary": {
              "ownKey": "boundary",
              "childrenPages": {
                "l10n": {
                  "ownKey": "l10n",
                  "childrenPages": {"localizedresourcebundle": {
                    "ownKey": "localizedresourcebundle",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/l10n/localizedresourcebundle",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/l10n/localizedresourcebundle"
                      },
                      "description": "",
                      "title": "LocalizedResourceBundle",
                      "content": "<p>Shorthand for getting resources.<\/p>get\n<p>get<\/p>\n<p>getString<\/p>\n<p>Looks up on the property files and returns the correct String.<\/p>\n"
                    }]
                  }},
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/boundary/l10n",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/l10n"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.boundary.l10n",
                    "content": "<p>LocalizedResourceBundle<\/p>\n<p>Shorthand for getting resources.<\/p>\n"
                  }]
                },
                "interfaces": {
                  "ownKey": "interfaces",
                  "childrenPages": {
                    "graphical2doutputmonitor": {
                      "ownKey": "graphical2doutputmonitor",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/interfaces/graphical2doutputmonitor",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/graphical2doutputmonitor"
                        },
                        "description": "",
                        "title": "Graphical2DOutputMonitor",
                        "content": "<p>An output monitor that supports zooming on bidimensional environments.<\/p>zoomTo\n"
                      }]
                    },
                    "outputmonitor": {
                      "ownKey": "outputmonitor",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/interfaces/outputmonitor",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/outputmonitor"
                        },
                        "description": "",
                        "title": "OutputMonitor",
                        "content": "<p>An interface for the visualization of the simulation.<\/p>finished\n<p>This method will be called by the simulation once the whole simulation has finished, either because it reached its latest point or because the user stopped it. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\ninitialized\n<p>This method will be called by the simulation as soon as the initialization phase is completed. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\nstepDone\n<p>This method will be called by the simulation every time a simulation step is done. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\n"
                      }]
                    },
                    "graphicaloutputmonitor": {
                      "ownKey": "graphicaloutputmonitor",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/interfaces/graphicaloutputmonitor",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/graphicaloutputmonitor"
                        },
                        "description": "",
                        "title": "GraphicalOutputMonitor",
                        "content": "<p>setStep<\/p>\n<p>setEffectStack<\/p>\n<p>isRealTime<\/p>\n<p>getStep<\/p>\n<p>repaint<\/p>\n<p>setMarkCloserNode<\/p>\n<p>If set, the node closer to the mouse will be put in evidence.<\/p>\nsetRealTime\n<p>If enabled, the monitor tries to synchronize the simulation time with the real time, slowing down the simulator if needed. If the simulation is slower than the real time, then the display refreshes fast enough to keep the default frame rate.<\/p>\nsetDrawLinks\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/boundary/interfaces",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.boundary.interfaces",
                    "content": "<p>OutputMonitor<\/p>\n<p>An interface for the visualization of the simulation.<\/p>\nGraphicalOutputMonitor\n<p>Graphical2DOutputMonitor<\/p>\n<p>An output monitor that supports zooming on bidimensional environments.<\/p>\n"
                  }]
                },
                "util": {
                  "ownKey": "util",
                  "childrenPages": {"initmapsforge": {
                    "ownKey": "initmapsforge",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/util/initmapsforge",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/util/initmapsforge"
                      },
                      "description": "",
                      "title": "InitMapsForge",
                      "content": "<p>Static configurator for Mapsforge, providing a custom user-agent and referer to identify Alchemist\non the OpenStreetMaps side.<\/p>initAgent\n"
                    }]
                  }},
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/boundary/util",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/util"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.boundary.util",
                    "content": "<p>InitMapsForge<\/p>\n<p>Static configurator for Mapsforge, providing a custom user-agent and referer to identify Alchemist\non the OpenStreetMaps side.<\/p>\n"
                  }]
                },
                "gpsload": {
                  "ownKey": "gpsload",
                  "childrenPages": {
                    "impl": {
                      "ownKey": "impl",
                      "childrenPages": {
                        "traceloader": {
                          "ownKey": "traceloader",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/impl/traceloader",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/impl/traceloader"
                            },
                            "description": "",
                            "title": "TraceLoader",
                            "content": "<p><init><\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p>iterator<\/p>\n<p>size<\/p>\n"
                          }]
                        },
                        "gpxloader": {
                          "ownKey": "gpxloader",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/impl/gpxloader",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/impl/gpxloader"
                            },
                            "description": "",
                            "title": "GPXLoader",
                            "content": "<p>Class that reads GPS tracks from gpx files.<\/p><init>\n<p>Class that reads GPS tracks from gpx files.<\/p>\nreadTrace\n\nsupportedExtensions\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gpsload/impl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/impl"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.gpsload.impl",
                        "content": "<p>TraceLoader<\/p>\n<p>GPXLoader<\/p>\n<p>Class that reads GPS tracks from gpx files.<\/p>\n"
                      }]
                    },
                    "api": {
                      "ownKey": "api",
                      "childrenPages": {
                        "abstractgpstimealignment": {
                          "ownKey": "abstractgpstimealignment",
                          "childrenPages": {"singlepointbehavior": {
                            "ownKey": "singlepointbehavior",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/api/abstractgpstimealignment/singlepointbehavior",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/abstractgpstimealignment/singlepointbehavior"
                              },
                              "description": "",
                              "title": "SinglePointBehavior",
                              "content": "<p>Define the behavior for trace with single point.<\/p>RETAIN_SINGLE_POINTS\n<p>DISCARD_SINGLE_POINTS<\/p>\n<p>THROW_EXCEPTION_ON_SINGLE_POINTS<\/p>\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/api/abstractgpstimealignment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/abstractgpstimealignment"
                            },
                            "description": "",
                            "title": "AbstractGPSTimeAlignment",
                            "content": "<p><init><\/p>\n<p>computeStartTime<\/p>\n<p>alignTime<\/p>\n"
                          }]
                        },
                        "aligntofirsttrace": {
                          "ownKey": "aligntofirsttrace",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/api/aligntofirsttrace",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/aligntofirsttrace"
                            },
                            "description": "",
                            "title": "AlignToFirstTrace",
                            "content": "<p>Aligns all traces at the start time of the first trace. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 0 and second point with time = 3 - second trace start with time = 2 and second point with time = 4<\/p><init>\n<p>Default empty constructor, builds a AlignToFirstTrace with RETAIN_SINGLE_POINTS behavior for trace with single point.<\/p>\ncomputeStartTime\n\n"
                          }]
                        },
                        "gpsfileloader": {
                          "ownKey": "gpsfileloader",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/api/gpsfileloader",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/gpsfileloader"
                            },
                            "description": "",
                            "title": "GPSFileLoader",
                            "content": "<p>Strategy to read GPSTrace from file.<\/p>readTrace\n<p>supportedExtensions<\/p>\n"
                          }]
                        },
                        "gpstimealignment": {
                          "ownKey": "gpstimealignment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/api/gpstimealignment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/gpstimealignment"
                            },
                            "description": "",
                            "title": "GPSTimeAlignment",
                            "content": "<p>Strategy to define how align the time of all trace.<\/p>alignTime\n"
                          }]
                        },
                        "aligntosimulationtime": {
                          "ownKey": "aligntosimulationtime",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/api/aligntosimulationtime",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/aligntosimulationtime"
                            },
                            "description": "",
                            "title": "AlignToSimulationTime",
                            "content": "<p>Aligns all traces at the initial simulation time. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 0 and second point with time = 3 - second trace start with time = 0 and second point with time = 2<\/p><init>\n<p>Default empty constructor, builds a AlignToSimulationTime with RETAIN_SINGLE_POINTS behavior for trace with single point.<\/p>\ncomputeStartTime\n\n"
                          }]
                        },
                        "aligntotime": {
                          "ownKey": "aligntotime",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/api/aligntotime",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/aligntotime"
                            },
                            "description": "",
                            "title": "AlignToTime",
                            "content": "<p>Alings the traces with the given time in seconds from Epoch. All points before such time will be discarded. All points after the provided time will be shifted back. Summarizing, the time that is provided represents in the real world the time zero of the simulation.<\/p><init>\n\n<init>\n\ncomputeStartTime\n\n"
                          }]
                        },
                        "noalignment": {
                          "ownKey": "noalignment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gpsload/api/noalignment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/noalignment"
                            },
                            "description": "",
                            "title": "NoAlignment",
                            "content": "<p>No alignment is performed. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 2 and second point with time = 5 - second trace start with time = 4 and second point with time = 6<\/p><init>\n<p>Default empty constructor, builds a NoAlignment with RETAIN_SINGLE_POINTS behavior for trace with single point.<\/p>\ncomputeStartTime\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gpsload/api",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.gpsload.api",
                        "content": "<p>AbstractGPSTimeAlignment<\/p>\n<p>AlignToSimulationTime<\/p>\n<p>Aligns all traces at the initial simulation time. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 0 and second point with time = 3 - second trace start with time = 0 and second point with time = 2<\/p>\nNoAlignment\n<p>No alignment is performed. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 2 and second point with time = 5 - second trace start with time = 4 and second point with time = 6<\/p>\nAlignToFirstTrace\n<p>Aligns all traces at the start time of the first trace. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 0 and second point with time = 3 - second trace start with time = 2 and second point with time = 4<\/p>\nGPSFileLoader\n<p>Strategy to read GPSTrace from file.<\/p>\nGPSTimeAlignment\n<p>Strategy to define how align the time of all trace.<\/p>\nAlignToTime\n<p>Alings the traces with the given time in seconds from Epoch. All points before such time will be discarded. All points after the provided time will be shifted back. Summarizing, the time that is provided represents in the real world the time zero of the simulation.<\/p>\n"
                      }]
                    }
                  }
                },
                "gui": {
                  "ownKey": "gui",
                  "childrenPages": {
                    "simcontrolpanel": {
                      "ownKey": "simcontrolpanel",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/simcontrolpanel",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/simcontrolpanel"
                        },
                        "description": "",
                        "title": "SimControlPanel",
                        "content": "<p>This class maintains multiple control panels for controlling a simulation, ensuring that they are coherently updated.<\/p>setSimulation\n<p>setButtonEnabled<\/p>\n<p>addActionListener<\/p>\n<p>See <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/AbstractButton.html#addActionListener(java.awt.event.ActionListener)\">SimControlButton#addActionListener(ActionListener)<\/a><\/code>.<\/p>\nisDown\n<p>setEnabled<\/p>\n<p>getSimulation<\/p>\n<p>shutdown<\/p>\n<p>To be called when this control panel will be no longer useful.<\/p>\ntoString\n<p>createControlPanel<\/p>\n"
                      }]
                    },
                    "abstractmenu": {
                      "ownKey": "abstractmenu",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/abstractmenu",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/abstractmenu"
                        },
                        "description": "",
                        "title": "AbstractMenu",
                        "content": "<p><init><\/p>\n"
                      }]
                    },
                    "filemenu": {
                      "ownKey": "filemenu",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/filemenu",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/filemenu"
                        },
                        "description": "",
                        "title": "FileMenu",
                        "content": "<p><init><\/p>\n<p>Builds the File menu.<\/p>\nactionPerformed\n"
                      }]
                    },
                    "alchemistswingui": {
                      "ownKey": "alchemistswingui",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/alchemistswingui",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/alchemistswingui"
                        },
                        "description": "",
                        "title": "AlchemistSwingUI",
                        "content": "<p>The main frame for the standard Alchemist GUI.<\/p>DEFAULT_ICON_SIZE\n<p>The default icon size.<\/p>\n<init>\n<p>The main frame for the standard Alchemist GUI.<\/p>\nloadScaledImage\n<p>Loads an image and scales it to the default Alchemist's icon size.<\/p>\nloadScaledImage\n<p>Loads an image and scales it to the desired size.<\/p>\n"
                      }]
                    },
                    "simcontrolbutton": {
                      "ownKey": "simcontrolbutton",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/simcontrolbutton",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/simcontrolbutton"
                        },
                        "description": "",
                        "title": "SimControlButton",
                        "content": "<p><init><\/p>\n<p>Builds a new Button.<\/p>\n"
                      }]
                    },
                    "singlerungui": {
                      "ownKey": "singlerungui",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/singlerungui",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/singlerungui"
                        },
                        "description": "",
                        "title": "SingleRunGUI",
                        "content": "<p>Utility class for quickly creating non-reusable graphical interfaces.<\/p>make\n<p>Builds a single-use graphical interface.<\/p>\nmake\n<p>make<\/p>\n<p>Builds a single-use graphical interface.<\/p>\nmake\n<p>Builds a single-use graphical interface.<\/p>\nmake\n<p>Builds a single-use graphical interface.<\/p>\n"
                      }]
                    },
                    "numerictextfield": {
                      "ownKey": "numerictextfield",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/numerictextfield",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/numerictextfield"
                        },
                        "description": "",
                        "title": "NumericTextField",
                        "content": "<p><init><\/p>\n<p>createDefaultModel<\/p>\n"
                      }]
                    },
                    "layouts": {
                      "ownKey": "layouts",
                      "childrenPages": {
                        "aflowlayout": {
                          "ownKey": "aflowlayout",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/layouts/aflowlayout",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/layouts/aflowlayout"
                            },
                            "description": "",
                            "title": "AFlowLayout",
                            "content": "<p>CENTER<\/p>\n<p>The horizontal alignment constant that designates centering. Also used to designate center anchoring.<\/p>\nRIGHT\n<p>The horizontal alignment constant that designates right justification.<\/p>\nLEFT\n<p>The horizontal alignment constant that designates left justification.<\/p>\nBOTH\n<p>The horizontal alignment constant that designates stretching the component horizontally.<\/p>\nTOP\n<p>The anchoring constant that designates anchoring to the top of the display area.<\/p>\n<init>\n\ngetComponentOrder\n\nsetComponentOrder\n\ngetComponentsList\n\ngetAlignment\n\nsetAlignment\n\nsetGap\n\ntoString\n\nminimumLayoutSize\n\nlayoutSize\n<p>Calculates the size dimensions for the specified container, given the components it contains.<\/p>\nremoveLayoutComponent\n\nisOrdered\n\nlayoutContainer\n\ngetAnchor\n\npreferredLayoutSize\n\naddLayoutComponent\n\nsetAnchor\n\ngetGap\n\n"
                          }]
                        },
                        "verticalflowlayout": {
                          "ownKey": "verticalflowlayout",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/layouts/verticalflowlayout",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/layouts/verticalflowlayout"
                            },
                            "description": "",
                            "title": "VerticalFlowLayout",
                            "content": "<p>A vertical layout manager similar to java.awt.FlowLayout. Like FlowLayout components do not expand to fill available space except when the horizontal alignment is <code>BOTH<\/code> in which case components are stretched horizontally. Unlike FlowLayout, components will not wrap to form another column if there isn't enough space vertically. VerticalLayout can optionally anchor components to the top or bottom of the display area or center them between the top and bottom. Revision date 12th July 2001 Homepage:www.kagi.com/equitysoft - Based on 'FlexLayout' in Java class libraries Vol 2 Chan/Lee Addison-Wesley 1998<\/p><init>\n<p>Constructs an instance of VerticalLayout with a vertical vgap of 5 pixels, horizontal centering and anchored to the top of the display area.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance with horizontal centering, anchored to the top with the specified vgap.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance anchored to the top with the specified vgap and horizontal alignment.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance with the specified vgap, horizontal alignment and anchoring.<\/p>\nlayoutSize\n\nlayoutContainer\n<p>Lays out the container.<\/p>\n"
                          }]
                        },
                        "horizontalflowlayout": {
                          "ownKey": "horizontalflowlayout",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/layouts/horizontalflowlayout",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/layouts/horizontalflowlayout"
                            },
                            "description": "",
                            "title": "HorizontalFlowLayout",
                            "content": "<p>A vertical layout manager similar to java.awt.FlowLayout. Like FlowLayout components do not expand to fill available space except when the horizontal getAlignment() is <code>BOTH<\/code> in which case components are stretched horizontally. Unlike FlowLayout, components will not wrap to form another column if there isn't enough space vertically. VerticalLayout can optionally getAnchor() components to the top or bottom of the display area or center them between the top and bottom. Revision date 12th July 2001 Homepage:www.kagi.com/equitysoft - Based on 'FlexLayout' in Java class libraries Vol 2 Chan/Lee Addison-Wesley 1998<\/p><init>\n<p>Constructs an instance of VerticalLayout with a vertical vgap of 5 pixels, horizontal centering and anchored to the top of the display area.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance with horizontal centering, anchored to the top with the specified vgap.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance anchored to the top with the specified hgap and horizontal alignment.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance with the specified vgap, horizontal getAlignment() and anchoring.<\/p>\nlayoutSize\n\nlayoutContainer\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/layouts",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/layouts"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.gui.layouts",
                        "content": "<p>HorizontalFlowLayout<\/p>\n<p>A vertical layout manager similar to java.awt.FlowLayout. Like FlowLayout components do not expand to fill available space except when the horizontal getAlignment() is <code>BOTH<\/code> in which case components are stretched horizontally. Unlike FlowLayout, components will not wrap to form another column if there isn't enough space vertically. VerticalLayout can optionally getAnchor() components to the top or bottom of the display area or center them between the top and bottom. Revision date 12th July 2001 Homepage:www.kagi.com/equitysoft - Based on 'FlexLayout' in Java class libraries Vol 2 Chan/Lee Addison-Wesley 1998<\/p>\nAFlowLayout\n<p>VerticalFlowLayout<\/p>\n<p>A vertical layout manager similar to java.awt.FlowLayout. Like FlowLayout components do not expand to fill available space except when the horizontal alignment is <code>BOTH<\/code> in which case components are stretched horizontally. Unlike FlowLayout, components will not wrap to form another column if there isn't enough space vertically. VerticalLayout can optionally anchor components to the top or bottom of the display area or center them between the top and bottom. Revision date 12th July 2001 Homepage:www.kagi.com/equitysoft - Based on 'FlexLayout' in Java class libraries Vol 2 Chan/Lee Addison-Wesley 1998<\/p>\n"
                      }]
                    },
                    "isolines": {
                      "ownKey": "isolines",
                      "childrenPages": {
                        "isoline": {
                          "ownKey": "isoline",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/isolines/isoline",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isoline"
                            },
                            "description": "",
                            "title": "Isoline",
                            "content": "<p>An isoline (also contour line, isopleth, or isarithm) of a function of two variables is a curve along which the function has a constant value, so that the curve joins points of equal value. Here the curve is approximated as a collection of 2D segments.<\/p>getValue\n<p>getSegments<\/p>\n"
                          }]
                        },
                        "conrecisolinesfinder": {
                          "ownKey": "conrecisolinesfinder",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/isolines/conrecisolinesfinder",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/conrecisolinesfinder"
                            },
                            "description": "",
                            "title": "ConrecIsolinesFinder",
                            "content": "<p>Conrec algorithm adapter to IsolinesFinder interface.<\/p><init>\n\nfindIsolines\n<p>Find the isolines of the given function. You can specify which isolines will be extracted with the levels parameter: for each value included in the collection, the corresponding isoline will be extracted. Isolines will be calculated within a rectangular region defined by two opposite vertexes. This means that the algorithm will not consider the space outside the given region at all.<\/p>\nfindIsolines\n<p>Find the isolines of the given function. This method is equivalent to <code> IsolinesFinder#findIsolines(BidimensionalFunction, Number, Number, Number, Number, Collection) <\/code>, with the difference that it allows you to specify the diagonal of the rectangular region, instead of the four vertexes separately.<\/p>\n"
                          }]
                        },
                        "concreteisolinesfactory": {
                          "ownKey": "concreteisolinesfactory",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/isolines/concreteisolinesfactory",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/concreteisolinesfactory"
                            },
                            "description": "",
                            "title": "ConcreteIsolinesFactory",
                            "content": "<p><init><\/p>\n<p>makeIsolinesFinder<\/p>\n<p>Create an IsolinesFinder object, capable of finding isolines. As different finders could be available - each one extracting isolines in a different way - you can specify which one to use with the algorithm parameter.<\/p>\nmakeIsoline\n<p>Create an Isoline.<\/p>\nmakeSegment\n<p>Create a 2D segment.<\/p>\n"
                          }]
                        },
                        "isolinesfinder": {
                          "ownKey": "isolinesfinder",
                          "childrenPages": {"bidimensionalfunction": {
                            "ownKey": "bidimensionalfunction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/isolines/isolinesfinder/bidimensionalfunction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isolinesfinder/bidimensionalfunction"
                              },
                              "description": "",
                              "title": "BidimensionalFunction",
                              "content": "<p>Defines a basic bidimensional function.<\/p>apply\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/isolines/isolinesfinder",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isolinesfinder"
                            },
                            "description": "",
                            "title": "IsolinesFinder",
                            "content": "<p>Defines an object capable of finding isolines (i.e. an isolines finding algorithm).<\/p>findIsolines\n<p>Find the isolines of the given function. You can specify which isolines will be extracted with the levels parameter: for each value included in the collection, the corresponding isoline will be extracted. Isolines will be calculated within a rectangular region defined by two opposite vertexes. This means that the algorithm will not consider the space outside the given region at all.<\/p>\nfindIsolines\n<p>Find the isolines of the given function. This method is equivalent to <code> IsolinesFinder#findIsolines(BidimensionalFunction, Number, Number, Number, Number, Collection) <\/code>, with the difference that it allows you to specify the diagonal of the rectangular region, instead of the four vertexes separately.<\/p>\n"
                          }]
                        },
                        "segment2d": {
                          "ownKey": "segment2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/isolines/segment2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/segment2d"
                            },
                            "description": "",
                            "title": "Segment2D",
                            "content": "<p>A basic 2-dimensional segment.<\/p>getX2\n<p>getX1<\/p>\n<p>getY2<\/p>\n<p>getY1<\/p>\n"
                          }]
                        },
                        "isolinesfactory": {
                          "ownKey": "isolinesfactory",
                          "childrenPages": {"isolinefinders": {
                            "ownKey": "isolinefinders",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/isolines/isolinesfactory/isolinefinders",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isolinesfactory/isolinefinders"
                              },
                              "description": "",
                              "title": "IsolineFinders",
                              "content": "<p>Enum containing all the available isolines finding algorithms.<\/p>CONREC\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/isolines/isolinesfactory",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isolinesfactory"
                            },
                            "description": "",
                            "title": "IsolinesFactory",
                            "content": "<p>A factory for the creation of the basic astractions contained in this package.<\/p>makeIsolinesFinder\n<p>Create an IsolinesFinder object, capable of finding isolines. As different finders could be available - each one extracting isolines in a different way - you can specify which one to use with the algorithm parameter.<\/p>\nmakeIsoline\n<p>Create an Isoline.<\/p>\nmakeSegment\n<p>Create a 2D segment.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/isolines",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.gui.isolines",
                        "content": "<p>Segment2D<\/p>\n<p>A basic 2-dimensional segment.<\/p>\nIsolinesFactory\n<p>A factory for the creation of the basic astractions contained in this package.<\/p>\nConcreteIsolinesFactory\n<p>Isoline<\/p>\n<p>An isoline (also contour line, isopleth, or isarithm) of a function of two variables is a curve along which the function has a constant value, so that the curve joins points of equal value. Here the curve is approximated as a collection of 2D segments.<\/p>\nIsolinesFinder\n<p>Defines an object capable of finding isolines (i.e. an isolines finding algorithm).<\/p>\nConrecIsolinesFinder\n<p>Conrec algorithm adapter to IsolinesFinder interface.<\/p>\n"
                      }]
                    },
                    "effects": {
                      "ownKey": "effects",
                      "childrenPages": {
                        "drawlayersgradient": {
                          "ownKey": "drawlayersgradient",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayersgradient",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayersgradient"
                            },
                            "description": "",
                            "title": "DrawLayersGradient",
                            "content": "<p>Draw layers values as background in the gui. The higher is the layer concentration in a point, the higher is the alpha channel for the background in that point. The user must specify: - the number of samples for each side, basically more samples correspond to a smoother and more detailed background - the min layer value - the max layer value The purpose and structure of this class is similar to <code> DrawLayersIsolines <\/code>.<\/p><init>\n<p>Draw layers values as background in the gui. The higher is the layer concentration in a point, the higher is the alpha channel for the background in that point. The user must specify: - the number of samples for each side, basically more samples correspond to a smoother and more detailed background - the min layer value - the max layer value The purpose and structure of this class is similar to <code> DrawLayersIsolines <\/code>.<\/p>\nsetSamples\n\ncreateMapper\n\ngetSamples\n\ndrawFunction\n<p>Draw the provided function.<\/p>\nmap\n<p>Map x from [xmin, xmax] to [ymin, ymax].<\/p>\n"
                          }]
                        },
                        "functiondrawer": {
                          "ownKey": "functiondrawer",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/functiondrawer",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/functiondrawer"
                            },
                            "description": "",
                            "title": "FunctionDrawer",
                            "content": "<p>Defines an object capable of drawing functions that take a Position of type P as input and give a Number as output.<\/p>drawFunction\n<p>Draw the provided function.<\/p>\n"
                          }]
                        },
                        "drawlayersvalues": {
                          "ownKey": "drawlayersvalues",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayersvalues",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayersvalues"
                            },
                            "description": "",
                            "title": "DrawLayersValues",
                            "content": "<p>This is a basic class for all the effects meant to draw <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s values in different points of the view. One effect could draw isolines, whereas another could represent different values with a gradient. Normally, drawing a layer's values only makes sense for \"numerical\" layers (i.e. layers for which the values are <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Number.html\">Number<\/a><\/code>s). However, one could have a \"non-numerical\" layer whose <code> it.unibo.alchemist.model.interfaces.Layer#getValue(it.unibo.alchemist.model.interfaces.Position) <\/code> return type is an object from which a value can be extracted somehow. In the end, drawing a layer's values makes sense as long as there is a way to map those values to Numbers. More generally, a <code> LayerToFunctionMapper <\/code> is needed. As this class is not aware of which mapper to use, this responsibility is left to subclasses. When drawing layers values, it can be important to know the min and max layer values that will be drawn. This class declares gui controls that allow the user to specify such boundaries.<\/p><init>\n<p>This is a basic class for all the effects meant to draw <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s values in different points of the view. One effect could draw isolines, whereas another could represent different values with a gradient. Normally, drawing a layer's values only makes sense for \"numerical\" layers (i.e. layers for which the values are <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Number.html\">Number<\/a><\/code>s). However, one could have a \"non-numerical\" layer whose <code> it.unibo.alchemist.model.interfaces.Layer#getValue(it.unibo.alchemist.model.interfaces.Position) <\/code> return type is an object from which a value can be extracted somehow. In the end, drawing a layer's values makes sense as long as there is a way to map those values to Numbers. More generally, a <code> LayerToFunctionMapper <\/code> is needed. As this class is not aware of which mapper to use, this responsibility is left to subclasses. When drawing layers values, it can be important to know the min and max layer values that will be drawn. This class declares gui controls that allow the user to specify such boundaries.<\/p>\ngetMinLayerValueCached\n\ngetMaxLayerValueDouble\n\ndrawLayers\n<p>Effectively draw the layers.<\/p>\nsetMaxLayerValueCached\n\ncreateMapper\n\ngetMaxLayerValueCached\n\nminOrMaxLayerValuesNeedsToBeUpdated\n\nsetMaxLayerValueDouble\n\nsetMinLayerValueCached\n\ndrawFunction\n<p>Draw the provided function.<\/p>\nsetMinLayerValueDouble\n\nupdateMinAndMaxLayerValues\n<p>Update min and max layer values.<\/p>\ngetMinLayerValue\n\ngetMinLayerValueDouble\n\nsetMinLayerValue\n\ngetMaxLayerValue\n\nsetMaxLayerValue\n\n"
                          }]
                        },
                        "effectserializationfactory": {
                          "ownKey": "effectserializationfactory",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/effectserializationfactory",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectserializationfactory"
                            },
                            "description": "",
                            "title": "EffectSerializationFactory",
                            "content": "<p>Serialize Alchemist effects from/to file in human readable format.<\/p>effectsFromFile\n<p>Get a list of effects from the specified file. Try to deserialize a JSON file at first. If this operation is not successful (for the sake of backward compatibility) try to deserialize a binary file.<\/p>\neffectToFile\n<p>Write the given effect to the destination file.<\/p>\neffectsToFile\n<p>Write the given effects to the destination file.<\/p>\n"
                          }]
                        },
                        "jeffectrepresentation": {
                          "ownKey": "jeffectrepresentation",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/jeffectrepresentation",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/jeffectrepresentation"
                            },
                            "description": "",
                            "title": "JEffectRepresentation",
                            "content": "<p>Representation of an <code> Effect <\/code>. Useful to let the user interact with an effect (create/edit). Effects are relative to a <code> GraphicalOutputMonitor <\/code> instance.<\/p><init>\n<p>Creates a new representation for the effect and monitor in input.<\/p>\nremoveItemListener\n\naddItemListener\n\ngetEffect\n<p>Gets the represented effects.<\/p>\nisSelected\n<p>Check if the representation is selected.<\/p>\ngetSelectedObjects\n\nsetEnabled\n\nsetSelected\n<p>(Un)selects this representation.<\/p>\n"
                          }]
                        },
                        "effectfactory": {
                          "ownKey": "effectfactory",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/effectfactory",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectfactory"
                            },
                            "description": "",
                            "title": "EffectFactory",
                            "content": "<p>buildDefaultEffect<\/p>\n<p>buildEffect<\/p>\n<p>Given a class, builds the corresponding effect.<\/p>\n"
                          }]
                        },
                        "drawonce": {
                          "ownKey": "drawonce",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawonce",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawonce"
                            },
                            "description": "",
                            "title": "DrawOnce",
                            "content": "<p>Effects are normally applied for each node, this is a base class for effects that do not need to be redrawn for each node. In other words, this effect will be applied for a single node instead of redrawing for all of them.<\/p><init>\n<p>Effects are normally applied for each node, this is a base class for effects that do not need to be redrawn for each node. In other words, this effect will be applied for a single node instead of redrawing for all of them.<\/p>\napply\n<p>Applies the effect.<\/p>\ndraw\n<p>Draws the effect, this method is called only for a single a node of the environment.<\/p>\ngetMarkerNodeID\n\n"
                          }]
                        },
                        "bidimensionalgaussianlayersmapper": {
                          "ownKey": "bidimensionalgaussianlayersmapper",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/bidimensionalgaussianlayersmapper",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/bidimensionalgaussianlayersmapper"
                            },
                            "description": "",
                            "title": "BidimensionalGaussianLayersMapper",
                            "content": "<p>Maps  BidimensionalGaussianLayer s, it ignores any other layer.<\/p><p>This class also manages to infer optimal min and max layer values automatically\nso the user does not have to set them by hand.<\/p><init>\n<p>Maps  BidimensionalGaussianLayer s, it ignores any other layer.<\/p><p>This class also manages to infer optimal min and max layer values automatically\nso the user does not have to set them by hand.<\/p>\nprepare\n<p>Prepare the mapping (if necessary).<\/p>\nmap\n<p>Effectively map the given layers, layers may be filtered too if the mapper is only able\nto map certain types of layers.<\/p>\nmap\n<p>see  LayerToFunctionMapper.map .<\/p>\nBidimensionalGaussianLayersMapper\n<p>Maps  BidimensionalGaussianLayer s, it ignores any other layer.<\/p><p>This class also manages to infer optimal min and max layer values automatically\nso the user does not have to set them by hand.<\/p>\n"
                          }]
                        },
                        "layertofunctionmapper": {
                          "ownKey": "layertofunctionmapper",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/layertofunctionmapper",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/layertofunctionmapper"
                            },
                            "description": "",
                            "title": "LayerToFunctionMapper",
                            "content": "<p>Defines an object capable of mapping a Layer<T, P> to a Function<* in P, * out Number>.<\/p>prepare\n<p>Prepare the mapping (if necessary).<\/p>\nmap\n<p>Effectively map the given layers, layers may be filtered too if the mapper is only able\nto map certain types of layers.<\/p>\nmap\n<p>see  LayerToFunctionMapper.map .<\/p>\n"
                          }]
                        },
                        "drawshape": {
                          "ownKey": "drawshape",
                          "childrenPages": {"mode": {
                            "ownKey": "mode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawshape/mode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawshape/mode"
                              },
                              "description": "",
                              "title": "Mode",
                              "content": "<p>DRAW_ELLIPSE<\/p>\n<p>DRAW_RECTANGLE<\/p>\n<p>FILL_ELLIPSE<\/p>\n<p>FILL_RECTANGLE<\/p>\n<p>toString<\/p>\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawshape",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawshape"
                            },
                            "description": "",
                            "title": "DrawShape",
                            "content": "<p><init><\/p>\n<p>Builds a new <code> DrawShape <\/code> effect.<\/p>\ngetPropoom\n<p>getRed<\/p>\n<p>setWritingPropertyValue<\/p>\n<p>getGreen<\/p>\n<p>setMolString<\/p>\n<p>getScaleFactor<\/p>\n<p>getBlue<\/p>\n<p>getSize<\/p>\n<p>isMolFilter<\/p>\n<p>getProperty<\/p>\n<p>setScaleFactor<\/p>\n<p>setMaxprop<\/p>\n<p>setMolPropertyFilter<\/p>\n<p>isMolPropertyFilter<\/p>\n<p>setIncarnation<\/p>\n<p>getMaxprop<\/p>\n<p>getMolecule<\/p>\n<p>getIncarnation<\/p>\n<p>getMode<\/p>\n<p>setMinprop<\/p>\n<p>setGreen<\/p>\n<p>getAlpha<\/p>\n<p>getMolString<\/p>\n<p>isReverse<\/p>\n<p>setAlpha<\/p>\n<p>getMinprop<\/p>\n<p>setPropoom<\/p>\n<p>setRed<\/p>\n<p>getColorSummary<\/p>\n<p>setMode<\/p>\n<p>setProperty<\/p>\n<p>setBlue<\/p>\n<p>setSize<\/p>\n<p>setReverse<\/p>\n<p>apply<\/p>\n<p>getColorChannel<\/p>\n<p>setC<\/p>\n<p>isWritingPropertyValue<\/p>\n<p>setMolFilter<\/p>\n"
                          }]
                        },
                        "abstractdrawlayers": {
                          "ownKey": "abstractdrawlayers",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/abstractdrawlayers",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/abstractdrawlayers"
                            },
                            "description": "",
                            "title": "AbstractDrawLayers",
                            "content": "<p>This class collects the following responsibilities: - it manages to draw layers only when necessary (as the apply method will be called for every node). Every subclass must only define the <code> AbstractDrawLayers#drawLayers(Collection, Environment, Graphics2D, IWormhole2D) <\/code> method, which is guaranteed to be called only when necessary. - it declares gui controls for the selection of the color to use - it declares gui controls for the selection of a filter, used to filter the layers to draw. In particular, it allows the user to specify a molecule, meaning that only the layer containing such molecule will be drawn (otherwise the effect is applied to all layers)<\/p>MAX_COLOUR_VALUE\n<p>INITIAL_ALPHA_DIVIDER<\/p>\n<p>L<\/p>\n<p><init><\/p>\n<p>This class collects the following responsibilities: - it manages to draw layers only when necessary (as the apply method will be called for every node). Every subclass must only define the <code> AbstractDrawLayers#drawLayers(Collection, Environment, Graphics2D, IWormhole2D) <\/code> method, which is guaranteed to be called only when necessary. - it declares gui controls for the selection of the color to use - it declares gui controls for the selection of a filter, used to filter the layers to draw. In particular, it allows the user to specify a molecule, meaning that only the layer containing such molecule will be drawn (otherwise the effect is applied to all layers)<\/p>\ngetColorSummary\n<p>getRed<\/p>\n<p>setLayerFilter<\/p>\n<p>setMolString<\/p>\n<p>getGreen<\/p>\n<p>getBlue<\/p>\n<p>drawLayers<\/p>\n<p>Effectively draw the layers.<\/p>\nsetBlue\n<p>draw<\/p>\n<p>Draws the effect, this method is called only for a single a node of the environment.<\/p>\ngetColorCache\n<p>getMolecule<\/p>\n<p>setColorCache<\/p>\n<p>setGreen<\/p>\n<p>getMolString<\/p>\n<p>getAlpha<\/p>\n<p>isLayerFilter<\/p>\n<p>setAlpha<\/p>\n<p>setRed<\/p>\n"
                          }]
                        },
                        "drawlayersisolines": {
                          "ownKey": "drawlayersisolines",
                          "childrenPages": {"distribution": {
                            "ownKey": "distribution",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayersisolines/distribution",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayersisolines/distribution"
                              },
                              "description": "",
                              "title": "Distribution",
                              "content": "<p>Distributions describing how values within an interval should be spaced.<\/p>LINEAR\n<p>LOGARITHMIC<\/p>\n<p>toString<\/p>\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayersisolines",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayersisolines"
                            },
                            "description": "",
                            "title": "DrawLayersIsolines",
                            "content": "<p>Draw layers isolines. The user must specify: - the number of isolines to draw - the min layer value - the max layer value - the distribution, used to space isoline values between min and max This class defines the DrawLayersIsolines#drawFunction(Function, Environment, Graphics2D, IWormhole2D) method, which is capable of drawing a layer's isolines given a function. The only responsibility left to subclasses is to provide a <code> LayerToFunctionMapper <\/code>.<\/p><init>\n<p>Every class extending this one should call this constructor.<\/p>\ngetDrawValues\n\ngetNumberOfIsolines\n\nsetDistribution\n\ngetIsolinesFinder\n\nsetDrawValues\n\ndrawFunction\n<p>Draw the provided function.<\/p>\ngetDistribution\n\nsetNumberOfIsolines\n\nlogspace\n<p>generates n logarithmically-spaced points between d1 and d2 using the provided base.<\/p>\nlinspace\n<p>generates n linearly-spaced points between d1 and d2.<\/p>\n"
                          }]
                        },
                        "drawnavigationgraph": {
                          "ownKey": "drawnavigationgraph",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawnavigationgraph",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawnavigationgraph"
                            },
                            "description": "",
                            "title": "DrawNavigationGraph",
                            "content": "<p>Draws the navigation graph of an <code> ImageEnvironmentWithGraph <\/code>.<\/p>MAX_COLOUR_VALUE\n<p>INITIAL_ALPHA_DIVIDER<\/p>\n<p>L<\/p>\n<p><init><\/p>\n<p>Draws the navigation graph of an <code> ImageEnvironmentWithGraph <\/code>.<\/p>\ngetColorSummary\n<p>getRed<\/p>\n<p>getGreen<\/p>\n<p>getBlue<\/p>\n<p>setBlue<\/p>\n<p>draw<\/p>\n<p>setGreen<\/p>\n<p>getAlpha<\/p>\n<p>setAlpha<\/p>\n<p>setRed<\/p>\n"
                          }]
                        },
                        "effect": {
                          "ownKey": "effect",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/effect",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effect"
                            },
                            "description": "",
                            "title": "Effect",
                            "content": "<p>getColorSummary<\/p>\n<p>apply<\/p>\n<p>Applies the effect.<\/p>\napply\n<p>Applies the effect.<\/p>\n"
                          }]
                        },
                        "drawbidimensionalgaussianlayersgradient": {
                          "ownKey": "drawbidimensionalgaussianlayersgradient",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawbidimensionalgaussianlayersgradient",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawbidimensionalgaussianlayersgradient"
                            },
                            "description": "",
                            "title": "DrawBidimensionalGaussianLayersGradient",
                            "content": "<p>Draw a gradient in the background of the gui for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s values. It ignores any other layer.<\/p><init>\n<p>Draw a gradient in the background of the gui for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s values. It ignores any other layer.<\/p>\ncreateMapper\n\n"
                          }]
                        },
                        "jeffectstab": {
                          "ownKey": "jeffectstab",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/jeffectstab",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/jeffectstab"
                            },
                            "description": "",
                            "title": "JEffectsTab",
                            "content": "<p>Graphic component to handle effects.<\/p><init>\n<p>Initialize the component.<\/p>\nsetEffects\n<p>Sets a new effect stack.<\/p>\nitemStateChanged\n\naddEffect\n<p>Adds a new <code> Effect <\/code> to this stack.<\/p>\nmoveSelectedLeft\n<p>Decreases the priority of the selected effect.<\/p>\naddActionListener\n<p>See <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/AbstractButton.html#addActionListener(java.awt.event.ActionListener)\">JToggleButton#addActionListener(ActionListener)<\/a><\/code>.<\/p>\nsetEnabled\n\nmoveSelectedRight\n<p>Increases the priority of the selected effect.<\/p>\ngetEffects\n\nclearEffects\n<p>Removes every effect.<\/p>\n"
                          }]
                        },
                        "drawsmartcam": {
                          "ownKey": "drawsmartcam",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawsmartcam",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawsmartcam"
                            },
                            "description": "",
                            "title": "DrawSmartcam",
                            "content": "<p>Draws node's shapes and cameras' fields of view.<\/p><init>\n<p>Draws node's shapes and cameras' fields of view.<\/p>\ngetColorSummary\n\napply\n\n"
                          }]
                        },
                        "drawbidimensionalgaussianlayersisolines": {
                          "ownKey": "drawbidimensionalgaussianlayersisolines",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawbidimensionalgaussianlayersisolines",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawbidimensionalgaussianlayersisolines"
                            },
                            "description": "",
                            "title": "DrawBidimensionalGaussianLayersIsolines",
                            "content": "<p>Draw isolines for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s. It ignores any other layer.<\/p><init>\n\ncreateMapper\n\n"
                          }]
                        },
                        "drawcognitivemap": {
                          "ownKey": "drawcognitivemap",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawcognitivemap",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawcognitivemap"
                            },
                            "description": "",
                            "title": "DrawCognitiveMap",
                            "content": "<p>Draws an orienting pedestrian' cognitive map.<\/p>MAX_COLOUR_VALUE\n<p>INITIAL_ALPHA_DIVIDER<\/p>\n<p>L<\/p>\n<p><init><\/p>\n<p>Draws an orienting pedestrian' cognitive map.<\/p>\ngetColorSummary\n<p>getRed<\/p>\n<p>getGreen<\/p>\n<p>getBlue<\/p>\n<p>setBlue<\/p>\n<p>draw<\/p>\n<p>Draws the effect, this method is called only for a single a node of the environment.<\/p>\napply\n<p>setGreen<\/p>\n<p>getAlpha<\/p>\n<p>setAlpha<\/p>\n<p>setRed<\/p>\n"
                          }]
                        },
                        "drawlayers": {
                          "ownKey": "drawlayers",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayers",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayers"
                            },
                            "description": "",
                            "title": "DrawLayers",
                            "content": "<p>Basic interface for every effect that draws something related to <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s. This class is a workaround: the <code> Effect <\/code> abstraction is meant to add effects to nodes, not to draw layers. At present, is the finest workaround available. This workaround has the following disadvantages: - when there aren't nodes visible in the gui the effects are not used at all, so this effect won't work.<\/p>drawLayers\n<p>Effectively draw the layers.<\/p>\n"
                          }]
                        },
                        "drawpedestrianpath": {
                          "ownKey": "drawpedestrianpath",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/drawpedestrianpath",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawpedestrianpath"
                            },
                            "description": "",
                            "title": "DrawPedestrianPath",
                            "content": "<p>Draws the paths took by pedestrians.<\/p>MAX_COLOUR_VALUE\n<p>INITIAL_ALPHA_DIVIDER<\/p>\n<p>L<\/p>\n<p>DIAMETER<\/p>\n<p>The paths will be drawn as circles of this diameter.<\/p>\n<init>\n<p>Draws the paths took by pedestrians.<\/p>\ngetColorSummary\n\ngetRed\n\nisToBeDrawn\n\ngetGreen\n\ngetBlue\n\nsetBlue\n\ndraw\n\nsetToBeDrawn\n\nsetGreen\n\ngetAlpha\n\nsetAlpha\n\nsetRed\n\n"
                          }]
                        },
                        "effectbuilder": {
                          "ownKey": "effectbuilder",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/effects/effectbuilder",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectbuilder"
                            },
                            "description": "",
                            "title": "EffectBuilder",
                            "content": "<p><init><\/p>\n<p>Default constructor.<\/p>\ngetResult\n<p>actionPerformed<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/effects",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.gui.effects",
                        "content": "<p>BidimensionalGaussianLayersMapper<\/p>\n<p>Maps  BidimensionalGaussianLayer s, it ignores any other layer.<\/p><p>This class also manages to infer optimal min and max layer values automatically\nso the user does not have to set them by hand.<\/p>\nLayerToFunctionMapper\n<p>Defines an object capable of mapping a Layer<T, P> to a Function<* in P, * out Number>.<\/p>\nDrawShape\n<p>EffectSerializationFactory<\/p>\n<p>Serialize Alchemist effects from/to file in human readable format.<\/p>\nDrawLayersIsolines\n<p>Draw layers isolines. The user must specify: - the number of isolines to draw - the min layer value - the max layer value - the distribution, used to space isoline values between min and max This class defines the DrawLayersIsolines#drawFunction(Function, Environment, Graphics2D, IWormhole2D) method, which is capable of drawing a layer's isolines given a function. The only responsibility left to subclasses is to provide a <code> LayerToFunctionMapper <\/code>.<\/p>\nDrawOnce\n<p>Effects are normally applied for each node, this is a base class for effects that do not need to be redrawn for each node. In other words, this effect will be applied for a single node instead of redrawing for all of them.<\/p>\nEffect\n<p>DrawLayersGradient<\/p>\n<p>Draw layers values as background in the gui. The higher is the layer concentration in a point, the higher is the alpha channel for the background in that point. The user must specify: - the number of samples for each side, basically more samples correspond to a smoother and more detailed background - the min layer value - the max layer value The purpose and structure of this class is similar to <code> DrawLayersIsolines <\/code>.<\/p>\nDrawPedestrianPath\n<p>Draws the paths took by pedestrians.<\/p>\nEffectFactory\n<p>DrawLayers<\/p>\n<p>Basic interface for every effect that draws something related to <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s. This class is a workaround: the <code> Effect <\/code> abstraction is meant to add effects to nodes, not to draw layers. At present, is the finest workaround available. This workaround has the following disadvantages: - when there aren't nodes visible in the gui the effects are not used at all, so this effect won't work.<\/p>\nFunctionDrawer\n<p>Defines an object capable of drawing functions that take a Position of type P as input and give a Number as output.<\/p>\nDrawNavigationGraph\n<p>Draws the navigation graph of an <code> ImageEnvironmentWithGraph <\/code>.<\/p>\nDrawSmartcam\n<p>Draws node's shapes and cameras' fields of view.<\/p>\nDrawBidimensionalGaussianLayersGradient\n<p>Draw a gradient in the background of the gui for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s values. It ignores any other layer.<\/p>\nAbstractDrawLayers\n<p>This class collects the following responsibilities: - it manages to draw layers only when necessary (as the apply method will be called for every node). Every subclass must only define the <code> AbstractDrawLayers#drawLayers(Collection, Environment, Graphics2D, IWormhole2D) <\/code> method, which is guaranteed to be called only when necessary. - it declares gui controls for the selection of the color to use - it declares gui controls for the selection of a filter, used to filter the layers to draw. In particular, it allows the user to specify a molecule, meaning that only the layer containing such molecule will be drawn (otherwise the effect is applied to all layers)<\/p>\nJEffectRepresentation\n<p>Representation of an <code> Effect <\/code>. Useful to let the user interact with an effect (create/edit). Effects are relative to a <code> GraphicalOutputMonitor <\/code> instance.<\/p>\nJEffectsTab\n<p>Graphic component to handle effects.<\/p>\nDrawLayersValues\n<p>This is a basic class for all the effects meant to draw <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s values in different points of the view. One effect could draw isolines, whereas another could represent different values with a gradient. Normally, drawing a layer's values only makes sense for \"numerical\" layers (i.e. layers for which the values are <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Number.html\">Number<\/a><\/code>s). However, one could have a \"non-numerical\" layer whose <code> it.unibo.alchemist.model.interfaces.Layer#getValue(it.unibo.alchemist.model.interfaces.Position) <\/code> return type is an object from which a value can be extracted somehow. In the end, drawing a layer's values makes sense as long as there is a way to map those values to Numbers. More generally, a <code> LayerToFunctionMapper <\/code> is needed. As this class is not aware of which mapper to use, this responsibility is left to subclasses. When drawing layers values, it can be important to know the min and max layer values that will be drawn. This class declares gui controls that allow the user to specify such boundaries.<\/p>\nDrawBidimensionalGaussianLayersIsolines\n<p>Draw isolines for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s. It ignores any other layer.<\/p>\nEffectBuilder\n<p>DrawCognitiveMap<\/p>\n<p>Draws an orienting pedestrian' cognitive map.<\/p>\n"
                      }]
                    },
                    "tape": {
                      "ownKey": "tape",
                      "childrenPages": {
                        "jtapegroup": {
                          "ownKey": "jtapegroup",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapegroup",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapegroup"
                            },
                            "description": "",
                            "title": "JTapeGroup",
                            "content": "<p>A <code> JTapeGroup <\/code> is a set of <code> JTapeSection <\/code> identified by a common description.<\/p><init>\n<p>Initializes a new <code> JTapeGroup <\/code> with the description in input.<\/p>\nsetDescription\n<p>Sets the description.<\/p>\ngetDescription\n<p>Gets the description.<\/p>\nregisterSection\n<p>Adds a section to the current group.<\/p>\n"
                          }]
                        },
                        "jtapesection": {
                          "ownKey": "jtapesection",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapesection",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapesection"
                            },
                            "description": "",
                            "title": "JTapeSection",
                            "content": "<p>A <code> JTapeSection <\/code> is a set of one or more feature that should appear close to each other because of stylistic or semantic reasons.<\/p><init>\n<p>A <code> JTapeSection <\/code> is a set of one or more feature that should appear close to each other because of stylistic or semantic reasons.<\/p>\nunregisterFeature\n<p>Removes a feature from the current section.<\/p>\nregisterFeature\n<p>Adds a feature to the current section.<\/p>\n"
                          }]
                        },
                        "jtapefeaturestack": {
                          "ownKey": "jtapefeaturestack",
                          "childrenPages": {"type": {
                            "ownKey": "type",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapefeaturestack/type",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapefeaturestack/type"
                              },
                              "description": "",
                              "title": "Type",
                              "content": "<p>HORIZONTAL_STACK<\/p>\n<p>VERTICAL_STACK<\/p>\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapefeaturestack",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapefeaturestack"
                            },
                            "description": "",
                            "title": "JTapeFeatureStack",
                            "content": "<p><init><\/p>\n<p><init><\/p>\n<p>unregisterFeature<\/p>\n<p>Removes a feature from the current section.<\/p>\ngetOrderedComponents\n<p>getLayout<\/p>\n<p>setComponentOrder<\/p>\n<p>remove<\/p>\n<p>add<\/p>\n<p>registerFeature<\/p>\n<p>Adds a feature to the current section.<\/p>\ngetType\n"
                          }]
                        },
                        "jtapetab": {
                          "ownKey": "jtapetab",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapetab",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapetab"
                            },
                            "description": "",
                            "title": "JTapeTab",
                            "content": "<p>A <code> JTapeTab <\/code> is composed of a title and a set of <code> JTapeGroup <\/code>. Each <code> JTapeTab <\/code> contains an hidden <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/JProgressBar.html\">JProgressBar<\/a><\/code> too. Features with a common context should appear into the same tab. E.g. Common operations like New, Open, Close, Save, etc. should stay togheter.<\/p><init>\n<p>Initializes a new <code> JTapeTab <\/code> with the title in input.<\/p>\nsetProgressBar\n<p>Lets child-classes change the progress bar.<\/p>\ngetTitle\n<p>Gets the title.<\/p>\ngetProgressBar\n<p>Lets child-classes access the progress bar.<\/p>\nregisterGroup\n<p>Adds a group of features to the tab.<\/p>\nsetTitle\n<p>Sets the title.<\/p>\n"
                          }]
                        },
                        "jtape": {
                          "ownKey": "jtape",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/tape/jtape",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtape"
                            },
                            "description": "",
                            "title": "JTape",
                            "content": "<p>JTape is a container for a commands bar that should expose the whole set of features of an application that may concern the user.<\/p><init>\n<p>JTape is a container for a commands bar that should expose the whole set of features of an application that may concern the user.<\/p>\nderegisterTab\n<p>Removes a tab.<\/p>\nregisterTab\n<p>Adds a tab to the JTape instance.<\/p>\n"
                          }]
                        },
                        "jtapemainfeature": {
                          "ownKey": "jtapemainfeature",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapemainfeature",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapemainfeature"
                            },
                            "description": "",
                            "title": "JTapeMainFeature",
                            "content": "<p><init><\/p>\n<p>unregisterFeature<\/p>\n<p>registerFeature<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/tape",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.gui.tape",
                        "content": "<p>JTapeGroup<\/p>\n<p>A <code> JTapeGroup <\/code> is a set of <code> JTapeSection <\/code> identified by a common description.<\/p>\nJTapeMainFeature\n<p>JTapeSection<\/p>\n<p>A <code> JTapeSection <\/code> is a set of one or more feature that should appear close to each other because of stylistic or semantic reasons.<\/p>\nJTapeTab\n<p>A <code> JTapeTab <\/code> is composed of a title and a set of <code> JTapeGroup <\/code>. Each <code> JTapeTab <\/code> contains an hidden <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/JProgressBar.html\">JProgressBar<\/a><\/code> too. Features with a common context should appear into the same tab. E.g. Common operations like New, Open, Close, Save, etc. should stay togheter.<\/p>\nJTapeFeatureStack\n<p>JTape<\/p>\n<p>JTape is a container for a commands bar that should expose the whole set of features of an application that may concern the user.<\/p>\n"
                      }]
                    },
                    "colorchannel": {
                      "ownKey": "colorchannel",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/colorchannel",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/colorchannel"
                        },
                        "description": "",
                        "title": "ColorChannel",
                        "content": "<p>ALPHA<\/p>\n<p>RED<\/p>\n<p>GREEN<\/p>\n<p>HUE<\/p>\n<p>SATURATION<\/p>\n<p>BRIGHTNESS<\/p>\n<p>BLUE<\/p>\n<p>alter<\/p>\n<p>Given a color, modifies the channel setting the passed value.<\/p>\n"
                      }]
                    },
                    "reactivitypanel": {
                      "ownKey": "reactivitypanel",
                      "childrenPages": {"status": {
                        "ownKey": "status",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/reactivitypanel/status",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/reactivitypanel/status"
                          },
                          "description": "",
                          "title": "Status",
                          "content": "<p>MAX_REACTIVITY<\/p>\n<p>REAL_TIME<\/p>\n<p>USER_SELECTED<\/p>\n"
                        }]
                      }},
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/reactivitypanel",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/reactivitypanel"
                        },
                        "description": "",
                        "title": "ReactivityPanel",
                        "content": "<p><init><\/p>\n<p>itemStateChanged<\/p>\n<p>setActionCommand<\/p>\n<p>Sets the command name for the action event fired by this component.<\/p>\naddActionListener\n<p>See <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/AbstractButton.html#addActionListener(java.awt.event.ActionListener)\">JToggleButton#addActionListener(ActionListener)<\/a><\/code>.<\/p>\naddChangeLister\n<p>getStatus<\/p>\n<p>getUserReactivity<\/p>\n"
                      }]
                    },
                    "simcontrolcommand": {
                      "ownKey": "simcontrolcommand",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/simcontrolcommand",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/simcontrolcommand"
                        },
                        "description": "",
                        "title": "SimControlCommand",
                        "content": "<p>PLAY<\/p>\n<p>STEP<\/p>\n<p>PAUSE<\/p>\n<p>STOP<\/p>\n<p>equalsToString<\/p>\n<p>Compares this enum to a String.<\/p>\ncreateButton\n"
                      }]
                    },
                    "statusbar": {
                      "ownKey": "statusbar",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/statusbar",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/statusbar"
                        },
                        "description": "",
                        "title": "StatusBar",
                        "content": "<p><init><\/p>\n<p>setOK<\/p>\n<p>setNo<\/p>\n"
                      }]
                    },
                    "monitors": {
                      "ownKey": "monitors",
                      "childrenPages": {
                        "joutputmonitorrepresentation": {
                          "ownKey": "joutputmonitorrepresentation",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/monitors/joutputmonitorrepresentation",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/monitors/joutputmonitorrepresentation"
                            },
                            "description": "",
                            "title": "JOutputMonitorRepresentation",
                            "content": "<p><init><\/p>\n<p>removeItemListener<\/p>\n<p>addItemListener<\/p>\n<p>isSelected<\/p>\n<p>getSelectedObjects<\/p>\n<p>getMonitor<\/p>\n<p>setSelected<\/p>\n"
                          }]
                        },
                        "classitem": {
                          "ownKey": "classitem",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/monitors/classitem",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/monitors/classitem"
                            },
                            "description": "",
                            "title": "ClassItem",
                            "content": "<p>A simple <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html\">Class<\/a><\/code> wrapper exposing a better <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#toString()\">Object#toString()<\/a><\/code>.<\/p><init>\n\nhashCode\n\ngetPayload\n\nequals\n\ntoString\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/gui/monitors",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/monitors"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.gui.monitors",
                        "content": "<p>ClassItem<\/p>\n<p>A simple <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html\">Class<\/a><\/code> wrapper exposing a better <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#toString()\">Object#toString()<\/a><\/code>.<\/p>\nJOutputMonitorRepresentation\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/boundary/gui",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.boundary.gui",
                    "content": "<p>ColorChannel<\/p>\n<p>NumericTextField<\/p>\n<p>SimControlButton<\/p>\n<p>AbstractMenu<\/p>\n<p>AlchemistSwingUI<\/p>\n<p>The main frame for the standard Alchemist GUI.<\/p>\nSimControlPanel\n<p>This class maintains multiple control panels for controlling a simulation, ensuring that they are coherently updated.<\/p>\nStatusBar\n<p>ReactivityPanel<\/p>\n<p>SingleRunGUI<\/p>\n<p>Utility class for quickly creating non-reusable graphical interfaces.<\/p>\nFileMenu\n<p>SimControlCommand<\/p>\n<p>it.unibo.alchemist.boundary.gui.effects<\/p>\n<p>it.unibo.alchemist.boundary.gui.isolines<\/p>\n<p>it.unibo.alchemist.boundary.gui.layouts<\/p>\n<p>it.unibo.alchemist.boundary.gui.monitors<\/p>\n<p>it.unibo.alchemist.boundary.gui.tape<\/p>\n"
                  }]
                },
                "wormhole": {
                  "ownKey": "wormhole",
                  "childrenPages": {
                    "interfaces": {
                      "ownKey": "interfaces",
                      "childrenPages": {
                        "zoommanager": {
                          "ownKey": "zoommanager",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/zoommanager",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/zoommanager"
                            },
                            "description": "",
                            "title": "ZoomManager",
                            "content": "<p>A class that implements the <code>IZoomManager<\/code> interface is able to convert the sliding of any physical/virtual device/control into a positive <code>double<\/code> value that represents a zoom rate.<\/p>setZoom\n<p>Sets the zoom rate.<\/p>\ngetZoom\n<p>Gets the zoom rate.<\/p>\n"
                          }]
                        },
                        "pointerspeed": {
                          "ownKey": "pointerspeed",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/pointerspeed",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/pointerspeed"
                            },
                            "description": "",
                            "title": "PointerSpeed",
                            "content": "<p>Base type for any pointing device: it provides services to analyze the pointer's movement.<\/p>getOldPosition\n<p>Gets the pointer's old position.<\/p>\ngetVariation\n<p>Gets the vector [current position - old position].<\/p>\nsetCurrentPosition\n<p>Sets the pointer's current position and, consequently, updates the old one.<\/p>\ngetCurrentPosition\n<p>Gets the pointer's current position.<\/p>\n"
                          }]
                        },
                        "anglemanager": {
                          "ownKey": "anglemanager",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/anglemanager",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/anglemanager"
                            },
                            "description": "",
                            "title": "AngleManager",
                            "content": "<p>A class that implements the <code>IAngleManager<\/code> interface is able to convert the sliding of any physical/virtual device/control into a positive <code>double<\/code> value that represents an angle.<\/p>getAngle\n<p>Gets the angle.<\/p>\n"
                          }]
                        },
                        "islideinputmanager": {
                          "ownKey": "islideinputmanager",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/islideinputmanager",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/islideinputmanager"
                            },
                            "description": "",
                            "title": "ISlideInputManager",
                            "content": "<p><code>ISlideInputManager<\/code> is the base type for any class whose aim is to handle the the sliding of any physical/virtual device/control.<\/p>dec\n<p>Decreases the total amount of slides.<\/p>\ninc\n<p>Increases the total amount of slides.<\/p>\n"
                          }]
                        },
                        "iwormhole2d": {
                          "ownKey": "iwormhole2d",
                          "childrenPages": {"mode": {
                            "ownKey": "mode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/iwormhole2d/mode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/iwormhole2d/mode"
                              },
                              "description": "",
                              "title": "Mode",
                              "content": "<p>Wormhole mode.<\/p>ISOMETRIC\n<p>ADAPT_TO_VIEW<\/p>\n<p>SETTABLE<\/p>\n<p>MAP<\/p>\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/iwormhole2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/iwormhole2d"
                            },
                            "description": "",
                            "title": "IWormhole2D",
                            "content": "<p>A Wormhole (in this context) is an entity that \"connects\" two worlds: the \"environment\" and the \"view\". Above all it provides services to convert coordinates from the \"environment-space\" to the \"view-space\". <code>IWormhole2D<\/code> is the type of a wormhole whose both environment and view are bi-dimensional spaces. <br> <br> <b>Terminology:<\/b> <br> <br> - \"Environment\" is the 'rectangle' we need to render ON the view.<br> - \"View\" is a 'window' that let us see the environment.<br> - \"Environment-space\" is the algebraic space on which 'lies' the environment.<br> - \"View-space\" is the algebraic space on which 'lies' the view.<br> - \"Env\" before a point's name => it refers to a point into the environment-space.<br> - \"View\" before a point's name => it refers to a point into the view-space.<br> - \"Position\" is the point of the view-space every transformation applied to the environment refers to: e.g. if I want to move the environment, I have to change the position; it is also the point the environment rotates around.<br> - \"EnvOffset\" is the vector from (0; 0) into env-space to the left-bottom corner of the part of the environment we want to render. E.g. if I am representing a map with Earth-coordinates (16; 48), the intersection between the prime meridian and the equator is (0; 0), so I have to set the envOffset to (16; 48) in order to see the \"beginning\" of the map on the left-bottom corner of the view.<br><\/p>rotateAroundPoint\n<p>Rotates around a point into the view-space.<\/p>\nisInsideView\n<p>Check if a point of the view-space is \"visible\", i.e. it is inside the view.<\/p>\nsetRotation\n<p>Rotates the environment around the Position.<\/p>\nzoomOnPoint\n<p>Zooms on a point into the view-space.<\/p>\ncenter\n<p>Points the center of the view on the center of the environment.<\/p>\ngetViewPosition\n<p>Gets the Position.<\/p>\nsetEnvPosition\n<p>Sets the position to the view-point corresponding to <code>envPoint<\/code>.<\/p>\ngetViewPoint\n<p>Converts a point from the env-space to the view-space.<\/p>\noptimalZoom\n<p>Automatically sets the zoom rate in order to make the environment entirely visible on the view.<\/p>\ngetMode\n<p>Gets the rendering mode.<\/p>\ngetEnvPoint\n<p>Converts a point from the view-space to the env-space.<\/p>\nsetViewPosition\n<p>Sets the Position to <code>viewPoint<\/code>.<\/p>\ngetViewSize\n<p>Gets the view's size.<\/p>\nsetZoom\n<p>Changes the zoom factor.<\/p>\ngetZoom\n<p>Gets the zoom factor.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.wormhole.interfaces",
                        "content": "<p>ZoomManager<\/p>\n<p>A class that implements the <code>IZoomManager<\/code> interface is able to convert the sliding of any physical/virtual device/control into a positive <code>double<\/code> value that represents a zoom rate.<\/p>\nPointerSpeed\n<p>Base type for any pointing device: it provides services to analyze the pointer's movement.<\/p>\nISlideInputManager\n<p><code>ISlideInputManager<\/code> is the base type for any class whose aim is to handle the the sliding of any physical/virtual device/control.<\/p>\nAngleManager\n<p>A class that implements the <code>IAngleManager<\/code> interface is able to convert the sliding of any physical/virtual device/control into a positive <code>double<\/code> value that represents an angle.<\/p>\nIWormhole2D\n<p>A Wormhole (in this context) is an entity that \"connects\" two worlds: the \"environment\" and the \"view\". Above all it provides services to convert coordinates from the \"environment-space\" to the \"view-space\". <code>IWormhole2D<\/code> is the type of a wormhole whose both environment and view are bi-dimensional spaces. <br> <br> <b>Terminology:<\/b> <br> <br> - \"Environment\" is the 'rectangle' we need to render ON the view.<br> - \"View\" is a 'window' that let us see the environment.<br> - \"Environment-space\" is the algebraic space on which 'lies' the environment.<br> - \"View-space\" is the algebraic space on which 'lies' the view.<br> - \"Env\" before a point's name => it refers to a point into the environment-space.<br> - \"View\" before a point's name => it refers to a point into the view-space.<br> - \"Position\" is the point of the view-space every transformation applied to the environment refers to: e.g. if I want to move the environment, I have to change the position; it is also the point the environment rotates around.<br> - \"EnvOffset\" is the vector from (0; 0) into env-space to the left-bottom corner of the part of the environment we want to render. E.g. if I am representing a map with Earth-coordinates (16; 48), the intersection between the prime meridian and the equator is (0; 0), so I have to set the envOffset to (16; 48) in order to see the \"beginning\" of the map on the left-bottom corner of the view.<br><\/p>\n"
                      }]
                    },
                    "implementation": {
                      "ownKey": "implementation",
                      "childrenPages": {
                        "mapwormhole": {
                          "ownKey": "mapwormhole",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/mapwormhole",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/mapwormhole"
                            },
                            "description": "",
                            "title": "MapWormhole",
                            "content": "<p>Wormhole used for maps rendering.<\/p>MAX_ZOOM\n<p>Maximum zoom.<\/p>\n<init>\n<p>Initializes a new <code> MapWormhole <\/code> copying the state of the one in input.<\/p>\nrotateAroundPoint\n\noptimalZoom\n\ngetEnvPoint\n\nsetViewPosition\n\nsetZoom\n\nzoomOnPoint\n\ngetViewPosition\n\nsetEnvPosition\n\ngetViewPoint\n\nmakePosition\n\n"
                          }]
                        },
                        "pointadapter": {
                          "ownKey": "pointadapter",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/pointadapter",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/pointadapter"
                            },
                            "description": "",
                            "title": "PointAdapter",
                            "content": "<p>Adapts various representations of bidimensional positions.<\/p>hashCode\n<p>sum<\/p>\n<p>getX<\/p>\n<p>equals<\/p>\n<p>getY<\/p>\n<p>toPoint<\/p>\n<p>toString<\/p>\n<p>toPosition<\/p>\n<p>diff<\/p>\n<p>toPoint2D<\/p>\n<p>from<\/p>\n<p>Builds a <code> PointAdapter <\/code> from coordinates.<\/p>\nfrom\n<p>Builds a <code> PointAdapter <\/code>.<\/p>\nfrom\n<p>Builds a <code> PointAdapter <\/code>.<\/p>\n"
                          }]
                        },
                        "pointerspeedimpl": {
                          "ownKey": "pointerspeedimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/pointerspeedimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/pointerspeedimpl"
                            },
                            "description": "",
                            "title": "PointerSpeedImpl",
                            "content": "<p>Implementation for <code> PointerSpeed <\/code> interface.<\/p><init>\n<p>Implementation for <code> PointerSpeed <\/code> interface.<\/p>\ngetOldPosition\n\ngetVariation\n\nsetCurrentPosition\n\ngetCurrentPosition\n\n"
                          }]
                        },
                        "linearzoommanager": {
                          "ownKey": "linearzoommanager",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/linearzoommanager",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/linearzoommanager"
                            },
                            "description": "",
                            "title": "LinearZoomManager",
                            "content": "<p>A <code> LinearZoomManager <\/code> converts the sliding of any physical/virtual device/control into a zoom rate through a linear function.<br> Zoom = amount of slides * rate.<\/p><init>\n<p>Same of <code> #LinearZoomManager(double, double, double, double) <\/code> but rate is 1, and minimum and maximum are +/- <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#MAX_VALUE\">Double#MAX_VALUE<\/a><\/code>.<\/p>\n<init>\n<p>Initialize a new <code> LinearZoomManager <\/code> instance with the parameters in input.<\/p>\nsetZoom\n\ngetZoom\n\n"
                          }]
                        },
                        "wormhole2d": {
                          "ownKey": "wormhole2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/wormhole2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/wormhole2d"
                            },
                            "description": "",
                            "title": "Wormhole2D",
                            "content": "<p>Partial implementation for the interface <code> IWormhole2D <\/code>.<br> I am considering the particular case of the view as an entity into the screen-space: the y-axis grows on the bottom side of the screen.<\/p><init>\n<p>Initializes a new instance directly setting the size of both view and environment, and the offset too.<\/p>\nrotateAroundPoint\n<p>Rotates around a point into the view-space.<\/p>\nisInsideView\n\nsetRotation\n<p>Rotates the environment around the Position.<\/p>\nviewPointFromEnv\n<p>Translates a point to the view space.<\/p>\ngetHRate\n\ncalculateTransform\n<p>Calculates the <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/AffineTransform.html\">AffineTransform<\/a><\/code> that allows the wormhole to convert points from env-space to view-space.<\/p>\nenvPointFromView\n<p>Translates a point to the env space.<\/p>\noptimalZoom\n<p>Automatically sets the zoom rate in order to make the environment entirely visible on the view.<\/p>\ngetMode\n\ngetEnvPoint\n<p>Converts a point from the view-space to the env-space.<\/p>\nsetViewPosition\n<p>Sets the Position to <code>viewPoint<\/code>.<\/p>\nsetZoom\n<p>Changes the zoom factor.<\/p>\ngetZoom\n\ngetVRate\n<p>Gets the vertical stretch rate.<\/p>\nsetMode\n<p>Allows child-classes to modify the <code>#mode<\/code> field.<\/p>\nzoomOnPoint\n<p>Zooms on a point into the view-space.<\/p>\ncenter\n\ngetViewPosition\n<p>Gets the Position.<\/p>\nsetEnvPosition\n<p>Sets the position to the view-point corresponding to <code>envPoint<\/code>.<\/p>\ngetViewPoint\n<p>Converts a point from the env-space to the view-space.<\/p>\ngetEnvironment\n\nmakePosition\n<p>Creates a new position by delegating to the environment.<\/p>\ngetViewSize\n\ngetRotation\n<p>Gets the rotation angle, in radians.<\/p>\n"
                          }]
                        },
                        "doubledimension": {
                          "ownKey": "doubledimension",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/doubledimension",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/doubledimension"
                            },
                            "description": "",
                            "title": "DoubleDimension",
                            "content": "<p>Implementation of the <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Dimension2D.html\">Dimension2D<\/a><\/code> abstract class with double precision.<\/p><init>\n<p>Initializes a new <code>DoubleDimension<\/code> instance with both width and height set to zero.<\/p>\n<init>\n<p>Initializes a new <code>DoubleDimension<\/code> instance using another <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Dimension2D.html\">Dimension2D<\/a><\/code> object's data.<br> No side effects.<\/p>\n<init>\n<p>Initializes a new <code>DoubleDimension<\/code> using raw data.<\/p>\n<init>\n<p>Initializes a new <code>DoubleDimension<\/code> through an array of numbers.<br> d[0] is width, d[1] is height, other elements will be ignored.<\/p>\ngetHeight\n\nsetSize\n\ngetWidth\n\n"
                          }]
                        },
                        "abstractslideinputmanager": {
                          "ownKey": "abstractslideinputmanager",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/abstractslideinputmanager",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/abstractslideinputmanager"
                            },
                            "description": "",
                            "title": "AbstractSlideInputManager",
                            "content": "<p><code>ASlideInputManager<\/code> is the base class for any class whose aim is to handle the the sliding of any physical/virtual device/control.<\/p><init>\n<p>Creates a new <code>ASlideInputManager<\/code> with the value in input. <br> This is useful if you want to have an initial output.<\/p>\ndec\n\nsetValue\n<p>Allow any child class to modify the value directly.<\/p>\ninc\n\ngetValue\n<p>Allow any child class to see the current value.<\/p>\n"
                          }]
                        },
                        "anglemanagerimpl": {
                          "ownKey": "anglemanagerimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/anglemanagerimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/anglemanagerimpl"
                            },
                            "description": "",
                            "title": "AngleManagerImpl",
                            "content": "<p>An <code>AngleManager<\/code> converts the sliding of any physical/virtual device/control into an angle expressed with radians.<\/p>DEF_DEG_PER_PIXEL\n<p><code>DEF_DEG_PER_PIXEL<\/code> = \"DEFault amount of DEGrees PER PIXEL\".<br> Currently set to <code>3 * 360 / screenWidth<\/code> i.e.: by sliding the mouse through the entire width of the screen you will obtain a 3 rounds rotation.<br> This constant is intended for an implementation that converts mouse motion over x axis into degrees.<\/p>\n<init>\n<p>Initializes a new <code>AngleManager<\/code> instance with <code>dUnit = 1<\/code> and <code>dPhase = 0<\/code>.<\/p>\n<init>\n<p>Initializes a new <code>AngleManager<\/code> instance with <code>dPhase = 0<\/code>.<\/p>\n<init>\n<p>Initializes a new <code>AngleManager<\/code> with the initial phase and unit in input.<\/p>\ngetDegUnit\n<p>Allow any child class to see the degrees-per-slide unit.<\/p>\ngetAngle\n\ngetDegPhase\n<p>Allow any child class to see the initial phase.<\/p>\nsetDegPhase\n<p>Allow any child class to modify the initial phase.<\/p>\nsetDegUnit\n<p>Allow any child class to modify the degrees-per-slide unit.<\/p>\n"
                          }]
                        },
                        "exponentialzoommanager": {
                          "ownKey": "exponentialzoommanager",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/exponentialzoommanager",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/exponentialzoommanager"
                            },
                            "description": "",
                            "title": "ExponentialZoomManager",
                            "content": "<p>An <code>ExpZoomManager<\/code> converts the sliding of any physical/virtual device/control into a zoom rate through an exponential function (in this way I am sure to not see negative values ;-).<br> Zoom = base ^ (amount of slides / normalization value).<\/p>DEF_BASE\n<p>DEF_BASE = \"DEFault BASE\".<br> It is the default base for the exponential function. It is meant to be greater than 1. Currently its value is {@value #DEF_BASE} that seems pretty good to me.<\/p>\n<init>\n<p>Same of <code> #ExponentialZoomManager(double, double, double) <\/code> but normalization value is 1.<\/p>\n<init>\n<p>Initialize a new <code>ExpZoomManager<\/code> instance with the parameters in input.<\/p>\ngetBase\n<p>Allow any child class to see the base of the exponential.<\/p>\nsetBase\n<p>Allow any child class to modify the base of the exponential.<\/p>\nsetNormal\n<p>Allow any child class to modify the normalization value.<\/p>\nsetZoom\n\ngetNormal\n<p>Allow any child class to see the normalization value.<\/p>\ngetZoom\n\ngetSlideValueFromZoom\n<p>Calculates the initial amount of slides (i.e. <code>value<\/code>) to have a zoom rate equal to <code>z<\/code>.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/wormhole/implementation",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.boundary.wormhole.implementation",
                        "content": "<p>AngleManagerImpl<\/p>\n<p>An <code>AngleManager<\/code> converts the sliding of any physical/virtual device/control into an angle expressed with radians.<\/p>\nPointerSpeedImpl\n<p>Implementation for <code> PointerSpeed <\/code> interface.<\/p>\nMapWormhole\n<p>Wormhole used for maps rendering.<\/p>\nExponentialZoomManager\n<p>An <code>ExpZoomManager<\/code> converts the sliding of any physical/virtual device/control into a zoom rate through an exponential function (in this way I am sure to not see negative values ;-).<br> Zoom = base ^ (amount of slides / normalization value).<\/p>\nAbstractSlideInputManager\n<p><code>ASlideInputManager<\/code> is the base class for any class whose aim is to handle the the sliding of any physical/virtual device/control.<\/p>\nWormhole2D\n<p>Partial implementation for the interface <code> IWormhole2D <\/code>.<br> I am considering the particular case of the view as an entity into the screen-space: the y-axis grows on the bottom side of the screen.<\/p>\nDoubleDimension\n<p>Implementation of the <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Dimension2D.html\">Dimension2D<\/a><\/code> abstract class with double precision.<\/p>\nLinearZoomManager\n<p>A <code> LinearZoomManager <\/code> converts the sliding of any physical/virtual device/control into a zoom rate through a linear function.<br> Zoom = amount of slides * rate.<\/p>\nPointAdapter\n<p>Adapts various representations of bidimensional positions.<\/p>\n"
                      }]
                    }
                  }
                },
                "monitors": {
                  "ownKey": "monitors",
                  "childrenPages": {
                    "nodetracker": {
                      "ownKey": "nodetracker",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/monitors/nodetracker",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/nodetracker"
                        },
                        "description": "",
                        "title": "NodeTracker",
                        "content": "<p><init><\/p>\n<p>finished<\/p>\n<p>actionPerformed<\/p>\n<p>initialized<\/p>\n<p>stepDone<\/p>\n"
                      }]
                    },
                    "timestepmonitor": {
                      "ownKey": "timestepmonitor",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/monitors/timestepmonitor",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/timestepmonitor"
                        },
                        "description": "",
                        "title": "TimeStepMonitor",
                        "content": "<p><init><\/p>\n<p>Constructor.<\/p>\nfinished\n<p>initialized<\/p>\n<p>stepDone<\/p>\n"
                      }]
                    },
                    "moleculeinjectorgui": {
                      "ownKey": "moleculeinjectorgui",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/monitors/moleculeinjectorgui",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/moleculeinjectorgui"
                        },
                        "description": "",
                        "title": "MoleculeInjectorGUI",
                        "content": "<p>This class raises a new JPanel which allows to graphically inject a new molecule inside a node (or a group of nodes) or to modify the value of a certain molecule.<\/p><init>\n\n"
                      }]
                    },
                    "mapdisplay": {
                      "ownKey": "mapdisplay",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/monitors/mapdisplay",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/mapdisplay"
                        },
                        "description": "",
                        "title": "MapDisplay",
                        "content": "<p><init><\/p>\n<p>setMouseTooltipTo<\/p>\n<p>finished<\/p>\n<p>drawBackground<\/p>\n<p>initialized<\/p>\n<p>paint<\/p>\n"
                      }]
                    },
                    "generic2ddisplay": {
                      "ownKey": "generic2ddisplay",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/monitors/generic2ddisplay",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/generic2ddisplay"
                        },
                        "description": "",
                        "title": "Generic2DDisplay",
                        "content": "<p>Abstract base-class for each display able a graphically represent a 2D space and simulation.<\/p>DEFAULT_FRAME_RATE\n<p>The default frame rate.<\/p>\nPAUSE_DETECTION_THRESHOLD\n<p><init><\/p>\n<p>Initializes a new display with out redrawing the first step.<\/p>\n<init>\n<p>Initializes a new display.<\/p>\nisCloserNodeMarked\n\nsetMouseTooltipTo\n\nsetEffectStack\n\nsetStep\n\ngetWormhole\n<p>Lets child-classes access the wormhole.<\/p>\nisRealTime\n\nsetZoomManager\n<p>Lets child-classes change the zoom manager.<\/p>\nsetDrawLinks\n\nzoomTo\n\nsetWormhole\n<p>Lets child-classes change the wormhole.<\/p>\ngetStep\n\ndrawEnvOnView\n<p>Actually draws the environment on the view.<\/p>\nfinished\n<p>Override to change or add operations to be done after a simulation is concluded.<\/p>\ndrawBackground\n<p>This method is meant to be overridden by subclasses that want to display a more sophisticated background than a simple color.<\/p>\nisInitialized\n<p>Lets child-classes check if the display is initialized.<\/p>\npaintComponent\n<p>Override as per <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/JComponent.html#paintComponent(java.awt.Graphics)\">javax.swing.JComponent#paintComponent(Graphics)<\/a><\/code>.<\/p>\ninitialized\n<p>Defines what to do when the UI is initialized.<\/p>\ngetZoomManager\n<p>Lets child-classes access the zoom manager.<\/p>\nsetMarkCloserNode\n\nsetRealTime\n\nstepDone\n\nenvHasMobileObstacles\n\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/boundary/monitors",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.boundary.monitors",
                    "content": "<p>MoleculeInjectorGUI<\/p>\n<p>This class raises a new JPanel which allows to graphically inject a new molecule inside a node (or a group of nodes) or to modify the value of a certain molecule.<\/p>\nNodeTracker\n<p>TimeStepMonitor<\/p>\n<p>MapDisplay<\/p>\n<p>Generic2DDisplay<\/p>\n<p>Abstract base-class for each display able a graphically represent a 2D space and simulation.<\/p>\n"
                  }]
                }
              }
            },
            "cli": {
              "ownKey": "cli",
              "childrenPages": {"climaker": {
                "ownKey": "climaker",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/cli/climaker",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/cli/climaker"
                  },
                  "description": "",
                  "title": "CLIMaker",
                  "content": "<p>This support class generates a CLI interface backed by a property file.<\/p>getOptions\n"
                }]
              }},
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/cli",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/cli"
                },
                "description": "",
                "title": "it.unibo.alchemist.cli",
                "content": "<p>CLIMaker<\/p>\n<p>This support class generates a CLI interface backed by a property file.<\/p>\n"
              }]
            },
            "alchemist": {
              "ownKey": "alchemist",
              "childrenPages": {"alchemistwouldhaveexitedexception": {
                "ownKey": "alchemistwouldhaveexitedexception",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/alchemist/alchemistwouldhaveexitedexception",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/alchemist/alchemistwouldhaveexitedexception"
                  },
                  "description": "",
                  "title": "AlchemistWouldHaveExitedException",
                  "content": "<p>This exception is thrown in place of calling <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#exit(int)\">System.exit<\/a> when the simulator is used in debug mode.\nThe  exitStatus  returns the exit status the execution would have had.<\/p>exitStatus\n<p><init><\/p>\n<p>This exception is thrown in place of calling <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#exit(int)\">System.exit<\/a> when the simulator is used in debug mode.\nThe  exitStatus  returns the exit status the execution would have had.<\/p>\n"
                }]
              }},
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/alchemist",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/alchemist"
                },
                "description": "",
                "title": "Alchemist",
                "content": "<p>Starts Alchemist.<\/p>main\n<p>enableTestMode<\/p>\n<p>Call this method to enable testing mode, preventing Alchemist from shutting down the JVM.<\/p>\n"
              }]
            },
            "loader": {
              "ownKey": "loader",
              "childrenPages": {
                "yamlloader": {
                  "ownKey": "yamlloader",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/loader/yamlloader",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/yamlloader"
                    },
                    "description": "",
                    "title": "YamlLoader",
                    "content": "<p>Loads a properly formatted YAML file and provides method for instancing a batch of scenarios.<\/p><init>\n\n<init>\n\n<init>\n\ngetVariables\n\ngetDefault\n\ngetWith\n\ngetConstants\n\ngetDependencies\n\ngetDependentVariables\n\ngetDataExtractors\n\n"
                  }]
                },
                "variables": {
                  "ownKey": "variables",
                  "childrenPages": {
                    "jsr223variable": {
                      "ownKey": "jsr223variable",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/jsr223variable",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/jsr223variable"
                        },
                        "description": "",
                        "title": "JSR223Variable",
                        "content": "<p>This variable loads any <a href=\"http://archive.fo/PGdk8\">JSR-233<\/a> language available in the classpath.<\/p>language\n<p>can be the name of the language, the file extension, or its mime type<\/p>\nformula\n<p>the script that will get interpreted<\/p>\n<init>\n<p>builds a new JSR223Variable given a language name and a script.<\/p>\ngetWith\n<p>Given the current controlled variables, computes the current values for\nthis variable.<\/p>\n"
                      }]
                    },
                    "linearvariable": {
                      "ownKey": "linearvariable",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/linearvariable",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/linearvariable"
                        },
                        "description": "",
                        "title": "LinearVariable",
                        "content": "<p>This class represents a linear variable, namely a variable whose values span linearly between minimum and maximum.<\/p><init>\n\ngetDefault\n\nstream\n\nsteps\n\n"
                      }]
                    },
                    "arbitraryvariable": {
                      "ownKey": "arbitraryvariable",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/arbitraryvariable",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/arbitraryvariable"
                        },
                        "description": "",
                        "title": "ArbitraryVariable",
                        "content": "<p>A variable spanning over an arbitrary set of values.<\/p><init>\n\n<init>\n\ngetDefault\n\nstream\n\n"
                      }]
                    },
                    "flag": {
                      "ownKey": "flag",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/flag",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/flag"
                        },
                        "description": "",
                        "title": "Flag",
                        "content": "<p>This variable is a flag. Being booleans not a valid data type in charts, this variable just outputs 0 and 1. This is equivalent to a <code> LinearVariable <\/code> with two samples ranging from 0 to 1.<\/p><init>\n\ngetDefault\n\nstream\n\n"
                      }]
                    },
                    "geometricvariable": {
                      "ownKey": "geometricvariable",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/geometricvariable",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/geometricvariable"
                        },
                        "description": "",
                        "title": "GeometricVariable",
                        "content": "<p>A variable ranging geometrically (exponentially) in a range. Ideal for log-scale comparisons. e.g. a <code> GeometricVariable <\/code> with minimum = 1, maximum = 100 and samples = 5 will range over [1, ~3.16, 10, ~31.62 100]. Both min and max must be strictly bigger than 0.<\/p><init>\n\ngetDefault\n\nstream\n\ntoString\n\n"
                      }]
                    },
                    "variable": {
                      "ownKey": "variable",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/variable",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/variable"
                        },
                        "description": "",
                        "title": "Variable",
                        "content": "<p>A variable simulation value, that provides a range of values for batches, and a default value for single-shot runs.<\/p>getDefault\n<p>stream<\/p>\n<p>steps<\/p>\n<p>iterator<\/p>\n"
                      }]
                    },
                    "numericconstant": {
                      "ownKey": "numericconstant",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/numericconstant",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/numericconstant"
                        },
                        "description": "",
                        "title": "NumericConstant",
                        "content": "<p>A numeric constant.<\/p><init>\n\ngetWith\n\n"
                      }]
                    },
                    "dependentvariable": {
                      "ownKey": "dependentvariable",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/dependentvariable",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/dependentvariable"
                        },
                        "description": "",
                        "title": "DependentVariable",
                        "content": "<p>A dependent variable, namely a variable whose value can be obtained given the values of other variables.<\/p>getWith\n<p>Given the current controlled variables, computes the current values for this variable.<\/p>\n"
                      }]
                    },
                    "printablevariable": {
                      "ownKey": "printablevariable",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/variables/printablevariable",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/printablevariable"
                        },
                        "description": "",
                        "title": "PrintableVariable",
                        "content": "<p>A variable stub, with a default <code> #toString() <\/code> method.<\/p><init>\n<p>A variable stub, with a default <code> #toString() <\/code> method.<\/p>\ntoString\n\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/loader/variables",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.loader.variables",
                    "content": "<p>JSR223Variable<\/p>\n<p>This variable loads any <a href=\"http://archive.fo/PGdk8\">JSR-233<\/a> language available in the classpath.<\/p>\nGeometricVariable\n<p>A variable ranging geometrically (exponentially) in a range. Ideal for log-scale comparisons. e.g. a <code> GeometricVariable <\/code> with minimum = 1, maximum = 100 and samples = 5 will range over [1, ~3.16, 10, ~31.62 100]. Both min and max must be strictly bigger than 0.<\/p>\nNumericConstant\n<p>A numeric constant.<\/p>\nArbitraryVariable\n<p>A variable spanning over an arbitrary set of values.<\/p>\nPrintableVariable\n<p>A variable stub, with a default <code> #toString() <\/code> method.<\/p>\nFlag\n<p>This variable is a flag. Being booleans not a valid data type in charts, this variable just outputs 0 and 1. This is equivalent to a <code> LinearVariable <\/code> with two samples ranging from 0 to 1.<\/p>\nVariable\n<p>A variable simulation value, that provides a range of values for batches, and a default value for single-shot runs.<\/p>\nDependentVariable\n<p>A dependent variable, namely a variable whose value can be obtained given the values of other variables.<\/p>\nLinearVariable\n<p>This class represents a linear variable, namely a variable whose values span linearly between minimum and maximum.<\/p>\n"
                  }]
                },
                "shapes": {
                  "ownKey": "shapes",
                  "childrenPages": {
                    "shape": {
                      "ownKey": "shape",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/shapes/shape",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/shape"
                        },
                        "description": "",
                        "title": "Shape",
                        "content": "<p>A Shape, representing an partition of the space where a <code> Position <\/code> may lie in.<\/p>contains\n"
                      }]
                    },
                    "rectangle": {
                      "ownKey": "rectangle",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/shapes/rectangle",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/rectangle"
                        },
                        "description": "",
                        "title": "Rectangle",
                        "content": "<p>A Rectangle.<\/p><init>\n\n"
                      }]
                    },
                    "abstract2dshape": {
                      "ownKey": "abstract2dshape",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/shapes/abstract2dshape",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/abstract2dshape"
                        },
                        "description": "",
                        "title": "Abstract2DShape",
                        "content": "<p>A bidimensional Alchemist <code> Shape <\/code> that relies on AWT <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a><\/code>.<\/p><init>\n\ncontains\n\ntoString\n\n"
                      }]
                    },
                    "circle": {
                      "ownKey": "circle",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/shapes/circle",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/circle"
                        },
                        "description": "",
                        "title": "Circle",
                        "content": "<p>A circle.<\/p><init>\n\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/loader/shapes",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.loader.shapes",
                    "content": "<p>Shape<\/p>\n<p>A Shape, representing an partition of the space where a <code> Position <\/code> may lie in.<\/p>\nRectangle\n<p>A Rectangle.<\/p>\nAbstract2DShape\n<p>A bidimensional Alchemist <code> Shape <\/code> that relies on AWT <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a><\/code>.<\/p>\nCircle\n<p>A circle.<\/p>\n"
                  }]
                },
                "loader": {
                  "ownKey": "loader",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/loader/loader",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/loader"
                    },
                    "description": "",
                    "title": "Loader",
                    "content": "<p>An entity which is able to produce an Alchemist <code> Environment <\/code>, possibly with user defined variable values.<\/p>getDefault\n<p>getVariables<\/p>\n<p>getWith<\/p>\n<p>getConstants<\/p>\n<p>Allows to access the currently defined constants, namely variables defined in the simulation file whose value is constant and does not depend on the value of any free variable (directly or indirectly).<\/p>\ngetDependencies\n<p>getDependentVariables<\/p>\n<p>Allows to access the currently defined dependent variable (those variables whose value can be determined given a valid set of values for the free variables).<\/p>\ngetDataExtractors\n"
                  }]
                },
                "displacements": {
                  "ownKey": "displacements",
                  "childrenPages": {
                    "fromgpstrace": {
                      "ownKey": "fromgpstrace",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/fromgpstrace",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/fromgpstrace"
                        },
                        "description": "",
                        "title": "FromGPSTrace",
                        "content": "<p>Distributes nodes in the first positions of <code> it.unibo.alchemist.model.interfaces.GPSTrace <\/code>.<\/p><init>\n\nstream\n\n"
                      }]
                    },
                    "closetoalreadydisplaced": {
                      "ownKey": "closetoalreadydisplaced",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/closetoalreadydisplaced",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/closetoalreadydisplaced"
                        },
                        "description": "",
                        "title": "CloseToAlreadyDisplaced",
                        "content": "<p>This  Displacement  places new nodes in the proximity of those already included in the environment.\nBehaviour if there are no nodes already inserted is undefined.<\/p>sources\n<p><init><\/p>\n<p>This  Displacement  places new nodes in the proximity of those already included in the environment.\nBehaviour if there are no nodes already inserted is undefined.<\/p>\n"
                      }]
                    },
                    "abstractcloseto": {
                      "ownKey": "abstractcloseto",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/abstractcloseto",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/abstractcloseto"
                        },
                        "description": "",
                        "title": "AbstractCloseTo",
                        "content": "<p>A generic  Displacement  that displaces a certain  nodeCount  of nodes in the proximity of a number of  sources .\nHigher  variance  implies higher dispersion.\nSubclasses must identify the  sources <\/p>sources\n<p>randomGenerator<\/p>\n<p>environment<\/p>\n<p>nodeCount<\/p>\n<p>variance<\/p>\n<p><init><\/p>\n<p>A generic  Displacement  that displaces a certain  nodeCount  of nodes in the proximity of a number of  sources .\nHigher  variance  implies higher dispersion.\nSubclasses must identify the  sources <\/p>\ncovarianceMatrix\n<p>stream<\/p>\n"
                      }]
                    },
                    "point": {
                      "ownKey": "point",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/point",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/point"
                        },
                        "description": "",
                        "title": "Point",
                        "content": "<p>A single node in a single point.<\/p><init>\n\nstream\n\n"
                      }]
                    },
                    "closetogpstrace": {
                      "ownKey": "closetogpstrace",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/closetogpstrace",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/closetogpstrace"
                        },
                        "description": "",
                        "title": "CloseToGPSTrace",
                        "content": "<p>This  Displacement  displaces nodes in the proximity of a GPS trace.\nGiven a time interval from some time  to  another,\nit creates a  TraceLoader , then uses the points in the interval to generate the sources for a\nGaussian bivariate function and uses its probability density to deploy.\nHigher  variance  spreads nodes farther away from the trace with higher probability.<\/p>sources\n<p>to<\/p>\n<p><init><\/p>\n<p>This  Displacement  displaces nodes in the proximity of a GPS trace.\nGiven a time interval from some time  to  another,\nit creates a  TraceLoader , then uses the points in the interval to generate the sources for a\nGaussian bivariate function and uses its probability density to deploy.\nHigher  variance  spreads nodes farther away from the trace with higher probability.<\/p>\n"
                      }]
                    },
                    "polygon": {
                      "ownKey": "polygon",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/polygon",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/polygon"
                        },
                        "description": "",
                        "title": "Polygon",
                        "content": "<p>Creates a new Polygon with the given points.<\/p>polygon\n<p>The polygon in which positions are generated.<\/p>\nbounds\n<p>The rectangular bounds of the polygon.<\/p>\nisOnMaps\n<p>True if this environment works with  GeoPosition .<\/p>\ntoPosition\n<p>Converts a Point2D to a  P .<\/p>\n<init>\n<p>Creates a new Polygon with the given points.<\/p>\nindexToPosition\n\nmoveTo\n<p>Moves the path to the specified  Position2D .<\/p>\nlineTo\n<p>Adds a line to the path, connecting it to the specified  Position2D .<\/p>\ncontains\n<p>Checks if a  Position2D  is inside the Polygon.<\/p>\n"
                      }]
                    },
                    "grid": {
                      "ownKey": "grid",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/grid",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/grid"
                        },
                        "description": "",
                        "title": "Grid",
                        "content": "<p>A (possibly randomized) grid of nodes.<\/p><init>\n<p>A (possibly randomized) grid of nodes.<\/p>\nstream\n\n"
                      }]
                    },
                    "specificpositions": {
                      "ownKey": "specificpositions",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/specificpositions",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/specificpositions"
                        },
                        "description": "",
                        "title": "SpecificPositions",
                        "content": "<p>Given an environment and a list of list of numbers, it creates a list of the right position type for the environment.<\/p><init>\n<p>Given an environment and a list of list of numbers, it creates a list of the right position type for the environment.<\/p>\nstream\n\n"
                      }]
                    },
                    "rectangle": {
                      "ownKey": "rectangle",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/rectangle",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/rectangle"
                        },
                        "description": "",
                        "title": "Rectangle",
                        "content": "<p><init><\/p>\n<p>indexToPosition<\/p>\n<p>getX<\/p>\n<p>getHeight<\/p>\n<p>getY<\/p>\n<p>getWidth<\/p>\n"
                      }]
                    },
                    "displacement": {
                      "ownKey": "displacement",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/displacement",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/displacement"
                        },
                        "description": "",
                        "title": "Displacement",
                        "content": "<p>stream<\/p>\n<p>iterator<\/p>\n"
                      }]
                    },
                    "abstractrandomdisplacement": {
                      "ownKey": "abstractrandomdisplacement",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/abstractrandomdisplacement",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/abstractrandomdisplacement"
                        },
                        "description": "",
                        "title": "AbstractRandomDisplacement",
                        "content": "<p>environment<\/p>\n<p>the  Environment <\/p>\nrandomGenerator\n<p>the <a href=\"#\">RandomGenerator<\/a><\/p>\nnodeCount\n<p>the number of nodes<\/p>\n<init>\n\nstream\n\nmakePosition\n<p>Builds a position, relying on the internal  Environment .<\/p>\nrandomDouble\n\nrandomDouble\n\nrandomInt\n\nindexToPosition\n\n"
                      }]
                    },
                    "geometricgradientrectangle": {
                      "ownKey": "geometricgradientrectangle",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/geometricgradientrectangle",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/geometricgradientrectangle"
                        },
                        "description": "",
                        "title": "GeometricGradientRectangle",
                        "content": "<p>Distributes nodes geometrically within a rectangular shape.<\/p><init>\n<p>Use this constructor to displace multiple groups of devices with exponentially varied density along an axis.<\/p>\n<init>\n<p>Use this constructor to displace devices with an exponentially varied density along an axis.<\/p>\nindexToPosition\n\n"
                      }]
                    },
                    "circle": {
                      "ownKey": "circle",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/circle",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/circle"
                        },
                        "description": "",
                        "title": "Circle",
                        "content": "<p><init><\/p>\n<p>indexToPosition<\/p>\n"
                      }]
                    },
                    "point2d": {
                      "ownKey": "point2d",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/displacements/point2d",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/point2d"
                        },
                        "description": "",
                        "title": "Point2D",
                        "content": "<p>Alias for using pairs as bidimensional points.<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/loader/displacements",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.loader.displacements",
                    "content": "<p>AbstractCloseTo<\/p>\n<p>A generic  Displacement  that displaces a certain  nodeCount  of nodes in the proximity of a number of  sources .\nHigher  variance  implies higher dispersion.\nSubclasses must identify the  sources <\/p>\nAbstractRandomDisplacement\n<p>CloseToAlreadyDisplaced<\/p>\n<p>This  Displacement  places new nodes in the proximity of those already included in the environment.\nBehaviour if there are no nodes already inserted is undefined.<\/p>\nGrid\n<p>A (possibly randomized) grid of nodes.<\/p>\nPoint2D\n<p>Alias for using pairs as bidimensional points.<\/p>\nPolygon\n<p>Creates a new Polygon with the given points.<\/p>\nSpecificPositions\n<p>Given an environment and a list of list of numbers, it creates a list of the right position type for the environment.<\/p>\nCloseToGPSTrace\n<p>This  Displacement  displaces nodes in the proximity of a GPS trace.\nGiven a time interval from some time  to  another,\nit creates a  TraceLoader , then uses the points in the interval to generate the sources for a\nGaussian bivariate function and uses its probability density to deploy.\nHigher  variance  spreads nodes farther away from the trace with higher probability.<\/p>\nGeometricGradientRectangle\n<p>Distributes nodes geometrically within a rectangular shape.<\/p>\nPoint\n<p>A single node in a single point.<\/p>\nRectangle\n<p>Displacement<\/p>\n<p>Circle<\/p>\n<p>FromGPSTrace<\/p>\n<p>Distributes nodes in the first positions of <code> it.unibo.alchemist.model.interfaces.GPSTrace <\/code>.<\/p>\nPoint2D\n<p>Alias for using pairs as bidimensional points.<\/p>\n"
                  }]
                },
                "illegalalchemistyamlexception": {
                  "ownKey": "illegalalchemistyamlexception",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/loader/illegalalchemistyamlexception",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/illegalalchemistyamlexception"
                    },
                    "description": "",
                    "title": "IllegalAlchemistYAMLException",
                    "content": "<p>This exception is thrown when the Alchemist YAML does not conform to the specification.<\/p><init>\n\n<init>\n\n"
                  }]
                },
                "export": {
                  "ownKey": "export",
                  "childrenPages": {
                    "meansquarederror": {
                      "ownKey": "meansquarederror",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/meansquarederror",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/meansquarederror"
                        },
                        "description": "",
                        "title": "MeanSquaredError",
                        "content": "<p>Exports the Mean Squared Error for the concentration of some molecule, given another molecule that carries the correct result. The correct value is extracted from every node, then the provided UnivariateStatistic is applied to get a single, global correct value. Then, the actual value is extracted from every node, its value is compared (subtracted) to the computed correct value, it gets squared, and then logged.<\/p><init>\n\nextractData\n\ngetNames\n\n"
                      }]
                    },
                    "executiontime": {
                      "ownKey": "executiontime",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/executiontime",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/executiontime"
                        },
                        "description": "",
                        "title": "ExecutionTime",
                        "content": "<p>An extractor which provides informations about the running time of the simulation.<\/p><init>\n<p>An extractor which provides informations about the running time of the simulation.<\/p>\nextractData\n\ngetNames\n\n"
                      }]
                    },
                    "statistic": {
                      "ownKey": "statistic",
                      "childrenPages": {"countdistinct": {
                        "ownKey": "countdistinct",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/statistic/countdistinct",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/statistic/countdistinct"
                          },
                          "description": "",
                          "title": "CountDistinct",
                          "content": "<p>Counts the number of distinct entries.<\/p><init>\n<p>Counts the number of distinct entries.<\/p>\nevaluate\n\ncopy\n\ntoString\n\n"
                        }]
                      }},
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/statistic",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/statistic"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.loader.export.statistic",
                        "content": "<p>CountDistinct<\/p>\n<p>Counts the number of distinct entries.<\/p>\n"
                      }]
                    },
                    "envperformancestats": {
                      "ownKey": "envperformancestats",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/envperformancestats",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/envperformancestats"
                        },
                        "description": "",
                        "title": "EnvPerformanceStats",
                        "content": "<p>Exports the stats about the performance of the environment.<\/p><init>\n<p>Exports the stats about the performance of the environment.<\/p>\nextractData\n\ngetNames\n\n"
                      }]
                    },
                    "exporter": {
                      "ownKey": "exporter",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/exporter",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/exporter"
                        },
                        "description": "",
                        "title": "Exporter",
                        "content": "<p>Writes on file data provided by a number of <code> Extractor <\/code>s. Produces a CSV with '#' as comment character. Even though this class implements <code> OutputMonitor <\/code>, it is not <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">java.io.Serializable<\/a><\/code>.<\/p><init>\n\nfinished\n\ninitialized\n\nstepDone\n\n"
                      }]
                    },
                    "numberofnodes": {
                      "ownKey": "numberofnodes",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/numberofnodes",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/numberofnodes"
                        },
                        "description": "",
                        "title": "NumberOfNodes",
                        "content": "<p>Logs the number of nodes in the scenario.<\/p><init>\n<p>Logs the number of nodes in the scenario.<\/p>\nextractData\n\ngetNames\n\n"
                      }]
                    },
                    "filteringpolicy": {
                      "ownKey": "filteringpolicy",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/filteringpolicy",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/filteringpolicy"
                        },
                        "description": "",
                        "title": "FilteringPolicy",
                        "content": "<p>Expresses a flat map operation over a double.<\/p>apply\n<p>From a single value, builds a stream of values.<\/p>\n"
                      }]
                    },
                    "extractor": {
                      "ownKey": "extractor",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/extractor",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/extractor"
                        },
                        "description": "",
                        "title": "Extractor",
                        "content": "<p>An object that is able to extract numeric informations from an Alchemist <code> Environment <\/code>, given the current <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> <code> Time <\/code>, the last <code> Reaction <\/code> executed and the current simulation step.<\/p>extractData\n<p>Extracts numeric properties from an environment.<\/p>\ngetNames\n"
                      }]
                    },
                    "filters": {
                      "ownKey": "filters",
                      "childrenPages": {"commonfilters": {
                        "ownKey": "commonfilters",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/filters/commonfilters",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/filters/commonfilters"
                          },
                          "description": "",
                          "title": "CommonFilters",
                          "content": "<p>Utilities with the most common filtering operations on values.<\/p>FILTERNAN\n<p>FILTERINFINITY<\/p>\n<p>ONLYFINITE<\/p>\n<p>NOFILTER<\/p>\n<p>getFilteringPolicy<\/p>\n<p>fromString<\/p>\n"
                        }]
                      }},
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/filters",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/filters"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.loader.export.filters",
                        "content": "<p>CommonFilters<\/p>\n<p>Utilities with the most common filtering operations on values.<\/p>\n"
                      }]
                    },
                    "time": {
                      "ownKey": "time",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/time",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/time"
                        },
                        "description": "",
                        "title": "Time",
                        "content": "<p>Exports a column with the current time.<\/p><init>\n<p>Exports a column with the current time.<\/p>\nextractData\n\ngetNames\n\n"
                      }]
                    },
                    "moleculereader": {
                      "ownKey": "moleculereader",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/moleculereader",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/moleculereader"
                        },
                        "description": "",
                        "title": "MoleculeReader",
                        "content": "<p>Reads the value of a molecule and logs it.<\/p><init>\n\nextractData\n\ngetNames\n\n"
                      }]
                    },
                    "statutil": {
                      "ownKey": "statutil",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/loader/export/statutil",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/statutil"
                        },
                        "description": "",
                        "title": "StatUtil",
                        "content": "<p>Utility to translate statistics names into a UnivariateStatistic.<\/p>makeUnivariateStatistic\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/loader/export",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.loader.export",
                    "content": "<p>ExecutionTime<\/p>\n<p>An extractor which provides informations about the running time of the simulation.<\/p>\nEnvPerformanceStats\n<p>Exports the stats about the performance of the environment.<\/p>\nExporter\n<p>Writes on file data provided by a number of <code> Extractor <\/code>s. Produces a CSV with '#' as comment character. Even though this class implements <code> OutputMonitor <\/code>, it is not <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">java.io.Serializable<\/a><\/code>.<\/p>\nStatUtil\n<p>Utility to translate statistics names into a UnivariateStatistic.<\/p>\nNumberOfNodes\n<p>Logs the number of nodes in the scenario.<\/p>\nFilteringPolicy\n<p>Expresses a flat map operation over a double.<\/p>\nMoleculeReader\n<p>Reads the value of a molecule and logs it.<\/p>\nExtractor\n<p>An object that is able to extract numeric informations from an Alchemist <code> Environment <\/code>, given the current <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> <code> Time <\/code>, the last <code> Reaction <\/code> executed and the current simulation step.<\/p>\nMeanSquaredError\n<p>Exports the Mean Squared Error for the concentration of some molecule, given another molecule that carries the correct result. The correct value is extracted from every node, then the provided UnivariateStatistic is applied to get a single, global correct value. Then, the actual value is extracted from every node, its value is compared (subtracted) to the computed correct value, it gets squared, and then logged.<\/p>\nTime\n<p>Exports a column with the current time.<\/p>\nit.unibo.alchemist.loader.export.statistic\n<p>it.unibo.alchemist.loader.export.filters<\/p>\n"
                  }]
                }
              },
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/loader",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader"
                },
                "description": "",
                "title": "it.unibo.alchemist.loader",
                "content": "<p>Loader<\/p>\n<p>An entity which is able to produce an Alchemist <code> Environment <\/code>, possibly with user defined variable values.<\/p>\nYamlLoader\n<p>Loads a properly formatted YAML file and provides method for instancing a batch of scenarios.<\/p>\nIllegalAlchemistYAMLException\n<p>This exception is thrown when the Alchemist YAML does not conform to the specification.<\/p>\nit.unibo.alchemist.loader.displacements\n<p>it.unibo.alchemist.loader.variables<\/p>\n<p>it.unibo.alchemist.loader.export<\/p>\n<p>it.unibo.alchemist.loader.shapes<\/p>\n"
              }]
            },
            "launch": {
              "ownKey": "launch",
              "childrenPages": {
                "igniteserverlauncher": {
                  "ownKey": "igniteserverlauncher",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/igniteserverlauncher",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/igniteserverlauncher"
                    },
                    "description": "",
                    "title": "IgniteServerLauncher",
                    "content": "<p>Launches a service waiting for simulations to be sent over the network.<\/p>name\n<p>Launcher name.<\/p>\nvalidate\n<p>Given the  currentOptions , decides whether or not this  Launcher  is executable.<\/p>\nlaunch\n<p>Actually gets the job done by performing the requested operations.<\/p>\n"
                  }]
                },
                "singlerunswingui": {
                  "ownKey": "singlerunswingui",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/singlerunswingui",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/singlerunswingui"
                    },
                    "description": "",
                    "title": "SingleRunSwingUI",
                    "content": "<p>Launches a Swing GUI meant to be used for a single simulation run.<\/p>name\n<p>Launcher name.<\/p>\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\n"
                  }]
                },
                "headlesssimulationlauncher": {
                  "ownKey": "headlesssimulationlauncher",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/headlesssimulationlauncher",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/headlesssimulationlauncher"
                    },
                    "description": "",
                    "title": "HeadlessSimulationLauncher",
                    "content": "<p>Executes simulations locally in a headless environment.<\/p>name\n<p>Launcher name.<\/p>\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\n"
                  }]
                },
                "priority": {
                  "ownKey": "priority",
                  "childrenPages": {
                    "normal": {
                      "ownKey": "normal",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/launch/priority/normal",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/priority/normal"
                        },
                        "description": "",
                        "title": "Normal",
                        "content": "<p>Default priority, to be returned when the requested options fit the expected configuration.<\/p>\n"
                      }]
                    },
                    "high": {
                      "ownKey": "high",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/launch/priority/high",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/priority/high"
                        },
                        "description": "",
                        "title": "High",
                        "content": "<p>The loader overrides the behaviour of the loaders provided by default, for the same options.\nIt must specify a  reason .<\/p>reason\n<p><init><\/p>\n<p>The loader overrides the behaviour of the loaders provided by default, for the same options.\nIt must specify a  reason .<\/p>\n"
                      }]
                    },
                    "fallback": {
                      "ownKey": "fallback",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/launch/priority/fallback",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/priority/fallback"
                        },
                        "description": "",
                        "title": "Fallback",
                        "content": "<p>A low priority, indicating that the  Launcher  may run, but it will ignore some options,\nand other launchers will be preferred. It must emit a  warning .<\/p>warning\n<p><init><\/p>\n<p>A low priority, indicating that the  Launcher  may run, but it will ignore some options,\nand other launchers will be preferred. It must emit a  warning .<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/priority",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/priority"
                    },
                    "description": "",
                    "title": "Priority",
                    "content": "<p>Defines the likelihood that the configuration is compatible with a  Launcher .<\/p>compareTo\n<p>toString<\/p>\n"
                  }]
                },
                "abstractlauncher": {
                  "ownKey": "abstractlauncher",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/abstractlauncher",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/abstractlauncher"
                    },
                    "description": "",
                    "title": "AbstractLauncher",
                    "content": "<p>Provides utility functions for  Launcher  implementors.<\/p><init>\n<p>Provides utility functions for  Launcher  implementors.<\/p>\nincompatibleWith\n<p>Creates a  Validation.Invalid  expliciting what is the option this  Launcher  is incompatible with.<\/p>\nrequires\n<p>Creates a  Validation.Invalid  expliciting which option is required to run this  Launcher .<\/p>\ntoString\n\n"
                  }]
                },
                "simulationlauncher": {
                  "ownKey": "simulationlauncher",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/simulationlauncher",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/simulationlauncher"
                    },
                    "description": "",
                    "title": "SimulationLauncher",
                    "content": "<p>A launcher stub for simulation execution.\nTakes care of creating a  Loader ,\nand provides support functions for generating simulations and computing the possible parameters configurations.<\/p><init>\n<p>A launcher stub for simulation execution.\nTakes care of creating a  Loader ,\nand provides support functions for generating simulations and computing the possible parameters configurations.<\/p>\nvalidate\n<p>Given the  currentOptions , decides whether or not this  Launcher  is executable.<\/p>\nlaunch\n<p>Actually gets the job done by performing the requested operations.<\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\ncartesianProductOf\n\nprepareSimulation\n\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\n"
                  }]
                },
                "validation": {
                  "ownKey": "validation",
                  "childrenPages": {
                    "invalid": {
                      "ownKey": "invalid",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/launch/validation/invalid",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/validation/invalid"
                        },
                        "description": "",
                        "title": "Invalid",
                        "content": "<p>The  Launcher  can't run and provides a  reason .<\/p>reason\n<p><init><\/p>\n<p>The  Launcher  can't run and provides a  reason .<\/p>\n"
                      }]
                    },
                    "ok": {
                      "ownKey": "ok",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/launch/validation/ok",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/validation/ok"
                        },
                        "description": "",
                        "title": "OK",
                        "content": "<p>The  Launcher  can run with some  priority .<\/p>priority\n<p><init><\/p>\n<p>The  Launcher  can run with some  priority .<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/validation",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/validation"
                    },
                    "description": "",
                    "title": "Validation",
                    "content": "<p>Result of the validation of a launcher.<\/p>\n"
                  }]
                },
                "distributedexecution": {
                  "ownKey": "distributedexecution",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/distributedexecution",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/distributedexecution"
                    },
                    "description": "",
                    "title": "DistributedExecution",
                    "content": "<p>Launches a simulation set on a cluster of Alchemist nodes running in server mode.<\/p>name\n<p>Launcher name.<\/p>\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\n"
                  }]
                },
                "launcher": {
                  "ownKey": "launcher",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/launch/launcher",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/launcher"
                    },
                    "description": "",
                    "title": "Launcher",
                    "content": "<p>An entity with a  name  that can take responsibility for performing an Alchemist run, given the current\n AlchemistExecutionOptions .<\/p>name\n<p>Launcher name.<\/p>\nvalidate\n<p>Given the  currentOptions , decides whether or not this  Launcher  is executable.<\/p>\ninvoke\n<p>Actual execution. Implementors are <b>not<\/b> supposed to override this behaviour, although they can.\nThe default implementation performs validation, and if successful calls  launch .\nOtherwise, throws an <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html\">IllegalStateException<\/a>.<\/p>\nlaunch\n<p>Actually gets the job done by performing the requested operations.<\/p>\nLauncher\n<p>An entity with a  name  that can take responsibility for performing an Alchemist run, given the current\n AlchemistExecutionOptions .<\/p>\n"
                  }]
                }
              },
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/launch",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch"
                },
                "description": "",
                "title": "it.unibo.alchemist.launch",
                "content": "<p>DistributedExecution<\/p>\n<p>Launches a simulation set on a cluster of Alchemist nodes running in server mode.<\/p>\nIgniteServerLauncher\n<p>Launches a service waiting for simulations to be sent over the network.<\/p>\nSingleRunSwingUI\n<p>Launches a Swing GUI meant to be used for a single simulation run.<\/p>\nAbstractLauncher\n<p>Provides utility functions for  Launcher  implementors.<\/p>\nHeadlessSimulationLauncher\n<p>Executes simulations locally in a headless environment.<\/p>\nLauncher\n<p>An entity with a  name  that can take responsibility for performing an Alchemist run, given the current\n AlchemistExecutionOptions .<\/p>\nValidation\n<p>Result of the validation of a launcher.<\/p>\nPriority\n<p>Defines the likelihood that the configuration is compatible with a  Launcher .<\/p>\nSimulationLauncher\n<p>A launcher stub for simulation execution.\nTakes care of creating a  Loader ,\nand provides support functions for generating simulations and computing the possible parameters configurations.<\/p>\n"
              }]
            },
            "alchemistexecutionoptions": {
              "ownKey": "alchemistexecutionoptions",
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/alchemistexecutionoptions",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/alchemistexecutionoptions"
                },
                "description": "",
                "title": "AlchemistExecutionOptions",
                "content": "<p>Alchemist options provided by the command line.<\/p>configuration\n<p>null if no simulation file is specified (default), file path otherwise<\/p>\nheadless\n<p>true if forced, false otherwise (default)<\/p>\nvariables\n<p>selected batch variables. Defaults to <a href=\"#\">emptyList<\/a><\/p>\nbatch\n<p>whether batch mode is selected.<\/p>\nexport\n<p>the path to the file root of the data to export, or null if unspecified (export disabled).<\/p>\ndistributed\n<p>the path to the file with the load distribution configuration, or null if the run is local<\/p>\ngraphics\n<p>the path to the effects file, or null if unspecified<\/p>\nhelp\n<p>true if print help function is selected<\/p>\ninterval\n<p>sampling time, defaults to  defaultInterval <\/p>\nserver\n<p>if launched as Alchemist grid node server, the path to the configuration file. Null otherwise.<\/p>\nparallelism\n<p>parallel threads used for running locally. Defaults to  defaultParallelism <\/p>\nendTime\n<p>final simulation time. Defaults to  defaultEndTime <\/p>\n<init>\n<p>Alchemist options provided by the command line.<\/p>\nAlchemistExecutionOptions\n<p>Alchemist options provided by the command line.<\/p>\n"
              }]
            },
            "expressions": {
              "ownKey": "expressions",
              "childrenPages": {
                "interfaces": {
                  "ownKey": "interfaces",
                  "childrenPages": {
                    "itreenode": {
                      "ownKey": "itreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/interfaces/itreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/interfaces/itreenode"
                        },
                        "description": "",
                        "title": "ITreeNode",
                        "content": "<p>Represents an interface for node of the Tree class.<\/p>toHashString\n<p>Similar to toString(), but returns a HashString.<\/p>\ngetLeftChild\n<p>getRightChild<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n<p>getData<\/p>\n<p>getNumberOfChildren<\/p>\n"
                      }]
                    },
                    "iexpression": {
                      "ownKey": "iexpression",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/interfaces/iexpression",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/interfaces/iexpression"
                        },
                        "description": "",
                        "title": "IExpression",
                        "content": "<p>getRootNodeType<\/p>\n<p>syntacticMatch<\/p>\n<p>Runs a syntactic match against the e.<\/p>\ngetAST\n<p>getRootNode<\/p>\n<p>getRightChildren<\/p>\n<p>getLeftChildren<\/p>\n<p>updateMatchedVar<\/p>\n<p>calculate<\/p>\n<p>mayMatch<\/p>\n<p>This match method test whether or not two expressions might match. It can be used to evaluate dependencies in a general fashion, it does not check if all the relations are satisfied (e.g. if applying the comparators) but makes a sort of \"type checking\". If you want to compare two templates, this is the way to go.<\/p>\ngetRootNodeData\n<p>matches<\/p>\n<p>Tries to match this expression with expr. The matching rules are: (i) a variable matches everything; (ii) a constant value matches an identical constant value; (iii) a number matches an identical number or an operator, (iv) operators match everything but constants, (v) comparators match numbers and operators (verifying the values); (vi) expr type can't be comparator; (vii) add and rem operators work only with lists.<\/p>\n"
                      }]
                    },
                    "itree": {
                      "ownKey": "itree",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/interfaces/itree",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/interfaces/itree"
                        },
                        "description": "",
                        "title": "ITree",
                        "content": "<p>Represents a Tree of Objects(Node) of generic type T. The Tree is represented as a single rootElement which points to a List> of children. There is no restriction on the number of children that a particular node may have. This Tree provides a method to serialize the Tree into a List by doing a pre-order traversal.<\/p>evaluation\n<p>This evaluates the expression. If the matches map contains values which are not instanced, and the expression value cannot consequently be computed, 0d is returned.<\/p>\ngetRoot\n<p>Return the root Node of the tree.<\/p>\ntoHashString\n<p>Similar to toString(), but returns a HashString.<\/p>\nassignVarValue\n<p>This method substitutes variables present in matches map with their values. It must involve only node of Typ=Var. The method must also recognize the values type stored in the map (they can be Const or Num).<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/expressions/interfaces",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/interfaces"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.expressions.interfaces",
                    "content": "<p>ITree<\/p>\n<p>Represents a Tree of Objects(Node) of generic type T. The Tree is represented as a single rootElement which points to a List> of children. There is no restriction on the number of children that a particular node may have. This Tree provides a method to serialize the Tree into a List by doing a pre-order traversal.<\/p>\nIExpression\n<p>ITreeNode<\/p>\n<p>Represents an interface for node of the Tree class.<\/p>\n"
                  }]
                },
                "parser": {
                  "ownKey": "parser",
                  "childrenPages": {
                    "expconstants": {
                      "ownKey": "expconstants",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/parser/expconstants",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/expconstants"
                        },
                        "description": "",
                        "title": "ExpConstants",
                        "content": "<p>Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()<\/p>EOF\n<p>End of File.<\/p>\nRETURN\n<p>RegularExpression Id.<\/p>\nMIN\n<p>RegularExpression Id.<\/p>\nMAX\n<p>RegularExpression Id.<\/p>\nADD\n<p>RegularExpression Id.<\/p>\nDEL\n<p>RegularExpression Id.<\/p>\nDEF\n<p>RegularExpression Id.<\/p>\nCOMP\n<p>RegularExpression Id.<\/p>\nLISTCOMP\n<p>RegularExpression Id.<\/p>\nUNARYLISTCOMP\n<p>RegularExpression Id.<\/p>\nNUM\n<p>RegularExpression Id.<\/p>\nVAR\n<p>RegularExpression Id.<\/p>\nLIT\n<p>RegularExpression Id.<\/p>\nDEFAULT\n<p>Lexical state.<\/p>\ntokenImage\n<p>Literal token values.<\/p>\n"
                      }]
                    },
                    "parseexception": {
                      "ownKey": "parseexception",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/parser/parseexception",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/parseexception"
                        },
                        "description": "",
                        "title": "ParseException",
                        "content": "<p>This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.<\/p>currentToken\n<p>This is the last token that has been consumed successfully. If this object has been created due to a parse error, the token followng this token will (therefore) be the first error token.<\/p>\nexpectedTokenSequences\n<p>Each entry in this array is an array of integers. Each array of integers represents a sequence of tokens (by their ordinal values) that is expected at this point of the parse.<\/p>\ntokenImage\n<p>This is a reference to the \"tokenImage\" array of the generated parser within which the parse error occurred. This array is defined in the generated ...Constants interface.<\/p>\neol\n<p>The end of line string for this machine.<\/p>\n<init>\n<p>This constructor is used by the method \"generateParseException\" in the generated parser. Calling this constructor generates a new object of this type with the fields \"currentToken\", \"expectedTokenSequences\", and \"tokenImage\" set.<\/p>\n<init>\n<p>The following constructors are for use by you for whatever purpose you can think of. Constructing the exception in this manner makes the exception behave in the normal way - i.e., as documented in the class \"Throwable\". The fields \"errorToken\", \"expectedTokenSequences\", and \"tokenImage\" do not contain relevant information. The JavaCC generated code does not use these constructors.<\/p>\n<init>\n<p>Constructor with message.<\/p>\n"
                      }]
                    },
                    "tokenmgrerror": {
                      "ownKey": "tokenmgrerror",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/parser/tokenmgrerror",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/tokenmgrerror"
                        },
                        "description": "",
                        "title": "TokenMgrError",
                        "content": "<p>Token Manager Error.<\/p>message\n<p>You can also modify the body of this method to customize your error messages. For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like : \"Internal Error : Please file a bug report .... \" from this method for such cases in the release version of your parser.<\/p>\n<init>\n<p>No arg constructor.<\/p>\n<init>\n<p>Constructor with message and reason.<\/p>\n<init>\n<p>Full Constructor.<\/p>\naddEscapes\n<p>Replaces unprintable characters by their escaped (or unicode escaped) equivalents in the given string<\/p>\nLexicalError\n<p>Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error. Parameters : EOFSeen : indicates if EOF caused the lexical error curLexState : lexical state in which this error occurred errorLine : line number when the error occurred errorColumn : column number when the error occurred errorAfter : prefix that was seen before this error occurred curchar : the offending character Note: You can customize the lexical error message by modifying this method.<\/p>\n"
                      }]
                    },
                    "exp": {
                      "ownKey": "exp",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/parser/exp",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/exp"
                        },
                        "description": "",
                        "title": "Exp",
                        "content": "<p>jj_nt<\/p>\n<p>Next token.<\/p>\ntoken\n<p>Current token.<\/p>\ntoken_source\n<p>Generated Token Manager.<\/p>\n<init>\n<p>Constructor with generated Token Manager.<\/p>\n<init>\n<p>Constructor with InputStream.<\/p>\n<init>\n<p>Constructor with InputStream and supplied encoding<\/p>\n<init>\n<p>Constructor.<\/p>\ngenerateParseException\n<p>Generate ParseException.<\/p>\nListExpr\n\nMaxExpr\n\nTimesExpr\n\ngetToken\n<p>Get the specific Token.<\/p>\nNumber\n\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nExpr\n\nunaryListComparator\n\nCost\n\nE\n\nModExpr\n\ndisable_tracing\n<p>Disable tracing.<\/p>\nComparator\n\nlistComparator\n\ngetNextToken\n<p>Get the next Token.<\/p>\nAtomicExpr\n\nInit\n\nenable_tracing\n<p>Enable tracing.<\/p>\nVar\n\nMinExpr\n\n"
                      }]
                    },
                    "simplecharstream": {
                      "ownKey": "simplecharstream",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/parser/simplecharstream",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/simplecharstream"
                        },
                        "description": "",
                        "title": "SimpleCharStream",
                        "content": "<p>An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).<\/p>bufpos\n<p>Position in buffer.<\/p>\nbufline\n<p>bufcolumn<\/p>\n<p>column<\/p>\n<p>line<\/p>\n<p>prevCharIsCR<\/p>\n<p>prevCharIsLF<\/p>\n<p>inputStream<\/p>\n<p>buffer<\/p>\n<p>maxNextCharInd<\/p>\n<p>inBuf<\/p>\n<p>tabSize<\/p>\n<p>staticFlag<\/p>\n<p>Whether parser is static.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\ngetBeginLine\n<p>Get token beginning line number.<\/p>\ngetEndLine\n<p>Get token end line number.<\/p>\nreadChar\n<p>Read a character.<\/p>\nDone\n<p>Reset buffer when finished.<\/p>\nExpandBuff\n\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\ngetEndColumn\n<p>Get token end column number.<\/p>\nUpdateLineColumn\n\nbackup\n<p>Backup a number of characters.<\/p>\nBeginToken\n<p>Start.<\/p>\ngetLine\n\ngetBeginColumn\n<p>Get token beginning column number.<\/p>\nGetImage\n<p>Get token literal value.<\/p>\nsetTabSize\n\nGetSuffix\n<p>Get the suffix.<\/p>\nFillBuff\n\ngetColumn\n\nadjustBeginLineColumn\n<p>Method to adjust line and column numbers for the start of a token.<\/p>\ngetTabSize\n\n"
                      }]
                    },
                    "exptokenmanager": {
                      "ownKey": "exptokenmanager",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/parser/exptokenmanager",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/exptokenmanager"
                        },
                        "description": "",
                        "title": "ExpTokenManager",
                        "content": "<p>Token Manager. This class was automatically generated by JavaCC, only few manual fixes added.<\/p>debugStream\n<p>Debug output.<\/p>\ninput_stream\n<p>curChar<\/p>\n<p>jjstrLiteralImages<\/p>\n<p>Token literal values.<\/p>\nlexStateNames\n<p>Lexer state names.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\ngetNextToken\n<p>Get the next Token.<\/p>\njjFillToken\n\nsetDebugStream\n<p>Set debug output.<\/p>\nReInit\n<p>Reinitialise parser.<\/p>\nReInit\n<p>Reinitialise parser.<\/p>\nSwitchTo\n<p>Switch to specified lex state.<\/p>\n"
                      }]
                    },
                    "token": {
                      "ownKey": "token",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/parser/token",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/token"
                        },
                        "description": "",
                        "title": "Token",
                        "content": "<p>Describes the input token stream.<\/p>kind\n<p>An integer that describes the kind of this token. This numbering system is determined by JavaCCParser, and a table of these numbers is stored in the file ...Constants.java.<\/p>\nbeginLine\n<p>The line number of the first character of this Token.<\/p>\nbeginColumn\n<p>The column number of the first character of this Token.<\/p>\nendLine\n<p>The line number of the last character of this Token.<\/p>\nendColumn\n<p>The column number of the last character of this Token.<\/p>\nimage\n<p>The string image of the token.<\/p>\nnext\n<p>A reference to the next regular (non-special) token from the input stream. If this is the last token from the input stream, or if the token manager has not read tokens beyond this one, this field is set to null. This is true only if this token is also a regular token. Otherwise, see below for a description of the contents of this field.<\/p>\nspecialToken\n<p>This field is used to access special tokens that occur prior to this token, but after the immediately preceding regular (non-special) token. If there are no such special tokens, this field is set to null. When there are more than one such special token, this field refers to the last of these special tokens, which in turn refers to the next previous special token through its specialToken field, and so on until the first special token (whose specialToken field is null). The next fields of special tokens refer to other special tokens that immediately follow it (without an intervening regular token). If there is no such token, this field is null.<\/p>\n<init>\n<p>No-argument constructor<\/p>\n<init>\n<p>Constructs a new token for the specified Image.<\/p>\n<init>\n<p>Constructs a new token for the specified Image and Kind.<\/p>\ntoString\n<p>Returns the image.<\/p>\ngetValue\n<p>An optional attribute value of the Token. Tokens which are not used as syntactic sugar will often contain meaningful values that will be used later on by the compiler or interpreter. This attribute value is often different from the image. Any subclass of Token that actually wants to return a non-null value can override this method as appropriate.<\/p>\nnewToken\n<p>Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on the value of ofKind. Simply add the cases to the switch for all those special cases. For example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simply add something like : case MyParserConstants.ID : return new IDToken(ofKind, image); to the following switch statement. Then you can cast matchedToken variable to the appropriate type and use sit in your lexical actions.<\/p>\nnewToken\n\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/expressions/parser",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.expressions.parser",
                    "content": "<p>SimpleCharStream<\/p>\n<p>An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).<\/p>\nParseException\n<p>This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.<\/p>\nExp\n<p>Token<\/p>\n<p>Describes the input token stream.<\/p>\nTokenMgrError\n<p>Token Manager Error.<\/p>\nExpConstants\n<p>Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()<\/p>\nExpTokenManager\n<p>Token Manager. This class was automatically generated by JavaCC, only few manual fixes added.<\/p>\n"
                  }]
                },
                "implementations": {
                  "ownKey": "implementations",
                  "childrenPages": {
                    "operatortreenode": {
                      "ownKey": "operatortreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/operatortreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/operatortreenode"
                        },
                        "description": "",
                        "title": "OperatorTreeNode",
                        "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n<p>getOperator<\/p>\n"
                      }]
                    },
                    "consttreenode": {
                      "ownKey": "consttreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/consttreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/consttreenode"
                        },
                        "description": "",
                        "title": "ConstTreeNode",
                        "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                      }]
                    },
                    "ast": {
                      "ownKey": "ast",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/ast",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/ast"
                        },
                        "description": "",
                        "title": "AST",
                        "content": "<p><init><\/p>\n<p>Builds a new AST given its root node.<\/p>\nevaluation\n<p>This evaluates the expression. If the matches map contains values which are not instanced, and the expression value cannot consequently be computed, 0d is returned.<\/p>\ngetRoot\n<p>toHashString<\/p>\n<p>toString<\/p>\n<p>assignVarValue<\/p>\n"
                      }]
                    },
                    "expression": {
                      "ownKey": "expression",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/expression",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/expression"
                        },
                        "description": "",
                        "title": "Expression",
                        "content": "<p><init><\/p>\n<p>This constructor does not do any parsing, and thus is much faster than the other one.<\/p>\n<init>\n\n<init>\n<p>This constructor parses the String into an Expression. Due to the parsing operation, it is slow compared to the other one, and should be used only in the first initialization phase.<\/p>\ngetRootNodeType\n\nsyntacticMatch\n\ntoString\n\ngetAST\n\ngetRootNode\n\ngetRightChildren\n\ngetLeftChildren\n\nupdateMatchedVar\n\ncalculate\n\nmayMatch\n\ngetRootNodeData\n\nmatches\n\n"
                      }]
                    },
                    "vartreenode": {
                      "ownKey": "vartreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/vartreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/vartreenode"
                        },
                        "description": "",
                        "title": "VarTreeNode",
                        "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                      }]
                    },
                    "numtreenode": {
                      "ownKey": "numtreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/numtreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/numtreenode"
                        },
                        "description": "",
                        "title": "NumTreeNode",
                        "content": "<p><init><\/p>\n<p><init><\/p>\n<p>This constructor is provided for better compatibility.<\/p>\ntoString\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                      }]
                    },
                    "expressionfactory": {
                      "ownKey": "expressionfactory",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/expressionfactory",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/expressionfactory"
                        },
                        "description": "",
                        "title": "ExpressionFactory",
                        "content": "<p>This utility class provides methods to ease the building and usage of <code> IExpression <\/code> without parsing.<\/p>buildComplexGroundExpression\n<p>Given a single literal (either variable or constant), builds the corresponding expression.<\/p>\nbuildExpression\n<p>Given a number, builds a numeric expression.<\/p>\nbuildExpression\n<p>Given a single literal (either variable or constant), builds the corresponding expression.<\/p>\nbuildExpression\n<p>Given a single literal (either variable or constant), builds the corresponding expression.<\/p>\nbuildLiteralNode\n<p>Given a single literal (either variable or constant), builds the corresponding <code> ITreeNode <\/code>.<\/p>\nwrap\n<p>Given a double, creates a NumTreeNode and wraps it into a <code> ListTreeNode <\/code>.<\/p>\nwrap\n<p>Given a HashString, creates the corresponding <code> ITreeNode <\/code> and wraps it into a <code> ListTreeNode <\/code>.<\/p>\nwrap\n<p>Wraps a collection of <code> ITreeNode <\/code> into a new List IExpression.<\/p>\nwrap\n<p>Given a node, wraps it into a <code> ListTreeNode <\/code>.<\/p>\n"
                      }]
                    },
                    "uidnode": {
                      "ownKey": "uidnode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/uidnode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/uidnode"
                        },
                        "description": "",
                        "title": "UIDNode",
                        "content": "<p><init><\/p>\n<p>Builds a new UUID node.<\/p>\ntoHashString\n<p>toString<\/p>\n<p>getValue<\/p>\n"
                      }]
                    },
                    "type": {
                      "ownKey": "type",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/type",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/type"
                        },
                        "description": "",
                        "title": "Type",
                        "content": "<p>CONST<\/p>\n<p>VAR<\/p>\n<p>NUM<\/p>\n<p>OPERATOR<\/p>\n<p>COMPARATOR<\/p>\n<p>LIST<\/p>\n<p>LISTCOMPARATOR<\/p>\n"
                      }]
                    },
                    "comparatortreenode": {
                      "ownKey": "comparatortreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/comparatortreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/comparatortreenode"
                        },
                        "description": "",
                        "title": "ComparatorTreeNode",
                        "content": "<p><init><\/p>\n<p>Builds a ComparatorTreeNode.<\/p>\ntoString\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                      }]
                    },
                    "operator": {
                      "ownKey": "operator",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/operator",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/operator"
                        },
                        "description": "",
                        "title": "Operator",
                        "content": "<p>ADD<\/p>\n<p>DEL<\/p>\n<p>DIV<\/p>\n<p>MAX<\/p>\n<p>MIN<\/p>\n<p>MINUS<\/p>\n<p>MOD<\/p>\n<p>PLUS<\/p>\n<p>TIMES<\/p>\n<p>toString<\/p>\n"
                      }]
                    },
                    "listcomparator": {
                      "ownKey": "listcomparator",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/listcomparator",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/listcomparator"
                        },
                        "description": "",
                        "title": "ListComparator",
                        "content": "<p>EMPTY<\/p>\n<p>HAS<\/p>\n<p>HAS_NOT<\/p>\n<p>NOT_EMPTY<\/p>\n"
                      }]
                    },
                    "listtreenode": {
                      "ownKey": "listtreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/listtreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/listtreenode"
                        },
                        "description": "",
                        "title": "ListTreeNode",
                        "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>iterator<\/p>\n<p>getValue<\/p>\n"
                      }]
                    },
                    "atreenode": {
                      "ownKey": "atreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/atreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/atreenode"
                        },
                        "description": "",
                        "title": "ATreeNode",
                        "content": "<p><init><\/p>\n<p>Builds the internals of a tree node.<\/p>\nhashCode\n<p>toHashString<\/p>\n<p>equals<\/p>\n<p>toString<\/p>\n<p>getLeftChild<\/p>\n<p>getRightChild<\/p>\n<p>getValue<\/p>\n<p>getData<\/p>\n<p>getNumberOfChildren<\/p>\n"
                      }]
                    },
                    "listcomparatortreenode": {
                      "ownKey": "listcomparatortreenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/expressions/implementations/listcomparatortreenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/listcomparatortreenode"
                        },
                        "description": "",
                        "title": "ListComparatorTreeNode",
                        "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/expressions/implementations",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.expressions.implementations",
                    "content": "<p>Operator<\/p>\n<p>ConstTreeNode<\/p>\n<p>AST<\/p>\n<p>ATreeNode<\/p>\n<p>NumTreeNode<\/p>\n<p>ComparatorTreeNode<\/p>\n<p>ExpressionFactory<\/p>\n<p>This utility class provides methods to ease the building and usage of <code> IExpression <\/code> without parsing.<\/p>\nType\n<p>ListComparator<\/p>\n<p>VarTreeNode<\/p>\n<p>ListComparatorTreeNode<\/p>\n<p>UIDNode<\/p>\n<p>Expression<\/p>\n<p>OperatorTreeNode<\/p>\n<p>ListTreeNode<\/p>\n"
                  }]
                }
              }
            },
            "supportedincarnations": {
              "ownKey": "supportedincarnations",
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/supportedincarnations",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/supportedincarnations"
                },
                "description": "",
                "title": "SupportedIncarnations",
                "content": "<p>This enum interfaces the generic components of the graphical interface with the specific incarnation details.<\/p>getAvailableIncarnations\n<p>get<\/p>\n<p>Fetches an incarnation whose name matches the supplied string.<\/p>\n"
              }]
            },
            "exceptions": {
              "ownKey": "exceptions",
              "childrenPages": {
                "uncomparabledistancesexception": {
                  "ownKey": "uncomparabledistancesexception",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/exceptions/uncomparabledistancesexception",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/exceptions/uncomparabledistancesexception"
                    },
                    "description": "",
                    "title": "UncomparableDistancesException",
                    "content": "<p>An exception meant to be thrown when trying to compare incompatible distances.<\/p>message\n<p><init><\/p>\n<p>Builds the exception given two positions claimed to be not compatible.<\/p>\n<init>\n<p>Builds the exception given two positions claimed to be not compatible.<\/p>\n"
                  }]
                },
                "biochemistryparseexception": {
                  "ownKey": "biochemistryparseexception",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/exceptions/biochemistryparseexception",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/exceptions/biochemistryparseexception"
                    },
                    "description": "",
                    "title": "BiochemistryParseException",
                    "content": "<p>Represents an exception thrown when parse errors are encountered.<\/p><init>\n<p>Construct the exception with the given message.<\/p>\n"
                  }]
                }
              },
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/exceptions",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/exceptions"
                },
                "description": "",
                "title": "it.unibo.alchemist.exceptions",
                "content": "<p>BiochemistryParseException<\/p>\n<p>Represents an exception thrown when parse errors are encountered.<\/p>\nUncomparableDistancesException\n<p>An exception meant to be thrown when trying to compare incompatible distances.<\/p>\n"
              }]
            },
            "classpathscanner": {
              "ownKey": "classpathscanner",
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/classpathscanner",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/classpathscanner"
                },
                "description": "",
                "title": "ClassPathScanner",
                "content": "<p>An utility class providing support for loading arbitrary subclasses available in the classpath.<\/p>subTypesOf\n<p>This function loads all subtypes of the provided Java class that can be discovered on the current classpath.<\/p><p>This function cannot use <code>reified<\/code> and <code>inline<\/code> (as it should have) due to Java being unaware of the required\ntransformation to use them.<\/p>\nsubTypesOf\n<p>resourcesMatching<\/p>\n<p>This function returns a list of all the resources in a certain (optional) package matching a regular expression.<\/p><p>This function cannot use <code>reified<\/code> and <code>inline<\/code> (as it should have) due to Java being unaware of the required\ntransformation to use them.<\/p>\nresourcesMatchingAsStream\n"
              }]
            },
            "core": {
              "ownKey": "core",
              "childrenPages": {
                "interfaces": {
                  "ownKey": "interfaces",
                  "childrenPages": {
                    "scheduler": {
                      "ownKey": "scheduler",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/core/interfaces/scheduler",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/scheduler"
                        },
                        "description": "",
                        "title": "Scheduler",
                        "content": "<p>The type which describes the concentration of a molecule This interface is meant to be implemented by the data structure(s) which must manage the reactions.<\/p>updateReaction\n<p>Notifies the structure that the reaction r has changed. The whole structure will be rearranged to ensure consistency.<\/p>\ngetNext\n<p>Allows to access the next reaction to be executed.<\/p>\naddReaction\n<p>Adds a reaction to the data structure.<\/p>\nremoveReaction\n<p>Removes a reaction from the structure. If the reaction is not present, nothing is done and an Exception is thrown.<\/p>\n"
                      }]
                    },
                    "simulation": {
                      "ownKey": "simulation",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/core/interfaces/simulation",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/simulation"
                        },
                        "description": "",
                        "title": "Simulation",
                        "content": "<p>This interface forces simulations to be independent threads, and make them controllable from an external console.<\/p>getError\n<p>nodeAdded<\/p>\n<p>This method must get called in case a node is added to the environment during the simulation and after its neighborhood has been computed (or can be consistently computed by the simulated environment). This method provides dependency computation and is responsible of correctly scheduling the Node's new reactions.<\/p>\nterminate\n<p>Sends a terminate command to the simulation. There is no guarantee on when this command will be actually processed.<\/p>\naddOutputMonitor\n<p>Adds an <code> OutputMonitor <\/code> to this simulation.<\/p>\nplay\n<p>Sends a play command to the simulation. There is no guarantee on when this command will be actually processed.<\/p>\ngetStep\n<p>Allows to access the current simulation step.<\/p>\ngoToStep\n<p>Executes a certain number of steps, then pauses it.<\/p>\ngetFinalTime\n<p>Allows to at which time this simulation will end.<\/p>\ngetStatus\n<p>Allows to access the current status.<\/p>\ngoToTime\n<p>Executes the simulation until the target time is reached, then pauses it.<\/p>\nschedule\n<p>Schedules a runnable to be executed by the Simulation thread, useful for synchronization purposes (e.g. make sure that the environment is not being changed while the requested operation is being executed). An exception thrown by the passed runnable will make the simulation terminate.<\/p>\npause\n<p>Sends a pause command to the simulation. There is no guarantee on when this command will be actually processed.<\/p>\ngetTime\n<p>Allows to know which is the current simulation time.<\/p>\nnodeMoved\n<p>This method must get called in case a node is moved in the environment during the simulation and after its neighborhood has been computed (or can be consistently computed by the simulated environment). This method provides dependency computation and is responsible of correctly scheduling the Node's reactions.<\/p>\ngetFinalStep\n<p>neighborRemoved<\/p>\n<p>This method must get called in case a a communication link connecting two nodes gets broken during the simulation. This method provides dependency and scheduling times re-computation for all the reactions interested by such change.<\/p>\ngetEnvironment\n<p>Allows to access the current environment.<\/p>\nnodeRemoved\n<p>This method must get called in case a node is removed from the environment during the simulation and after its neighborhood has been computed (or can be consistently computed by the simulated environment). This method provides dependency computation and is responsible of correctly removing the Node's reactions from the scheduler.<\/p>\nwaitFor\n<p>Suspends the caller until the simulation reaches the selected <code> Status <\/code> or the timeout ends. Please note that waiting for a status does not mean that every <code> OutputMonitor <\/code> will already be notified of the update.<\/p>\nneighborAdded\n<p>This method must get called in case a a communication link connecting two nodes gets created during the simulation. This method provides dependency and scheduling times re-computation for all the reactions interested by such change.<\/p>\nremoveOutputMonitor\n<p>Removes an <code> OutputMonitor <\/code> to this simulation. If the <code> OutputMonitor <\/code> was not among those already added, this method does nothing.<\/p>\n"
                      }]
                    },
                    "dependencygraph": {
                      "ownKey": "dependencygraph",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/core/interfaces/dependencygraph",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/dependencygraph"
                        },
                        "description": "",
                        "title": "DependencyGraph",
                        "content": "<p>This interface allows to separate the usage of a dependency graph from its implementation.<\/p>globalInputContextReactions\n<p>addNeighbor<\/p>\n<p>Given two nodes, the graph assumes they are now neighbors and calculates the neighborhood dependencies between them.<\/p>\ncreateDependencies\n<p>This method creates the dependencies when a new reaction is added to the environment. Please be careful when building the environment and populating the existing reactions map: this method assumes that all the dependencies among the existing reactions are correct and up to date.<\/p>\nremoveDependencies\n<p>This method removes all the dependencies (both in and out dependencies) for a given reaction handler. This method is meant to be used in order to keep the dependencies clean when removing a reaction.<\/p>\noutboundDependencies\n<p>Returns the set of reactions that may be influenced by the provided reaction.<\/p>\nremoveNeighbor\n<p>Given two nodes, the engine assumes they are no longer neighbors and deletes the neighborhood dependencies between them.<\/p>\n"
                      }]
                    },
                    "status": {
                      "ownKey": "status",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/core/interfaces/status",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/status"
                        },
                        "description": "",
                        "title": "Status",
                        "content": "<p>This enum represents the possible states in which a Simulation could be.<\/p>INIT\n<p>READY<\/p>\n<p>PAUSED<\/p>\n<p>RUNNING<\/p>\n<p>TERMINATED<\/p>\n<p>isReachableFrom<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/core/interfaces",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.core.interfaces",
                    "content": "<p>DependencyGraph<\/p>\n<p>This interface allows to separate the usage of a dependency graph from its implementation.<\/p>\nStatus\n<p>This enum represents the possible states in which a Simulation could be.<\/p>\nSimulation\n<p>This interface forces simulations to be independent threads, and make them controllable from an external console.<\/p>\nScheduler\n<p>The type which describes the concentration of a molecule This interface is meant to be implemented by the data structure(s) which must manage the reactions.<\/p>\n"
                  }]
                },
                "implementations": {
                  "ownKey": "implementations",
                  "childrenPages": {
                    "edge": {
                      "ownKey": "edge",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/core/implementations/edge",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations/edge"
                        },
                        "description": "",
                        "title": "Edge",
                        "content": ""
                      }]
                    },
                    "jgraphtdependencygraph": {
                      "ownKey": "jgraphtdependencygraph",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/core/implementations/jgraphtdependencygraph",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations/jgraphtdependencygraph"
                        },
                        "description": "",
                        "title": "JGraphTDependencyGraph",
                        "content": "<p>This class offers an implementation of a dependency graph, namely a\ndata structure which can address in an efficient way the problem of\nfinding those reactions affected by the execution of another\nreaction. This class relies heavily on the ReactionHandler\ninterface.<\/p><init>\n<p>This class offers an implementation of a dependency graph, namely a\ndata structure which can address in an efficient way the problem of\nfinding those reactions affected by the execution of another\nreaction. This class relies heavily on the ReactionHandler\ninterface.<\/p>\ncreateDependencies\n\nremoveDependencies\n\naddNeighbor\n\nremoveNeighbor\n\noutboundDependencies\n\ntoString\n\nglobalInputContextReactions\n\n"
                      }]
                    },
                    "engine": {
                      "ownKey": "engine",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/core/implementations/engine",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations/engine"
                        },
                        "description": "",
                        "title": "Engine",
                        "content": "<p>This class implements a simulation. It offers a wide number of static factories to ease the creation process.<\/p><init>\n<p>Builds a simulation for a given environment. By default it uses a DependencyGraph and an IndexedPriorityQueue internally. If you want to use your own implementations of <code> DependencyGraph <\/code> and <code> Scheduler <\/code> interfaces, don't use this constructor.<\/p>\n<init>\n<p>Builds a simulation for a given environment. By default it uses a DependencyGraph and an IndexedPriorityQueue internally. If you want to use your own implementations of <code> DependencyGraph <\/code> and <code> Scheduler <\/code> interfaces, don't use this constructor.<\/p>\n<init>\n<p>Builds a simulation for a given environment. By default it uses a DependencyGraph and an IndexedPriorityQueue internally. If you want to use your own implementations of <code> DependencyGraph <\/code> and <code> Scheduler <\/code> interfaces, don't use this constructor.<\/p>\ngetError\n\nnodeAdded\n\nterminate\n\naddOutputMonitor\n\nplay\n\ngetStep\n\ngoToStep\n\ngetFinalTime\n\nrun\n\ngetReactionManager\n\ngetStatus\n\ngoToTime\n\nschedule\n\npause\n\ntoString\n\ngetTime\n\nnodeMoved\n\ngetFinalStep\n\nneighborRemoved\n\ngetEnvironment\n\nnodeRemoved\n\nwaitFor\n\nneighborAdded\n\nremoveOutputMonitor\n\ngetDependencyGraph\n\n"
                      }]
                    },
                    "arrayindexedpriorityqueue": {
                      "ownKey": "arrayindexedpriorityqueue",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/core/implementations/arrayindexedpriorityqueue",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations/arrayindexedpriorityqueue"
                        },
                        "description": "",
                        "title": "ArrayIndexedPriorityQueue",
                        "content": "<p>This class implements the indexed priority queue through an Array.<\/p><init>\n<p>This class implements the indexed priority queue through an Array.<\/p>\nupdateReaction\n\ntoString\n\ngetNext\n\naddReaction\n\nremoveReaction\n\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/core/implementations",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.core.implementations",
                    "content": "<p>Edge<\/p>\n<p>JGraphTDependencyGraph<\/p>\n<p>This class offers an implementation of a dependency graph, namely a\ndata structure which can address in an efficient way the problem of\nfinding those reactions affected by the execution of another\nreaction. This class relies heavily on the ReactionHandler\ninterface.<\/p>\nArrayIndexedPriorityQueue\n<p>This class implements the indexed priority queue through an Array.<\/p>\nEngine\n<p>This class implements a simulation. It offers a wide number of static factories to ease the creation process.<\/p>\nEdge\n"
                  }]
                }
              }
            },
            "biochemistrydsl": {
              "ownKey": "biochemistrydsl",
              "childrenPages": {
                "biochemistrydslparser": {
                  "ownKey": "biochemistrydslparser",
                  "childrenPages": {
                    "junctioncontext": {
                      "ownKey": "junctioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctioncontext"
                        },
                        "description": "",
                        "title": "JunctionContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>junctionRight<\/p>\n<p>junctionLeft<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "customconditioncontext": {
                      "ownKey": "customconditioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customconditioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customconditioncontext"
                        },
                        "description": "",
                        "title": "CustomConditionContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>javaConstructor<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "decimalcontext": {
                      "ownKey": "decimalcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/decimalcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/decimalcontext"
                        },
                        "description": "",
                        "title": "DecimalContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>POSDOUBLE<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "junctionreactionjunctionconditioncontext": {
                      "ownKey": "junctionreactionjunctionconditioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionjunctionconditioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionjunctionconditioncontext"
                        },
                        "description": "",
                        "title": "JunctionReactionJunctionConditionContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>junction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "argcontext": {
                      "ownKey": "argcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/argcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/argcontext"
                        },
                        "description": "",
                        "title": "ArgContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>LITERAL<\/p>\n<p>decimal<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionleftincellcontextcontext": {
                      "ownKey": "biochemicalreactionleftincellcontextcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftincellcontextcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftincellcontextcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionLeftInCellContextContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "createjunctioncontext": {
                      "ownKey": "createjunctioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctioncontext"
                        },
                        "description": "",
                        "title": "CreateJunctionContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>createJunctionLeft<\/p>\n<p>createJunctionRight<\/p>\n<p>customReactionType<\/p>\n<p>customConditions<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biomoleculecontext": {
                      "ownKey": "biomoleculecontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biomoleculecontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biomoleculecontext"
                        },
                        "description": "",
                        "title": "BiomoleculeContext",
                        "content": "<p>name<\/p>\n<p><init><\/p>\n<p>exitRule<\/p>\n<p>concentration<\/p>\n<p>accept<\/p>\n<p>LITERAL<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "customreactiontypecontext": {
                      "ownKey": "customreactiontypecontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customreactiontypecontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customreactiontypecontext"
                        },
                        "description": "",
                        "title": "CustomReactionTypeContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>javaConstructor<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "createjunctionjunctioncontext": {
                      "ownKey": "createjunctionjunctioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionjunctioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionjunctioncontext"
                        },
                        "description": "",
                        "title": "CreateJunctionJunctionContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>junction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "arglistcontext": {
                      "ownKey": "arglistcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/arglistcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/arglistcontext"
                        },
                        "description": "",
                        "title": "ArgListContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>arg<\/p>\n<p>arg<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "junctionreactionleftcontext": {
                      "ownKey": "junctionreactionleftcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionleftcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionleftcontext"
                        },
                        "description": "",
                        "title": "JunctionReactionLeftContext",
                        "content": "<p><init><\/p>\n<p>junctionReactionJunctionCondition<\/p>\n<p>junctionReactionJunctionCondition<\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionrightinenvcontextcontext": {
                      "ownKey": "biochemicalreactionrightinenvcontextcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightinenvcontextcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightinenvcontextcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionRightInEnvContextContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactioncontext": {
                      "ownKey": "biochemicalreactioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactioncontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biochemicalReactionLeft<\/p>\n<p>accept<\/p>\n<p>customReactionType<\/p>\n<p>biochemicalReactionRight<\/p>\n<p>customConditions<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "junctionleftcontext": {
                      "ownKey": "junctionleftcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionleftcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionleftcontext"
                        },
                        "description": "",
                        "title": "JunctionLeftContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionrightincellcontextcontext": {
                      "ownKey": "biochemicalreactionrightincellcontextcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightincellcontextcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightincellcontextcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionRightInCellContextContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "concentrationcontext": {
                      "ownKey": "concentrationcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/concentrationcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/concentrationcontext"
                        },
                        "description": "",
                        "title": "ConcentrationContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>POSDOUBLE<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "reactioncontext": {
                      "ownKey": "reactioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/reactioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/reactioncontext"
                        },
                        "description": "",
                        "title": "ReactionContext",
                        "content": "<p><init><\/p>\n<p>junctionReaction<\/p>\n<p>exitRule<\/p>\n<p>EOF<\/p>\n<p>accept<\/p>\n<p>createJunction<\/p>\n<p>biochemicalReaction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "createjunctionrightcontext": {
                      "ownKey": "createjunctionrightcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionrightcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionrightcontext"
                        },
                        "description": "",
                        "title": "CreateJunctionRightContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>createJunctionJunction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "junctionreactioncontext": {
                      "ownKey": "junctionreactioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactioncontext"
                        },
                        "description": "",
                        "title": "JunctionReactionContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>junctionReactionLeft<\/p>\n<p>customReactionType<\/p>\n<p>junctionReactionRight<\/p>\n<p>customConditions<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "createjunctionleftcontext": {
                      "ownKey": "createjunctionleftcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionleftcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionleftcontext"
                        },
                        "description": "",
                        "title": "CreateJunctionLeftContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionLeftInCellContext<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>biochemicalReactionLeftInNeighborContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionrightelemcontext": {
                      "ownKey": "biochemicalreactionrightelemcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightelemcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightelemcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionRightElemContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>javaConstructor<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "javaclasscontext": {
                      "ownKey": "javaclasscontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/javaclasscontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/javaclasscontext"
                        },
                        "description": "",
                        "title": "JavaClassContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>LITERAL<\/p>\n<p>LITERAL<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "javaconstructorcontext": {
                      "ownKey": "javaconstructorcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/javaconstructorcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/javaconstructorcontext"
                        },
                        "description": "",
                        "title": "JavaConstructorContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>argList<\/p>\n<p>javaClass<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionrightcontextcontext": {
                      "ownKey": "biochemicalreactionrightcontextcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightcontextcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightcontextcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionRightContextContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biochemicalReactionRightInNeighborContext<\/p>\n<p>biochemicalReactionRightInEnvContext<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightInCellContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionleftinenvcontextcontext": {
                      "ownKey": "biochemicalreactionleftinenvcontextcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftinenvcontextcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftinenvcontextcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionLeftInEnvContextContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionrightcontext": {
                      "ownKey": "biochemicalreactionrightcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionRightContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "junctionreactionrightcontext": {
                      "ownKey": "junctionreactionrightcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionrightcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionrightcontext"
                        },
                        "description": "",
                        "title": "JunctionReactionRightContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>enterRule<\/p>\n<p>junctionReactionJunction<\/p>\n<p>junctionReactionJunction<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "junctionreactionjunctioncontext": {
                      "ownKey": "junctionreactionjunctioncontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionjunctioncontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionjunctioncontext"
                        },
                        "description": "",
                        "title": "JunctionReactionJunctionContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>junction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionrightinneighborcontextcontext": {
                      "ownKey": "biochemicalreactionrightinneighborcontextcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightinneighborcontextcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightinneighborcontextcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionRightInNeighborContextContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionleftcontextcontext": {
                      "ownKey": "biochemicalreactionleftcontextcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftcontextcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftcontextcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionLeftContextContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biochemicalReactionLeftInEnvContext<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionLeftInCellContext<\/p>\n<p>biochemicalReactionLeftInNeighborContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "junctionrightcontext": {
                      "ownKey": "junctionrightcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionrightcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionrightcontext"
                        },
                        "description": "",
                        "title": "JunctionRightContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionleftinneighborcontextcontext": {
                      "ownKey": "biochemicalreactionleftinneighborcontextcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftinneighborcontextcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftinneighborcontextcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionLeftInNeighborContextContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "biochemicalreactionleftcontext": {
                      "ownKey": "biochemicalreactionleftcontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftcontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftcontext"
                        },
                        "description": "",
                        "title": "BiochemicalReactionLeftContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    },
                    "customconditionscontext": {
                      "ownKey": "customconditionscontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customconditionscontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customconditionscontext"
                        },
                        "description": "",
                        "title": "CustomConditionsContext",
                        "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>customCondition<\/p>\n<p>customCondition<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser"
                    },
                    "description": "",
                    "title": "BiochemistrydslParser",
                    "content": "<p>_decisionToDFA<\/p>\n<p>_sharedContextCache<\/p>\n<p>T__0<\/p>\n<p>T__1<\/p>\n<p>T__2<\/p>\n<p>T__3<\/p>\n<p>T__4<\/p>\n<p>T__5<\/p>\n<p>T__6<\/p>\n<p>T__7<\/p>\n<p>T__8<\/p>\n<p>T__9<\/p>\n<p>T__10<\/p>\n<p>T__11<\/p>\n<p>T__12<\/p>\n<p>T__13<\/p>\n<p>T__14<\/p>\n<p>T__15<\/p>\n<p>T__16<\/p>\n<p>T__17<\/p>\n<p>POSDOUBLE<\/p>\n<p>LITERAL<\/p>\n<p>WS<\/p>\n<p>ErrorCharacter<\/p>\n<p>RULE_reaction<\/p>\n<p>RULE_biochemicalReaction<\/p>\n<p>RULE_createJunction<\/p>\n<p>RULE_junctionReaction<\/p>\n<p>RULE_javaConstructor<\/p>\n<p>RULE_javaClass<\/p>\n<p>RULE_argList<\/p>\n<p>RULE_arg<\/p>\n<p>RULE_createJunctionLeft<\/p>\n<p>RULE_createJunctionRight<\/p>\n<p>RULE_createJunctionJunction<\/p>\n<p>RULE_junctionReactionLeft<\/p>\n<p>RULE_junctionReactionRight<\/p>\n<p>RULE_junctionReactionJunctionCondition<\/p>\n<p>RULE_junctionReactionJunction<\/p>\n<p>RULE_biochemicalReactionLeft<\/p>\n<p>RULE_biochemicalReactionRight<\/p>\n<p>RULE_customConditions<\/p>\n<p>RULE_customReactionType<\/p>\n<p>RULE_biochemicalReactionLeftContext<\/p>\n<p>RULE_biochemicalReactionLeftInCellContext<\/p>\n<p>RULE_biochemicalReactionLeftInEnvContext<\/p>\n<p>RULE_biochemicalReactionLeftInNeighborContext<\/p>\n<p>RULE_biochemicalReactionRightContext<\/p>\n<p>RULE_biochemicalReactionRightInCellContext<\/p>\n<p>RULE_biochemicalReactionRightInEnvContext<\/p>\n<p>RULE_biochemicalReactionRightInNeighborContext<\/p>\n<p>RULE_biochemicalReactionRightElem<\/p>\n<p>RULE_customCondition<\/p>\n<p>RULE_junction<\/p>\n<p>RULE_junctionLeft<\/p>\n<p>RULE_junctionRight<\/p>\n<p>RULE_biomolecule<\/p>\n<p>RULE_concentration<\/p>\n<p>RULE_decimal<\/p>\n<p>ruleNames<\/p>\n<p>VOCABULARY<\/p>\n<p>tokenNames<\/p>\n<p>_serializedATN<\/p>\n<p>_ATN<\/p>\n<p><init><\/p>\n<p>junctionReaction<\/p>\n<p>junctionLeft<\/p>\n<p>customReactionType<\/p>\n<p>getTokenNames<\/p>\n<p>biochemicalReactionRightInCellContext<\/p>\n<p>createJunctionJunction<\/p>\n<p>biochemicalReactionLeftInEnvContext<\/p>\n<p>junctionRight<\/p>\n<p>argList<\/p>\n<p>javaClass<\/p>\n<p>junction<\/p>\n<p>biomolecule<\/p>\n<p>biochemicalReactionLeftInCellContext<\/p>\n<p>junctionReactionRight<\/p>\n<p>biochemicalReactionRight<\/p>\n<p>javaConstructor<\/p>\n<p>junctionReactionLeft<\/p>\n<p>biochemicalReactionLeftInNeighborContext<\/p>\n<p>biochemicalReactionRightInNeighborContext<\/p>\n<p>getATN<\/p>\n<p>arg<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>getSerializedATN<\/p>\n<p>createJunction<\/p>\n<p>biochemicalReactionRightInEnvContext<\/p>\n<p>concentration<\/p>\n<p>createJunctionLeft<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>getGrammarFileName<\/p>\n<p>biochemicalReaction<\/p>\n<p>customConditions<\/p>\n<p>junctionReactionJunctionCondition<\/p>\n<p>biochemicalReactionLeft<\/p>\n<p>reaction<\/p>\n<p>createJunctionRight<\/p>\n<p>getVocabulary<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>decimal<\/p>\n<p>customCondition<\/p>\n<p>getRuleNames<\/p>\n<p>junctionReactionJunction<\/p>\n"
                  }]
                },
                "biochemistrydslvisitor": {
                  "ownKey": "biochemistrydslvisitor",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslvisitor",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslvisitor"
                    },
                    "description": "",
                    "title": "BiochemistrydslVisitor",
                    "content": "<p>This interface defines a complete generic visitor for a parse tree produced by <code> BiochemistrydslParser <\/code>.<\/p>visitBiochemicalReactionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>.<\/p>\nvisitBiochemicalReactionRightContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>.<\/p>\nvisitJunctionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>.<\/p>\nvisitCreateJunctionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>.<\/p>\nvisitBiochemicalReactionLeftContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>.<\/p>\nvisitConcentration\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>.<\/p>\nvisitJavaConstructor\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>.<\/p>\nvisitCreateJunctionJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>.<\/p>\nvisitBiochemicalReactionRightInEnvContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>.<\/p>\nvisitCustomConditions\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>.<\/p>\nvisitArg\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#arg <\/code>.<\/p>\nvisitBiochemicalReactionLeftInEnvContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>.<\/p>\nvisitBiochemicalReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>.<\/p>\nvisitDecimal\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>.<\/p>\nvisitJunctionReactionJunctionCondition\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>.<\/p>\nvisitBiochemicalReactionLeftInNeighborContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>.<\/p>\nvisitJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junction <\/code>.<\/p>\nvisitJunctionReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>.<\/p>\nvisitBiochemicalReactionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>.<\/p>\nvisitArgList\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#argList <\/code>.<\/p>\nvisitBiochemicalReactionRightInCellContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>.<\/p>\nvisitCreateJunctionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>.<\/p>\nvisitBiochemicalReactionRightElem\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>.<\/p>\nvisitJunctionReactionJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>.<\/p>\nvisitJunctionReactionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>.<\/p>\nvisitBiochemicalReactionRightInNeighborContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>.<\/p>\nvisitCustomReactionType\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>.<\/p>\nvisitJavaClass\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>.<\/p>\nvisitCustomCondition\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>.<\/p>\nvisitReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>.<\/p>\nvisitCreateJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>.<\/p>\nvisitJunctionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>.<\/p>\nvisitBiochemicalReactionLeftInCellContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>.<\/p>\nvisitJunctionReactionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>.<\/p>\nvisitBiomolecule\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>.<\/p>\n"
                  }]
                },
                "biochemistrydsllexer": {
                  "ownKey": "biochemistrydsllexer",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydsllexer",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydsllexer"
                    },
                    "description": "",
                    "title": "BiochemistrydslLexer",
                    "content": "<p>_decisionToDFA<\/p>\n<p>_sharedContextCache<\/p>\n<p>T__0<\/p>\n<p>T__1<\/p>\n<p>T__2<\/p>\n<p>T__3<\/p>\n<p>T__4<\/p>\n<p>T__5<\/p>\n<p>T__6<\/p>\n<p>T__7<\/p>\n<p>T__8<\/p>\n<p>T__9<\/p>\n<p>T__10<\/p>\n<p>T__11<\/p>\n<p>T__12<\/p>\n<p>T__13<\/p>\n<p>T__14<\/p>\n<p>T__15<\/p>\n<p>T__16<\/p>\n<p>T__17<\/p>\n<p>POSDOUBLE<\/p>\n<p>LITERAL<\/p>\n<p>WS<\/p>\n<p>ErrorCharacter<\/p>\n<p>channelNames<\/p>\n<p>modeNames<\/p>\n<p>ruleNames<\/p>\n<p>VOCABULARY<\/p>\n<p>tokenNames<\/p>\n<p>_serializedATN<\/p>\n<p>_ATN<\/p>\n<p><init><\/p>\n<p>getModeNames<\/p>\n<p>getChannelNames<\/p>\n<p>getATN<\/p>\n<p>getTokenNames<\/p>\n<p>getSerializedATN<\/p>\n<p>getGrammarFileName<\/p>\n<p>getRuleNames<\/p>\n<p>getVocabulary<\/p>\n"
                  }]
                },
                "biochemistrydslbasevisitor": {
                  "ownKey": "biochemistrydslbasevisitor",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslbasevisitor",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslbasevisitor"
                    },
                    "description": "",
                    "title": "BiochemistrydslBaseVisitor",
                    "content": "<p>This class provides an empty implementation of <code> BiochemistrydslVisitor <\/code>, which can be extended to create a visitor which only needs to handle a subset of the available methods.<\/p><init>\n<p>This class provides an empty implementation of <code> BiochemistrydslVisitor <\/code>, which can be extended to create a visitor which only needs to handle a subset of the available methods.<\/p>\nvisitBiochemicalReactionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCreateJunctionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionLeftContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitConcentration\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJavaConstructor\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCreateJunctionJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightInEnvContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCustomConditions\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitArg\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#arg <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionLeftInEnvContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitDecimal\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReactionJunctionCondition\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionLeftInNeighborContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitArgList\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#argList <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightInCellContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCreateJunctionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightElem\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReactionJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReactionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightInNeighborContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCustomReactionType\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJavaClass\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCustomCondition\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCreateJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionLeftInCellContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReactionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiomolecule\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\n"
                  }]
                },
                "biochemistrydslbaselistener": {
                  "ownKey": "biochemistrydslbaselistener",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslbaselistener",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslbaselistener"
                    },
                    "description": "",
                    "title": "BiochemistrydslBaseListener",
                    "content": "<p>This class provides an empty implementation of <code> BiochemistrydslListener <\/code>, which can be extended to create a listener which only needs to handle a subset of the available methods.<\/p><init>\n<p>This class provides an empty implementation of <code> BiochemistrydslListener <\/code>, which can be extended to create a listener which only needs to handle a subset of the available methods.<\/p>\nexitJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightInNeighborContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJavaClass\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCustomReactionType\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCreateJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReactionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJavaClass\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeftInEnvContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCustomConditions\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterArgList\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#argList <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightInNeighborContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReactionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCreateJunctionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightElem\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nvisitErrorNode\n<p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeftInCellContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCreateJunctionJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightInEnvContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterArg\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#arg <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReactionJunctionCondition\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReactionJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterEveryRule\n<p>The default implementation does nothing.<\/p>\nexitEveryRule\n<p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeftInCellContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCreateJunctionJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJavaConstructor\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReactionJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightElem\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJavaConstructor\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightInCellContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeftInNeighborContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCreateJunctionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReactionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCreateJunctionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCustomConditions\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitArg\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#arg <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCreateJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nvisitTerminal\n<p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightInEnvContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeftContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCustomCondition\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCreateJunctionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterConcentration\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitArgList\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#argList <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiomolecule\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeftInEnvContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitConcentration\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterDecimal\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReactionJunctionCondition\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightInCellContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeftInNeighborContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeftContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCustomCondition\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitDecimal\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiomolecule\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReactionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCustomReactionType\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>. <\/p><p>The default implementation does nothing.<\/p>\n"
                  }]
                },
                "biochemistrydsllistener": {
                  "ownKey": "biochemistrydsllistener",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydsllistener",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydsllistener"
                    },
                    "description": "",
                    "title": "BiochemistrydslListener",
                    "content": "<p>This interface defines a complete listener for a parse tree produced by <code> BiochemistrydslParser <\/code>.<\/p>exitJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junction <\/code>.<\/p>\nexitBiochemicalReactionRightInNeighborContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>.<\/p>\nexitJunctionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>.<\/p>\nexitJavaClass\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>.<\/p>\nexitCustomReactionType\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>.<\/p>\nenterCreateJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>.<\/p>\nexitJunctionReactionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>.<\/p>\nenterJavaClass\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>.<\/p>\nenterBiochemicalReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>.<\/p>\nenterBiochemicalReactionLeftInEnvContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>.<\/p>\nenterCustomConditions\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>.<\/p>\nexitBiochemicalReactionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>.<\/p>\nenterJunctionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>.<\/p>\nenterArgList\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#argList <\/code>.<\/p>\nenterBiochemicalReactionRightInNeighborContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>.<\/p>\nexitJunctionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>.<\/p>\nexitJunctionReactionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>.<\/p>\nenterCreateJunctionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>.<\/p>\nenterBiochemicalReactionRightElem\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>.<\/p>\nenterBiochemicalReactionLeftInCellContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>.<\/p>\nexitCreateJunctionJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>.<\/p>\nexitBiochemicalReactionRightInEnvContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>.<\/p>\nenterArg\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#arg <\/code>.<\/p>\nexitJunctionReactionJunctionCondition\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>.<\/p>\nexitJunctionReactionJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>.<\/p>\nexitBiochemicalReactionLeftInCellContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>.<\/p>\nenterCreateJunctionJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>.<\/p>\nexitJavaConstructor\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>.<\/p>\nenterBiochemicalReactionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>.<\/p>\nenterReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>.<\/p>\nenterJunctionReactionJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>.<\/p>\nexitBiochemicalReactionRightElem\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>.<\/p>\nenterJunctionReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>.<\/p>\nenterJavaConstructor\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>.<\/p>\nexitBiochemicalReactionRightInCellContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>.<\/p>\nexitBiochemicalReactionLeftInNeighborContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>.<\/p>\nexitBiochemicalReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>.<\/p>\nexitBiochemicalReactionRightContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>.<\/p>\nexitCreateJunctionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>.<\/p>\nenterJunctionReactionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>.<\/p>\nexitCreateJunctionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>.<\/p>\nexitCustomConditions\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>.<\/p>\nexitArg\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#arg <\/code>.<\/p>\nexitCreateJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>.<\/p>\nenterBiochemicalReactionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>.<\/p>\nenterBiochemicalReactionRightInEnvContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>.<\/p>\nenterBiochemicalReactionLeftContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>.<\/p>\nexitCustomCondition\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>.<\/p>\nenterCreateJunctionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>.<\/p>\nenterJunctionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>.<\/p>\nenterConcentration\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>.<\/p>\nexitArgList\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#argList <\/code>.<\/p>\nexitBiomolecule\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>.<\/p>\nexitBiochemicalReactionLeftInEnvContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>.<\/p>\nenterJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junction <\/code>.<\/p>\nexitBiochemicalReactionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>.<\/p>\nexitConcentration\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>.<\/p>\nenterDecimal\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>.<\/p>\nenterJunctionReactionJunctionCondition\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>.<\/p>\nenterBiochemicalReactionRightInCellContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>.<\/p>\nenterBiochemicalReactionLeftInNeighborContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>.<\/p>\nexitBiochemicalReactionLeftContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>.<\/p>\nenterCustomCondition\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>.<\/p>\nenterBiochemicalReactionRightContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>.<\/p>\nexitDecimal\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>.<\/p>\nexitReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>.<\/p>\nenterBiomolecule\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>.<\/p>\nenterJunctionReactionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>.<\/p>\nexitJunctionReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>.<\/p>\nenterCustomReactionType\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>.<\/p>\n"
                  }]
                }
              },
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/biochemistrydsl",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl"
                },
                "description": "",
                "title": "it.unibo.alchemist.biochemistrydsl",
                "content": "<p>BiochemistrydslLexer<\/p>\n<p>BiochemistrydslBaseListener<\/p>\n<p>This class provides an empty implementation of <code> BiochemistrydslListener <\/code>, which can be extended to create a listener which only needs to handle a subset of the available methods.<\/p>\nBiochemistrydslVisitor\n<p>This interface defines a complete generic visitor for a parse tree produced by <code> BiochemistrydslParser <\/code>.<\/p>\nBiochemistrydslListener\n<p>This interface defines a complete listener for a parse tree produced by <code> BiochemistrydslParser <\/code>.<\/p>\nBiochemistrydslBaseVisitor\n<p>This class provides an empty implementation of <code> BiochemistrydslVisitor <\/code>, which can be extended to create a visitor which only needs to handle a subset of the available methods.<\/p>\nBiochemistrydslParser\n"
              }]
            },
            "utils": {
              "ownKey": "utils",
              "childrenPages": {"maputils": {
                "ownKey": "maputils",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/utils/maputils",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/utils/maputils"
                  },
                  "description": "",
                  "title": "MapUtils",
                  "content": "<p>getDistance<\/p>\n<p>Returns the distance in meters.<\/p>\ninitialBearing\n<p>getDestinationLocation<\/p>\n<p>getDestinationLocation<\/p>\n<p>toLatLng<\/p>\n<p>Converts <code> GeoPosition <\/code> to LatLng.<\/p>\ntoLatLong\n<p>Converts LatLng to <code> LatLongPosition <\/code>.<\/p>\n"
                }]
              }},
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/utils",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/utils"
                },
                "description": "",
                "title": "it.unibo.alchemist.utils",
                "content": "<p>MapUtils<\/p>\n"
              }]
            },
            "grid": {
              "ownKey": "grid",
              "childrenPages": {
                "cluster": {
                  "ownKey": "cluster",
                  "childrenPages": {
                    "cluster": {
                      "ownKey": "cluster",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/cluster/cluster",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster/cluster"
                        },
                        "description": "",
                        "title": "Cluster",
                        "content": "<p>The entity that represent the joined cluster.<\/p>getWorkersSet\n<p>close<\/p>\n<p>Leave the cluster.<\/p>\n"
                      }]
                    },
                    "clusterimpl": {
                      "ownKey": "clusterimpl",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/cluster/clusterimpl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster/clusterimpl"
                        },
                        "description": "",
                        "title": "ClusterImpl",
                        "content": "<p>An implementation of <code> Cluster <\/code> uses Apache Ignite.<\/p><init>\n\ngetWorkersSet\n\nclose\n\n"
                      }]
                    },
                    "workerset": {
                      "ownKey": "workerset",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/cluster/workerset",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster/workerset"
                        },
                        "description": "",
                        "title": "WorkerSet",
                        "content": "<p>Set of remote nodes that can run simulations.<\/p>distributeSimulations\n<p>Distribute and execute the simulation set on set's workers.<\/p>\n"
                      }]
                    },
                    "workersetimpl": {
                      "ownKey": "workersetimpl",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/cluster/workersetimpl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster/workersetimpl"
                        },
                        "description": "",
                        "title": "WorkerSetImpl",
                        "content": "<p>Implementation of <code> WorkerSet <\/code> which uses Apache Ignite.<\/p><init>\n\ndistributeSimulations\n\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/grid/cluster",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.grid.cluster",
                    "content": "<p>Cluster<\/p>\n<p>The entity that represent the joined cluster.<\/p>\nWorkerSet\n<p>Set of remote nodes that can run simulations.<\/p>\nWorkerSetImpl\n<p>Implementation of <code> WorkerSet <\/code> which uses Apache Ignite.<\/p>\nClusterImpl\n<p>An implementation of <code> Cluster <\/code> uses Apache Ignite.<\/p>\n"
                  }]
                },
                "util": {
                  "ownKey": "util",
                  "childrenPages": {"workingdirectory": {
                    "ownKey": "workingdirectory",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/grid/util/workingdirectory",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/util/workingdirectory"
                      },
                      "description": "",
                      "title": "WorkingDirectory",
                      "content": "<p>Class that manage a temp local working directory.<\/p><init>\n<p>Create new local temp working directory.<\/p>\ngetDirectoryUrl\n\ngetFileContent\n<p>Get folder's file content.<\/p>\nwriteFiles\n<p>Write multiple files inside the directory.<\/p>\nclose\n\ngetFileAbsolutePath\n\n"
                    }]
                  }},
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/grid/util",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/util"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.grid.util",
                    "content": "<p>WorkingDirectory<\/p>\n<p>Class that manage a temp local working directory.<\/p>\n"
                  }]
                },
                "simulation": {
                  "ownKey": "simulation",
                  "childrenPages": {
                    "complexity": {
                      "ownKey": "complexity",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/simulation/complexity",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/complexity"
                        },
                        "description": "",
                        "title": "Complexity",
                        "content": "<p>An entity which represents a simulation's complexity.<\/p>getRamUsage\n<p>getCpuUsage<\/p>\n"
                      }]
                    },
                    "simulationset": {
                      "ownKey": "simulationset",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/simulation/simulationset",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/simulationset"
                        },
                        "description": "",
                        "title": "SimulationSet",
                        "content": "<p>Set of configs for remote simulations creation.<\/p>getSimulationConfigs\n<p>getGeneralSimulationConfig<\/p>\n<p>computeComplexity<\/p>\n"
                      }]
                    },
                    "simulationsetimpl": {
                      "ownKey": "simulationsetimpl",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/simulation/simulationsetimpl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/simulationsetimpl"
                        },
                        "description": "",
                        "title": "SimulationSetImpl",
                        "content": "<p><code> SimulationSet <\/code> implementation.<\/p><init>\n\ngetSimulationConfigs\n\ngetGeneralSimulationConfig\n\ncomputeComplexity\n\n"
                      }]
                    },
                    "remoteresult": {
                      "ownKey": "remoteresult",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/simulation/remoteresult",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/remoteresult"
                        },
                        "description": "",
                        "title": "RemoteResult",
                        "content": "<p>Result of <code> RemoteSimulation <\/code>.<\/p>saveLocally\n<p>Save simulation's result in a local file.<\/p>\n"
                      }]
                    },
                    "remoteresultimpl": {
                      "ownKey": "remoteresultimpl",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/simulation/remoteresultimpl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/remoteresultimpl"
                        },
                        "description": "",
                        "title": "RemoteResultImpl",
                        "content": "<p><code> RemoteResult <\/code> implementation.<\/p><init>\n\nsaveLocally\n\nhashCode\n\nequals\n\n"
                      }]
                    },
                    "remotesimulation": {
                      "ownKey": "remotesimulation",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/simulation/remotesimulation",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/remotesimulation"
                        },
                        "description": "",
                        "title": "RemoteSimulation",
                        "content": "<p>Alchemist simulation that will be executed in remote cluster's nodes.<\/p>\n"
                      }]
                    },
                    "complexityimpl": {
                      "ownKey": "complexityimpl",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/simulation/complexityimpl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/complexityimpl"
                        },
                        "description": "",
                        "title": "ComplexityImpl",
                        "content": "<p><code> Complexity <\/code> implementation.<\/p><init>\n\ngetRamUsage\n\ngetCpuUsage\n\n"
                      }]
                    },
                    "remotesimulationimpl": {
                      "ownKey": "remotesimulationimpl",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/simulation/remotesimulationimpl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/remotesimulationimpl"
                        },
                        "description": "",
                        "title": "RemoteSimulationImpl",
                        "content": "<p><code> RemoteSimulation <\/code> implementation for Apache Ignite.<\/p><init>\n\ncall\n\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/grid/simulation",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.grid.simulation",
                    "content": "<p>RemoteResultImpl<\/p>\n<p><code> RemoteResult <\/code> implementation.<\/p>\nSimulationSet\n<p>Set of configs for remote simulations creation.<\/p>\nComplexityImpl\n<p><code> Complexity <\/code> implementation.<\/p>\nRemoteSimulationImpl\n<p><code> RemoteSimulation <\/code> implementation for Apache Ignite.<\/p>\nRemoteResult\n<p>Result of <code> RemoteSimulation <\/code>.<\/p>\nSimulationSetImpl\n<p><code> SimulationSet <\/code> implementation.<\/p>\nRemoteSimulation\n<p>Alchemist simulation that will be executed in remote cluster's nodes.<\/p>\nComplexity\n<p>An entity which represents a simulation's complexity.<\/p>\n"
                  }]
                },
                "config": {
                  "ownKey": "config",
                  "childrenPages": {
                    "localgeneralsimulationconfig": {
                      "ownKey": "localgeneralsimulationconfig",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/config/localgeneralsimulationconfig",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/localgeneralsimulationconfig"
                        },
                        "description": "",
                        "title": "LocalGeneralSimulationConfig",
                        "content": "<p>Local <code> GeneralSimulationConfig <\/code> that contains all information in local memory.<\/p><init>\n\n<init>\n\ngetDependencies\n\n"
                      }]
                    },
                    "generalsimulationconfig": {
                      "ownKey": "generalsimulationconfig",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/config/generalsimulationconfig",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/generalsimulationconfig"
                        },
                        "description": "",
                        "title": "GeneralSimulationConfig",
                        "content": "<p>Simulation's configs valid for more than one simulation.<\/p>getEndStep\n<p>getLoader<\/p>\n<p>getDependencies<\/p>\n<p>getEndTime<\/p>\n"
                      }]
                    },
                    "lightinfogeneralsimulationconfig": {
                      "ownKey": "lightinfogeneralsimulationconfig",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/config/lightinfogeneralsimulationconfig",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/lightinfogeneralsimulationconfig"
                        },
                        "description": "",
                        "title": "LightInfoGeneralSimulationConfig",
                        "content": "<p>Abstract simulation config that contains small serializable informations.<\/p><init>\n\n<init>\n\n<init>\n\ngetEndStep\n\ngetLoader\n\ngetDependencies\n\ngetEndTime\n\n"
                      }]
                    },
                    "remotegeneralsimulationconfig": {
                      "ownKey": "remotegeneralsimulationconfig",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/config/remotegeneralsimulationconfig",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/remotegeneralsimulationconfig"
                        },
                        "description": "",
                        "title": "RemoteGeneralSimulationConfig",
                        "content": "<p>Remote <code> GeneralSimulationConfig <\/code> that stores big informations in Ignite's cache.<\/p><init>\n\ngetDependencies\n\nclose\n\n"
                      }]
                    },
                    "simulationconfigimpl": {
                      "ownKey": "simulationconfigimpl",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/config/simulationconfigimpl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/simulationconfigimpl"
                        },
                        "description": "",
                        "title": "SimulationConfigImpl",
                        "content": "<p><code> SimulationConfig <\/code> implementation.<\/p><init>\n\nhashCode\n\ngetVariables\n\nequals\n\ntoString\n\n"
                      }]
                    },
                    "simulationconfig": {
                      "ownKey": "simulationconfig",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/config/simulationconfig",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/simulationconfig"
                        },
                        "description": "",
                        "title": "SimulationConfig",
                        "content": "<p>Simulation's configs for only one simulation.<\/p>getVariables\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/grid/config",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.grid.config",
                    "content": "<p>SimulationConfigImpl<\/p>\n<p><code> SimulationConfig <\/code> implementation.<\/p>\nLocalGeneralSimulationConfig\n<p>Local <code> GeneralSimulationConfig <\/code> that contains all information in local memory.<\/p>\nGeneralSimulationConfig\n<p>Simulation's configs valid for more than one simulation.<\/p>\nRemoteGeneralSimulationConfig\n<p>Remote <code> GeneralSimulationConfig <\/code> that stores big informations in Ignite's cache.<\/p>\nLightInfoGeneralSimulationConfig\n<p>Abstract simulation config that contains small serializable informations.<\/p>\nSimulationConfig\n<p>Simulation's configs for only one simulation.<\/p>\n"
                  }]
                },
                "exceptions": {
                  "ownKey": "exceptions",
                  "childrenPages": {"remotesimulationexception": {
                    "ownKey": "remotesimulationexception",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/grid/exceptions/remotesimulationexception",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/exceptions/remotesimulationexception"
                      },
                      "description": "",
                      "title": "RemoteSimulationException",
                      "content": "<p><init><\/p>\n<p><init><\/p>\n"
                    }]
                  }},
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/grid/exceptions",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/exceptions"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.grid.exceptions",
                    "content": "<p>RemoteSimulationException<\/p>\n"
                  }]
                }
              }
            },
            "model": {
              "ownKey": "model",
              "childrenPages": {
                "cognitiveagents": {
                  "ownKey": "cognitiveagents",
                  "childrenPages": {"characteristics": {
                    "ownKey": "characteristics",
                    "childrenPages": {
                      "cognitive": {
                        "ownKey": "cognitive",
                        "childrenPages": {
                          "mentalcognitivecharacteristic": {
                            "ownKey": "mentalcognitivecharacteristic",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/mentalcognitivecharacteristic",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/mentalcognitivecharacteristic"
                              },
                              "description": "",
                              "title": "MentalCognitiveCharacteristic",
                              "content": "<p>A cognitive characteristic which has a mental response.<\/p><init>\n<p>A cognitive characteristic which has a mental response.<\/p>\nupdate\n<p>Update the current intensity of this characteristic.<\/p>\n"
                            }]
                          },
                          "beliefdanger": {
                            "ownKey": "beliefdanger",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/beliefdanger",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/beliefdanger"
                              },
                              "description": "",
                              "title": "BeliefDanger",
                              "content": "<p>The perception of the situation dangerousness.\nThe name belief derives from the <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">IMPACT model<\/a>.<\/p><init>\n<p>The perception of the situation dangerousness.\nThe name belief derives from the <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">IMPACT model<\/a>.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                            }]
                          },
                          "desireevacuate": {
                            "ownKey": "desireevacuate",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/desireevacuate",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/desireevacuate"
                              },
                              "description": "",
                              "title": "DesireEvacuate",
                              "content": "<p>The desire to evacuate.<\/p><init>\n<p>The desire to evacuate.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                            }]
                          },
                          "abstractcognitivecharacteristic": {
                            "ownKey": "abstractcognitivecharacteristic",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/abstractcognitivecharacteristic",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/abstractcognitivecharacteristic"
                              },
                              "description": "",
                              "title": "AbstractCognitiveCharacteristic",
                              "content": "<p>The generic implementation of a cognitive characteristic.<\/p>currentLevel\n<p>The current level of this characteristic.<\/p>\n<init>\n<p>The generic implementation of a cognitive characteristic.<\/p>\nlevel\n<p>The current intensity of this characteristic.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\nAbstractCognitiveCharacteristic\n<p>The generic implementation of a cognitive characteristic.<\/p>\n"
                            }]
                          },
                          "orientingagent": {
                            "ownKey": "orientingagent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/orientingagent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/orientingagent"
                              },
                              "description": "",
                              "title": "OrientingAgent",
                              "content": "<p>An agent capable of orienting itself inside an environment.<\/p>knowledgeDegree\n<p>The knowledge degree of the agent concerning the environment, it's a Double\nvalue in <a href=\"#\">0,1<\/a> describing the percentage of the environment the agent is\nfamiliar with prior to the start of the simulation (thus it does not take\ninto account the knowledge the pedestrian will gain during it, namely the\n volatileMemory ).<\/p>\ncognitiveMap\n<p>The cognitive map of the agent. It's composed of landmarks (elements of the\nenvironment easy to remember due to their uniqueness) and spatial relations\nbetween them. It is represented using a  NavigationGraph .<\/p>\nvolatileMemory\n<p>The volatile memory of the agent: it models the ability to remember areas\nof the environment already visited by the agent since the start of the\nsimulation. In particular, each area is paired with the number of visits.\nAreas are assumed to be represented as  ConvexGeometricShape s, as in\n NavigationGraph s.<\/p>\nregisterVisit\n<p>Registers a visit to the provided  area  in the agent's  volatileMemory .<\/p>\n"
                            }]
                          },
                          "intentionwalkrandomly": {
                            "ownKey": "intentionwalkrandomly",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/intentionwalkrandomly",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/intentionwalkrandomly"
                              },
                              "description": "",
                              "title": "IntentionWalkRandomly",
                              "content": "<p>The intention not to evacuate.<\/p><init>\n<p>The intention not to evacuate.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                            }]
                          },
                          "intentionevacuate": {
                            "ownKey": "intentionevacuate",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/intentionevacuate",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/intentionevacuate"
                              },
                              "description": "",
                              "title": "IntentionEvacuate",
                              "content": "<p>The intention to evacuate of .<\/p><init>\n<p>The intention to evacuate of .<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                            }]
                          },
                          "desirewalkrandomly": {
                            "ownKey": "desirewalkrandomly",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/desirewalkrandomly",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/desirewalkrandomly"
                              },
                              "description": "",
                              "title": "DesireWalkRandomly",
                              "content": "<p>The desire not to evacuate.<\/p><init>\n<p>The desire not to evacuate.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                            }]
                          },
                          "cognitiveagent": {
                            "ownKey": "cognitiveagent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/cognitiveagent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/cognitiveagent"
                              },
                              "description": "",
                              "title": "CognitiveAgent",
                              "content": "<p>An entity capable of having emotions and relations.<\/p>dangerBelief\n<p>Value representing the current belief of the situation dangerousness for this pedestrian.<\/p>\nfear\n<p>Value representing the level of fear of this pedestrian.<\/p>\nwantsToEvacuate\n<p>Whether or not this pedestrian intends to evacuate.<\/p>\ncognitiveCharacteristics\n<p>The list of all the cognitive characteristics of this pedestrian.<\/p>\ninfluencialPeople\n<p>A list of all the pedestrians inside at least one of the sensory spheres of this pedestrian.<\/p>\n"
                            }]
                          },
                          "cognitivespec": {
                            "ownKey": "cognitivespec",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/cognitivespec",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/cognitivespec"
                              },
                              "description": "",
                              "title": "CognitiveSpec",
                              "content": "<p>A specification of the parameters regarding cognitive characteristics to load from a config file.<\/p>sensingOmega\n<p>affectiveBiasingOmega<\/p>\n<p>persistingOmega<\/p>\n<p>amplifyingFeelingOmega<\/p>\n<p>inhibitingFeelingOmega<\/p>\n<p>amplifyingEvacuationOmega<\/p>\n<p>inhibitingWalkRandOmega<\/p>\n<p>amplifyingIntentionOmega<\/p>\n<p>inhibitingIntentionOmega<\/p>\n<p>mentalEta<\/p>\n<p>bodyEta<\/p>\n<p>logisticSigma<\/p>\n<p>logisticTau<\/p>\n<p>advancedLogisticSigma<\/p>\n<p>advancedLogisticTau<\/p>\n"
                            }]
                          },
                          "bodycognitivecharacteristic": {
                            "ownKey": "bodycognitivecharacteristic",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/bodycognitivecharacteristic",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/bodycognitivecharacteristic"
                              },
                              "description": "",
                              "title": "BodyCognitiveCharacteristic",
                              "content": "<p>A cognitive characteristic which has a body response.<\/p><init>\n<p>A cognitive characteristic which has a body response.<\/p>\nupdate\n<p>Update the current intensity of this characteristic.<\/p>\n"
                            }]
                          },
                          "fear": {
                            "ownKey": "fear",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/fear",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/fear"
                              },
                              "description": "",
                              "title": "Fear",
                              "content": "<p>The fear emotion.<\/p><init>\n<p>The fear emotion.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                            }]
                          },
                          "cognitivecharacteristic": {
                            "ownKey": "cognitivecharacteristic",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/cognitivecharacteristic",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive/cognitivecharacteristic"
                              },
                              "description": "",
                              "title": "CognitiveCharacteristic",
                              "content": "<p>A characteristic which depends on the other agents in the environment.<\/p>level\n<p>The current intensity of this characteristic.<\/p>\nupdate\n<p>Update the current intensity of this characteristic.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/cognitive"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.cognitiveagents.characteristics.cognitive",
                          "content": "<p>AbstractCognitiveCharacteristic<\/p>\n<p>The generic implementation of a cognitive characteristic.<\/p>\nBeliefDanger\n<p>The perception of the situation dangerousness.\nThe name belief derives from the <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">IMPACT model<\/a>.<\/p>\nBodyCognitiveCharacteristic\n<p>A cognitive characteristic which has a body response.<\/p>\nCognitiveAgent\n<p>An entity capable of having emotions and relations.<\/p>\nCognitiveCharacteristic\n<p>A characteristic which depends on the other agents in the environment.<\/p>\nCognitiveSpec\n<p>A specification of the parameters regarding cognitive characteristics to load from a config file.<\/p>\nDesireEvacuate\n<p>The desire to evacuate.<\/p>\nDesireWalkRandomly\n<p>The desire not to evacuate.<\/p>\nFear\n<p>The fear emotion.<\/p>\nIntentionEvacuate\n<p>The intention to evacuate of .<\/p>\nIntentionWalkRandomly\n<p>The intention not to evacuate.<\/p>\nMentalCognitiveCharacteristic\n<p>A cognitive characteristic which has a mental response.<\/p>\nOrientingAgent\n<p>An agent capable of orienting itself inside an environment.<\/p>\n"
                        }]
                      },
                      "individual": {
                        "ownKey": "individual",
                        "childrenPages": {
                          "gender": {
                            "ownKey": "gender",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/gender",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/gender"
                              },
                              "description": "",
                              "title": "Gender",
                              "content": "<p>An enum representing the different genders.<\/p>MALE\n<p>FEMALE<\/p>\n<p>Gender<\/p>\n<p>An enum representing the different genders.<\/p>\n"
                            }]
                          },
                          "speedspec": {
                            "ownKey": "speedspec",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/speedspec",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/speedspec"
                              },
                              "description": "",
                              "title": "SpeedSpec",
                              "content": "<p>A specification of the parameters regarding speeds to load from a config file.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n<p>default<\/p>\n<p>variance<\/p>\n"
                            }]
                          },
                          "compliance": {
                            "ownKey": "compliance",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/compliance",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/compliance"
                              },
                              "description": "",
                              "title": "Compliance",
                              "content": "<p>The level of compliance of an agent considering its gender and its age.<\/p>level\n<p>The calculated level of compliance.<\/p>\n<init>\n<p>The level of compliance of an agent considering its gender and its age.<\/p>\n"
                            }]
                          },
                          "helpattitude": {
                            "ownKey": "helpattitude",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitude",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitude"
                              },
                              "description": "",
                              "title": "HelpAttitude",
                              "content": "<p>The attitude of an agent towards helping another agent.<\/p><init>\n<p>The attitude of an agent towards helping another agent.<\/p>\nlevel\n<p>The logic used to calculate the probability of helping.<\/p>\n"
                            }]
                          },
                          "helpattitudespec": {
                            "ownKey": "helpattitudespec",
                            "childrenPages": {
                              "elderlymale": {
                                "ownKey": "elderlymale",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec/elderlymale",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec/elderlymale"
                                  },
                                  "description": "",
                                  "title": "ElderlyMale",
                                  "content": "<p>Elderly males attitudes.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                }]
                              },
                              "adultfemale": {
                                "ownKey": "adultfemale",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec/adultfemale",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec/adultfemale"
                                  },
                                  "description": "",
                                  "title": "AdultFemale",
                                  "content": "<p>Adult females attitudes.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                }]
                              },
                              "adultmale": {
                                "ownKey": "adultmale",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec/adultmale",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec/adultmale"
                                  },
                                  "description": "",
                                  "title": "AdultMale",
                                  "content": "<p>Adult males attitudes.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                }]
                              },
                              "elderlyfemale": {
                                "ownKey": "elderlyfemale",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec/elderlyfemale",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec/elderlyfemale"
                                  },
                                  "description": "",
                                  "title": "ElderlyFemale",
                                  "content": "<p>Elderly females attitudes.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/helpattitudespec"
                              },
                              "description": "",
                              "title": "HelpAttitudeSpec",
                              "content": "<p>A specification of the parameters regarding help attitudes to load from a config file.<\/p>\n"
                            }]
                          },
                          "speed": {
                            "ownKey": "speed",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/speed",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/speed"
                              },
                              "description": "",
                              "title": "Speed",
                              "content": "<p>The speed of an agent considering its age, gender and a random factor.<\/p>walking\n<p>The walking speed of the agent.<\/p>\nrunning\n<p>The running speed of the agent.<\/p>\n<init>\n<p>The speed of an agent considering its age, gender and a random factor.<\/p>\nSpeed\n<p>The speed of an agent considering its age, gender and a random factor.<\/p>\n"
                            }]
                          },
                          "compliancespec": {
                            "ownKey": "compliancespec",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/compliancespec",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/compliancespec"
                              },
                              "description": "",
                              "title": "ComplianceSpec",
                              "content": "<p>A specification of the parameters regarding compliance to load from a config file.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                            }]
                          },
                          "age": {
                            "ownKey": "age",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual/age",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual/age"
                              },
                              "description": "",
                              "title": "Age",
                              "content": "<p>An enum representing the different periods of life.<\/p>CHILD\n<p>ADULT<\/p>\n<p>ELDERLY<\/p>\n<p>Age<\/p>\n<p>An enum representing the different periods of life.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/individual",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/individual"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.cognitiveagents.characteristics.individual",
                          "content": "<p>Age<\/p>\n<p>An enum representing the different periods of life.<\/p>\nCompliance\n<p>The level of compliance of an agent considering its gender and its age.<\/p>\nComplianceSpec\n<p>A specification of the parameters regarding compliance to load from a config file.<\/p>\nGender\n<p>An enum representing the different genders.<\/p>\nHelpAttitude\n<p>The attitude of an agent towards helping another agent.<\/p>\nHelpAttitudeSpec\n<p>A specification of the parameters regarding help attitudes to load from a config file.<\/p>\nSpeed\n<p>The speed of an agent considering its age, gender and a random factor.<\/p>\nSpeedSpec\n<p>A specification of the parameters regarding speeds to load from a config file.<\/p>\n"
                        }]
                      },
                      "utils": {
                        "ownKey": "utils",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/utils",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/utils"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.cognitiveagents.characteristics.utils",
                          "content": "<p>logistic<\/p>\n<p>https://en.wikipedia.org/wiki/Logistic_function<\/p>\nadvancedLogistic\n"
                        }]
                      },
                      "characteristic": {
                        "ownKey": "characteristic",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics/characteristic",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics/characteristic"
                          },
                          "description": "",
                          "title": "Characteristic",
                          "content": "<p>Any characteristic associable to a pedestrian.<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/cognitiveagents/characteristics",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/characteristics"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.model.cognitiveagents.characteristics",
                      "content": "<p>Characteristic<\/p>\n<p>Any characteristic associable to a pedestrian.<\/p>\nit.unibo.alchemist.model.cognitiveagents.characteristics.cognitive\n<p>it.unibo.alchemist.model.cognitiveagents.characteristics.individual<\/p>\n<p>it.unibo.alchemist.model.cognitiveagents.characteristics.utils<\/p>\n<p>PARAMETERS_FILE<\/p>\n<p>Path to the file containing characteristics' parameters.<\/p>\n"
                    }]
                  }}
                },
                "interfaces": {
                  "ownKey": "interfaces",
                  "childrenPages": {
                    "linkingrule": {
                      "ownKey": "linkingrule",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/linkingrule",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/linkingrule"
                        },
                        "description": "",
                        "title": "LinkingRule",
                        "content": "<p>An interface that represent an auto-linking logic for nodes within an environment.<\/p>computeNeighborhood\n<p>Produces a new neighborhood for specified node considering its position.<\/p>\nisLocallyConsistent\n<p>Some rules may require to be evaluated against multiple nodes until the situations gets consistent. For instance, a rule that connects the closest 10 nodes must be evaluated multiple times to get to the correct result (this is because a change in one neighbor may require a disconnection from another node to maintain exactly 10 connections). Most rules do not need such machinery (e.g., connecting to nodes within some statically defined range).<\/p>\n"
                      }]
                    },
                    "environments": {
                      "ownKey": "environments",
                      "childrenPages": {
                        "euclideanphysics2denvironmentwithobstacles": {
                          "ownKey": "euclideanphysics2denvironmentwithobstacles",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/euclideanphysics2denvironmentwithobstacles",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclideanphysics2denvironmentwithobstacles"
                            },
                            "description": "",
                            "title": "EuclideanPhysics2DEnvironmentWithObstacles",
                            "content": "<p>Euclidean physics environment with support for obstacles.<\/p>\n"
                          }]
                        },
                        "physicsenvironmentwithgraph": {
                          "ownKey": "physicsenvironmentwithgraph",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/physicsenvironmentwithgraph",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/physicsenvironmentwithgraph"
                            },
                            "description": "",
                            "title": "PhysicsEnvironmentWithGraph",
                            "content": "<p>A  PhysicsEnvironment  with obstacles providing a  NavigationGraph , i.e. a graph whose\nnodes are convex shapes representing the areas of the environment traversable\nby agents (namely, walkable areas), whereas edges represent connections between\nthem. To make it easier, think that in an indoor environment, nodes should\nrepresent rooms and corridors, whereas edges should represent doors and passages.<\/p>\n"
                          }]
                        },
                        "environmentwithgraph": {
                          "ownKey": "environmentwithgraph",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/environmentwithgraph",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/environmentwithgraph"
                            },
                            "description": "",
                            "title": "EnvironmentWithGraph",
                            "content": "<p>An environment with obstacles providing a  NavigationGraph , i.e. a graph whose\nnodes are convex shapes representing the areas of the environment traversable\nby agents (namely, walkable areas), whereas edges represent connections between\nthem. To make it easier, think that in an indoor environment, nodes should\nrepresent rooms and corridors, whereas edges should represent doors and passages.<\/p>graph\n<p>The navigation graph.<\/p>\n"
                          }]
                        },
                        "physicsenvironment": {
                          "ownKey": "physicsenvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/physicsenvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/physicsenvironment"
                            },
                            "description": "",
                            "title": "PhysicsEnvironment",
                            "content": "<p>An environment supporting physics and nodes shapes.\nNote: due to the high number of parameters its's highly recommended to not use this interface directly,\nbut to create an apposite interface extending this one instead.<\/p>shapeFactory\n<p>A factory of shapes compatible with this environment.<\/p>\ngetHeading\n<p>Gets the heading of a node as a direction vector.<\/p>\nsetHeading\n<p>Sets the heading of a node.<\/p>\ngetShape\n<p>Gets the shape of a node relatively to its position and heading in the environment.<\/p>\ngetNodesWithin\n<p>Gets all nodes whose shape.intersect is true for the given shape.<\/p>\ncanNodeFitPosition\n<p>Whether or not a node can be placed in a position.<\/p>\n"
                          }]
                        },
                        "euclidean2denvironment": {
                          "ownKey": "euclidean2denvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/euclidean2denvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclidean2denvironment"
                            },
                            "description": "",
                            "title": "Euclidean2DEnvironment",
                            "content": "<p>A bidimensional euclidean space with any concentration type  T .<\/p>origin\n<p>Create a position corresponding to the origin of this environment.<\/p>\nmakePosition\n<p>Creates a new  Euclidean2DPosition .<\/p>\nmakePosition\n<p>Creates a new  Euclidean2DPosition .<\/p>\nEuclidean2DEnvironment\n<p>A bidimensional euclidean space with any concentration type  T .<\/p>\n"
                          }]
                        },
                        "euclidean2denvironmentwithobstacles": {
                          "ownKey": "euclidean2denvironmentwithobstacles",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/euclidean2denvironmentwithobstacles",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclidean2denvironmentwithobstacles"
                            },
                            "description": "",
                            "title": "Euclidean2DEnvironmentWithObstacles",
                            "content": "<p>An  Environment2DWithObstacles  using  Euclidean2DPosition s.<\/p>\n"
                          }]
                        },
                        "euclidean2denvironmentwithgraph": {
                          "ownKey": "euclidean2denvironmentwithgraph",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/euclidean2denvironmentwithgraph",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclidean2denvironmentwithgraph"
                            },
                            "description": "",
                            "title": "Euclidean2DEnvironmentWithGraph",
                            "content": "<p>An euclidean  EnvironmentWithGraph .<\/p>\n"
                          }]
                        },
                        "euclideanphysics2denvironmentwithgraph": {
                          "ownKey": "euclideanphysics2denvironmentwithgraph",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/euclideanphysics2denvironmentwithgraph",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclideanphysics2denvironmentwithgraph"
                            },
                            "description": "",
                            "title": "EuclideanPhysics2DEnvironmentWithGraph",
                            "content": "<p>An  Euclidean2DEnvironmentWithGraph  with physics.<\/p>\n"
                          }]
                        },
                        "environment2dwithobstacles": {
                          "ownKey": "environment2dwithobstacles",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/environment2dwithobstacles",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/environment2dwithobstacles"
                            },
                            "description": "",
                            "title": "Environment2DWithObstacles",
                            "content": "<p>A bidimensional  EnvironmentWithObstacles .<\/p>getObstaclesInRange\n<p>Given a point and a range, retrieves all the obstacles within.<\/p>\ngetObstaclesInRange\n<p>Given a point and a range, retrieves all the obstacles within.<\/p>\nhasMobileObstacles\n"
                          }]
                        },
                        "physics2denvironment": {
                          "ownKey": "physics2denvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/environments/physics2denvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/physics2denvironment"
                            },
                            "description": "",
                            "title": "Physics2DEnvironment",
                            "content": "<p>Defines a bidimensional euclidean environment.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/environments",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.interfaces.environments",
                        "content": "<p>Environment2DWithObstacles<\/p>\n<p>A bidimensional  EnvironmentWithObstacles .<\/p>\nEnvironmentWithGraph\n<p>An environment with obstacles providing a  NavigationGraph , i.e. a graph whose\nnodes are convex shapes representing the areas of the environment traversable\nby agents (namely, walkable areas), whereas edges represent connections between\nthem. To make it easier, think that in an indoor environment, nodes should\nrepresent rooms and corridors, whereas edges should represent doors and passages.<\/p>\nEuclidean2DEnvironment\n<p>A bidimensional euclidean space with any concentration type  T .<\/p>\nEuclidean2DEnvironmentWithGraph\n<p>An euclidean  EnvironmentWithGraph .<\/p>\nEuclidean2DEnvironmentWithObstacles\n<p>An  Environment2DWithObstacles  using  Euclidean2DPosition s.<\/p>\nEuclideanPhysics2DEnvironmentWithGraph\n<p>An  Euclidean2DEnvironmentWithGraph  with physics.<\/p>\nEuclideanPhysics2DEnvironmentWithObstacles\n<p>Euclidean physics environment with support for obstacles.<\/p>\nPhysics2DEnvironment\n<p>Defines a bidimensional euclidean environment.<\/p>\nPhysicsEnvironment\n<p>An environment supporting physics and nodes shapes.\nNote: due to the high number of parameters its's highly recommended to not use this interface directly,\nbut to create an apposite interface extending this one instead.<\/p>\nPhysicsEnvironmentWithGraph\n<p>A  PhysicsEnvironment  with obstacles providing a  NavigationGraph , i.e. a graph whose\nnodes are convex shapes representing the areas of the environment traversable\nby agents (namely, walkable areas), whereas edges represent connections between\nthem. To make it easier, think that in an indoor environment, nodes should\nrepresent rooms and corridors, whereas edges should represent doors and passages.<\/p>\n"
                      }]
                    },
                    "position2d": {
                      "ownKey": "position2d",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/position2d",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/position2d"
                        },
                        "description": "",
                        "title": "Position2D",
                        "content": "<p>A bidimensional position.<\/p>x\n<p>y<\/p>\n<p>getCoordinate<\/p>\n<p>Allows to access the value of a coordinate.<\/p>\n"
                      }]
                    },
                    "heterogeneouspedestrian": {
                      "ownKey": "heterogeneouspedestrian",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/heterogeneouspedestrian",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/heterogeneouspedestrian"
                        },
                        "description": "",
                        "title": "HeterogeneousPedestrian",
                        "content": "<p>An heterogeneous pedestrian is a pedestrian where individual characteristics are taken into consideration.<\/p>age\n<p>The age of this pedestrian.<\/p>\ngender\n<p>The gender of this pedestrian.<\/p>\ncompliance\n<p>Value between 0 and 1 representing the attitude towards conforming to social rules of this pedestrian.<\/p>\nprobabilityOfHelping\n<p>Value between 0 and 1 representing the probability this pedestrian will help another pedestrian in difficulty.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                      }]
                    },
                    "context": {
                      "ownKey": "context",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/context",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/context"
                        },
                        "description": "",
                        "title": "Context",
                        "content": "<p>This enum describes the possible contexts for a given <code> Action <\/code> or <code> Condition <\/code>. A context represents the elements which are read for a <code> Condition <\/code> and the elements that may be subject of modifications for an <code> Action <\/code>. Choosing the right <code> Context <\/code> is crucial: if it's too restricted the simulation will be invalid, if it's too wide it WILL impact dramatically on performances. Contexts are used internally to better determine dependencies among reactions. See <a href=\"http://apice.unibo.it/xwiki/bin/view/Publications/PianiniMASS11\"> this paper<\/a> for further information about the usage of contexts.<\/p>GLOBAL\n<p>LOCAL<\/p>\n<p>NEIGHBORHOOD<\/p>\n<p>getWider<\/p>\n"
                      }]
                    },
                    "action": {
                      "ownKey": "action",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/action",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/action"
                        },
                        "description": "",
                        "title": "Action",
                        "content": "<p>cloneAction<\/p>\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetOutboundDependencies\n<p>execute<\/p>\n<p>Effectively executes this action.<\/p>\ngetContext\n"
                      }]
                    },
                    "mapenvironment": {
                      "ownKey": "mapenvironment",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/mapenvironment",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/mapenvironment"
                        },
                        "description": "",
                        "title": "MapEnvironment",
                        "content": "<p>DEFAULT_VEHICLE<\/p>\n<p>The default vehicle.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path. It uses the fastest path as metric.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path.<\/p>\n"
                      }]
                    },
                    "obstacle": {
                      "ownKey": "obstacle",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/obstacle",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/obstacle"
                        },
                        "description": "",
                        "title": "Obstacle",
                        "content": "<p>A generic obstacle in a vector space.<\/p>id\n<p>The id for this obstacle.<\/p>\nnext\n<p>Given a vector (starting point and end point) representing a requested\nmove, this method computes a new end point, representing a cut version of\nthe initial vector, modified in such a way that the end point is outside\nthe obstacle.<\/p>\nnearestIntersection\n<p>Given a vector (represented as a starting point and an end point), computes\nthe intersection point between the vector and the obstacle nearest to the\nvector's starting point.<\/p>\n"
                      }]
                    },
                    "environmentwithobstacles": {
                      "ownKey": "environmentwithobstacles",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/environmentwithobstacles",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environmentwithobstacles"
                        },
                        "description": "",
                        "title": "EnvironmentWithObstacles",
                        "content": "<p>An environment with  Obstacle s.<\/p>obstacles\n<p>A list of all the obstacles in this environment.<\/p>\naddObstacle\n<p>Adds an obstacle to this environment.<\/p>\nremoveObstacle\n<p>Removes an obstacle from this environment.<\/p>\nintersectsObstacle\n<p>Checks whether there is at least an obstacle intersecting the line connecting  start  and  end .<\/p>\nnext\n<p>This method must calculate the ABSOLUTE next allowed position given the\ncurrent position and the position in which the node wants to move. For\nexample, if your node is in position <a href=\"#\">2,3<\/a>, wants to move to <a href=\"#\">3,4<\/a> but\nthe next allowed position (because, e.g., of physical obstacles) is\n<a href=\"#\">2.5,3.5<\/a>, the result must be a Position containing coordinates\n<a href=\"#\">2.5,3.5<\/a>.<\/p>\n"
                      }]
                    },
                    "group": {
                      "ownKey": "group",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/group",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/group"
                        },
                        "description": "",
                        "title": "Group",
                        "content": "<p>A group of nodes.<\/p>members\n<p>The list of pedestrians belonging to this group.<\/p>\ncontains\n<p>Whether a node belongs to this group or not.<\/p>\naddMember\n<p>Add a node in this group if not already part of it.<\/p>\nremoveMember\n<p>Remove a node from this group.<\/p>\n"
                      }]
                    },
                    "visiblenode": {
                      "ownKey": "visiblenode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/visiblenode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/visiblenode"
                        },
                        "description": "",
                        "title": "VisibleNode",
                        "content": "<p>Represents a node seen by the  it.unibo.alchemist.model.implementations.actions.See  action.<\/p>node\n<p>The node seen.<\/p>\nposition\n<p>The position of the node.<\/p>\n"
                      }]
                    },
                    "environmentnode": {
                      "ownKey": "environmentnode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/environmentnode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environmentnode"
                        },
                        "description": "",
                        "title": "EnvironmentNode",
                        "content": ""
                      }]
                    },
                    "dependency": {
                      "ownKey": "dependency",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/dependency",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/dependency"
                        },
                        "description": "",
                        "title": "Dependency",
                        "content": "<p>This interface represents a token that may generate a dependency between two reactions. Some special built-in tokens are EVERYTHING, EVERY_MOLECULE, MOVEMENT, and NEIGHBORHOOD_CHANGE. Molecules are dependencies as well.<\/p>EVERYTHING\n<p>Declares a dependency towards any other reaction in the reachable scope.<\/p>\nEVERY_MOLECULE\n<p>Declares a dependency towards any modified molecule in the reachable scope.<\/p>\nMOVEMENT\n<p>Declares a dependency on movement of nodes in the reachable scope.<\/p>\nmakesDependent\n<p>Determines whether the provided dependency depends on this dependency. The default behavior calls <code> #dependsOn(Dependency) <\/code>, and provides a bidirectional dependency.<\/p>\ndependsOn\n<p>Determines whether this dependency depends on the provided dependency. The default behavior requires equality.<\/p>\n"
                      }]
                    },
                    "timedistribution": {
                      "ownKey": "timedistribution",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/timedistribution",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/timedistribution"
                        },
                        "description": "",
                        "title": "TimeDistribution",
                        "content": "<p>This interface represents a temporal distribution for any event.<\/p>update\n<p>Updates the internal status.<\/p>\ngetNextOccurence\n<p>clone<\/p>\n<p>getRate<\/p>\n"
                      }]
                    },
                    "node": {
                      "ownKey": "node",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/node",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/node"
                        },
                        "description": "",
                        "title": "Node",
                        "content": "<p>contains<\/p>\n<p>Tests whether a node contains a <code> Molecule <\/code>.<\/p>\ngetChemicalSpecies\n<p>This method is usefult to know how many different chemical species may be contained in this node.<\/p>\nsetConcentration\n<p>Sets the concentration of mol to c.<\/p>\ngetId\n<p>addReaction<\/p>\n<p>Adds a reaction to this node.<\/p>\ncloneNode\n<p>Creates a new Node which is a clone of the current Node. The new Node will have all the current Node's properties, such as reactions and molecules, but it will also have a different ID.<\/p>\nremoveConcentration\n<p>getReactions<\/p>\n<p>This method allows to access all the reaction of the node.<\/p>\ngetConcentration\n<p>Calculates the concentration of a molecule.<\/p>\ngetContents\n<p>removeReaction<\/p>\n<p>Removes a reaction from this node.<\/p>\n"
                      }]
                    },
                    "condition": {
                      "ownKey": "condition",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/condition",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/condition"
                        },
                        "description": "",
                        "title": "Condition",
                        "content": "<p>cloneCondition<\/p>\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetNode\n<p>getPropensityContribution<\/p>\n<p>This method is a support for the propensity calculation inside the Reactions. It allows this condition to influence the rate calculation in some way. It's up to the reaction to decide whether to use or not this information, and how.<\/p>\ngetInboundDependencies\n<p>isValid<\/p>\n<p>getContext<\/p>\n<p>reactionReady<\/p>\n<p>This method is called by the <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> once the <code> Reaction <\/code> whose this <code> Condition <\/code> belongs to is the next one to be executed, and all its conditions passed (namely, the next operation will be the reaction execution). It can be used to perform sanity checks, as well as for registering the status of the simulated world for future comparisons. Defaults to an empty implementation.<\/p>\n"
                      }]
                    },
                    "route": {
                      "ownKey": "route",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/route",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/route"
                        },
                        "description": "",
                        "title": "Route",
                        "content": "<p>length<\/p>\n<p>stream<\/p>\n<p>getPoint<\/p>\n<p>size<\/p>\n<p>getPoints<\/p>\n"
                      }]
                    },
                    "circulardeformablecell": {
                      "ownKey": "circulardeformablecell",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/circulardeformablecell",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/circulardeformablecell"
                        },
                        "description": "",
                        "title": "CircularDeformableCell",
                        "content": "<p>Implements a circular deformable cell.<\/p>getMaxRadius\n<p>getMaxDiameter<\/p>\n"
                      }]
                    },
                    "ilsaaction": {
                      "ownKey": "ilsaaction",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/ilsaaction",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/ilsaaction"
                        },
                        "description": "",
                        "title": "ILsaAction",
                        "content": "<p>cloneAction<\/p>\n<p>getOutboundDependencies<\/p>\n<p>setExecutionContext<\/p>\n<p>Sets the context in which this action will execute.<\/p>\n"
                      }]
                    },
                    "ilsamolecule": {
                      "ownKey": "ilsamolecule",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/ilsamolecule",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/ilsamolecule"
                        },
                        "description": "",
                        "title": "ILsaMolecule",
                        "content": "<p>moreGenericOf<\/p>\n<p>hasDuplicateVariables<\/p>\n<p>isIstance<\/p>\n<p>toHashString<\/p>\n<p>isIdenticalTo<\/p>\n<p>size<\/p>\n<p>allocateVar<\/p>\n<p>argsNumber<\/p>\n<p>getArg<\/p>\n<p>generalize<\/p>\n<p>matches<\/p>\n<p>matches<\/p>\n"
                      }]
                    },
                    "molecule": {
                      "ownKey": "molecule",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/molecule",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/molecule"
                        },
                        "description": "",
                        "title": "Molecule",
                        "content": "<p>Interface for a molecule.<\/p>getName\n<p>getId<\/p>\n<p>Allows to access the id of a molecule.<\/p>\n"
                      }]
                    },
                    "neighborhood": {
                      "ownKey": "neighborhood",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/neighborhood",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/neighborhood"
                        },
                        "description": "",
                        "title": "Neighborhood",
                        "content": "<p>The type which describes the concentration of a molecule Interface for a neighborhood. When implementing it in a real class, please remember to correctly implement also the equals method inherited from Object.<\/p>contains\n<p>Verifies if a node is contained inside a neighborhood.<\/p>\ngetCenter\n<p>Allows to access the central node.<\/p>\nisEmpty\n<p>getNeighbors<\/p>\n<p>Allows to directly access every node in the neighborhood. A change of this List will be reflected in the neighborhood.<\/p>\nremove\n<p>add<\/p>\n<p>getNeighborByNumber<\/p>\n<p>Returns the num-th neighbor.<\/p>\nsize\n"
                      }]
                    },
                    "euclideannavigationstrategy": {
                      "ownKey": "euclideannavigationstrategy",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/euclideannavigationstrategy",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/euclideannavigationstrategy"
                        },
                        "description": "",
                        "title": "EuclideanNavigationStrategy",
                        "content": "<p>A  NavigationStrategy  working with euclidean spaces.<\/p>\n"
                      }]
                    },
                    "position": {
                      "ownKey": "position",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/position",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/position"
                        },
                        "description": "",
                        "title": "Position",
                        "content": "<p>An interface to represent a generic coordinates system.<\/p>coordinates\n<p>Allows to get the position as a Number array.<\/p>\ndimensions\n<p>boundingBox<\/p>\n<p>Given a range, produces N coordinates, representing the N opposite\nvertices of the hypercube having the current coordinate as center and\ncircumscribing the N-sphere defined by the range. In the case of two\ndimensional coordinates, it must return the opposite vertices of the\nsquare circumscribing the circle with center in this position and radius\nrange.<\/p>\ngetCoordinate\n<p>Allows to access the value of a coordinate.<\/p>\ndistanceTo\n<p>Computes the distance between this position and another compatible\nposition.<\/p>\nplus\n<p>Considers both positions as vectors, and sums them.<\/p>\nminus\n<p>Considers both positions as vectors, and returns the difference between this position and the passed one.<\/p>\n"
                      }]
                    },
                    "cellnode": {
                      "ownKey": "cellnode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/cellnode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/cellnode"
                        },
                        "description": "",
                        "title": "CellNode",
                        "content": "<p>getJunctionsCount<\/p>\n<p>removeJunction<\/p>\n<p>Remove a junction from this node.<\/p>\ngetNeighborsLinkWithJunction\n<p>Returns a set of ICellNode which are linked with the current node by a junction of the type j.<\/p>\ncontainsJunction\n<p>Return true if a junction is present in the current node, false otherwise. Note: a junction is considered present if the method junction.equals(j) return true.<\/p>\nsetPolarization\n<p>set the polarization versor, e.g. a versor indicating the direction in which the cell will move the next time.<\/p>\ngetJunctions\n<p>getPolarizationVersor<\/p>\n<p>getAllNodesLinkWithJunction<\/p>\n<p>addJunction<\/p>\n<p>Add a junction to the current node.<\/p>\naddPolarization\n<p>add v to the polarization versor inside the cell; useful for considering the combination of various stimuli in a cell.<\/p>\n"
                      }]
                    },
                    "navigationstrategy": {
                      "ownKey": "navigationstrategy",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/navigationstrategy",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/navigationstrategy"
                        },
                        "description": "",
                        "title": "NavigationStrategy",
                        "content": "<p>Defines what a pedestrian should do when in a new room (= environment's area), this is designed\nto be used jointly with a  NavigationAction : the latter defines how to properly move the\npedestrian, while delegating the decision on where to move it to a  NavigationStrategy .<\/p>action\n<p>The  NavigationAction  used to navigate the environment.<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\ninUnexpectedNewRoom\n<p>This is called in place of  inNewRoom  when the pedestrian ends up in an unexpected room while moving.\nBy default, unexpected rooms are treated just like expected ones.<\/p>\n"
                      }]
                    },
                    "objectwithgps": {
                      "ownKey": "objectwithgps",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/objectwithgps",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/objectwithgps"
                        },
                        "description": "",
                        "title": "ObjectWithGPS",
                        "content": "<p>setTrace<\/p>\n"
                      }]
                    },
                    "geoposition": {
                      "ownKey": "geoposition",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/geoposition",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geoposition"
                        },
                        "description": "",
                        "title": "GeoPosition",
                        "content": "<p>Represents a specific point on the Earth's surface.<\/p>getLatitude\n<p>minus<\/p>\n<p>Subtracts the provided <code> GeoPosition <\/code> from this <code> GeoPosition <\/code>.<\/p>\ngetLongitude\n<p>getCoordinate<\/p>\n<p>plus<\/p>\n<p>Adds two <code> GeoPosition <\/code>.<\/p>\n"
                      }]
                    },
                    "euclideanenvironment": {
                      "ownKey": "euclideanenvironment",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/euclideanenvironment",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/euclideanenvironment"
                        },
                        "description": "",
                        "title": "EuclideanEnvironment",
                        "content": "<p>An Euclidean space, where  Position s  P  are valid  Vector s,\nsupporting any concentration type  T .<\/p>origin\n<p>Create a position corresponding to the origin of this environment.<\/p>\nmoveNode\n<p>This method moves a  node  in the environment toward some  direction . If\nnode move is unsupported, it does nothing.\nSubclasses may override this method if they want to change the way a node\nmoves towards some direction. The current implementation internally calls\n{@link #moveNodeToPosition(Node, Position2D)}, as such, overriding that\nmethod may suffice.<\/p>\nmakePosition\n<p>Creates a  Position  compatible with this environment given its  coordinates .<\/p>\n"
                      }]
                    },
                    "navigationaction": {
                      "ownKey": "navigationaction",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/navigationaction",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/navigationaction"
                        },
                        "description": "",
                        "title": "NavigationAction",
                        "content": "<p>A  SteeringAction  allowing a pedestrian to navigate an environment consciously (e.g. without\ngetting stuck in U-shaped obstacles).\nNames are inspired to indoor environments, but this interface works for outdoor ones as well.<\/p>pedestrian\n<p>The pedestrian to move.<\/p>\nenvironment\n<p>The environment the  pedestrian  is into.<\/p>\npedestrianPosition\n<p>The position of the  pedestrian  in the  environment .<\/p>\ncurrentRoom\n<p>The room (= environment's area) the  pedestrian  is into.<\/p>\ndoorsInSight\n<p>crossDoor<\/p>\n<p>Moves the pedestrian across the provided  door , which must be among  doorsInSight .<\/p>\nmoveToFinal\n<p>Moves the pedestrian to the given final  destination , which must be inside  currentRoom .<\/p>\nstop\n<p>Stops moving the pedestrian.<\/p>\n"
                      }]
                    },
                    "gpspoint": {
                      "ownKey": "gpspoint",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/gpspoint",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/gpspoint"
                        },
                        "description": "",
                        "title": "GPSPoint",
                        "content": "<p>addTime<\/p>\n<p>subtractTime<\/p>\n<p>getTime<\/p>\n"
                      }]
                    },
                    "pedestriangroup": {
                      "ownKey": "pedestriangroup",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/pedestriangroup",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/pedestriangroup"
                        },
                        "description": "",
                        "title": "PedestrianGroup",
                        "content": "<p>An alias for a group of pedestrians.<\/p>\n"
                      }]
                    },
                    "layer": {
                      "ownKey": "layer",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/layer",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/layer"
                        },
                        "description": "",
                        "title": "Layer",
                        "content": "<p>Interface for static layer, containing a substance or a molecule with a spatial distribution.<\/p>getValue\n"
                      }]
                    },
                    "steeringaction": {
                      "ownKey": "steeringaction",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/steeringaction",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/steeringaction"
                        },
                        "description": "",
                        "title": "SteeringAction",
                        "content": "<p>Action whose purpose is moving a node inside the environment it is in.<\/p>nextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\n"
                      }]
                    },
                    "vehicle": {
                      "ownKey": "vehicle",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/vehicle",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/vehicle"
                        },
                        "description": "",
                        "title": "Vehicle",
                        "content": "<p>BIKE<\/p>\n<p>CAR<\/p>\n<p>FOOT<\/p>\n<p>HIKE<\/p>\n<p>MOUNTAN_BIKE<\/p>\n<p>MOTORCYCLE<\/p>\n<p>RACING_BIKE<\/p>\n<p>WHEELCHAIR<\/p>\n<p>getEncoder<\/p>\n"
                      }]
                    },
                    "steeringstrategy": {
                      "ownKey": "steeringstrategy",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/steeringstrategy",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/steeringstrategy"
                        },
                        "description": "",
                        "title": "SteeringStrategy",
                        "content": "<p>Strategy interface describing how the next points of the steering actions\nare combined to calculate the next position to move on.<\/p>computeNextPosition\n<p>Computes the next position starting from the steering actions the pedestrian obey to,\nin relative coordinates with respect to its current position.<\/p>\ncomputeTarget\n<p>Computes the target to reach starting from the steering actions the pedestrian obey to,\nin absolute coordinates.<\/p>\n"
                      }]
                    },
                    "steeringactionwithtarget": {
                      "ownKey": "steeringactionwithtarget",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/steeringactionwithtarget",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/steeringactionwithtarget"
                        },
                        "description": "",
                        "title": "SteeringActionWithTarget",
                        "content": "<p>A  SteeringAction  with a defined target.<\/p>target\n<p>The position the owner of this action moves towards, in absolute coordinates.<\/p>\n"
                      }]
                    },
                    "cognitivepedestrian": {
                      "ownKey": "cognitivepedestrian",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/cognitivepedestrian",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/cognitivepedestrian"
                        },
                        "description": "",
                        "title": "CognitivePedestrian",
                        "content": "<p>An heterogeneous pedestrian with cognitive capabilities too.<\/p>targetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                      }]
                    },
                    "orientingpedestrian": {
                      "ownKey": "orientingpedestrian",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/orientingpedestrian",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/orientingpedestrian"
                        },
                        "description": "",
                        "title": "OrientingPedestrian",
                        "content": "<p>A pedestrian capable of orienting itself.<\/p>targetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                      }]
                    },
                    "groupsteeringaction": {
                      "ownKey": "groupsteeringaction",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/groupsteeringaction",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/groupsteeringaction"
                        },
                        "description": "",
                        "title": "GroupSteeringAction",
                        "content": "<p>Steering action caused by a group of pedestrians.<\/p>group\n<p>The list of pedestrians used to compute the group steering action.<\/p>\n"
                      }]
                    },
                    "timedroute": {
                      "ownKey": "timedroute",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/timedroute",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/timedroute"
                        },
                        "description": "",
                        "title": "TimedRoute",
                        "content": "<p>Route with total trip time to cross it.<\/p>getTripTime\n"
                      }]
                    },
                    "benchmarkableenvironment": {
                      "ownKey": "benchmarkableenvironment",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/benchmarkableenvironment",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/benchmarkableenvironment"
                        },
                        "description": "",
                        "title": "BenchmarkableEnvironment",
                        "content": "<p>An environment which provides a mean to get infos about its performances.<\/p>enableBenchmark\n<p>Call this method to tell this environment that it should record its performances. Please note that some environments might ignore this message if this method is not called before starting using the environment itself.<\/p>\ngetBenchmarkResult\n"
                      }]
                    },
                    "ilsacondition": {
                      "ownKey": "ilsacondition",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/ilsacondition",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/ilsacondition"
                        },
                        "description": "",
                        "title": "ILsaCondition",
                        "content": "<p>cloneCondition<\/p>\n<p>getNode<\/p>\n<p>filter<\/p>\n<p>When this method is called, the condition must filter the current matches and allowed nodes.<\/p>\n"
                      }]
                    },
                    "reaction": {
                      "ownKey": "reaction",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/reaction",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/reaction"
                        },
                        "description": "",
                        "title": "Reaction",
                        "content": "<p>initializationComplete<\/p>\n<p>This method is called when the environment has completed its initialization. Can be used by this reaction to compute its next execution time - in case such computation requires an inspection of the environment.<\/p>\ngetOutputContext\n<p>cloneOnNewNode<\/p>\n<p>This method allows to clone this reaction on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetOutboundDependencies\n<p>getConditions<\/p>\n<p>getTau<\/p>\n<p>execute<\/p>\n<p>Executes the reactions.<\/p>\nupdate\n<p>Updates the scheduling of this reaction.<\/p>\ncanExecute\n<p>getNode<\/p>\n<p>getTimeDistribution<\/p>\n<p>getInputContext<\/p>\n<p>setConditions<\/p>\n<p>Sets the <code> Condition <\/code>s list. Some implementations may not allow to change it at runtime.<\/p>\ngetActions\n<p>getInboundDependencies<\/p>\n<p>getRate<\/p>\n<p>Returns the speed of this <code> Reaction <\/code>. It is an average number, and can potentially change during the simulation, depending on the implementation.<\/p>\nsetActions\n<p>Sets the <code> Action <\/code>s list. Some implementations may not allow to change it at runtime.<\/p>\n"
                      }]
                    },
                    "groupwithleader": {
                      "ownKey": "groupwithleader",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/groupwithleader",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/groupwithleader"
                        },
                        "description": "",
                        "title": "GroupWithLeader",
                        "content": "<p>A group with a special member acting as a leader.<\/p>leader\n<p>The leader of the group.<\/p>\n"
                      }]
                    },
                    "concentration": {
                      "ownKey": "concentration",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/concentration",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/concentration"
                        },
                        "description": "",
                        "title": "Concentration",
                        "content": "<p>This interface is a wrapper for concentrations.<\/p>getContent\n<p>Allows to access the content of the concentration.<\/p>\n"
                      }]
                    },
                    "movestrategies": {
                      "ownKey": "movestrategies",
                      "childrenPages": {
                        "speedselectionstrategy": {
                          "ownKey": "speedselectionstrategy",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/movestrategies/speedselectionstrategy",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/movestrategies/speedselectionstrategy"
                            },
                            "description": "",
                            "title": "SpeedSelectionStrategy",
                            "content": "<p>Given the current target <code> Position <\/code>, this strategy interface computes the current <code> it.unibo.alchemist.model.interfaces.Node <\/code>'s speed.<\/p>getNodeMovementLength\n"
                          }]
                        },
                        "targetselectionstrategy": {
                          "ownKey": "targetselectionstrategy",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/movestrategies/targetselectionstrategy",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/movestrategies/targetselectionstrategy"
                            },
                            "description": "",
                            "title": "TargetSelectionStrategy",
                            "content": "<p>This interface models a strategy for selecting positions where to move.<\/p>getTarget\n"
                          }]
                        },
                        "routingstrategy": {
                          "ownKey": "routingstrategy",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/movestrategies/routingstrategy",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/movestrategies/routingstrategy"
                            },
                            "description": "",
                            "title": "RoutingStrategy",
                            "content": "<p>Strategy interface describing how the routing between two points happens.<\/p>computeRoute\n<p>Computes a route between two positions.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/movestrategies",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/movestrategies"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.interfaces.movestrategies",
                        "content": "<p>RoutingStrategy<\/p>\n<p>Strategy interface describing how the routing between two points happens.<\/p>\nTargetSelectionStrategy\n<p>This interface models a strategy for selecting positions where to move.<\/p>\nSpeedSelectionStrategy\n<p>Given the current target <code> Position <\/code>, this strategy interface computes the current <code> it.unibo.alchemist.model.interfaces.Node <\/code>'s speed.<\/p>\n"
                      }]
                    },
                    "environmentsupportingdeformablecells": {
                      "ownKey": "environmentsupportingdeformablecells",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/environmentsupportingdeformablecells",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environmentsupportingdeformablecells"
                        },
                        "description": "",
                        "title": "EnvironmentSupportingDeformableCells",
                        "content": "<p><code> Environment <\/code> supporting deformable cells.<\/p>getMaxDiameterAmongCircularDeformableCells\n"
                      }]
                    },
                    "cellwithcirculararea": {
                      "ownKey": "cellwithcirculararea",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/cellwithcirculararea",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/cellwithcirculararea"
                        },
                        "description": "",
                        "title": "CellWithCircularArea",
                        "content": "<p>Implements a cell with a defined volume.<\/p>getDiameter\n<p>getRadius<\/p>\n"
                      }]
                    },
                    "obstacle2d": {
                      "ownKey": "obstacle2d",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/obstacle2d",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/obstacle2d"
                        },
                        "description": "",
                        "title": "Obstacle2D",
                        "content": "<p>An <code> Obstacle <\/code> in a bidimensional space.<\/p>\n"
                      }]
                    },
                    "environment": {
                      "ownKey": "environment",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/environment",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environment"
                        },
                        "description": "",
                        "title": "Environment",
                        "content": "<p>Interface for an environment. Every environment must implement this specification.<\/p>addLayer\n<p>Add a <code> Layer <\/code> to the <code> Environment <\/code>.<\/p>\ngetLayers\n<p>Return all the Layers in this <code> Environment <\/code>.<\/p>\nsetSimulation\n<p>getSize<\/p>\n<p>This method returns the size of the environment as an array of length <code> #getDimensions() <\/code>. This method must return distance measured with the same unit used by the positions. No non-euclidean distance metrics are allowed.<\/p>\ngetDistanceBetweenNodes\n<p>Measures the distance between two nodes in the environment.<\/p>\ngetNodesWithinRange\n<p>Given a node (center) this method returns a list of all the surroundings nodes within the given range. Note that this method (depending on the implementation) might be not optimized and it's consequently <b>much<\/b> better to use <code> Environment#getNeighborhood(Node) <\/code> and filter the neighborhood if you are sure that all the nodes within the range are connected to the center.<\/p>\ngetNodesWithinRange\n<p>Given a <code> Position <\/code>(center) this method returns a list of all the surroundings nodes within the given range. Note that this method (depending on the implementation) might be not optimized.<\/p>\nmoveNodeToPosition\n<p>This method moves a node in the environment to some position. If node move is unsupported, it does nothing.<\/p>\ngetLinkingRule\n<p>setIncarnation<\/p>\n<p>removeNode<\/p>\n<p>This method allows to remove a node. If node removal is unsupported, it does nothing.<\/p>\nsetLinkingRule\n<p>getOffset<\/p>\n<p>This method allows to know which are the smallest coordinates represented.<\/p>\ngetIncarnation\n<p>getNeighborhood<\/p>\n<p>Given a node, this method returns its neighborhood.<\/p>\ngetSimulation\n<p>getNodesNumber<\/p>\n<p>isTerminated<\/p>\n<p>getNodeByID<\/p>\n<p>Allows to access a node known its id. Depending on the implementation, this method may or not be optimized (namely, id could run in constant or linear time with the number of nodes).<\/p>\ngetPosition\n<p>Calculates the position of a node.<\/p>\ngetDimensions\n<p>The number of dimensions of this environment.<\/p>\ngetNodes\n<p>All the nodes that exist in current environment.<\/p>\naddTerminator\n<p>getSizeInDistanceUnits<\/p>\n<p>This method returns the size of the environment as an array of length <code> #getDimensions() <\/code>. This method must return distance measured with the same unit used for measuring distances. It may or may not return the same result of <code> #getSize() <\/code><\/p>\ngetLayer\n<p>Get the layer associate to the given molecule. If no Layer is associated with the given molecule, return an empty optional.<\/p>\nmakePosition\n<p>addNode<\/p>\n<p>This method allows to add a new node to this environment. The environment is responsible to call the right method of the simulation in order to ensure that the reaction is properly scheduled.<\/p>\n"
                      }]
                    },
                    "nodes": {
                      "ownKey": "nodes",
                      "childrenPages": {"nodewithshape": {
                        "ownKey": "nodewithshape",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/nodes/nodewithshape",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/nodes/nodewithshape"
                          },
                          "description": "",
                          "title": "NodeWithShape",
                          "content": "<p>A node with a  shape .<\/p>shape\n<p>The shape of the node.<\/p>\n"
                        }]
                      }},
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/nodes",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/nodes"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.interfaces.nodes",
                        "content": "<p>NodeWithShape<\/p>\n<p>A node with a  shape .<\/p>\n"
                      }]
                    },
                    "gpstrace": {
                      "ownKey": "gpstrace",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/gpstrace",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/gpstrace"
                        },
                        "description": "",
                        "title": "GPSTrace",
                        "content": "<p>getFinalPosition<\/p>\n<p>getPreviousPosition<\/p>\n<p>interpolate<\/p>\n<p>getInitialPosition<\/p>\n<p>startAt<\/p>\n<p>getStartTime<\/p>\n<p>getFinalTime<\/p>\n<p>getNextPosition<\/p>\n"
                      }]
                    },
                    "pedestrian2d": {
                      "ownKey": "pedestrian2d",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/pedestrian2d",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/pedestrian2d"
                        },
                        "description": "",
                        "title": "Pedestrian2D",
                        "content": "<p>The bidimensional representation of a pedestrian.<\/p>environment\n<p>Access to the  environment .<\/p>\nshape\n<p>The shape of any pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  Euclidean2DShape s.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\nPedestrian2D\n<p>The bidimensional representation of a pedestrian.<\/p>\n"
                      }]
                    },
                    "ilsanode": {
                      "ownKey": "ilsanode",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/ilsanode",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/ilsanode"
                        },
                        "description": "",
                        "title": "ILsaNode",
                        "content": "<p>Interface for an LSA Node. Avoids the crappy casts.<\/p>setConcentration\n<p>Adds an instance of ILsaMolecule in the node's LsaSpace.<\/p>\nremoveConcentration\n<p>Deletes an ILsaMolecule from the Node LsaSpace Warning: the method removes only the first matched ILsaMolecule.<\/p>\ngetConcentration\n<p>getLsaSpace<\/p>\n"
                      }]
                    },
                    "euclideannavigationaction": {
                      "ownKey": "euclideannavigationaction",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/euclideannavigationaction",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/euclideannavigationaction"
                        },
                        "description": "",
                        "title": "EuclideanNavigationAction",
                        "content": "<p>A  NavigationAction  working with euclidean spaces.<\/p>\n"
                      }]
                    },
                    "geometry": {
                      "ownKey": "geometry",
                      "childrenPages": {
                        "euclidean2d": {
                          "ownKey": "euclidean2d",
                          "childrenPages": {
                            "euclidean2dshapefactory": {
                              "ownKey": "euclidean2dshapefactory",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dshapefactory",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dshapefactory"
                                },
                                "description": "",
                                "title": "Euclidean2DShapeFactory",
                                "content": "<p>Defines a factory of  GeometricShape  for a bidimensional euclidean space.<\/p>circle\n<p>A circle extends in the first and second axis by its diameter.<\/p>\nrectangle\n<p>A rectangle extends in the first and second axis by its width and height.<\/p>\ncircleSector\n<p>A circle sector is the portion of a disk enclosed by two radii and an arc\nand it extends in the first and second axis by its radius and angle.<\/p>\n"
                              }]
                            },
                            "intersection2d": {
                              "ownKey": "intersection2d",
                              "childrenPages": {
                                "line": {
                                  "ownKey": "line",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/line",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/line"
                                    },
                                    "description": "",
                                    "title": "Line",
                                    "content": "<p>Objects intersect as a line.<\/p>\n"
                                  }]
                                },
                                "multiplepoints": {
                                  "ownKey": "multiplepoints",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/multiplepoints",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/multiplepoints"
                                    },
                                    "description": "",
                                    "title": "MultiplePoints",
                                    "content": "<p>Objects intersect in multiple  points .<\/p>points\n<p><init><\/p>\n<p>Objects intersect in multiple  points .<\/p>\n"
                                  }]
                                },
                                "segment": {
                                  "ownKey": "segment",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/segment",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/segment"
                                    },
                                    "description": "",
                                    "title": "Segment",
                                    "content": "<p>Objects intersect in a  segment .<\/p>segment\n<p><init><\/p>\n<p>Objects intersect in a  segment .<\/p>\n"
                                  }]
                                },
                                "none": {
                                  "ownKey": "none",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/none",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/none"
                                    },
                                    "description": "",
                                    "title": "None",
                                    "content": "<p>Objects do not intersect.<\/p>\n"
                                  }]
                                },
                                "singlepoint": {
                                  "ownKey": "singlepoint",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/singlepoint",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/singlepoint"
                                    },
                                    "description": "",
                                    "title": "SinglePoint",
                                    "content": "<p>Objects intersect in a single  point .<\/p>point\n<p><init><\/p>\n<p>Objects intersect in a single  point .<\/p>\n"
                                  }]
                                }
                              },
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d"
                                },
                                "description": "",
                                "title": "Intersection2D",
                                "content": "<p>Describes the result an intersection operation in an euclidean 2D space.\nType  V  must extend  Vector2D .\nThe requirement is not explicitly enforced to allow the class to work covariantly.<\/p>\n"
                              }]
                            },
                            "navigator": {
                              "ownKey": "navigator",
                              "childrenPages": {"extendableconvexpolygon": {
                                "ownKey": "extendableconvexpolygon",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/navigator/extendableconvexpolygon",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/navigator/extendableconvexpolygon"
                                  },
                                  "description": "",
                                  "title": "ExtendableConvexPolygon",
                                  "content": "<p>A sophisticated  MutableConvexPolygon .<\/p>advanceEdge\n<p>Advances an edge in its normal direction.<\/p>\nextend\n<p>Extends the polygon in each direction: each edge is given a chance to advance.<\/p>\n"
                                }]
                              }},
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/navigator",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/navigator"
                                },
                                "description": "",
                                "title": "it.unibo.alchemist.model.interfaces.geometry.euclidean2d.navigator",
                                "content": "<p>ExtendableConvexPolygon<\/p>\n<p>A sophisticated  MutableConvexPolygon .<\/p>\n"
                              }]
                            },
                            "segment2d": {
                              "ownKey": "segment2d",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/segment2d",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/segment2d"
                                },
                                "description": "",
                                "title": "Segment2D",
                                "content": "<p>Defines a segment from  first  to  second  in an euclidean bidimensional space.<\/p>first\n<p>First point.<\/p>\nsecond\n<p>Second point.<\/p>\nintercept\n<p>The intercept of the line passing through  first  and  second .<\/p>\nisDegenerate\n<p>A segment is degenerate if its points coincide.<\/p>\nisHorizontal\n<p>Indicates if the segment is aligned to the x axis.<\/p>\nisVertical\n<p>Indicates if the segment is aligned to the y axis.<\/p>\nisAlignedToAnyAxis\n<p>Indicates if the segment is axis-aligned.<\/p>\nlength\n<p>The length of the segment.<\/p>\nslope\n<p>The slope of the segment. If the two points coincide, this is Double.NaN.<\/p>\nmidPoint\n<p>The medium point of the segment.<\/p>\nclosestPointTo\n<p>Finds the point of the segment which is closest to the provided position.<\/p>\ncopyWith\n<p>Creates a copy of this Segment2D using the specified  first  and  second  points.<\/p>\ncontains\n<p>Checks if the segment contains a  point . Doubles are not directly compared,\n<a href=\"#\">MathUtils.fuzzyEquals<\/a> is used instead.<\/p>\ndistanceTo\n<p>Computes the distance between the segment and a given  point .<\/p>\ndistanceTo\n<p>Computes the (minimum) distance between two segments.<\/p>\nintersectAsLines\n<p>Finds the intersection of two lines represented by segments.\nDegenerate segments (of zero\nlength) are not supported.<\/p>\nintersectSegment\n<p>Finds the intersection point of two given segments. This method is able to deal with degenerate\nand collinear segments.<\/p>\nisCollinearWith\n<p>Determines if a segment built from the  second  point of this segment to the provided  point \nis collinear (forms a line) with this segment.<\/p>\nisInRectangle\n<p>Checks whether this segment is inside a rectangular region described by an  origin \npoint and  width  and  height  values (must be positive).<\/p>\nshrunk\n<p>toRange<\/p>\n<p>Maps the segment a ClosedRange, this is done by extracting either the X coordinates or\nthe Y coordinates of the two endpoints of the segment.  getXCoords  indicates which pair\nof coordinates should be extracted.\nThis can be useful e.g. to represent portions of axis-aligned segments without creating\nnew ones.<\/p>\ntoVector\n"
                              }]
                            },
                            "euclidean2dconvexshape": {
                              "ownKey": "euclidean2dconvexshape",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dconvexshape",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dconvexshape"
                                },
                                "description": "",
                                "title": "Euclidean2DConvexShape",
                                "content": "<p>A convex euclidean shape in a bidimensional environment.<\/p>\n"
                              }]
                            },
                            "euclidean2dshape": {
                              "ownKey": "euclidean2dshape",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dshape",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dshape"
                                },
                                "description": "",
                                "title": "Euclidean2DShape",
                                "content": "<p>Defines an euclidean shape in a bidimensional space.<\/p>\n"
                              }]
                            },
                            "graph": {
                              "ownKey": "graph",
                              "childrenPages": {
                                "euclidean2dpassage": {
                                  "ownKey": "euclidean2dpassage",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/euclidean2dpassage",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/euclidean2dpassage"
                                    },
                                    "description": "",
                                    "title": "Euclidean2DPassage",
                                    "content": "<p>A passage between two  ConvexPolygon s in an euclidean bidimensional space.\nThe passage is oriented, which means it connects  tail  to  head , but the opposite is\nnot necessarily true.\n tail  and  head  can be non-adjacent (there can be some distance between them), this\nintroduces navigation issues as agents may not know which direction to follow when\ncrossing a passage.\n passageShapeOnTail  is a  Segment2D  representing the shape of the passage on  tail 's\nboundary (e.g. in an indoor environment, the segment should represent the shape of the\ndoor between two rooms).  passageShapeOnTail  must be determined so as to guarantee that\n head  is reachable by throwing a ray from any point of the segment in its normal direction.\nThis solves navigation issues as it provides agents with a direction to follow when crossing\n Euclidean2DPassage s (namely, the normal direction to  passageShapeOnTail ).<\/p>tail\n<p>head<\/p>\n<p>passageShapeOnTail<\/p>\n<p><init><\/p>\n<p>A passage between two  ConvexPolygon s in an euclidean bidimensional space.\nThe passage is oriented, which means it connects  tail  to  head , but the opposite is\nnot necessarily true.\n tail  and  head  can be non-adjacent (there can be some distance between them), this\nintroduces navigation issues as agents may not know which direction to follow when\ncrossing a passage.\n passageShapeOnTail  is a  Segment2D  representing the shape of the passage on  tail 's\nboundary (e.g. in an indoor environment, the segment should represent the shape of the\ndoor between two rooms).  passageShapeOnTail  must be determined so as to guarantee that\n head  is reachable by throwing a ray from any point of the segment in its normal direction.\nThis solves navigation issues as it provides agents with a direction to follow when crossing\n Euclidean2DPassage s (namely, the normal direction to  passageShapeOnTail ).<\/p>\ncrossingPointOnTail\n<p>Provided the  position  of an agent that may want to cross this passage, this method\ncomputes the point belonging to  passageShapeOnTail  which is more convenient to\ncross.\nNote that the agent must be inside  tail .<\/p>\ncrossingPointOnHead\n<p>Provided the  crossingPointOnTail  that an agent has reached (or will reach), this\nmethod computes the point belonging to the boundary of  head  that the agent should\npoint towards to cross the passage (i.e. the first point belonging to  head 's boundary\nthat is encountered when throwing a ray from  crossingPointOnTail  along  passageShapeOnTail 's\nnormal direction).\nNote that the returned point may not be formally contained in  head  depending on the\ndefinition of insideness used by  ConvexPolygon.contains , prefer using\n ConvexPolygon.containsBoundaryIncluded .<\/p>\ncrossingPoints\n<p>Provided the  position  of an agent that may want to cross this passage, this method\nreturns a pair containing both the  crossingPointOnTail  and the  crossingPointOnHead .<\/p>\n"
                                  }]
                                },
                                "euclidean2dnavigationgraph": {
                                  "ownKey": "euclidean2dnavigationgraph",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/euclidean2dnavigationgraph",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/euclidean2dnavigationgraph"
                                    },
                                    "description": "",
                                    "title": "Euclidean2DNavigationGraph",
                                    "content": "<p>A  NavigationGraph  in an euclidean bidimensional space, whose nodes are  ConvexPolygon s\nand edges are  Euclidean2DPassage s. Using  Euclidean2DPassage s as edges leads to some\noverhead (as these maintain the nodes they connect, when this information is already stored\nin the navigation graph), but allows to have duplicate edges in opposite directions, which\nmeans a node n1 can be connected to another node n2 through a passage whose shape is equal\nto the one of the passage connecting n2 to n1. The two passages would not result equal\nbecause their tail and head would be swapped. On the contrary, if edges were plain segments,\nthe graph would not have allowed to have two edges so that e1.equal(e2).<\/p>\n"
                                  }]
                                },
                                "navigationgraph": {
                                  "ownKey": "navigationgraph",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/navigationgraph",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/navigationgraph"
                                    },
                                    "description": "",
                                    "title": "NavigationGraph",
                                    "content": "<p>A graph used for navigation purposes. Nodes are  ConvexGeometricShape s,\nusually representing portions of an environment which are traversable by\nagents (the advantage of such representation is that agents can freely\nwalk around within a convex area, as it is guaranteed that no obstacle\nwill be found).\nNote that implementations of this graph must guarantee predictable\nordering for the collections they maintain, as reproducibility is a key\nfeature of Alchemist.\nBe also aware that, by contract, the <a href=\"#\">org.jgrapht.Graph<\/a> interface does\nnot allow duplicated edges (see <a href=\"#\">org.jgrapht.Graph.addEdge<\/a>).<\/p>nodeContaining\n"
                                  }]
                                }
                              },
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph"
                                },
                                "description": "",
                                "title": "it.unibo.alchemist.model.interfaces.geometry.euclidean2d.graph",
                                "content": "<p>Euclidean2DPassage<\/p>\n<p>A passage between two  ConvexPolygon s in an euclidean bidimensional space.\nThe passage is oriented, which means it connects  tail  to  head , but the opposite is\nnot necessarily true.\n tail  and  head  can be non-adjacent (there can be some distance between them), this\nintroduces navigation issues as agents may not know which direction to follow when\ncrossing a passage.\n passageShapeOnTail  is a  Segment2D  representing the shape of the passage on  tail 's\nboundary (e.g. in an indoor environment, the segment should represent the shape of the\ndoor between two rooms).  passageShapeOnTail  must be determined so as to guarantee that\n head  is reachable by throwing a ray from any point of the segment in its normal direction.\nThis solves navigation issues as it provides agents with a direction to follow when crossing\n Euclidean2DPassage s (namely, the normal direction to  passageShapeOnTail ).<\/p>\nNavigationGraph\n<p>A graph used for navigation purposes. Nodes are  ConvexGeometricShape s,\nusually representing portions of an environment which are traversable by\nagents (the advantage of such representation is that agents can freely\nwalk around within a convex area, as it is guaranteed that no obstacle\nwill be found).\nNote that implementations of this graph must guarantee predictable\nordering for the collections they maintain, as reproducibility is a key\nfeature of Alchemist.\nBe also aware that, by contract, the <a href=\"#\">org.jgrapht.Graph<\/a> interface does\nnot allow duplicated edges (see <a href=\"#\">org.jgrapht.Graph.addEdge<\/a>).<\/p>\nEuclidean2DNavigationGraph\n<p>A  NavigationGraph  in an euclidean bidimensional space, whose nodes are  ConvexPolygon s\nand edges are  Euclidean2DPassage s. Using  Euclidean2DPassage s as edges leads to some\noverhead (as these maintain the nodes they connect, when this information is already stored\nin the navigation graph), but allows to have duplicate edges in opposite directions, which\nmeans a node n1 can be connected to another node n2 through a passage whose shape is equal\nto the one of the passage connecting n2 to n1. The two passages would not result equal\nbecause their tail and head would be swapped. On the contrary, if edges were plain segments,\nthe graph would not have allowed to have two edges so that e1.equal(e2).<\/p>\nEuclidean2DNavigationGraph\n<p>A  NavigationGraph  in an euclidean bidimensional space, whose nodes are  ConvexPolygon s\nand edges are  Euclidean2DPassage s. Using  Euclidean2DPassage s as edges leads to some\noverhead (as these maintain the nodes they connect, when this information is already stored\nin the navigation graph), but allows to have duplicate edges in opposite directions, which\nmeans a node n1 can be connected to another node n2 through a passage whose shape is equal\nto the one of the passage connecting n2 to n1. The two passages would not result equal\nbecause their tail and head would be swapped. On the contrary, if edges were plain segments,\nthe graph would not have allowed to have two edges so that e1.equal(e2).<\/p>\n"
                              }]
                            },
                            "mutableconvexpolygon": {
                              "ownKey": "mutableconvexpolygon",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/mutableconvexpolygon",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/mutableconvexpolygon"
                                },
                                "description": "",
                                "title": "MutableConvexPolygon",
                                "content": "<p>A mutable  ConvexPolygon .<\/p>addVertex\n<p>Adds a vertex to the polygon.<\/p>\nremoveVertex\n<p>Removes a vertex from the polygon.<\/p>\nmoveVertex\n<p>Moves a vertex of the polygon to a new absolute position.<\/p>\nreplaceEdge\n<p>Replaces an edge of the polygon.<\/p>\n"
                              }]
                            },
                            "convexpolygon": {
                              "ownKey": "convexpolygon",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/convexpolygon",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/convexpolygon"
                                },
                                "description": "",
                                "title": "ConvexPolygon",
                                "content": "<p>A simple polygon (i.e. not self-intersecting and without holes) in which no\nline segment between two points on the boundary ever goes outside the polygon.<\/p>vertices\n<p>edges<\/p>\n<p>getEdge<\/p>\n<p>Depending on the implementation, this may be faster than  edges .get( index ).<\/p>\ncontains\n<p>Checks if the polygon contains a vector (= a point). The definition of insideness\nmay vary depending on the implementation, this may affect the outcome for points\nlying on the polygon's boundary. For accurate operations see  containsBoundaryIncluded \nand  containsBoundaryExcluded .<\/p>\ncontains\n<p>Checks if the polygon contains a polygonal <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a> (i.e. without curved\nsegments). A polygonal shape is contained in a polygon if all of its points are\ncontained in (or lie on the boundary of) the latter.<\/p>\nliesOnBoundary\n<p>Checks if a vector (= a point) lies on the polygon's boundary.<\/p>\ncontainsBoundaryIncluded\n<p>Checks if a vector (= a point) is contained in the polygon or lies on its boundary.<\/p>\ncontainsBoundaryExcluded\n<p>Checks if a vector (= a point) is contained in the polygon, boundary excluded.<\/p>\nintersects\n<p>Checks if a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a> intersects the polygon, adjacent shapes are not\nconsidered to be intersecting.<\/p>\nintersects\n<p>Checks if a segment intersects with the polygon, segments lying on the polygon's\nboundary are not considered to be intersecting.<\/p>\nisAdjacentTo\n<p>A polygon is adjacent to another if any of its points lies on the boundary of the other.<\/p>\nisAdjacentTo\n<p>Checks if the polygon is adjacent to a convex polygonal <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>.<\/p>\nclosestEdgeTo\n<p>Finds the edge of the polygon closest to the provided  segment , i.e. the first one\nthat would collide (= intersect) with the segment in case the polygon extended on\neach side.<\/p>\n"
                              }]
                            },
                            "euclidean2dtransformation": {
                              "ownKey": "euclidean2dtransformation",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dtransformation",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dtransformation"
                                },
                                "description": "",
                                "title": "Euclidean2DTransformation",
                                "content": "<p>Defines the possible transformations for a  it.unibo.alchemist.model.interfaces.geometry.GeometricShape  in a\nbidimensional euclidean space.<\/p>rotate\n<p>Counter clockwise rotation.<\/p>\nrotate\n<p>Rotates toward the specified direction.<\/p>\norigin\n<p>Changes origin.<\/p>\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.model.interfaces.geometry.euclidean2d",
                            "content": "<p>ConvexPolygon<\/p>\n<p>A simple polygon (i.e. not self-intersecting and without holes) in which no\nline segment between two points on the boundary ever goes outside the polygon.<\/p>\nEuclidean2DConvexShape\n<p>A convex euclidean shape in a bidimensional environment.<\/p>\nEuclidean2DShape\n<p>Defines an euclidean shape in a bidimensional space.<\/p>\nEuclidean2DShapeFactory\n<p>Defines a factory of  GeometricShape  for a bidimensional euclidean space.<\/p>\nEuclidean2DTransformation\n<p>Defines the possible transformations for a  it.unibo.alchemist.model.interfaces.geometry.GeometricShape  in a\nbidimensional euclidean space.<\/p>\nIntersection2D\n<p>Describes the result an intersection operation in an euclidean 2D space.\nType  V  must extend  Vector2D .\nThe requirement is not explicitly enforced to allow the class to work covariantly.<\/p>\nMutableConvexPolygon\n<p>A mutable  ConvexPolygon .<\/p>\nSegment2D\n<p>Defines a segment from  first  to  second  in an euclidean bidimensional space.<\/p>\nit.unibo.alchemist.model.interfaces.geometry.euclidean2d.graph\n<p>it.unibo.alchemist.model.interfaces.geometry.euclidean2d.navigator<\/p>\n<p>Euclidean2DConvexShape<\/p>\n<p>A convex euclidean shape in a bidimensional environment.<\/p>\nEuclidean2DShape\n<p>Defines an euclidean shape in a bidimensional space.<\/p>\n"
                          }]
                        },
                        "vector2d": {
                          "ownKey": "vector2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/geometry/vector2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/vector2d"
                            },
                            "description": "",
                            "title": "Vector2D",
                            "content": "<p>Bidimensional vector with  x  and  y  coordinates.<\/p>x\n<p>x coordinate.<\/p>\ny\n<p>y coordinate.<\/p>\nasAngle\n<p>Computes the angle with atan2(y, x).<\/p>\ndot\n<p>Dot product between bidimensional vectors.<\/p>\nisInRectangle\n<p>Checks whether the given point is inside a rectangular region described by an  origin \npoint and  width  and  height  values (only positive).<\/p>\nnewFrom\n<p>Creates a new Vector2D with the same type of the current one with different  x  and  y .<\/p>\nminus\n<p>Allows subtraction with a <a href=\"#\">Pair<\/a>.<\/p>\nnormalized\n<p>Normalizes the vector.<\/p>\nplus\n<p>Allows summaction with a <a href=\"#\">Pair<\/a>.<\/p>\nsurroundingPointAt\n<p>Computes a point which is at a certain  distance  and  angle  (in radians) from this one.<\/p>\nsurroundingPointAt\n<p>Computes a point which is at a certain  distance  and angle (expressed as a  versor  centered in this node)\nfrom this one.<\/p>\nsurrounding\n<p>Creates a list of  count  points equally spaced in the circle of given  radius  with center in this vector.<\/p>\nVector2D\n<p>Bidimensional vector with  x  and  y  coordinates.<\/p>\n"
                          }]
                        },
                        "convexgeometricshape": {
                          "ownKey": "convexgeometricshape",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/geometry/convexgeometricshape",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/convexgeometricshape"
                            },
                            "description": "",
                            "title": "ConvexGeometricShape",
                            "content": "<p>A convex  GeometricShape .<\/p><p>This interface models a property instead of an object, this may be\nunusual but consider it as a contract: interfaces are often said to\nbe contracts the implementor has to comply, the contract defined by\nthis interface implies convexity.<\/p>\n"
                          }]
                        },
                        "geometrictransformation": {
                          "ownKey": "geometrictransformation",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/geometry/geometrictransformation",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/geometrictransformation"
                            },
                            "description": "",
                            "title": "GeometricTransformation",
                            "content": "<p>Defines a generic transformation of a generic shape.\nThe operations allowed depend on the space the shape belongs to.\nThis interface is meant to be extended.<\/p>origin\n<p>Performs an absolute translation to the provided position.<\/p>\n"
                          }]
                        },
                        "influencesphere": {
                          "ownKey": "influencesphere",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/geometry/influencesphere",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/influencesphere"
                            },
                            "description": "",
                            "title": "InfluenceSphere",
                            "content": "<p>Area inside which nodes exert an influence on each other.<\/p>influentialNodes\n<p>The list of nodes relevant for this sphere of influence.<\/p>\n"
                          }]
                        },
                        "geometricshapefactory": {
                          "ownKey": "geometricshapefactory",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/geometry/geometricshapefactory",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/geometricshapefactory"
                            },
                            "description": "",
                            "title": "GeometricShapeFactory",
                            "content": "<p>Generic factory for  GeometricShape .<\/p>adimensional\n<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.<\/p>\nrequireCompatible\n<p>Requires that the given shape is compatible with the ones provided by this factory,\notherwise throws an exception.<\/p>\nGeometricShapeFactory\n<p>Generic factory for  GeometricShape .<\/p>\n"
                          }]
                        },
                        "geometricshape": {
                          "ownKey": "geometricshape",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/geometry/geometricshape",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/geometricshape"
                            },
                            "description": "",
                            "title": "GeometricShape",
                            "content": "<p>Models a generic shape.<\/p>diameter\n<p>The largest distance between any pair of vertices.<\/p>\ncentroid\n<p>The geometric center.<\/p>\nintersects\n<p>A shape intersects another if any of its points is contained in the other one.<\/p>\ncontains\n<p>Check if the shape contains a vector.<\/p>\ntransformed\n<p>Transforms the shape.<\/p>\n"
                          }]
                        },
                        "vector": {
                          "ownKey": "vector",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/geometry/vector",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/vector"
                            },
                            "description": "",
                            "title": "Vector",
                            "content": "<p>A generic vector in a multidimensional space.<\/p>dimensions\n<p>The dimensions of the space this vector belongs to.<\/p>\ncoordinates\n<p>Coordinates for a Cartesian space.\nImplementors must guarantee that internal state is not exposed.<\/p>\nmagnitude\n<p>Finds the magnitude of a vector.<\/p>\nget\n<p>The coordinate of this vector in the specified dimension relatively to the basis\nits space is described with.<\/p>\nplus\n<p>Support for sum.\nNote: the dimensions must coincide.<\/p>\nminus\n<p>Support for subtraction.\nNote: the dimensions must coincide.<\/p>\ntimes\n<p>Multiplication by a Double.<\/p>\ndiv\n<p>Division by a Double.<\/p>\ndot\n<p>Computes the dot product between two vectors.<\/p>\nangleBetween\n<p>Computes the angle in radians between two vectors.<\/p>\ndistanceTo\n<p>Computes the distance between two vectors, interpreted as points in an Euclidean\nspace. Throws <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html\">IllegalArgumentException<\/a> if vectors have different dimensions.<\/p>\nresized\n<p>normalized<\/p>\n<p>coerceAtMost<\/p>\n<p>coerceAtLeast<\/p>\n<p>coerceIn<\/p>\n<p>Performs a coercion at least and at most.<\/p>\nnormal\n<p>Find the normal of a vector.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/geometry",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.interfaces.geometry",
                        "content": "<p>ConvexGeometricShape<\/p>\n<p>A convex  GeometricShape .<\/p><p>This interface models a property instead of an object, this may be\nunusual but consider it as a contract: interfaces are often said to\nbe contracts the implementor has to comply, the contract defined by\nthis interface implies convexity.<\/p>\nGeometricShapeFactory\n<p>Generic factory for  GeometricShape .<\/p>\nInfluenceSphere\n<p>Area inside which nodes exert an influence on each other.<\/p>\nGeometricShape\n<p>Models a generic shape.<\/p>\nGeometricTransformation\n<p>Defines a generic transformation of a generic shape.\nThe operations allowed depend on the space the shape belongs to.\nThis interface is meant to be extended.<\/p>\nVector\n<p>A generic vector in a multidimensional space.<\/p>\nVector2D\n<p>Bidimensional vector with  x  and  y  coordinates.<\/p>\nit.unibo.alchemist.model.interfaces.geometry.euclidean2d\n"
                      }]
                    },
                    "pedestrian": {
                      "ownKey": "pedestrian",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/pedestrian",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/pedestrian"
                        },
                        "description": "",
                        "title": "Pedestrian",
                        "content": "<p>A pedestrian with any characteristic taken into consideration.<\/p>membershipGroup\n<p>The group this pedestrian belongs to.<\/p>\nspeed\n<p>The speed at which the pedestrian is moving.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                      }]
                    },
                    "time": {
                      "ownKey": "time",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/time",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/time"
                        },
                        "description": "",
                        "title": "Time",
                        "content": "<p>Interface for time representation.<\/p>ZERO\n<p>Initial time.<\/p>\nINFINITY\n<p>Indefinitely future time.<\/p>\ntoDouble\n<p>Allows to get a double representation of this <code> Time <\/code>.<\/p>\ntimes\n<p>Allows to multiply this <code> Time <\/code> for a constant.<\/p>\nisInfinite\n<p>Verifies if the <code> Time <\/code> is set at infinite, namely if the event will never happen.<\/p>\nminus\n<p>Allows to subtract a <code> Time <\/code> to this <code> Time <\/code>.<\/p>\nplus\n<p>Allows to add a <code> Time <\/code> to this <code> Time <\/code>.<\/p>\nplus\n<p>Plus operator for  Time  and Double.<\/p>\nminus\n<p>Minus operator for  Time  and Double.<\/p>\n"
                      }]
                    },
                    "incarnation": {
                      "ownKey": "incarnation",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/incarnation",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/incarnation"
                        },
                        "description": "",
                        "title": "Incarnation",
                        "content": "<p>createNode<\/p>\n<p>createCondition<\/p>\n<p>createTimeDistribution<\/p>\n<p>createReaction<\/p>\n<p>createConcentration<\/p>\n<p>Creates a new concentration object of a specific concrete type.<\/p>\ncreateAction\n<p>createMolecule<\/p>\n<p>Parses a <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/String.html\">String<\/a><\/code>, and provides a <code> Molecule <\/code>.<\/p>\ngetProperty\n<p>Given an <code> Node <\/code>, an <code> Molecule <\/code> and a property expressed as a <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/String.html\">String<\/a><\/code>, returns a numeric value. If a numeric value is not deducible, Double.NaN is returned.<\/p>\n"
                      }]
                    },
                    "orientingcognitivepedestrian": {
                      "ownKey": "orientingcognitivepedestrian",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/interfaces/orientingcognitivepedestrian",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/orientingcognitivepedestrian"
                        },
                        "description": "",
                        "title": "OrientingCognitivePedestrian",
                        "content": "<p>A heterogeneous pedestrian with cognitive and orienting capabilities.<\/p>targetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/model/interfaces",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.model.interfaces",
                    "content": "<p>CognitivePedestrian<\/p>\n<p>An heterogeneous pedestrian with cognitive capabilities too.<\/p>\nEuclideanNavigationAction\n<p>A  NavigationAction  working with euclidean spaces.<\/p>\nEuclideanNavigationStrategy\n<p>A  NavigationStrategy  working with euclidean spaces.<\/p>\nGroup\n<p>A group of nodes.<\/p>\nGroupSteeringAction\n<p>Steering action caused by a group of pedestrians.<\/p>\nGroupWithLeader\n<p>A group with a special member acting as a leader.<\/p>\nHeterogeneousPedestrian\n<p>An heterogeneous pedestrian is a pedestrian where individual characteristics are taken into consideration.<\/p>\nNavigationAction\n<p>A  SteeringAction  allowing a pedestrian to navigate an environment consciously (e.g. without\ngetting stuck in U-shaped obstacles).\nNames are inspired to indoor environments, but this interface works for outdoor ones as well.<\/p>\nNavigationStrategy\n<p>Defines what a pedestrian should do when in a new room (= environment's area), this is designed\nto be used jointly with a  NavigationAction : the latter defines how to properly move the\npedestrian, while delegating the decision on where to move it to a  NavigationStrategy .<\/p>\nOrientingCognitivePedestrian\n<p>A heterogeneous pedestrian with cognitive and orienting capabilities.<\/p>\nOrientingPedestrian\n<p>A pedestrian capable of orienting itself.<\/p>\nPedestrian\n<p>A pedestrian with any characteristic taken into consideration.<\/p>\nPedestrian2D\n<p>The bidimensional representation of a pedestrian.<\/p>\nPedestrianGroup\n<p>An alias for a group of pedestrians.<\/p>\nSteeringAction\n<p>Action whose purpose is moving a node inside the environment it is in.<\/p>\nSteeringActionWithTarget\n<p>A  SteeringAction  with a defined target.<\/p>\nSteeringStrategy\n<p>Strategy interface describing how the next points of the steering actions\nare combined to calculate the next position to move on.<\/p>\nEnvironmentWithObstacles\n<p>An environment with  Obstacle s.<\/p>\nEuclideanEnvironment\n<p>An Euclidean space, where  Position s  P  are valid  Vector s,\nsupporting any concentration type  T .<\/p>\nObstacle\n<p>A generic obstacle in a vector space.<\/p>\nPosition\n<p>An interface to represent a generic coordinates system.<\/p>\nPosition2D\n<p>A bidimensional position.<\/p>\nVisibleNode\n<p>Represents a node seen by the  it.unibo.alchemist.model.implementations.actions.See  action.<\/p>\nObstacle2D\n<p>An <code> Obstacle <\/code> in a bidimensional space.<\/p>\nRoute\n<p>CircularDeformableCell<\/p>\n<p>Implements a circular deformable cell.<\/p>\nEnvironmentNode\n<p>CellWithCircularArea<\/p>\n<p>Implements a cell with a defined volume.<\/p>\nEnvironmentSupportingDeformableCells\n<p><code> Environment <\/code> supporting deformable cells.<\/p>\nCellNode\n<p>ILsaMolecule<\/p>\n<p>ILsaAction<\/p>\n<p>ILsaNode<\/p>\n<p>Interface for an LSA Node. Avoids the crappy casts.<\/p>\nILsaCondition\n<p>TimeDistribution<\/p>\n<p>This interface represents a temporal distribution for any event.<\/p>\nMolecule\n<p>Interface for a molecule.<\/p>\nLinkingRule\n<p>An interface that represent an auto-linking logic for nodes within an environment.<\/p>\nBenchmarkableEnvironment\n<p>An environment which provides a mean to get infos about its performances.<\/p>\nCondition\n<p>Node<\/p>\n<p>GeoPosition<\/p>\n<p>Represents a specific point on the Earth's surface.<\/p>\nAction\n<p>Neighborhood<\/p>\n<p>The type which describes the concentration of a molecule Interface for a neighborhood. When implementing it in a real class, please remember to correctly implement also the equals method inherited from Object.<\/p>\nReaction\n<p>Concentration<\/p>\n<p>This interface is a wrapper for concentrations.<\/p>\nIncarnation\n<p>Layer<\/p>\n<p>Interface for static layer, containing a substance or a molecule with a spatial distribution.<\/p>\nDependency\n<p>This interface represents a token that may generate a dependency between two reactions. Some special built-in tokens are EVERYTHING, EVERY_MOLECULE, MOVEMENT, and NEIGHBORHOOD_CHANGE. Molecules are dependencies as well.<\/p>\nEnvironment\n<p>Interface for an environment. Every environment must implement this specification.<\/p>\nTime\n<p>Interface for time representation.<\/p>\nContext\n<p>This enum describes the possible contexts for a given <code> Action <\/code> or <code> Condition <\/code>. A context represents the elements which are read for a <code> Condition <\/code> and the elements that may be subject of modifications for an <code> Action <\/code>. Choosing the right <code> Context <\/code> is crucial: if it's too restricted the simulation will be invalid, if it's too wide it WILL impact dramatically on performances. Contexts are used internally to better determine dependencies among reactions. See <a href=\"http://apice.unibo.it/xwiki/bin/view/Publications/PianiniMASS11\"> this paper<\/a> for further information about the usage of contexts.<\/p>\nTimedRoute\n<p>Route with total trip time to cross it.<\/p>\nGPSPoint\n<p>MapEnvironment<\/p>\n<p>Vehicle<\/p>\n<p>ObjectWithGPS<\/p>\n<p>GPSTrace<\/p>\n<p>it.unibo.alchemist.model.interfaces.environments<\/p>\n<p>it.unibo.alchemist.model.interfaces.geometry<\/p>\n<p>it.unibo.alchemist.model.interfaces.nodes<\/p>\n<p>it.unibo.alchemist.model.interfaces.movestrategies<\/p>\n<p>EuclideanNavigationAction<\/p>\n<p>A  NavigationAction  working with euclidean spaces.<\/p>\nEuclideanNavigationStrategy\n<p>A  NavigationStrategy  working with euclidean spaces.<\/p>\n"
                  }]
                },
                "biochemistryincarnation": {
                  "ownKey": "biochemistryincarnation",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/model/biochemistryincarnation",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/biochemistryincarnation"
                    },
                    "description": "",
                    "title": "BiochemistryIncarnation",
                    "content": "<p><init><\/p>\n<p>createNode<\/p>\n<p>createCondition<\/p>\n<p>createTimeDistribution<\/p>\n<p>toString<\/p>\n<p>createReaction<\/p>\n<p>createConcentration<\/p>\n<p>createAction<\/p>\n<p>createMolecule<\/p>\n<p>getProperty<\/p>\n"
                  }]
                },
                "protelisincarnation": {
                  "ownKey": "protelisincarnation",
                  "childrenPages": {
                    "protectedexecutionenvironment": {
                      "ownKey": "protectedexecutionenvironment",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/protelisincarnation/protectedexecutionenvironment",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/protelisincarnation/protectedexecutionenvironment"
                        },
                        "description": "",
                        "title": "ProtectedExecutionEnvironment",
                        "content": "<p>An ExecutionEnvironment that can read and shadow the content of a <code> Node <\/code>, but cannot modify it. This is used to prevent badly written properties to interact with the simulation flow.<\/p><init>\n\nsetup\n\nput\n\nhas\n\nremove\n\nkeySet\n\nget\n\nget\n\ncommit\n\n"
                      }]
                    },
                    "dummycontext": {
                      "ownKey": "dummycontext",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/protelisincarnation/dummycontext",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/protelisincarnation/dummycontext"
                        },
                        "description": "",
                        "title": "DummyContext",
                        "content": "<p>An org.protelis.vm.ExecutionContext that operates over a node, but does not modify it.<\/p>getCurrentTime\n<p>instance<\/p>\n<p>nextRandomDouble<\/p>\n<p>getDeviceUID<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/model/protelisincarnation",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/protelisincarnation"
                    },
                    "description": "",
                    "title": "ProtelisIncarnation",
                    "content": "<p>VALUE_TOKEN<\/p>\n<p>The name that can be used in a property to refer to the extracted value.<\/p>\n<init>\n\ncreateNode\n\ntoString\n\ncreateReaction\n\ncreateAction\n\ncreateMolecule\n\ngetProperty\n\ncreateCondition\n\ncreateTimeDistribution\n\ncreateConcentration\n\n"
                  }]
                },
                "smartcam": {
                  "ownKey": "smartcam",
                  "childrenPages": {"visiblenodeimpl": {
                    "ownKey": "visiblenodeimpl",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/smartcam/visiblenodeimpl",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/smartcam/visiblenodeimpl"
                      },
                      "description": "",
                      "title": "VisibleNodeImpl",
                      "content": "<p>Basic implementation of  VisibleNode .<\/p>node\n<p>The node seen.<\/p>\nposition\n<p>The position of the node.<\/p>\n<init>\n<p>Basic implementation of  VisibleNode .<\/p>\nequals\n\nhashCode\n\ntoString\n\n"
                    }]
                  }},
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/model/smartcam",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/smartcam"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.model.smartcam",
                    "content": "<p>VisibleNodeImpl<\/p>\n<p>Basic implementation of  VisibleNode .<\/p>\n"
                  }]
                },
                "math": {
                  "ownKey": "math",
                  "childrenPages": {
                    "realdistributionutil": {
                      "ownKey": "realdistributionutil",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/math/realdistributionutil",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/math/realdistributionutil"
                        },
                        "description": "",
                        "title": "RealDistributionUtil",
                        "content": "<p>Utility to translate statistics names into a RealDistribution.<\/p>makeRealDistribution\n"
                      }]
                    },
                    "lazymutable": {
                      "ownKey": "lazymutable",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/math/lazymutable",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/math/lazymutable"
                        },
                        "description": "",
                        "title": "LazyMutable",
                        "content": "<p>A delegate allowing to lazily initialise a non-null mutable variable (= var).<\/p><init>\n<p>A delegate allowing to lazily initialise a non-null mutable variable (= var).<\/p>\ngetValue\n\nsetValue\n\n"
                      }]
                    },
                    "bidimensionalgaussian": {
                      "ownKey": "bidimensionalgaussian",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/math/bidimensionalgaussian",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/math/bidimensionalgaussian"
                        },
                        "description": "",
                        "title": "BidimensionalGaussian",
                        "content": "<p>A 2D gaussian function.<\/p><init>\n<p>A 2D gaussian function.<\/p>\nvalue\n\nintegral\n<p>The integral of the function.<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/model/math",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/math"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.model.math",
                    "content": "<p>LazyMutable<\/p>\n<p>A delegate allowing to lazily initialise a non-null mutable variable (= var).<\/p>\nBidimensionalGaussian\n<p>A 2D gaussian function.<\/p>\nRealDistributionUtil\n<p>Utility to translate statistics names into a RealDistribution.<\/p>\nlazyMutable\n<p>Creates an instance of  LazyMutable  with the given  initializer .<\/p>\n"
                  }]
                },
                "implementations": {
                  "ownKey": "implementations",
                  "childrenPages": {
                    "concentrations": {
                      "ownKey": "concentrations",
                      "childrenPages": {
                        "lsaconcentration": {
                          "ownKey": "lsaconcentration",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/concentrations/lsaconcentration",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/concentrations/lsaconcentration"
                            },
                            "description": "",
                            "title": "LsaConcentration",
                            "content": "<p>This class acts as a fake concentration. It is required in order to enforce compatibility with the basic Alchemist model<\/p><init>\n<p>This class acts as a fake concentration. It is required in order to enforce compatibility with the basic Alchemist model<\/p>\ngetContent\n\n"
                          }]
                        },
                        "local": {
                          "ownKey": "local",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/concentrations/local",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/concentrations/local"
                            },
                            "description": "",
                            "title": "Local",
                            "content": "<p><init><\/p>\n<p><init><\/p>\n<p>Builds a new concentration.<\/p>\nhashCode\n<p>getContent<\/p>\n<p>equals<\/p>\n<p>toString<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/concentrations",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/concentrations"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.concentrations",
                        "content": "<p>Local<\/p>\n<p>LsaConcentration<\/p>\n<p>This class acts as a fake concentration. It is required in order to enforce compatibility with the basic Alchemist model<\/p>\n"
                      }]
                    },
                    "neighborhoods": {
                      "ownKey": "neighborhoods",
                      "childrenPages": {
                        "neighborhoods": {
                          "ownKey": "neighborhoods",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/neighborhoods/neighborhoods",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/neighborhoods/neighborhoods"
                            },
                            "description": "",
                            "title": "Neighborhoods",
                            "content": "<p>Contains utility functions for neighborhoods.<\/p>Neighborhoods\n<p>Contains utility functions for neighborhoods.<\/p>\n"
                          }]
                        },
                        "simpleneighborhood": {
                          "ownKey": "simpleneighborhood",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/neighborhoods/simpleneighborhood",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/neighborhoods/simpleneighborhood"
                            },
                            "description": "",
                            "title": "SimpleNeighborhood",
                            "content": "<p>A basic implementation of the  Neighborhood  interface.<\/p>clone\n<p>contains<\/p>\n<p>getCenter<\/p>\n<p>getNeighborByNumber<\/p>\n<p>getNeighbors<\/p>\n<p>isEmpty<\/p>\n<p>iterator<\/p>\n<p>size<\/p>\n<p>toString<\/p>\n<p>equals<\/p>\n<p>hashCode<\/p>\n<p>add<\/p>\n<p>remove<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/neighborhoods",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/neighborhoods"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.neighborhoods",
                        "content": "<p>Neighborhoods<\/p>\n<p>Contains utility functions for neighborhoods.<\/p>\nSimpleNeighborhood\n<p>A basic implementation of the  Neighborhood  interface.<\/p>\n"
                      }]
                    },
                    "environments": {
                      "ownKey": "environments",
                      "childrenPages": {
                        "osmenvironment": {
                          "ownKey": "osmenvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/osmenvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/osmenvironment"
                            },
                            "description": "",
                            "title": "OSMEnvironment",
                            "content": "<p>This class serves as template for more specific implementations of environments using a map. It encloses the navigation logic, but leaves the subclasses to decide how to provide map data (e.g. loading from disk or rely on online services). The data is then stored in-memory for performance reasons.<\/p>DEFAULT_ALGORITHM\n<p>The default routing algorithm.<\/p>\nROUTING_STRATEGY\n<p>The default routing strategy.<\/p>\nDEFAULT_APPROXIMATION\n<p>The default value for approximating the positions comparison.<\/p>\nDEFAULT_ON_STREETS\n<p>The default value for the force nodes on streets option.<\/p>\nDEFAULT_FORCE_STREETS\n<p>The default value for the discard of nodes too far from streets option.<\/p>\n<init>\n<p>Builds a new <code> OSMEnvironment <\/code>, with nodes forced on streets.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\ngetMinLongitude\n\nenableBenchmark\n\ngetMaxLongitude\n\ngetSizeInDistanceUnits\n\ncomputeActualInsertionPosition\n\nnodeShouldBeAdded\n<p>There is a single case in which nodes are discarded: if there are no traces for this node and nodes are required to lay on streets, but the navigation engine can not resolve any such position.<\/p>\ngetMaxLatitude\n\ngetBenchmarkResult\n\nmakePosition\n\ngetMinLatitude\n\ncomputeRoute\n\ncomputeRoute\n\ncomputeRoute\n\ncomputeRoute\n\ncomputeRoute\n\n"
                          }]
                        },
                        "imageenvironment": {
                          "ownKey": "imageenvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/imageenvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/imageenvironment"
                            },
                            "description": "",
                            "title": "ImageEnvironment",
                            "content": "<p>This environment loads an image from the file system, and marks as obstacles all the pixels of a given color.<\/p>DEFAULT_COLOR\n<p>Default color to be parsed as obstacle.<\/p>\nDEFAULT_ZOOM\n<p>Default zoom level.<\/p>\nDEFAULT_DELTA_X\n<p>Default X starting position.<\/p>\nDEFAULT_DELTA_Y\n<p>Default Y starting position.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\nfindMarkedRegions\n<p>Finds all the regions marked with a given color.<\/p>\n"
                          }]
                        },
                        "limitedcontinuos2d": {
                          "ownKey": "limitedcontinuos2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/limitedcontinuos2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/limitedcontinuos2d"
                            },
                            "description": "",
                            "title": "LimitedContinuos2D",
                            "content": "<p>This class represents a 2D continuous environment with spatial limitations. Those limitations will prevent nodes to move in positions which are not allowed.<\/p><init>\n<p>This class represents a 2D continuous environment with spatial limitations. Those limitations will prevent nodes to move in positions which are not allowed.<\/p>\nmoveNodeToPosition\n<p>Subclasses may override this method if they want to change the way a node moves towards some absolute position.<\/p>\nnext\n<p>This method must calculate the ABSOLUTE next allowed position given the current position and the position in which the node wants to move. For example, if your node is in position [2,3], wants to move to [3,4] but the next allowed position (because, e.g., of physical obstacles) is [2.5,3.5], the result must be a Position containing coordinates [2.5,3.5].<\/p>\nnodeShouldBeAdded\n<p>Allows subclasses to determine whether or not a <code> Node <\/code> should actually get added to this environment.<\/p>\nisAllowed\n<p>Checks whether a position is allowed to be occupied by a node in this environment.<\/p>\n"
                          }]
                        },
                        "abstract2denvironment": {
                          "ownKey": "abstract2denvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/abstract2denvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/abstract2denvironment"
                            },
                            "description": "",
                            "title": "Abstract2DEnvironment",
                            "content": "<p>Models a bidimensional environment.<\/p><init>\n\nnodeAdded\n<p>Subclasses may want to override this method to hook to the node addition event. Overriders should call the super implementation, as it ensures the environment bounds are updated considering the newly included object.<\/p>\ngetOffset\n\nincludeObject\n<p>Allows to extend the size of the environment by adding some object.<\/p>\nincludeObject\n<p>Updates the environment size to include the provided position.<\/p>\ngetSize\n\nmoveNodeToPosition\n<p>Subclasses may override this method if they want to change the way a node moves towards some absolute position.<\/p>\ncomputeActualInsertionPosition\n<p>Subclasses can override this method if they will to modify the actual position a node gets inserted in (e.g. to restrict the areas in which a node can be)<\/p>\ngetDimensions\n\n"
                          }]
                        },
                        "continuous2denvironment": {
                          "ownKey": "continuous2denvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/continuous2denvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/continuous2denvironment"
                            },
                            "description": "",
                            "title": "Continuous2DEnvironment",
                            "content": "<p>Implementation of  Physics2DEnvironment .<\/p>shapeFactory\n<p>A factory of shapes compatible with this environment.<\/p>\n<init>\n<p>Implementation of  Physics2DEnvironment .<\/p>\ngetNodesWithin\n<p>Gets all nodes whose shape.intersect is true for the given shape.<\/p>\ngetHeading\n<p>Gets the heading of a node as a direction vector.<\/p>\nsetHeading\n<p>Sets the heading of a node.<\/p>\ngetShape\n<p>Gets the shape of a node relatively to its position and heading in the environment.<\/p>\nnodeAdded\n<p>Keeps track of the largest diameter of the shapes.<\/p>\nnodeRemoved\n<p>{@inheritDoc}.<\/p>\nmoveNodeToPosition\n<p>Moves the node only if it doesn't collide with others.<\/p>\nnodeShouldBeAdded\n<p>A node should be added only if it doesn't collide with already existing nodes and fits in the environment's\nlimits.<\/p>\nmakePosition\n<p>Creates an euclidean position from the given coordinates.<\/p>\ncanNodeFitPosition\n<p>Whether or not a node can be placed in a position.<\/p>\n"
                          }]
                        },
                        "abstractenvironment": {
                          "ownKey": "abstractenvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/abstractenvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/abstractenvironment"
                            },
                            "description": "",
                            "title": "AbstractEnvironment",
                            "content": "<p>Very generic and basic implementation for an environment. Basically, only manages an internal set of nodes and their position.<\/p><init>\n\nnodeAdded\n<p>This method gets called once a node has been added, and its neighborhood has been computed and memorized.<\/p>\ngetLayers\n\nupdateNeighborhood\n<p>After a node movement, recomputes the neighborhood, also notifying the running simulation about the modifications. This allows movement actions to be defined as LOCAL (they should be normally considered GLOBAL).<\/p>\nifEngineAvailable\n<p>If this environment is attached to a simulation engine, executes consumer.<\/p>\ngetLinkingRule\n\nremoveNode\n\ngetIncarnation\n\ngetNeighborhood\n\ngetNodesNumber\n\ntoString\n<p>Not used internally. Override as you please.<\/p>\nisTerminated\n\naddTerminator\n\ngetSizeInDistanceUnits\n<p>Override this method if units measuring distance do not match with units used for coordinates. For instance, if your space is non-Euclidean, or if you are using polar coordinates. A notable example is using geographical latitude-longitude as y-x coordinates and meters as distance measure.<\/p>\ngetLayer\n\nsetPosition\n<p>Adds or changes a position entry in the position map.<\/p>\nnodeRemoved\n<p>This method gets called once a node has been removed.<\/p>\naddLayer\n\nsetSimulation\n\ngetDistanceBetweenNodes\n\ngetNodesWithinRange\n\ngetNodesWithinRange\n\nsetIncarnation\n\nsetLinkingRule\n\niterator\n\ngetSimulation\n\nforEach\n\ncomputeActualInsertionPosition\n<p>Allows subclasses to tune the actual position of a node, applying spatial constrains at node addition.<\/p>\nnodeShouldBeAdded\n<p>Allows subclasses to determine whether or not a <code> Node <\/code> should actually get added to this environment.<\/p>\nspliterator\n\ngetNodeByID\n\ngetPosition\n<p>This method should not get overridden in general. However, if your<\/p>\ngetNodes\n\naddNode\n\n"
                          }]
                        },
                        "biorect2denvironmentnooverlap": {
                          "ownKey": "biorect2denvironmentnooverlap",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/biorect2denvironmentnooverlap",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/biorect2denvironmentnooverlap"
                            },
                            "description": "",
                            "title": "BioRect2DEnvironmentNoOverlap",
                            "content": "<p>Implements a limited environment supporting cells with a defined shape, avoiding any overlapping among them.<\/p><init>\n<p>Returns an infinite <code> BioRect2DEnvironment <\/code>.<\/p>\n<init>\n<p>Returns a limited rectangular <code> BioRect2DEnvironment <\/code>.<\/p>\nnodeAdded\n\nnodeRemoved\n\nmoveNodeToPosition\n\nnodeShouldBeAdded\n\ngetMaxDiameterAmongCircularDeformableCells\n\n"
                          }]
                        },
                        "biorect2denvironment": {
                          "ownKey": "biorect2denvironment",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/biorect2denvironment",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/biorect2denvironment"
                            },
                            "description": "",
                            "title": "BioRect2DEnvironment",
                            "content": "<p><init><\/p>\n<p>Builds a BioRect2DEnvironment with given bounds.<\/p>\n<init>\n<p>Builds a BioRect2DEnvironment with infinite bounds.<\/p>\nmoveNode\n\nnext\n\nisAllowed\n\n"
                          }]
                        },
                        "museumhall": {
                          "ownKey": "museumhall",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/museumhall",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/museumhall"
                            },
                            "description": "",
                            "title": "MuseumHall",
                            "content": "<p><init><\/p>\n<p>nextAllowed<\/p>\n<p>Given the old position of a node and the requested one, this method computes the nearest allowed point. Static method.<\/p>\ntoString\n<p>moveNode<\/p>\n<p>next<\/p>\n<p>Given the old position of a node and the requested one, this method computes the nearest allowed point.<\/p>\nisAllowed\n"
                          }]
                        },
                        "imageenvironmentwithgraph": {
                          "ownKey": "imageenvironmentwithgraph",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/imageenvironmentwithgraph",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/imageenvironmentwithgraph"
                            },
                            "description": "",
                            "title": "ImageEnvironmentWithGraph",
                            "content": "<p>An  ImageEnvironment  providing an  Euclidean2DNavigationGraph .\nThe NaviGator algorithm is used to produce such graph (see  generateNavigationGraph ).\nThe positions where to plant initial seeds should be specified directly in the image,\nmarking each area of the environment with one or more pixels of a given color (defaults\nto blue).<\/p>graph\n<p><init><\/p>\n<p>An  ImageEnvironment  providing an  Euclidean2DNavigationGraph .\nThe NaviGator algorithm is used to produce such graph (see  generateNavigationGraph ).\nThe positions where to plant initial seeds should be specified directly in the image,\nmarking each area of the environment with one or more pixels of a given color (defaults\nto blue).<\/p>\n"
                          }]
                        },
                        "infinitehalls": {
                          "ownKey": "infinitehalls",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/infinitehalls",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/infinitehalls"
                            },
                            "description": "",
                            "title": "InfiniteHalls",
                            "content": "<p><init><\/p>\n<p>Default builder. Builds halls of size 10 with open doors.<\/p>\n<init>\n\n<init>\n\n<init>\n\nisDoorsOpen\n\ngetHallSize\n\ngetCi\n\ngetSi\n\nsetDoorsOpen\n\nallowed\n<p>Checks whether a position is allowed or not.<\/p>\ngetCf\n\nnext\n\ngetSf\n\nisAllowed\n\ngetEx\n\n"
                          }]
                        },
                        "continuous2dobstacles": {
                          "ownKey": "continuous2dobstacles",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/environments/continuous2dobstacles",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/continuous2dobstacles"
                            },
                            "description": "",
                            "title": "Continuous2DObstacles",
                            "content": "<p>obstacles<\/p>\n<p><init><\/p>\n<p>removeObstacle<\/p>\n<p>hasMobileObstacles<\/p>\n<p>Subclasses dealing with mobile obstacles may change this.<\/p>\naddObstacle\n<p>next<\/p>\n<p>next<\/p>\n<p>intersectsObstacle<\/p>\n<p>isAllowed<\/p>\n<p>getObstaclesInRange<\/p>\n<p>getObstaclesInRange<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/environments",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.environments",
                        "content": "<p>Continuous2DEnvironment<\/p>\n<p>Implementation of  Physics2DEnvironment .<\/p>\nImageEnvironmentWithGraph\n<p>An  ImageEnvironment  providing an  Euclidean2DNavigationGraph .\nThe NaviGator algorithm is used to produce such graph (see  generateNavigationGraph ).\nThe positions where to plant initial seeds should be specified directly in the image,\nmarking each area of the environment with one or more pixels of a given color (defaults\nto blue).<\/p>\nContinuous2DObstacles\n<p>InfiniteHalls<\/p>\n<p>MuseumHall<\/p>\n<p>ImageEnvironment<\/p>\n<p>This environment loads an image from the file system, and marks as obstacles all the pixels of a given color.<\/p>\nLimitedContinuos2D\n<p>This class represents a 2D continuous environment with spatial limitations. Those limitations will prevent nodes to move in positions which are not allowed.<\/p>\nAbstractEnvironment\n<p>Very generic and basic implementation for an environment. Basically, only manages an internal set of nodes and their position.<\/p>\nAbstract2DEnvironment\n<p>Models a bidimensional environment.<\/p>\nBioRect2DEnvironmentNoOverlap\n<p>Implements a limited environment supporting cells with a defined shape, avoiding any overlapping among them.<\/p>\nBioRect2DEnvironment\n<p>OSMEnvironment<\/p>\n<p>This class serves as template for more specific implementations of environments using a map. It encloses the navigation logic, but leaves the subclasses to decide how to provide map data (e.g. loading from disk or rely on online services). The data is then stored in-memory for performance reasons.<\/p>\n"
                      }]
                    },
                    "obstacles": {
                      "ownKey": "obstacles",
                      "childrenPages": {"rectobstacle2d": {
                        "ownKey": "rectobstacle2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/obstacles/rectobstacle2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/obstacles/rectobstacle2d"
                          },
                          "description": "",
                          "title": "RectObstacle2D",
                          "content": "<p>This class implements a rectangular obstacle, whose sides are parallel to the cartesian axis.<\/p>id\n<p><init><\/p>\n<p>Builds a new RectObstacle2D, given a point, the width and the height.<\/p>\ncontains\n<p>nearestIntersection<\/p>\n<p>getMinX<\/p>\n<p>next<\/p>\n<p>getMaxX<\/p>\n<p>toString<\/p>\n<p>getMinY<\/p>\n<p>getMaxY<\/p>\n"
                        }]
                      }},
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/obstacles",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/obstacles"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.obstacles",
                        "content": "<p>RectObstacle2D<\/p>\n<p>This class implements a rectangular obstacle, whose sides are parallel to the cartesian axis.<\/p>\n"
                      }]
                    },
                    "molecules": {
                      "ownKey": "molecules",
                      "childrenPages": {
                        "junction": {
                          "ownKey": "junction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/molecules/junction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/junction"
                            },
                            "description": "",
                            "title": "Junction",
                            "content": "<p>Represents a junction between two cells.<\/p><init>\n<p>Build a junction.<\/p>\n<init>\n<p>Builds a junction from another junction.<\/p>\nreverse\n<p>Return the reversed junction of the current junction. E.g. junction A-B return junction B-A<\/p>\ngetMoleculesInCurrentNode\n\ngetMoleculesInNeighborNode\n\ndependsOn\n\n"
                          }]
                        },
                        "simplemolecule": {
                          "ownKey": "simplemolecule",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/molecules/simplemolecule",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/simplemolecule"
                            },
                            "description": "",
                            "title": "SimpleMolecule",
                            "content": "<p>Simple implementation of Molecule.<\/p><init>\n\nhashCode\n\nequals\n\ngetName\n\ntoString\n\ngetId\n\n"
                          }]
                        },
                        "lsamolecule": {
                          "ownKey": "lsamolecule",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/molecules/lsamolecule",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/lsamolecule"
                            },
                            "description": "",
                            "title": "LsaMolecule",
                            "content": "<p>This class realizes an LsaMolecule, where arguments are of type Expression.<\/p>SYN_D\n<p>Synthetic property representing the distance.<\/p>\nSYN_MOL_ID\n<p>Synthetic property representing an LSA ID.<\/p>\nSYN_NEIGH\n<p>Synthetic property representing the current neighborhood.<\/p>\nSYN_NODE_ID\n<p>Synthetic property representing the local node id.<\/p>\nSYN_O\n<p>Synthetic property representing the orientation.<\/p>\nSYN_RAND\n<p>Synthetic property representing a random value.<\/p>\nSYN_ROUTE\n<p>Synthetic property representing the distance. If the environment does not support route computation, it falls back to SYN_D.<\/p>\nSYN_SELECTED\n<p>Synthetic property representing the current selected neighbor (\"+\" conditions on the left).<\/p>\nSYN_T\n<p>Synthetic property representing the current simulation time.<\/p>\n<init>\n<p>Empty molecule, no arguments.<\/p>\n<init>\n<p>Builds a new LsaMolecule by interpreting a list of IExpressions. Dramatically faster than parsing, slower than copy.<\/p>\n<init>\n<p>Very fast constructor, produces a copy of an LsaMolecule. Use whenever possible.<\/p>\n<init>\n<p>Builds a LsaMolecule by parsing the passed String. Slow, use only if strictly needed.<\/p>\n<init>\n<p>Builds a LsaMolecule by parsing the passed String. Slow, use only if strictly needed.<\/p>\nmoreGenericOf\n\nhashCode\n\nequals\n\ntoString\n\ncompareTo\n\nhasDuplicateVariables\n\nisIstance\n\ndependsOn\n\ngetArgList\n\ntoHashString\n\niterator\n\nisIdenticalTo\n\nsize\n\nforEach\n\nallocateVar\n\nargsNumber\n\ngetArg\n\nspliterator\n\ngeneralize\n\nmatches\n\nmatches\n\n"
                          }]
                        },
                        "biomolecule": {
                          "ownKey": "biomolecule",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/molecules/biomolecule",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/biomolecule"
                            },
                            "description": "",
                            "title": "Biomolecule",
                            "content": "<p><init><\/p>\n<p>Create a new biomolecule.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/molecules",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.molecules",
                        "content": "<p>SimpleMolecule<\/p>\n<p>Simple implementation of Molecule.<\/p>\nBiomolecule\n<p>Junction<\/p>\n<p>Represents a junction between two cells.<\/p>\nLsaMolecule\n<p>This class realizes an LsaMolecule, where arguments are of type Expression.<\/p>\n"
                      }]
                    },
                    "terminators": {
                      "ownKey": "terminators",
                      "childrenPages": {
                        "aftertime": {
                          "ownKey": "aftertime",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/terminators/aftertime",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/terminators/aftertime"
                            },
                            "description": "",
                            "title": "AfterTime",
                            "content": "<p>endTime<\/p>\n<p>the end time.<\/p>\n<init>\n\ntest\n<p>Tries to access the simulation time from the  environment .\nIf the simulation is unaccessible, throws an exception.\nOtherwise, reads the current time, and flips to true once it got past the provided  endTime .<\/p>\n"
                          }]
                        },
                        "stableforsteps": {
                          "ownKey": "stableforsteps",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/terminators/stableforsteps",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/terminators/stableforsteps"
                            },
                            "description": "",
                            "title": "StableForSteps",
                            "content": "<p>A Predicate that  tests  if an environment's\nnodes (meaning their position and concentration) have\nremained unchanged for a certain amount of steps.<\/p><p>The check isn't performed on every  step \nof a  simulation ,\ninstead an interval that determines how many steps are\nto be skipped between each check is specified.\nFor  test  to return true, an environment must remain unchanged for\n<code>checkInterval * equalIntervals<\/code> steps. This result might not be\nentirely consistent, since the check isn't performed every step so\nas not to cause performance issues. Therefore it might happen that\nsome changes occur in the environment but are reverted before the\nnext check is performed.<\/p><p> test  should be called at every step of the simulation in order\nto avoid missing checks.<\/p><init>\n<p>Creates a new  StableForSteps  with the given values.<\/p>\ntest\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/terminators",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/terminators"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.terminators",
                        "content": "<p>AfterTime<\/p>\n<p>StableForSteps<\/p>\n<p>A Predicate that  tests  if an environment's\nnodes (meaning their position and concentration) have\nremained unchanged for a certain amount of steps.<\/p><p>The check isn't performed on every  step \nof a  simulation ,\ninstead an interval that determines how many steps are\nto be skipped between each check is specified.\nFor  test  to return true, an environment must remain unchanged for\n<code>checkInterval * equalIntervals<\/code> steps. This result might not be\nentirely consistent, since the check isn't performed every step so\nas not to cause performance issues. Therefore it might happen that\nsome changes occur in the environment but are reverted before the\nnext check is performed.<\/p><p> test  should be called at every step of the simulation in order\nto avoid missing checks.<\/p>\n"
                      }]
                    },
                    "groups": {
                      "ownKey": "groups",
                      "childrenPages": {
                        "alone": {
                          "ownKey": "alone",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/groups/alone",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/alone"
                            },
                            "description": "",
                            "title": "Alone",
                            "content": "<p>Group representing a pedestrian alone.<\/p>members\n<p>The list of pedestrians belonging to this group.<\/p>\n<init>\n<p>Group representing a pedestrian alone.<\/p>\naddMember\n<p>Add a node in this group if not already part of it.<\/p>\nremoveMember\n<p>Remove a node from this group.<\/p>\n"
                          }]
                        },
                        "groupfactory": {
                          "ownKey": "groupfactory",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/groups/groupfactory",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/groupfactory"
                            },
                            "description": "",
                            "title": "GroupFactory",
                            "content": "<p>Utility for shorter loading of groups within the Yaml files.<\/p>family\n<p>friends<\/p>\n"
                          }]
                        },
                        "family": {
                          "ownKey": "family",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/groups/family",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/family"
                            },
                            "description": "",
                            "title": "Family",
                            "content": "<p>A  Family  is modeled as a grup of pedestrians with a leader.<\/p>leader\n<p>The leader of the group.<\/p>\n<init>\n<p>A  Family  is modeled as a grup of pedestrians with a leader.<\/p>\n"
                          }]
                        },
                        "friends": {
                          "ownKey": "friends",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/groups/friends",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/friends"
                            },
                            "description": "",
                            "title": "Friends",
                            "content": "<p>A generic, leaderless group of pedestrians.<\/p><init>\n<p>A generic, leaderless group of pedestrians.<\/p>\n"
                          }]
                        },
                        "genericgroup": {
                          "ownKey": "genericgroup",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/groups/genericgroup",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/genericgroup"
                            },
                            "description": "",
                            "title": "GenericGroup",
                            "content": "<p>Basic implementation of a group.<\/p>members\n<p>The list of pedestrians belonging to this group.<\/p>\n<init>\n<p>Basic implementation of a group.<\/p>\naddMember\n<p>Add a node in this group if not already part of it.<\/p>\nremoveMember\n<p>Remove a node from this group.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/groups",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.groups",
                        "content": "<p>Alone<\/p>\n<p>Group representing a pedestrian alone.<\/p>\nFamily\n<p>A  Family  is modeled as a grup of pedestrians with a leader.<\/p>\nFriends\n<p>A generic, leaderless group of pedestrians.<\/p>\nGenericGroup\n<p>Basic implementation of a group.<\/p>\nGroupFactory\n<p>Utility for shorter loading of groups within the Yaml files.<\/p>\n"
                      }]
                    },
                    "positions": {
                      "ownKey": "positions",
                      "childrenPages": {
                        "euclidean2dposition": {
                          "ownKey": "euclidean2dposition",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/positions/euclidean2dposition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/euclidean2dposition"
                            },
                            "description": "",
                            "title": "Euclidean2DPosition",
                            "content": "<p>y<\/p>\n<p>x<\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p>newFrom<\/p>\n<p>normal<\/p>\n<p>unsafeConstructor<\/p>\n"
                          }]
                        },
                        "abstractposition": {
                          "ownKey": "abstractposition",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/positions/abstractposition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/abstractposition"
                            },
                            "description": "",
                            "title": "AbstractPosition",
                            "content": "<p>N-dimensional position.<\/p>coordinates\n<p>dimensions<\/p>\n<p><init><\/p>\n<p>div<\/p>\n<p>Division by a number.<\/p>\nhashCode\n<p>equals<\/p>\n<p>toString<\/p>\n<p>Prints the coordinates.<\/p>\nminus\n<p>Same as <code> #minus(double[]) <\/code>, with the internal representation of other.<\/p>\nminus\n<p>times<\/p>\n<p>Multiplication by a number.<\/p>\ngetCoordinate\n<p>plus<\/p>\n<p>Same as <code> #plus(double[]) <\/code>, with the internal representation of other.<\/p>\nplus\n<p>unsafeConstructor<\/p>\n<p>Calls an internal constructor of subclasses that provides a way to instance a new position given its coordinates.<\/p>\nboundingBox\n<p>distanceTo<\/p>\n"
                          }]
                        },
                        "gpspointimpl": {
                          "ownKey": "gpspointimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/positions/gpspointimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/gpspointimpl"
                            },
                            "description": "",
                            "title": "GPSPointImpl",
                            "content": "<p>y<\/p>\n<p>x<\/p>\n<p>coordinates<\/p>\n<p>dimensions<\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p>hashCode<\/p>\n<p>addTime<\/p>\n<p>equals<\/p>\n<p>toString<\/p>\n<p>compareTo<\/p>\n<p>subtractTime<\/p>\n<p>getLatitude<\/p>\n<p>minus<\/p>\n<p>minus<\/p>\n<p>getTime<\/p>\n<p>getLongitude<\/p>\n<p>getCoordinate<\/p>\n<p>plus<\/p>\n<p>plus<\/p>\n<p>boundingBox<\/p>\n<p>distanceTo<\/p>\n"
                          }]
                        },
                        "latlongposition": {
                          "ownKey": "latlongposition",
                          "childrenPages": {"distanceformula": {
                            "ownKey": "distanceformula",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/positions/latlongposition/distanceformula",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/latlongposition/distanceformula"
                              },
                              "description": "",
                              "title": "DistanceFormula",
                              "content": "<p>Possible methods to compute the distance between two latitude-longitude points.<\/p>EQUIRECTANGULAR\n<p>HAVERSINE<\/p>\n<p>SPHERICAL_COSINES<\/p>\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/positions/latlongposition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/latlongposition"
                            },
                            "description": "",
                            "title": "LatLongPosition",
                            "content": "<p>Unmodifiable state version of LatLng, also implementing the <code> GeoPosition <\/code> interface.<\/p>y\n<p>x<\/p>\n<p>coordinates<\/p>\n<p>dimensions<\/p>\n<p>DEFAULT_DISTANCE_FORMULA<\/p>\n<p>The default distance formula.<\/p>\nEARTH_MEAN_RADIUS_METERS\n<p>Mean Earth radius in meters.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\nhashCode\n\nequals\n\ntoString\n\ngetLatitude\n\nminus\n\nminus\n\ngetLongitude\n\ngetCoordinate\n\nplus\n\nplus\n\nboundingBox\n\ndistanceTo\n\ndistance\n<p>Distance between two points.<\/p>\ndistance\n<p>Distance between two points with arbitrary LengthUnit.<\/p>\ndistanceInRadians\n<p> This \"distance\" function is mostly for internal use. Most users will simply rely upon <code> #distance(LatLng, LatLng, LengthUnit, DistanceFormula) <\/code> <\/p> <p> Yields the internal angle for an arc between two points on the surface of a sphere in radians. This angle is in the plane of the great circle connecting the two points measured from an axis through one of the points and the center of the Earth. Multiply this value by the sphere's radius to get the length of the arc. <\/p>\n"
                          }]
                        },
                        "abstracteuclideanposition": {
                          "ownKey": "abstracteuclideanposition",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/positions/abstracteuclideanposition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/abstracteuclideanposition"
                            },
                            "description": "",
                            "title": "AbstractEuclideanPosition",
                            "content": "<p>N-dimensional Euclidean position.<\/p><init>\n\nget\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/positions",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.positions",
                        "content": "<p>AbstractEuclideanPosition<\/p>\n<p>N-dimensional Euclidean position.<\/p>\nEuclidean2DPosition\n<p>AbstractPosition<\/p>\n<p>N-dimensional position.<\/p>\nLatLongPosition\n<p>Unmodifiable state version of LatLng, also implementing the <code> GeoPosition <\/code> interface.<\/p>\nGPSPointImpl\n"
                      }]
                    },
                    "movestrategies": {
                      "ownKey": "movestrategies",
                      "childrenPages": {
                        "routing": {
                          "ownKey": "routing",
                          "childrenPages": {
                            "onstreets": {
                              "ownKey": "onstreets",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/routing/onstreets",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/routing/onstreets"
                                },
                                "description": "",
                                "title": "OnStreets",
                                "content": "<p>This strategy computes a route along streets allowed for a selected <code> Vehicle <\/code> connecting the starting and ending point.<\/p><init>\n\ncomputeRoute\n\n"
                              }]
                            },
                            "ignorestreets": {
                              "ownKey": "ignorestreets",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/routing/ignorestreets",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/routing/ignorestreets"
                                },
                                "description": "",
                                "title": "IgnoreStreets",
                                "content": "<p>This strategy ignores any information about the map, and connects the starting and ending point with a straight line using <code> PolygonalChain <\/code>.<\/p><init>\n<p>This strategy ignores any information about the map, and connects the starting and ending point with a straight line using <code> PolygonalChain <\/code>.<\/p>\ncomputeRoute\n\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/movestrategies/routing",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/routing"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.model.implementations.movestrategies.routing",
                            "content": "<p>OnStreets<\/p>\n<p>This strategy computes a route along streets allowed for a selected <code> Vehicle <\/code> connecting the starting and ending point.<\/p>\nIgnoreStreets\n<p>This strategy ignores any information about the map, and connects the starting and ending point with a straight line using <code> PolygonalChain <\/code>.<\/p>\n"
                          }]
                        },
                        "randomtarget": {
                          "ownKey": "randomtarget",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/movestrategies/randomtarget",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/randomtarget"
                            },
                            "description": "",
                            "title": "RandomTarget",
                            "content": "<p>Selects a target based on a random direction extracted from directionRng,\nand a random distance extracted from distanceDistribution.\n getCurrentPosition  should return the current position of the object to move.\n T  is the type of the concentration of the node.<\/p><init>\n<p>Handy constructor for Alchemist where the object to move is a  node  in the  env .<\/p>\n<init>\n<p>Selects a target based on a random direction extracted from directionRng,\nand a random distance extracted from distanceDistribution.\n getCurrentPosition  should return the current position of the object to move.\n T  is the type of the concentration of the node.<\/p>\nchooseTarget\n<p>The target selection strategy.\nReturns the new target to reach.<\/p>\n"
                          }]
                        },
                        "zigzagrandomtarget": {
                          "ownKey": "zigzagrandomtarget",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/movestrategies/zigzagrandomtarget",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/zigzagrandomtarget"
                            },
                            "description": "",
                            "title": "ZigZagRandomTarget",
                            "content": "<p>Strategy to move an object in a zigzag fashion. It uses euclidean geometry to determine the next position.<\/p><p> getCurrentPosition  must return the current position of the object to move.\nmakePosition must be able to create a 2D position given the X and Y coordinates in this order.\nrandomGenerator is the random number generator to use\nmaxDistance defines the maximum distance the object can move before a random change in direction is forced.\nminChangeInDirection is the minimum change in the direction (in degrees) that must be made each\ntime a new direction is chosen.<\/p><p> T  is the type of the concentration of the node used in the secondary constructor.<\/p><init>\n<p>Handy constructor for Alchemist where the object to move is a  node  in the  env .\n rng  is the random number generator to use\n maxDistance  defines the maximum distance the object can move before a random change in direction is forced.<\/p>\n<init>\n<p>Strategy to move an object in a zigzag fashion. It uses euclidean geometry to determine the next position.<\/p><p> getCurrentPosition  must return the current position of the object to move.\nmakePosition must be able to create a 2D position given the X and Y coordinates in this order.\nrandomGenerator is the random number generator to use\nmaxDistance defines the maximum distance the object can move before a random change in direction is forced.\nminChangeInDirection is the minimum change in the direction (in degrees) that must be made each\ntime a new direction is chosen.<\/p><p> T  is the type of the concentration of the node used in the secondary constructor.<\/p>\ninitializePositions\n<p>Utility to initialize lazyinit variables dependent on the environment.\nIt is guaranteed to be called before  shouldChangeTarget  and  chooseTarget .<\/p>\nshouldChangeTarget\n<p>Returns a boolean indicating whether it is time to change the target or not.\nBy default if it hasn't moved (assuming it's because of an obstacle)\nor or it has reached the previous, then choose another one.<\/p>\nchooseTarget\n<p>The target selection strategy.\nReturns the new target to reach.<\/p>\n"
                          }]
                        },
                        "changetargetoncollision": {
                          "ownKey": "changetargetoncollision",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/movestrategies/changetargetoncollision",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/changetargetoncollision"
                            },
                            "description": "",
                            "title": "ChangeTargetOnCollision",
                            "content": "<p>Base class for  TargetSelectionStrategy  offering automatic target change\non collision and utilities for initialization.\n getCurrentPosition  should return the current position of the object to move.\n P  is the position type to use.<\/p>getCurrentPosition\n<p>Returns the current position of the object to move.<\/p>\n<init>\n<p>Base class for  TargetSelectionStrategy  offering automatic target change\non collision and utilities for initialization.\n getCurrentPosition  should return the current position of the object to move.\n P  is the position type to use.<\/p>\ngetTarget\n\ninitializePositions\n<p>Utility to initialize lazyinit variables dependent on the environment.\nIt is guaranteed to be called before  shouldChangeTarget  and  chooseTarget .<\/p>\nshouldChangeTarget\n<p>Returns a boolean indicating whether it is time to change the target or not.\nBy default if it hasn't moved (assuming it's because of an obstacle)\nor or it has reached the previous, then choose another one.<\/p>\nchooseTarget\n<p>The target selection strategy.\nReturns the new target to reach.<\/p>\n"
                          }]
                        },
                        "abstractstrategywithgps": {
                          "ownKey": "abstractstrategywithgps",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/movestrategies/abstractstrategywithgps",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/abstractstrategywithgps"
                            },
                            "description": "",
                            "title": "AbstractStrategyWithGPS",
                            "content": "<p>basic move strategy that use a <code> GPSTrace <\/code>.<\/p><init>\n<p>basic move strategy that use a <code> GPSTrace <\/code>.<\/p>\ngetTrace\n\nsetTrace\n\n"
                          }]
                        },
                        "speed": {
                          "ownKey": "speed",
                          "childrenPages": {
                            "straightlinetracedependantspeed": {
                              "ownKey": "straightlinetracedependantspeed",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/straightlinetracedependantspeed",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/straightlinetracedependantspeed"
                                },
                                "description": "",
                                "title": "StraightLineTraceDependantSpeed",
                                "content": "<p>This <code> TraceDependantSpeed <\/code> uses the distance between coordinates for estimating the distance.<\/p><init>\n\ncomputeDistance\n\n"
                              }]
                            },
                            "constantspeed": {
                              "ownKey": "constantspeed",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/constantspeed",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/constantspeed"
                                },
                                "description": "",
                                "title": "ConstantSpeed",
                                "content": "<p>This strategy makes the node move at an average constant speed, which is influenced by the <code> it.unibo.alchemist.model.interfaces.TimeDistribution <\/code> of the <code> Reaction <\/code> hosting this <code> it.unibo.alchemist.model.interfaces.Action <\/code>. This action tries to normalize on the <code> Reaction <\/code> rate, but if the <code> it.unibo.alchemist.model.interfaces.TimeDistribution <\/code> has a high variance, the movements on the map will inherit this tract.<\/p><init>\n\ngetNodeMovementLength\n\n"
                              }]
                            },
                            "interactwithothers": {
                              "ownKey": "interactwithothers",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/interactwithothers",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/interactwithothers"
                                },
                                "description": "",
                                "title": "InteractWithOthers",
                                "content": "<p>This strategy slows down nodes depending on how many \"interacting\" nodes are found in the surroundings. It is an attempt at modeling crowding slow-downs.<\/p><init>\n\ngetNodeMovementLength\n\n"
                              }]
                            },
                            "constantspace": {
                              "ownKey": "constantspace",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/constantspace",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/constantspace"
                                },
                                "description": "",
                                "title": "ConstantSpace",
                                "content": "<p>This strategy makes the node move every time of a fixed amount of space.<\/p><init>\n\ngetNodeMovementLength\n\n"
                              }]
                            },
                            "globallyconstantspeed": {
                              "ownKey": "globallyconstantspeed",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/globallyconstantspeed",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/globallyconstantspeed"
                                },
                                "description": "",
                                "title": "GloballyConstantSpeed",
                                "content": "<p>Similar to  ConstantSpeed  but takes in consideration the time distribution's rate instead of the reaction's rate.<\/p><init>\n<p>Similar to  ConstantSpeed  but takes in consideration the time distribution's rate instead of the reaction's rate.<\/p>\ngetNodeMovementLength\n\n"
                              }]
                            },
                            "tracedependantspeed": {
                              "ownKey": "tracedependantspeed",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/tracedependantspeed",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/tracedependantspeed"
                                },
                                "description": "",
                                "title": "TraceDependantSpeed",
                                "content": "<p>This strategy dynamically tries to move the node adjusting its speed to synchronize the reaction rate and the traces data.<\/p><init>\n\ngetNodeMovementLength\n\ncomputeDistance\n\n"
                              }]
                            },
                            "routingtracedependantspeed": {
                              "ownKey": "routingtracedependantspeed",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/routingtracedependantspeed",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/routingtracedependantspeed"
                                },
                                "description": "",
                                "title": "RoutingTraceDependantSpeed",
                                "content": "<p>This <code> TraceDependantSpeed <\/code> strategy computes the remaining distance by relying on maps data for a selected <code> Vehicle <\/code>.<\/p><init>\n\ncomputeDistance\n\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.model.implementations.movestrategies.speed",
                            "content": "<p>GloballyConstantSpeed<\/p>\n<p>Similar to  ConstantSpeed  but takes in consideration the time distribution's rate instead of the reaction's rate.<\/p>\nConstantSpeed\n<p>This strategy makes the node move at an average constant speed, which is influenced by the <code> it.unibo.alchemist.model.interfaces.TimeDistribution <\/code> of the <code> Reaction <\/code> hosting this <code> it.unibo.alchemist.model.interfaces.Action <\/code>. This action tries to normalize on the <code> Reaction <\/code> rate, but if the <code> it.unibo.alchemist.model.interfaces.TimeDistribution <\/code> has a high variance, the movements on the map will inherit this tract.<\/p>\nConstantSpace\n<p>This strategy makes the node move every time of a fixed amount of space.<\/p>\nInteractWithOthers\n<p>This strategy slows down nodes depending on how many \"interacting\" nodes are found in the surroundings. It is an attempt at modeling crowding slow-downs.<\/p>\nStraightLineTraceDependantSpeed\n<p>This <code> TraceDependantSpeed <\/code> uses the distance between coordinates for estimating the distance.<\/p>\nTraceDependantSpeed\n<p>This strategy dynamically tries to move the node adjusting its speed to synchronize the reaction rate and the traces data.<\/p>\nRoutingTraceDependantSpeed\n<p>This <code> TraceDependantSpeed <\/code> strategy computes the remaining distance by relying on maps data for a selected <code> Vehicle <\/code>.<\/p>\n"
                          }]
                        },
                        "target": {
                          "ownKey": "target",
                          "childrenPages": {
                            "followtarget": {
                              "ownKey": "followtarget",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/target/followtarget",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/target/followtarget"
                                },
                                "description": "",
                                "title": "FollowTarget",
                                "content": "<p>This strategy reads the value of a \"target\" molecule and tries to interpret it as a coordinate.<\/p><init>\n\ngetTarget\n\ncreatePosition\n\ngetCurrentPosition\n\n"
                              }]
                            },
                            "followtrace": {
                              "ownKey": "followtrace",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/target/followtrace",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/target/followtrace"
                                },
                                "description": "",
                                "title": "FollowTrace",
                                "content": "<p>This strategy follows a <code> Route <\/code>.<\/p><init>\n\ngetTarget\n\n"
                              }]
                            },
                            "followtargetonmap": {
                              "ownKey": "followtargetonmap",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/movestrategies/target/followtargetonmap",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/target/followtargetonmap"
                                },
                                "description": "",
                                "title": "FollowTargetOnMap",
                                "content": "<p>This strategy reads the value of a \"target\" molecule and tries to interpret it as a coordinate.<\/p><init>\n\ncreatePosition\n\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/movestrategies/target",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/target"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.model.implementations.movestrategies.target",
                            "content": "<p>FollowTarget<\/p>\n<p>This strategy reads the value of a \"target\" molecule and tries to interpret it as a coordinate.<\/p>\nFollowTrace\n<p>This strategy follows a <code> Route <\/code>.<\/p>\nFollowTargetOnMap\n<p>This strategy reads the value of a \"target\" molecule and tries to interpret it as a coordinate.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/movestrategies",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.movestrategies",
                        "content": "<p>RandomTarget<\/p>\n<p>Selects a target based on a random direction extracted from directionRng,\nand a random distance extracted from distanceDistribution.\n getCurrentPosition  should return the current position of the object to move.\n T  is the type of the concentration of the node.<\/p>\nChangeTargetOnCollision\n<p>Base class for  TargetSelectionStrategy  offering automatic target change\non collision and utilities for initialization.\n getCurrentPosition  should return the current position of the object to move.\n P  is the position type to use.<\/p>\nZigZagRandomTarget\n<p>Strategy to move an object in a zigzag fashion. It uses euclidean geometry to determine the next position.<\/p><p> getCurrentPosition  must return the current position of the object to move.\nmakePosition must be able to create a 2D position given the X and Y coordinates in this order.\nrandomGenerator is the random number generator to use\nmaxDistance defines the maximum distance the object can move before a random change in direction is forced.\nminChangeInDirection is the minimum change in the direction (in degrees) that must be made each\ntime a new direction is chosen.<\/p><p> T  is the type of the concentration of the node used in the secondary constructor.<\/p>\nAbstractStrategyWithGPS\n<p>basic move strategy that use a <code> GPSTrace <\/code>.<\/p>\nit.unibo.alchemist.model.implementations.movestrategies.speed\n<p>it.unibo.alchemist.model.implementations.movestrategies.target<\/p>\n<p>it.unibo.alchemist.model.implementations.movestrategies.routing<\/p>\n"
                      }]
                    },
                    "routes": {
                      "ownKey": "routes",
                      "childrenPages": {
                        "gpstraceimpl": {
                          "ownKey": "gpstraceimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/routes/gpstraceimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/routes/gpstraceimpl"
                            },
                            "description": "",
                            "title": "GPSTraceImpl",
                            "content": "<p><init><\/p>\n<p><init><\/p>\n<p>getFinalPosition<\/p>\n<p>getPreviousPosition<\/p>\n<p>getTripTime<\/p>\n<p>interpolate<\/p>\n<p>getInitialPosition<\/p>\n<p>startAt<\/p>\n<p>getStartTime<\/p>\n<p>getFinalTime<\/p>\n<p>getNextPosition<\/p>\n"
                          }]
                        },
                        "polygonalchain": {
                          "ownKey": "polygonalchain",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/routes/polygonalchain",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/routes/polygonalchain"
                            },
                            "description": "",
                            "title": "PolygonalChain",
                            "content": "<p>Abstract route implementation.<\/p><init>\n\n<init>\n\nhashCode\n\nlength\n\nstream\n\ngetPoint\n\nequals\n\niterator\n\ntoString\n<p>Prints the class name and the list of positions.<\/p>\nsize\n\ngetPoints\n\ncomputeDistance\n\n"
                          }]
                        },
                        "graphhopperroute": {
                          "ownKey": "graphhopperroute",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/routes/graphhopperroute",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/routes/graphhopperroute"
                            },
                            "description": "",
                            "title": "GraphHopperRoute",
                            "content": "<p><init><\/p>\n<p>length<\/p>\n<p>stream<\/p>\n<p>getPoint<\/p>\n<p>iterator<\/p>\n<p>size<\/p>\n<p>getPoints<\/p>\n<p>getTripTime<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/routes",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/routes"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.routes",
                        "content": "<p>PolygonalChain<\/p>\n<p>Abstract route implementation.<\/p>\nGPSTraceImpl\n<p>GraphHopperRoute<\/p>\n"
                      }]
                    },
                    "times": {
                      "ownKey": "times",
                      "childrenPages": {"doubletime": {
                        "ownKey": "doubletime",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/times/doubletime",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/times/doubletime"
                          },
                          "description": "",
                          "title": "DoubleTime",
                          "content": "<p>This class is meant to provide a reasonably fast time implementation. Should be suitable for most usages, but it inherits the problem of the loss of precision of double numbers when comparing big numbers with low numbers. It could become a real problem with long simulations.<\/p><init>\n<p>Default empty constructor, builds a DoubleTime with value 0.<\/p>\n<init>\n<p>Builds a new DoubleTime starting from the specified value.<\/p>\ntoDouble\n\nhashCode\n\nequals\n\ntimes\n\ntoString\n\ncompareTo\n\nisInfinite\n\nminus\n\nplus\n\n"
                        }]
                      }},
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/times",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/times"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.times",
                        "content": "<p>DoubleTime<\/p>\n<p>This class is meant to provide a reasonably fast time implementation. Should be suitable for most usages, but it inherits the problem of the loss of precision of double numbers when comparing big numbers with low numbers. It could become a real problem with long simulations.<\/p>\n"
                      }]
                    },
                    "nodes": {
                      "ownKey": "nodes",
                      "childrenPages": {
                        "abstractnode": {
                          "ownKey": "abstractnode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/abstractnode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/abstractnode"
                            },
                            "description": "",
                            "title": "AbstractNode",
                            "content": "<p>This class realizes an abstract node. You may extend it to realize your own nodes.<\/p><init>\n\ncontains\n<p>Tests whether a node contains a <code> Molecule <\/code>.<\/p>\nhashCode\n\ngetChemicalSpecies\n<p>This method is usefult to know how many different chemical species may be contained in this node.<\/p>\nequals\n\nsetConcentration\n<p>Sets the concentration of mol to c.<\/p>\ntoString\n\ngetId\n\ncompareTo\n\ncreateT\n\naddReaction\n\ncloneNode\n<p>Default implementation fails: override correctly calling the constructor.<\/p>\nremoveConcentration\n\ngetReactions\n\ngetConcentration\n<p>Calculates the concentration of a molecule.<\/p>\niterator\n\ngetContents\n\nforEach\n\nspliterator\n\nremoveReaction\n\n"
                          }]
                        },
                        "orientingcognitivepedestrian2d": {
                          "ownKey": "orientingcognitivepedestrian2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/orientingcognitivepedestrian2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/orientingcognitivepedestrian2d"
                            },
                            "description": "",
                            "title": "OrientingCognitivePedestrian2D",
                            "content": "<p>A cognitive  OrientingPedestrian  in an  EuclideanPhysics2DEnvironmentWithGraph .<\/p>compliance\n<p>Value between 0 and 1 representing the attitude towards conforming to social rules of this pedestrian.<\/p>\nage\n<p>The age of this pedestrian.<\/p>\ngender\n<p>The gender of this pedestrian.<\/p>\n<init>\n<p>Allows to specify age and gender with a string.<\/p>\n<init>\n<p>Allows to specify age with an int and gender with a string.<\/p>\n<init>\n<p>A cognitive  OrientingPedestrian  in an  EuclideanPhysics2DEnvironmentWithGraph .<\/p>\nprobabilityOfHelping\n<p>Value between 0 and 1 representing the probability this pedestrian will help another pedestrian in difficulty.<\/p>\ndangerBelief\n<p>Value representing the current belief of the situation dangerousness for this pedestrian.<\/p>\nfear\n<p>Value representing the level of fear of this pedestrian.<\/p>\nwantsToEvacuate\n<p>Whether or not this pedestrian intends to evacuate.<\/p>\ncognitiveCharacteristics\n<p>The list of all the cognitive characteristics of this pedestrian.<\/p>\ninfluencialPeople\n<p>A list of all the pedestrians inside at least one of the sensory spheres of this pedestrian.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        },
                        "heterogeneouspedestrian2d": {
                          "ownKey": "heterogeneouspedestrian2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/heterogeneouspedestrian2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/heterogeneouspedestrian2d"
                            },
                            "description": "",
                            "title": "HeterogeneousPedestrian2D",
                            "content": "<p>Implementation of an heterogeneous pedestrian in the Euclidean world.<\/p>shape\n<p>The shape of any pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  Euclidean2DShape s.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n\n<init>\n\n<init>\n<p>Implementation of an heterogeneous pedestrian in the Euclidean world.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        },
                        "doublenode": {
                          "ownKey": "doublenode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/doublenode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/doublenode"
                            },
                            "description": "",
                            "title": "DoubleNode",
                            "content": "<p><init><\/p>\n<p>Builds a new DoubleNode.<\/p>\ncreateT\n"
                          }]
                        },
                        "cellnodeimpl": {
                          "ownKey": "cellnodeimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/cellnodeimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/cellnodeimpl"
                            },
                            "description": "",
                            "title": "CellNodeImpl",
                            "content": "<p><init><\/p>\n<p>create a new cell node.<\/p>\n<init>\n\ncontains\n\ngetJunctionsCount\n\nremoveJunction\n\nsetConcentration\n\ngetNeighborsLinkWithJunction\n\ncontainsJunction\n\ngetDiameter\n\nsetPolarization\n\ngetJunctions\n\ngetPolarizationVersor\n\ntoString\n\ngetAllNodesLinkWithJunction\n\naddJunction\n\ngetRadius\n\naddPolarization\n\n"
                          }]
                        },
                        "circlenode": {
                          "ownKey": "circlenode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/circlenode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/circlenode"
                            },
                            "description": "",
                            "title": "CircleNode",
                            "content": "<p>A  it.unibo.alchemist.model.interfaces.Node  with a circle shape meant to be added to a\n it.unibo.alchemist.model.interfaces.environments.PhysicsEnvironment .<\/p>shape\n<p>{@inheritDoc}.<\/p>\n<init>\n<p>A  it.unibo.alchemist.model.interfaces.Node  with a circle shape meant to be added to a\n it.unibo.alchemist.model.interfaces.environments.PhysicsEnvironment .<\/p>\ncreateT\n<p>Returns null because T is unknown.<\/p>\n"
                          }]
                        },
                        "environmentnodeimpl": {
                          "ownKey": "environmentnodeimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/environmentnodeimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/environmentnodeimpl"
                            },
                            "description": "",
                            "title": "EnvironmentNodeImpl",
                            "content": "<p><init><\/p>\n<p>Create a new environment node.<\/p>\nsetConcentration\n"
                          }]
                        },
                        "intnode": {
                          "ownKey": "intnode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/intnode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/intnode"
                            },
                            "description": "",
                            "title": "IntNode",
                            "content": "<p>An integer node.<\/p><init>\n<p>An integer node.<\/p>\ncreateT\n\n"
                          }]
                        },
                        "integernode": {
                          "ownKey": "integernode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/integernode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/integernode"
                            },
                            "description": "",
                            "title": "IntegerNode",
                            "content": "<p><init><\/p>\n<p>Create a new integer node.<\/p>\ncreateT\n"
                          }]
                        },
                        "abstractorientingpedestrian": {
                          "ownKey": "abstractorientingpedestrian",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/abstractorientingpedestrian",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/abstractorientingpedestrian"
                            },
                            "description": "",
                            "title": "AbstractOrientingPedestrian",
                            "content": "<p>An abstract  OrientingPedestrian .\nThis class defines an algorithm capable of generating a pseudo-random  cognitiveMap \nbased on a  NavigationGraph  of the environment. The latter can be obtained from\n EnvironmentWithGraph s, which is the only type of environment this pedestrian can\nbe placed into. The creation of landmarks is left to subclasses via factory method.<\/p>volatileMemory\n<p>The volatile memory of the agent: it models the ability to remember areas\nof the environment already visited by the agent since the start of the\nsimulation. In particular, each area is paired with the number of visits.\nAreas are assumed to be represented as  ConvexGeometricShape s, as in\n NavigationGraph s.<\/p>\ncognitiveMap\n<p>The cognitive map of the agent. It's composed of landmarks (elements of the\nenvironment easy to remember due to their uniqueness) and spatial relations\nbetween them. It is represented using a  NavigationGraph .<\/p>\nknowledgeDegree\n<p>The knowledge degree of the agent concerning the environment, it's a Double\nvalue in <a href=\"#\">0,1<\/a> describing the percentage of the environment the agent is\nfamiliar with prior to the start of the simulation (thus it does not take\ninto account the knowledge the pedestrian will gain during it, namely the\n volatileMemory ).<\/p>\nrandomGenerator\n<p>The random generator to use in order to preserve reproducibility.<\/p>\n<init>\n<p>An abstract  OrientingPedestrian .\nThis class defines an algorithm capable of generating a pseudo-random  cognitiveMap \nbased on a  NavigationGraph  of the environment. The latter can be obtained from\n EnvironmentWithGraph s, which is the only type of environment this pedestrian can\nbe placed into. The creation of landmarks is left to subclasses via factory method.<\/p>\ngenerateLandmarkWithin\n<p>Generates a landmark entirely contained in the given region. If such region contains\none or more destinations, the generated landmark must contain at least one of them.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        },
                        "protelisnode": {
                          "ownKey": "protelisnode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/protelisnode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/protelisnode"
                            },
                            "description": "",
                            "title": "ProtelisNode",
                            "content": "<p><init><\/p>\n<p>Builds a new <code> ProtelisNode <\/code>.<\/p>\ngetNetworkManager\n<p>commit<\/p>\n<p>cloneNode<\/p>\n<p>has<\/p>\n<p>get<\/p>\n<p>get<\/p>\n<p>setup<\/p>\n<p>putField<\/p>\n<p>Writes a Map representation of the Field on the environment.<\/p>\nput\n<p>toString<\/p>\n<p>remove<\/p>\n<p>createT<\/p>\n<p>addNetworkManger<\/p>\n<p>Adds a new <code> AlchemistNetworkManager <\/code>.<\/p>\nkeySet\n"
                          }]
                        },
                        "orientingpedestrian2d": {
                          "ownKey": "orientingpedestrian2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/orientingpedestrian2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/orientingpedestrian2d"
                            },
                            "description": "",
                            "title": "OrientingPedestrian2D",
                            "content": "<p>An  OrientingPedestrian  in an euclidean bidimensional space.\nThis class defines the method responsible for the creation of landmarks, which\nare represented as  Ellipse s. These can represent both the human error concerning\nthe exact position of a landmark inside the ellipse and the error concerning the\nangles formed by the connections between landmarks.\nThis class accepts an environment whose graph contains nodes which are (subclasses\nof)  ConvexPolygon s.<\/p>shape\n<p>The shape of any pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  Euclidean2DShape s.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n<p>An  OrientingPedestrian  in an euclidean bidimensional space.\nThis class defines the method responsible for the creation of landmarks, which\nare represented as  Ellipse s. These can represent both the human error concerning\nthe exact position of a landmark inside the ellipse and the error concerning the\nangles formed by the connections between landmarks.\nThis class accepts an environment whose graph contains nodes which are (subclasses\nof)  ConvexPolygon s.<\/p>\ngenerateLandmarkWithin\n<p>Generates a landmark entirely contained in the given region. If such region contains\none or more destinations, the generated landmark must contain at least one of them.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        },
                        "homogeneouspedestrianimpl": {
                          "ownKey": "homogeneouspedestrianimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/homogeneouspedestrianimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/homogeneouspedestrianimpl"
                            },
                            "description": "",
                            "title": "HomogeneousPedestrianImpl",
                            "content": "<p>Implementation of a basic pedestrian.<\/p>membershipGroup\n<p>The group this pedestrian belongs to.<\/p>\nwalkingSpeed\n<p>The speed at which the pedestrian moves if it's walking.<\/p>\nrunningSpeed\n<p>The speed at which the pedestrian moves if it's running.<\/p>\nsenses\n<p>The list of influence spheres belonging to this pedestrian.<\/p>\nshape\n<p>The shape of the node.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n<p>Implementation of a basic pedestrian.<\/p>\ncreateT\n\nspeed\n<p>The speed at which the pedestrian is moving.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        },
                        "cognitivepedestrianimpl": {
                          "ownKey": "cognitivepedestrianimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/cognitivepedestrianimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/cognitivepedestrianimpl"
                            },
                            "description": "",
                            "title": "CognitivePedestrianImpl",
                            "content": "<p>Implementation of a cognitive pedestrian.<\/p>danger\n<pre><code>    the molecule associated to danger in the environment.<\/code><\/pre>\n<init>\n<p>Implementation of a cognitive pedestrian.<\/p>\nspeed\n<p>The speed at which the pedestrian is moving.<\/p>\ndangerBelief\n<p>Value representing the current belief of the situation dangerousness for this pedestrian.<\/p>\nfear\n<p>Value representing the level of fear of this pedestrian.<\/p>\ncognitiveCharacteristics\n<p>The list of all the cognitive characteristics of this pedestrian.<\/p>\nwantsToEvacuate\n<p>Whether or not this pedestrian intends to evacuate.<\/p>\ninfluencialPeople\n<p>A list of all the pedestrians inside at least one of the sensory spheres of this pedestrian.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        },
                        "circulardeformablecellimpl": {
                          "ownKey": "circulardeformablecellimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/circulardeformablecellimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/circulardeformablecellimpl"
                            },
                            "description": "",
                            "title": "CircularDeformableCellImpl",
                            "content": "<p>Implementation of a circular deformable cell.<\/p><init>\n<p>Create a circular deformable cell of maxDiam = maxDiameter and minDiam = deformability * maxDiam.<\/p>\ngetMaxRadius\n\ngetMaxDiameter\n\n"
                          }]
                        },
                        "heterogeneouspedestrianimpl": {
                          "ownKey": "heterogeneouspedestrianimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/heterogeneouspedestrianimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/heterogeneouspedestrianimpl"
                            },
                            "description": "",
                            "title": "HeterogeneousPedestrianImpl",
                            "content": "<p>Implementation of an heterogeneous pedestrian.<\/p>compliance\n<p>Value between 0 and 1 representing the attitude towards conforming to social rules of this pedestrian.<\/p>\nwalkingSpeed\n<p>The speed at which the pedestrian moves if it's walking.<\/p>\nrunningSpeed\n<p>The speed at which the pedestrian moves if it's running.<\/p>\nage\n<pre><code>    the age of this pedestrian.<\/code><\/pre>\ngender\n<pre><code>    the gender of this pedestrian<\/code><\/pre>\n<init>\n<p>Implementation of an heterogeneous pedestrian.<\/p>\nprobabilityOfHelping\n<p>Value between 0 and 1 representing the probability this pedestrian will help another pedestrian in difficulty.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        },
                        "lsanode": {
                          "ownKey": "lsanode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/lsanode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/lsanode"
                            },
                            "description": "",
                            "title": "LsaNode",
                            "content": "<p>This class realizes a node with LSA concentration.<\/p><init>\n\ncontains\n\ngetChemicalSpecies\n\nsetConcentration\n\nsetConcentration\n\ntoString\n\ncreateT\n\nremoveConcentration\n\ngetConcentration\n\ngetLsaSpace\n\ngetContents\n\n"
                          }]
                        },
                        "homogeneouspedestrian2d": {
                          "ownKey": "homogeneouspedestrian2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/homogeneouspedestrian2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/homogeneouspedestrian2d"
                            },
                            "description": "",
                            "title": "HomogeneousPedestrian2D",
                            "content": "<p>Implementation of a basic pedestrian in the Euclidean world.<\/p>shape\n<p>The shape of the node.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n<p>Implementation of a basic pedestrian in the Euclidean world.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        },
                        "cognitivepedestrian2d": {
                          "ownKey": "cognitivepedestrian2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/nodes/cognitivepedestrian2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/cognitivepedestrian2d"
                            },
                            "description": "",
                            "title": "CognitivePedestrian2D",
                            "content": "<p>Implementation of a cognitive pedestrian in the Euclidean world.<\/p>shape\n<p>The shape of any pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  Euclidean2DShape s.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n\n<init>\n\n<init>\n<p>Implementation of a cognitive pedestrian in the Euclidean world.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/nodes",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.nodes",
                        "content": "<p>AbstractOrientingPedestrian<\/p>\n<p>An abstract  OrientingPedestrian .\nThis class defines an algorithm capable of generating a pseudo-random  cognitiveMap \nbased on a  NavigationGraph  of the environment. The latter can be obtained from\n EnvironmentWithGraph s, which is the only type of environment this pedestrian can\nbe placed into. The creation of landmarks is left to subclasses via factory method.<\/p>\nCognitivePedestrian2D\n<p>Implementation of a cognitive pedestrian in the Euclidean world.<\/p>\nCognitivePedestrianImpl\n<p>Implementation of a cognitive pedestrian.<\/p>\nHeterogeneousPedestrian2D\n<p>Implementation of an heterogeneous pedestrian in the Euclidean world.<\/p>\nHeterogeneousPedestrianImpl\n<p>Implementation of an heterogeneous pedestrian.<\/p>\nHomogeneousPedestrian2D\n<p>Implementation of a basic pedestrian in the Euclidean world.<\/p>\nHomogeneousPedestrianImpl\n<p>Implementation of a basic pedestrian.<\/p>\nOrientingCognitivePedestrian2D\n<p>A cognitive  OrientingPedestrian  in an  EuclideanPhysics2DEnvironmentWithGraph .<\/p>\nOrientingPedestrian2D\n<p>An  OrientingPedestrian  in an euclidean bidimensional space.\nThis class defines the method responsible for the creation of landmarks, which\nare represented as  Ellipse s. These can represent both the human error concerning\nthe exact position of a landmark inside the ellipse and the error concerning the\nangles formed by the connections between landmarks.\nThis class accepts an environment whose graph contains nodes which are (subclasses\nof)  ConvexPolygon s.<\/p>\nCircleNode\n<p>A  it.unibo.alchemist.model.interfaces.Node  with a circle shape meant to be added to a\n it.unibo.alchemist.model.interfaces.environments.PhysicsEnvironment .<\/p>\nIntNode\n<p>An integer node.<\/p>\nAbstractNode\n<p>This class realizes an abstract node. You may extend it to realize your own nodes.<\/p>\nEnvironmentNodeImpl\n<p>CellNodeImpl<\/p>\n<p>IntegerNode<\/p>\n<p>DoubleNode<\/p>\n<p>CircularDeformableCellImpl<\/p>\n<p>Implementation of a circular deformable cell.<\/p>\nProtelisNode\n<p>LsaNode<\/p>\n<p>This class realizes a node with LSA concentration.<\/p>\n"
                      }]
                    },
                    "layers": {
                      "ownKey": "layers",
                      "childrenPages": {
                        "biomolgradientlayer": {
                          "ownKey": "biomolgradientlayer",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/layers/biomolgradientlayer",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/biomolgradientlayer"
                            },
                            "description": "",
                            "title": "BiomolGradientLayer",
                            "content": "<p>A <code> Layer <\/code> representing a linear distribution in space of a molecule.<\/p><init>\n<p>Initialize a gradient layer which grows in concentration proportionally in space.<\/p>\n<init>\n<p>Initialize a gradient layer which grows in concentration proportionally in space.<\/p>\ngetSteep\n\ngetParameters\n\ntoString\n\ngetValue\n\n"
                          }]
                        },
                        "bidimensionalgaussianlayer": {
                          "ownKey": "bidimensionalgaussianlayer",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/layers/bidimensionalgaussianlayer",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/bidimensionalgaussianlayer"
                            },
                            "description": "",
                            "title": "BidimensionalGaussianLayer",
                            "content": "<p>A  Layer  based on a  2D gaussian function  and an optional baseline value.<\/p>function\n<p>The function on which the layer is based.<\/p>\ncenterX\n<p>x coord of the layer's center.<\/p>\ncenterY\n<p>y coord of the layer's center.<\/p>\n<init>\n<p>A  Layer  based on a  2D gaussian function  and an optional baseline value.<\/p>\ngetValue\n\n"
                          }]
                        },
                        "uniformlayer": {
                          "ownKey": "uniformlayer",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/layers/uniformlayer",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/uniformlayer"
                            },
                            "description": "",
                            "title": "UniformLayer",
                            "content": "<p>a Layer where the concentration is the same at every point in space.<\/p><init>\n\ngetValue\n\n"
                          }]
                        },
                        "steplayer": {
                          "ownKey": "steplayer",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/layers/steplayer",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/steplayer"
                            },
                            "description": "",
                            "title": "StepLayer",
                            "content": "<p>Implements a <code> Layer <\/code> with a discontinue spatial distribution: the plane is divided in two parts, both with a constant concentration but with a different in value.<\/p><init>\n<p>Initialize a <code> StepLayer <\/code>.<\/p>\n<init>\n<p>Initialize a <code> StepLayer <\/code> where concentration is at its maximum value in first quadrant (for positive values of x and y).<\/p>\ngetValue\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/layers",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.layers",
                        "content": "<p>BidimensionalGaussianLayer<\/p>\n<p>A  Layer  based on a  2D gaussian function  and an optional baseline value.<\/p>\nStepLayer\n<p>Implements a <code> Layer <\/code> with a discontinue spatial distribution: the plane is divided in two parts, both with a constant concentration but with a different in value.<\/p>\nUniformLayer\n<p>a Layer where the concentration is the same at every point in space.<\/p>\nBiomolGradientLayer\n<p>A <code> Layer <\/code> representing a linear distribution in space of a molecule.<\/p>\n"
                      }]
                    },
                    "timedistributions": {
                      "ownKey": "timedistributions",
                      "childrenPages": {
                        "weibulldistributedweibulltime": {
                          "ownKey": "weibulldistributedweibulltime",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/weibulldistributedweibulltime",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/weibulldistributedweibulltime"
                            },
                            "description": "",
                            "title": "WeibullDistributedWeibullTime",
                            "content": "<p>Weibull distributed events, with different (Weibull distributed) mean.<\/p><init>\n\n<init>\n\n<init>\n\n"
                          }]
                        },
                        "weibulltime": {
                          "ownKey": "weibulltime",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/weibulltime",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/weibulltime"
                            },
                            "description": "",
                            "title": "WeibullTime",
                            "content": "<p>Weibull distributed events.<\/p><init>\n\n<init>\n\n<init>\n\nupdateStatus\n\nclone\n\ngetDeviation\n\ngetMean\n\ngetRate\n\ngenSample\n\nweibullFromMean\n<p>Generates a WeibullDistribution given its mean and standard deviation.<\/p>\n"
                          }]
                        },
                        "sapereexponentialtime": {
                          "ownKey": "sapereexponentialtime",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/sapereexponentialtime",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/sapereexponentialtime"
                            },
                            "description": "",
                            "title": "SAPEREExponentialTime",
                            "content": "<p>Allows for a Markovian event whose lambda is computed dynamically using a rate equation.<\/p><init>\n\n<init>\n\nsetMatches\n\ngetRateEquation\n\nisStatic\n\ngetRate\n\n"
                          }]
                        },
                        "diraccomb": {
                          "ownKey": "diraccomb",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/diraccomb",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/diraccomb"
                            },
                            "description": "",
                            "title": "DiracComb",
                            "content": "<p>A DiracComb is a sequence of events that happen every fixed time interval.<\/p><init>\n\n<init>\n\nupdateStatus\n\nclone\n\ntoString\n\ngetRate\n\n"
                          }]
                        },
                        "abstractdistribution": {
                          "ownKey": "abstractdistribution",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/abstractdistribution",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/abstractdistribution"
                            },
                            "description": "",
                            "title": "AbstractDistribution",
                            "content": "<p>This class provides, through a template method pattern, an utility that ensures that the distribution does not trigger events before its initial scheduling time.<\/p><init>\n\nupdate\n\ngetNextOccurence\n\nupdateStatus\n<p>Implement this method to update the distribution's internal status.<\/p>\nclone\n\nsetTau\n<p>Allows subclasses to set the next putative time. Use with care.<\/p>\n"
                          }]
                        },
                        "anyrealdistribution": {
                          "ownKey": "anyrealdistribution",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/anyrealdistribution",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/anyrealdistribution"
                            },
                            "description": "",
                            "title": "AnyRealDistribution",
                            "content": "<p>This class is able to use any distribution provided by Apache Math 3 as a subclass of RealDistribution. Being generic, however, it does not allow for dynamic rate tuning (namely, it can't be used to generate events with varying frequency based on <code> it.unibo.alchemist.model.interfaces.Condition#getPropensityContribution() <\/code>.<\/p><init>\n\n<init>\n\n<init>\n\n<init>\n\nupdateStatus\n\nclone\n\ngetRate\n\n"
                          }]
                        },
                        "trigger": {
                          "ownKey": "trigger",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/trigger",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/trigger"
                            },
                            "description": "",
                            "title": "Trigger",
                            "content": "<p><init><\/p>\n<p>updateStatus<\/p>\n<p>clone<\/p>\n<p>getRate<\/p>\n"
                          }]
                        },
                        "randomdiraccomb": {
                          "ownKey": "randomdiraccomb",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/randomdiraccomb",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/randomdiraccomb"
                            },
                            "description": "",
                            "title": "RandomDiracComb",
                            "content": "<p>A <code> DiracComb <\/code> whose rate is determined (uniformly) randomly within the provided bounds.<\/p><init>\n\n<init>\n\n"
                          }]
                        },
                        "exponentialtime": {
                          "ownKey": "exponentialtime",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/exponentialtime",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/exponentialtime"
                            },
                            "description": "",
                            "title": "ExponentialTime",
                            "content": "<p>Markovian events.<\/p><init>\n\n<init>\n\nupdateStatus\n\nclone\n<p>Must be overridden by subclasses returning the correct instance.<\/p>\ngenTime\n\ngetRate\n\n"
                          }]
                        },
                        "saperetimedistribution": {
                          "ownKey": "saperetimedistribution",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/timedistributions/saperetimedistribution",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/saperetimedistribution"
                            },
                            "description": "",
                            "title": "SAPERETimeDistribution",
                            "content": "<p>Interface for TimeDistribution that need matches.<\/p>getRateEquation\n<p>isStatic<\/p>\n<p>setMatches<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/timedistributions",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.timedistributions",
                        "content": "<p>AnyRealDistribution<\/p>\n<p>This class is able to use any distribution provided by Apache Math 3 as a subclass of RealDistribution. Being generic, however, it does not allow for dynamic rate tuning (namely, it can't be used to generate events with varying frequency based on <code> it.unibo.alchemist.model.interfaces.Condition#getPropensityContribution() <\/code>.<\/p>\nExponentialTime\n<p>Markovian events.<\/p>\nWeibullTime\n<p>Weibull distributed events.<\/p>\nDiracComb\n<p>A DiracComb is a sequence of events that happen every fixed time interval.<\/p>\nWeibullDistributedWeibullTime\n<p>Weibull distributed events, with different (Weibull distributed) mean.<\/p>\nTrigger\n<p>RandomDiracComb<\/p>\n<p>A <code> DiracComb <\/code> whose rate is determined (uniformly) randomly within the provided bounds.<\/p>\nAbstractDistribution\n<p>This class provides, through a template method pattern, an utility that ensures that the distribution does not trigger events before its initial scheduling time.<\/p>\nSAPERETimeDistribution\n<p>Interface for TimeDistribution that need matches.<\/p>\nSAPEREExponentialTime\n<p>Allows for a Markovian event whose lambda is computed dynamically using a rate equation.<\/p>\n"
                      }]
                    },
                    "geometry": {
                      "ownKey": "geometry",
                      "childrenPages": {
                        "euclidean2d": {
                          "ownKey": "euclidean2d",
                          "childrenPages": {
                            "segment2dimpl": {
                              "ownKey": "segment2dimpl",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/segment2dimpl",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/segment2dimpl"
                                },
                                "description": "",
                                "title": "Segment2DImpl",
                                "content": "<p>Defines a segment from  first  to  second  in an euclidean bidimensional space.<\/p>first\n<p>First point.<\/p>\nsecond\n<p>Second point.<\/p>\n<init>\n<p>Defines a segment from  first  to  second  in an euclidean bidimensional space.<\/p>\ncopyWith\n<p>Creates a copy of this Segment2D using the specified  first  and  second  points.<\/p>\n"
                              }]
                            },
                            "awtshapeextension": {
                              "ownKey": "awtshapeextension",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/awtshapeextension",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/awtshapeextension"
                                },
                                "description": "",
                                "title": "AwtShapeExtension",
                                "content": "<p>Collection of extensions to Java AWT meant to simplify its usage as geometric engine.<\/p>vertices\n<p>Obtains the vertices of a polygonal shape. Any curved segment connecting\ntwo points will be considered as a straight line between them.<\/p>\n"
                              }]
                            },
                            "navigator": {
                              "ownKey": "navigator",
                              "childrenPages": {"extendableconvexpolygoninenvironment": {
                                "ownKey": "extendableconvexpolygoninenvironment",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/navigator/extendableconvexpolygoninenvironment",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/navigator/extendableconvexpolygoninenvironment"
                                  },
                                  "description": "",
                                  "title": "ExtendableConvexPolygonInEnvironment",
                                  "content": "<p>An  ExtendableConvexPolygon  located inside an environment with obstacles.\nObstacles, as well as the environment's boundaries, are taken into account when the polygon is\nextended (i.e. the polygon is prevented from intersecting an obstacle or growing beyond such\nboundaries).\nA rectangular region is assumed, its origin, width and height are to be specified. Both\n<a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>s and  ConvexPolygon s can be specified as obstacles (see awtObstacles\nand  polygonalObstacles ).\nThis class is explicitly designed for the algorithm contained in  generateNavigationGraph .\nTODO(improve the quality of this class)<\/p>polygonalObstacles\n<p>Obstacles represented as  ConvexPolygon s, are assumed to be mutable but limited to the extension\n(i.e. they can only grow, not shrink). This is the behavior of seeds used by  generateNavigationGraph ,\nmaking this assumption allows to cache useful data such as whether an edge can still advance or\nan obstacle has already been encountered. This is a var but is assumed to be set only once before\nstarting to extend this polygon.<\/p>\n<init>\n<p>An  ExtendableConvexPolygon  located inside an environment with obstacles.\nObstacles, as well as the environment's boundaries, are taken into account when the polygon is\nextended (i.e. the polygon is prevented from intersecting an obstacle or growing beyond such\nboundaries).\nA rectangular region is assumed, its origin, width and height are to be specified. Both\n<a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>s and  ConvexPolygon s can be specified as obstacles (see awtObstacles\nand  polygonalObstacles ).\nThis class is explicitly designed for the algorithm contained in  generateNavigationGraph .\nTODO(improve the quality of this class)<\/p>\naddVertex\n<p>Adds a vertex to the polygon.<\/p>\nremoveVertex\n<p>Removes a vertex from the polygon.<\/p>\nmoveVertex\n<p>Moves a vertex of the polygon to a new absolute position.<\/p>\nreplaceEdge\n<p>Replaces an edge of the polygon.<\/p>\nadvanceEdge\n<p>Advances an edge in its normal direction of a quantity equal to  step , if  extend  has\nmodified the growth direction of the edge so as to follow an oblique obstacle (advanced case),\nthe modified growth direction is used.\nThe polygon is prevented from growing out of the environment's boundaries, but not from\nintersecting obstacles.<\/p>\nextend\n<p>Extends the polygon in each direction of a quantity equal to  step .\nThe advancement of an edge is blocked if an obstacle is intersected, unless in a\nparticular case called advanced case. Such case shows up when a single vertex of\nthe polygon intruded an obstacle, but no vertex from the obstacle intruded the polygon.\nPlus, the intruded side of the obstacle should be oblique (or better, its slope should\nbe different from the one of the advancing edge).\nWhen this happens, we can do a simple operation in order to keep growing and allow a\nhigher coverage of the walkable area. We increment the order of the polygon (by adding\na vertex) and adjust the direction of growth in order for the new edge to follow the\nside of the obstacle.<\/p>\nequals\n\nhashCode\n\n"
                                }]
                              }},
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/navigator",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/navigator"
                                },
                                "description": "",
                                "title": "it.unibo.alchemist.model.implementations.geometry.euclidean2d.navigator",
                                "content": "<p>ExtendableConvexPolygonInEnvironment<\/p>\n<p>An  ExtendableConvexPolygon  located inside an environment with obstacles.\nObstacles, as well as the environment's boundaries, are taken into account when the polygon is\nextended (i.e. the polygon is prevented from intersecting an obstacle or growing beyond such\nboundaries).\nA rectangular region is assumed, its origin, width and height are to be specified. Both\n<a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>s and  ConvexPolygon s can be specified as obstacles (see awtObstacles\nand  polygonalObstacles ).\nThis class is explicitly designed for the algorithm contained in  generateNavigationGraph .\nTODO(improve the quality of this class)<\/p>\ngenerateNavigationGraph\n<p>NaviGator (Navigation Graphs Generator) is an algorithm capable of generating an\n Euclidean2DNavigationGraph  of a given environment with obstacles. The nodes of\nthe produced graph are convex polygons representing the areas of the environment\ntraversable by agents (namely, walkable areas), whereas edges represent connections\nbetween them.<\/p><p>NaviGator works with rectangular-shaped bidimensional environments with euclidean\ngeometry and double precision coordinates. Note that this algorithm:<\/p><ul><li>does not guarantee the coverage of 100% of the walkable area.<\/li><li>is only capable to deal with convex polygonal obstacles (concave ones can be\ndecomposed into convex meshes, whereas for curves bounding boxes can be used).<\/li><li>is only capable to detect axis-aligned crossings.<\/li><li>can take a significant amount of time to generate a navigation graph.<\/li><\/ul><p>Here's a brief description of how the algorithm operates:\nFirstly, a certain number of seeds is planted in the environment. Each seed is a\nsquare-shaped region of unitary side that will grow maintaining a convex shape.\nSecondly, planted seeds are extended until possible (i.e. until they are in contact\nwith an obstacle or another seed on each side). Finally, crossings are found between\nthe grown seeds.<\/p>\n"
                              }]
                            },
                            "ellipse": {
                              "ownKey": "ellipse",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/ellipse",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/ellipse"
                                },
                                "description": "",
                                "title": "Ellipse",
                                "content": "<p>Adapter of <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Ellipse2D.html\">java.awt.geom.Ellipse2D<\/a> to  Euclidean2DConvexShape .<\/p>centroid\n<p>The geometric center.<\/p>\ndiameter\n<p>The largest distance between any pair of vertices.<\/p>\n<init>\n<p>Adapter of <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Ellipse2D.html\">java.awt.geom.Ellipse2D<\/a> to  Euclidean2DConvexShape .<\/p>\nintersects\n<p>A shape intersects another if any of its points is contained in the other one.<\/p>\ncontains\n<p>Check if the shape contains a vector.<\/p>\ntransformed\n<p>Transforms the shape.<\/p>\nasAwtShape\n\n"
                              }]
                            },
                            "awtmutableconvexpolygon": {
                              "ownKey": "awtmutableconvexpolygon",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/awtmutableconvexpolygon",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/awtmutableconvexpolygon"
                                },
                                "description": "",
                                "title": "AwtMutableConvexPolygon",
                                "content": "<p> MutableConvexPolygon  partly delegated to AwtEuclidean2DShape and java.awt.geom.\nEach modification operation on this object has a time complexity of O(n), where n is\nthe number of vertices/edges.\nCollinear points are allowed.<\/p>diameter\n<p>The largest distance between any pair of vertices.<\/p>\ncentroid\n<p>The geometric center.<\/p>\n<init>\n<p> MutableConvexPolygon  partly delegated to AwtEuclidean2DShape and java.awt.geom.\nEach modification operation on this object has a time complexity of O(n), where n is\nthe number of vertices/edges.\nCollinear points are allowed.<\/p>\nvertices\n\ngetEdge\n\nedges\n\naddVertex\n<p>Adds a vertex to the polygon.<\/p>\nremoveVertex\n<p>Removes a vertex from the polygon.<\/p>\nmoveVertex\n<p>Moves a vertex of the polygon to a new absolute position.<\/p>\nreplaceEdge\n<p>Replaces an edge of the polygon.<\/p>\ncontains\n<p>Delegated to AwtEuclidean2DShape (adopts the definition of insideness used by\n<a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>s).<\/p>\nintersects\n<p>Delegated to <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Area.html\">java.awt.geom.Area<\/a>, this is accurate and does not consider adjacent\nshapes to be intersecting.<\/p>\nintersects\n<p>Delegated to AwtEuclidean2DShape unless  other  is  AwtShapeCompatible , in which case\n intersects  is used so as to guarantee maximum accuracy.<\/p>\ntransformed\n<p>Transforms the shape.<\/p>\nasAwtShape\n\nequals\n\nhashCode\n\n"
                              }]
                            },
                            "fieldofview2d": {
                              "ownKey": "fieldofview2d",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/fieldofview2d",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/fieldofview2d"
                                },
                                "description": "",
                                "title": "FieldOfView2D",
                                "content": "<p>A sphere of influence representing the sight of a node in the Euclidean world.<\/p><init>\n<p>A sphere of influence representing the sight of a node in the Euclidean world.<\/p>\n"
                              }]
                            },
                            "influencesphere2d": {
                              "ownKey": "influencesphere2d",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/influencesphere2d",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/influencesphere2d"
                                },
                                "description": "",
                                "title": "InfluenceSphere2D",
                                "content": "<p>A sphere of influence in the Euclidean world.<\/p><init>\n<p>A sphere of influence in the Euclidean world.<\/p>\ninfluentialNodes\n<p>The list of nodes relevant for this sphere of influence.<\/p>\n"
                              }]
                            },
                            "abstractconvexpolygon": {
                              "ownKey": "abstractconvexpolygon",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/abstractconvexpolygon",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/abstractconvexpolygon"
                                },
                                "description": "",
                                "title": "AbstractConvexPolygon",
                                "content": "<p>An abstract  ConvexPolygon  providing a convexity test.<\/p><init>\n<p>An abstract  ConvexPolygon  providing a convexity test.<\/p>\nliesOnBoundary\n<p>Checks if a vector (= a point) lies on the polygon's boundary.<\/p>\ncontainsBoundaryIncluded\n<p>Checks if a vector (= a point) is contained in the polygon or lies on its boundary.<\/p>\ncontainsBoundaryExcluded\n<p>Checks if a vector (= a point) is contained in the polygon, boundary excluded.<\/p>\ncontains\n<p>Checks if the polygon contains a polygonal <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a> (i.e. without curved\nsegments). A polygonal shape is contained in a polygon if all of its points are\ncontained in (or lie on the boundary of) the latter.<\/p>\nisAdjacentTo\n<p>A polygon is adjacent to another if any of its points lies on the boundary of the other.<\/p>\nisAdjacentTo\n<p>Checks if the polygon is adjacent to a convex polygonal <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>.<\/p>\nintersects\n<p>Checks if a segment intersects with the polygon, segments lying on the polygon's\nboundary are not considered to be intersecting.<\/p>\nclosestEdgeTo\n<p>Finds the edge of the polygon closest to the provided  segment , i.e. the first one\nthat would collide (= intersect) with the segment in case the polygon extended on\neach side.<\/p>\ntoString\n\ncircularPrevious\n<p>Finds the previous index with the respect to the given  index , restarting from the end if necessary.<\/p>\ncircularNext\n<p>Finds the next index with respect to the given  index , restarting from the beginning if necessary.<\/p>\nisConvex\n<p>Checks if the polygon is convex (see  ConvexPolygon ).\nIn order to be convex, a polygon must first be simple (not self-intersecting).\nAscertained that the polygon is simple, a rather easy convexity test consists\nin checking that every edge turns in the same direction (either left or right)\nwith respect to the previous one. If they all turn in the same direction, then\nthe polygon is convex. That is the definition of convexity of a polygon's boundary\nin this context.<\/p>\nisConvex\n<p>Checks if the polygon is convex, assuming that every edge apart from the specified\nones does not cause self-intersection.<\/p>\n"
                              }]
                            },
                            "graph": {
                              "ownKey": "graph",
                              "childrenPages": {
                                "basenavigationgraph": {
                                  "ownKey": "basenavigationgraph",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/basenavigationgraph",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/basenavigationgraph"
                                    },
                                    "description": "",
                                    "title": "BaseNavigationGraph",
                                    "content": "<p>An implementation of  NavigationGraph , deriving from <a href=\"#\">AbstractBaseGraph<\/a>.\nThe user can specify the <a href=\"#\">GraphType<\/a> so as to obtain a custom graph (e.g. weighted or not,\ndirected or undirected, etc). <a href=\"#\">AbstractBaseGraph<\/a> guarantees deterministic ordering for\nthe collection it maintains, as stated in its api documentation.\nNote that vertices and edges are used as keys inside <a href=\"#\">AbstractBaseGraph<\/a>, so when choosing\ntheir types, you must follow these rules:<\/p><ul><li>You must follow the contract defined in java.lang.Object for both equals and hashCode.<\/li><li>In particular, if you override either equals or hashCode, you must override them both.<\/li><li>Your implementation for hashCode must produce a value which does not change over the\nlifetime of the object.\nFurther information available <a href=\"https://jgrapht.org/guide/VertexAndEdgeTypes\">here<\/a>.<\/li><\/ul><init>\n\n<init>\n<p>An implementation of  NavigationGraph , deriving from <a href=\"#\">AbstractBaseGraph<\/a>.\nThe user can specify the <a href=\"#\">GraphType<\/a> so as to obtain a custom graph (e.g. weighted or not,\ndirected or undirected, etc). <a href=\"#\">AbstractBaseGraph<\/a> guarantees deterministic ordering for\nthe collection it maintains, as stated in its api documentation.\nNote that vertices and edges are used as keys inside <a href=\"#\">AbstractBaseGraph<\/a>, so when choosing\ntheir types, you must follow these rules:<\/p><ul><li>You must follow the contract defined in java.lang.Object for both equals and hashCode.<\/li><li>In particular, if you override either equals or hashCode, you must override them both.<\/li><li>Your implementation for hashCode must produce a value which does not change over the\nlifetime of the object.\nFurther information available <a href=\"https://jgrapht.org/guide/VertexAndEdgeTypes\">here<\/a>.<\/li><\/ul>\n"
                                  }]
                                },
                                "directedeuclidean2dnavigationgraph": {
                                  "ownKey": "directedeuclidean2dnavigationgraph",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/directedeuclidean2dnavigationgraph",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/directedeuclidean2dnavigationgraph"
                                    },
                                    "description": "",
                                    "title": "DirectedEuclidean2DNavigationGraph",
                                    "content": "<p>A directed  Euclidean2DNavigationGraph .<\/p>\n"
                                  }]
                                },
                                "undirectednavigationgraph": {
                                  "ownKey": "undirectednavigationgraph",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/undirectednavigationgraph",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/undirectednavigationgraph"
                                    },
                                    "description": "",
                                    "title": "UndirectedNavigationGraph",
                                    "content": "<p>An undirected unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p><init>\n<p>An undirected unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p>\n"
                                  }]
                                },
                                "directednavigationgraph": {
                                  "ownKey": "directednavigationgraph",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/directednavigationgraph",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/directednavigationgraph"
                                    },
                                    "description": "",
                                    "title": "DirectedNavigationGraph",
                                    "content": "<p>A directed unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p><init>\n<p>A directed unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p>\n"
                                  }]
                                }
                              },
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph"
                                },
                                "description": "",
                                "title": "it.unibo.alchemist.model.implementations.geometry.euclidean2d.graph",
                                "content": "<p>BaseNavigationGraph<\/p>\n<p>An implementation of  NavigationGraph , deriving from <a href=\"#\">AbstractBaseGraph<\/a>.\nThe user can specify the <a href=\"#\">GraphType<\/a> so as to obtain a custom graph (e.g. weighted or not,\ndirected or undirected, etc). <a href=\"#\">AbstractBaseGraph<\/a> guarantees deterministic ordering for\nthe collection it maintains, as stated in its api documentation.\nNote that vertices and edges are used as keys inside <a href=\"#\">AbstractBaseGraph<\/a>, so when choosing\ntheir types, you must follow these rules:<\/p><ul><li>You must follow the contract defined in java.lang.Object for both equals and hashCode.<\/li><li>In particular, if you override either equals or hashCode, you must override them both.<\/li><li>Your implementation for hashCode must produce a value which does not change over the\nlifetime of the object.\nFurther information available <a href=\"https://jgrapht.org/guide/VertexAndEdgeTypes\">here<\/a>.<\/li><\/ul>\nDirectedNavigationGraph\n<p>A directed unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p>\nUndirectedNavigationGraph\n<p>An undirected unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p>\nDirectedEuclidean2DNavigationGraph\n<p>A directed  Euclidean2DNavigationGraph .<\/p>\nDirectedEuclidean2DNavigationGraph\n<p>A directed  Euclidean2DNavigationGraph .<\/p>\npathExists\n<p>Checks whether a path exists between  source  and  sink .\n<a href=\"#\">DijkstraShortestPath<\/a> is used instead of <a href=\"#\">org.jgrapht.alg.connectivity.ConnectivityInspector.pathExists<\/a>,\nbecause, in case of directed graph, the latter checks whether the given vertices lay in the same weakly\nconnected component, which is not the desired behavior.\nAs unweighted graphs have a default edge weight of 1.0, shortest path algorithms can always be applied\nmeaningfully.<\/p>\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.model.implementations.geometry.euclidean2d",
                            "content": "<p>AbstractConvexPolygon<\/p>\n<p>An abstract  ConvexPolygon  providing a convexity test.<\/p>\nAwtMutableConvexPolygon\n<p> MutableConvexPolygon  partly delegated to AwtEuclidean2DShape and java.awt.geom.\nEach modification operation on this object has a time complexity of O(n), where n is\nthe number of vertices/edges.\nCollinear points are allowed.<\/p>\nAwtShapeExtension\n<p>Collection of extensions to Java AWT meant to simplify its usage as geometric engine.<\/p>\nEllipse\n<p>Adapter of <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Ellipse2D.html\">java.awt.geom.Ellipse2D<\/a> to  Euclidean2DConvexShape .<\/p>\nFieldOfView2D\n<p>A sphere of influence representing the sight of a node in the Euclidean world.<\/p>\nInfluenceSphere2D\n<p>A sphere of influence in the Euclidean world.<\/p>\nSegment2DImpl\n<p>Defines a segment from  first  to  second  in an euclidean bidimensional space.<\/p>\nit.unibo.alchemist.model.implementations.geometry.euclidean2d.graph\n<p>it.unibo.alchemist.model.implementations.geometry.euclidean2d.navigator<\/p>\n<p>fromShape<\/p>\n<p>Creates a MutableConvexPolygon from a java.awt.Shape.\nIf the Polygon could not be created (e.g. because of the\nnon-convexity of the given shape), an empty optional is\nreturned.\nEach curved segment of the shape will be considered as\na straight line.<\/p>\n"
                          }]
                        },
                        "adimensionalshape": {
                          "ownKey": "adimensionalshape",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/geometry/adimensionalshape",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/adimensionalshape"
                            },
                            "description": "",
                            "title": "AdimensionalShape",
                            "content": "<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.\nIt also ignores any transformation.<\/p>diameter\n<p>The largest distance between any pair of vertices.<\/p>\ncentroid\n<p>The geometric center.<\/p>\n<init>\n<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.\nIt also ignores any transformation.<\/p>\nintersects\n<p>A shape intersects another if any of its points is contained in the other one.<\/p>\ncontains\n<p>Check if the shape contains a vector.<\/p>\ntransformed\n<p>Any transformation is ignored.<\/p>\n"
                          }]
                        },
                        "awtshapecompatible": {
                          "ownKey": "awtshapecompatible",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/geometry/awtshapecompatible",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/awtshapecompatible"
                            },
                            "description": "",
                            "title": "AwtShapeCompatible",
                            "content": "<p>Anything which can be represented as a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>.<\/p>asAwtShape\n"
                          }]
                        },
                        "abstractshapefactory": {
                          "ownKey": "abstractshapefactory",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/geometry/abstractshapefactory",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/abstractshapefactory"
                            },
                            "description": "",
                            "title": "AbstractShapeFactory",
                            "content": "<p>Base class for  GeometricTransformation  providing a standard implementation for\n GeometricShapeFactory.adimensional .<\/p>origin\n<p>The default origin for the shapes.<\/p>\n<init>\n<p>Base class for  GeometricTransformation  providing a standard implementation for\n GeometricShapeFactory.adimensional .<\/p>\nadimensional\n<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/geometry",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.geometry",
                        "content": "<p>AbstractShapeFactory<\/p>\n<p>Base class for  GeometricTransformation  providing a standard implementation for\n GeometricShapeFactory.adimensional .<\/p>\nAwtShapeCompatible\n<p>Anything which can be represented as a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>.<\/p>\nAdimensionalShape\n<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.\nIt also ignores any transformation.<\/p>\nit.unibo.alchemist.model.implementations.geometry.euclidean2d\n"
                      }]
                    },
                    "reactions": {
                      "ownKey": "reactions",
                      "childrenPages": {
                        "abstractreaction": {
                          "ownKey": "abstractreaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/abstractreaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/abstractreaction"
                            },
                            "description": "",
                            "title": "AbstractReaction",
                            "content": "<p>The type which describes the concentration of a molecule This class offers a partial implementation of Reaction. In particular, it allows to write new reaction specifying only which distribution time to adopt<\/p><init>\n<p>Builds a new reaction, starting at time t.<\/p>\ninitializationComplete\n\ngetOutputContext\n\ngetOutboundDependencies\n\ngetConditions\n<p>Override only if you need to implement extremely tricky behaviours. Must be overridden along with <code> #setConditions(List) <\/code>.<\/p>\ngetReactionName\n<p>This method is used to provide a reaction name in toString().<\/p>\ngetTau\n\nsetOutputContext\n<p>Used by subclasses to set their output context.<\/p>\nupdate\n\nupdateInternalStatus\n<p>This method gets called as soon as <code> #update(Time, boolean, Environment) <\/code> is called. It is useful to update the internal status of the reaction.<\/p>\ncanExecute\n<p>The default implementation verifies if all the conditions are valid.<\/p>\ngetNode\n\ngetInboundDependencies\n\naddOutboundDependency\n<p>Allows subclasses to add influenced molecules.<\/p>\nhashCode\n\nequals\n\ntoString\n\ncompareTo\n\nsetInputContext\n<p>Used by subclasses to set their input context.<\/p>\nexecute\n<p>The default execution iterates all the actions in order and executes them. Override to change the behaviour.<\/p>\nmakeClone\n<p>This method provides facility to clone reactions. Given a constructor in form of a <code>Supplier<\/code>, it populates the actions and conditions with cloned version of the ones registered in this reaction.<\/p>\naddInboundDependency\n<p>Allows subclasses to add influencing molecules.<\/p>\ngetTimeDistribution\n\ngetInputContext\n\nsetConditions\n<p>This should get overridden only if very tricky behaviours are implemented, such that the default Alchemist condition addition model is no longer usable. Must be overridden along with <code> #getConditions() <\/code>.<\/p>\ngetActions\n<p>Override only if you need to implement extremely tricky behaviours. Must be overridden along with <code> #setActions(List) <\/code>.<\/p>\nsetActions\n<p>This should get overridden only if very tricky behaviours are implemented, such that the default Alchemist action addition model is no longer usable. Must be overridden along with <code> #getActions() <\/code>.<\/p>\ngetRateAsString\n\n"
                          }]
                        },
                        "saperegradient": {
                          "ownKey": "saperegradient",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/saperegradient",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/saperegradient"
                            },
                            "description": "",
                            "title": "SAPEREGradient",
                            "content": "<p>This class provides a fast and stable gradient implementation, inspired on the NBR construct used in Proto.<\/p><init>\n<p>Builds a new SAPERE Gradient.<\/p>\n<init>\n<p>Builds a new SAPERE Gradient. This constructor is slower, and is provided for compatibility with the YAML-based Alchemist loader. It should be avoided when possible, by relying on the other constructor instead.<\/p>\ngetConditions\n\ngetLsaNode\n\nupdateInternalStatus\n\ncanExecute\n\ncloneOnNewNode\n\nexecute\n\ngetActions\n\ngetRate\n\n"
                          }]
                        },
                        "steeringbehavior": {
                          "ownKey": "steeringbehavior",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/steeringbehavior",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/steeringbehavior"
                            },
                            "description": "",
                            "title": "SteeringBehavior",
                            "content": "<p>Reaction representing the steering behavior of a pedestrian.<\/p>steerStrategy\n<pre><code>    the logic according to the steering actions are combined.<\/code><\/pre>\n<init>\n<p>Reaction representing the steering behavior of a pedestrian.<\/p>\nsteerActions\n<p>The list of only the steering actions between all the actions in this reaction.<\/p>\ncloneOnNewNode\n\ngetRate\n\nupdateInternalStatus\n\nexecute\n\n"
                          }]
                        },
                        "navigationprioritisedsteering": {
                          "ownKey": "navigationprioritisedsteering",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/navigationprioritisedsteering",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/navigationprioritisedsteering"
                            },
                            "description": "",
                            "title": "NavigationPrioritisedSteering",
                            "content": "<p>A  SteeringBehavior  using  SinglePrevalent  steering strategy and accepting a collection of actions\ncontaining a single  EuclideanNavigationAction , which is used as the prevalent one.<\/p><init>\n<p>A  SteeringBehavior  using  SinglePrevalent  steering strategy and accepting a collection of actions\ncontaining a single  EuclideanNavigationAction , which is used as the prevalent one.<\/p>\n"
                          }]
                        },
                        "saperereaction": {
                          "ownKey": "saperereaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/saperereaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/saperereaction"
                            },
                            "description": "",
                            "title": "SAPEREReaction",
                            "content": "<p>This class realizes a reaction with Lsa concentrations.<\/p><init>\n\nsetValidNodes\n\nsetTotalPropensity\n\nsetPropensities\n\ngetSAPEREActions\n\ngetPossibleMatches\n\ngetLsaNode\n\nupdateInternalStatus\n\ngetTotalPropensity\n\ngetPropensities\n\ncloneOnNewNode\n\nexecute\n\ngetEnvironment\n\ngetPossibleRemove\n\ngetValidNodes\n\ngetSAPEREConditions\n\nsetConditions\n\nsetPossibleMatches\n\ngetRate\n\nsetActions\n\ngetRateAsString\n\nsetPossibleRemove\n\n"
                          }]
                        },
                        "blendedsteering": {
                          "ownKey": "blendedsteering",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/blendedsteering",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/blendedsteering"
                            },
                            "description": "",
                            "title": "BlendedSteering",
                            "content": "<p>Steering behavior which sums all the actions with a different weight based on their target distance.<\/p><init>\n<p>Steering behavior which sums all the actions with a different weight based on their target distance.<\/p>\n"
                          }]
                        },
                        "cognitivebehavior": {
                          "ownKey": "cognitivebehavior",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/cognitivebehavior",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/cognitivebehavior"
                            },
                            "description": "",
                            "title": "CognitiveBehavior",
                            "content": "<p>Reaction representing the cognitive behavior of a pedestrian.<\/p><init>\n<p>Reaction representing the cognitive behavior of a pedestrian.<\/p>\ncloneOnNewNode\n\ngetRate\n\nupdateInternalStatus\n\n"
                          }]
                        },
                        "chemicalreaction": {
                          "ownKey": "chemicalreaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/chemicalreaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/chemicalreaction"
                            },
                            "description": "",
                            "title": "ChemicalReaction",
                            "content": "<p><init><\/p>\n<p>initializationComplete<\/p>\n<p>updateInternalStatus<\/p>\n<p>Subclasses must call super.updateInternalStatus for the rate to get updated in case of method override.<\/p>\ncloneOnNewNode\n<p>This method allows to clone this reaction on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetRate\n"
                          }]
                        },
                        "prioritysteering": {
                          "ownKey": "prioritysteering",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/prioritysteering",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/prioritysteering"
                            },
                            "description": "",
                            "title": "PrioritySteering",
                            "content": "<p>Steering behavior where only the action whose target is the nearest to the current pedestrian position is executed.<\/p><init>\n<p>Steering behavior where only the action whose target is the nearest to the current pedestrian position is executed.<\/p>\n"
                          }]
                        },
                        "biochemicalreaction": {
                          "ownKey": "biochemicalreaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/biochemicalreaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/biochemicalreaction"
                            },
                            "description": "",
                            "title": "BiochemicalReaction",
                            "content": "<p>A biochemical Reaction.<\/p><init>\n\nupdateInternalStatus\n\ncloneOnNewNode\n\nexecute\n\nsetConditions\n\n"
                          }]
                        },
                        "biochemicalreactionbuilder": {
                          "ownKey": "biochemicalreactionbuilder",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/biochemicalreactionbuilder",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/biochemicalreactionbuilder"
                            },
                            "description": "",
                            "title": "BiochemicalReactionBuilder",
                            "content": "<p>This class implements a builder for chemical reactions.<\/p><init>\n<p>Construct a builder for biochemical reactions.<\/p>\nrandomGenerator\n<p>set the random generator to the passed object.<\/p>\ntimeDistribution\n<p>Set the time distribution to the passed object.<\/p>\nprogram\n<p>Set the reaction to the passed program string.<\/p>\nbuild\n<p>Builds the chemical reaction.<\/p>\n"
                          }]
                        },
                        "event": {
                          "ownKey": "event",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/reactions/event",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/event"
                            },
                            "description": "",
                            "title": "Event",
                            "content": "<p>This reaction completely ignores the propensity conditioning of the conditions, and tries to run every time the <code> TimeDistribution <\/code> wants to.<\/p><init>\n\nupdateInternalStatus\n\ncloneOnNewNode\n\ngetRate\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/reactions",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.reactions",
                        "content": "<p>BlendedSteering<\/p>\n<p>Steering behavior which sums all the actions with a different weight based on their target distance.<\/p>\nCognitiveBehavior\n<p>Reaction representing the cognitive behavior of a pedestrian.<\/p>\nNavigationPrioritisedSteering\n<p>A  SteeringBehavior  using  SinglePrevalent  steering strategy and accepting a collection of actions\ncontaining a single  EuclideanNavigationAction , which is used as the prevalent one.<\/p>\nPrioritySteering\n<p>Steering behavior where only the action whose target is the nearest to the current pedestrian position is executed.<\/p>\nSteeringBehavior\n<p>Reaction representing the steering behavior of a pedestrian.<\/p>\nEvent\n<p>This reaction completely ignores the propensity conditioning of the conditions, and tries to run every time the <code> TimeDistribution <\/code> wants to.<\/p>\nChemicalReaction\n<p>AbstractReaction<\/p>\n<p>The type which describes the concentration of a molecule This class offers a partial implementation of Reaction. In particular, it allows to write new reaction specifying only which distribution time to adopt<\/p>\nBiochemicalReactionBuilder\n<p>This class implements a builder for chemical reactions.<\/p>\nBiochemicalReaction\n<p>A biochemical Reaction.<\/p>\nSAPEREReaction\n<p>This class realizes a reaction with Lsa concentrations.<\/p>\nSAPEREGradient\n<p>This class provides a fast and stable gradient implementation, inspired on the NBR construct used in Proto.<\/p>\n"
                      }]
                    },
                    "conditions": {
                      "ownKey": "conditions",
                      "childrenPages": {
                        "junctionpresentincell": {
                          "ownKey": "junctionpresentincell",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/junctionpresentincell",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/junctionpresentincell"
                            },
                            "description": "",
                            "title": "JunctionPresentInCell",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>getNeighborPropensity<\/p>\n<p>toString<\/p>\n<p>getNode<\/p>\n<p>isValid<\/p>\n"
                          }]
                        },
                        "genericmoleculeunderlevel": {
                          "ownKey": "genericmoleculeunderlevel",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/genericmoleculeunderlevel",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/genericmoleculeunderlevel"
                            },
                            "description": "",
                            "title": "GenericMoleculeUnderLevel",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>getPropensityContribution<\/p>\n<p>isValid<\/p>\n"
                          }]
                        },
                        "biomolpresentincell": {
                          "ownKey": "biomolpresentincell",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/biomolpresentincell",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/biomolpresentincell"
                            },
                            "description": "",
                            "title": "BiomolPresentInCell",
                            "content": "<p><init><\/p>\n"
                          }]
                        },
                        "concentrationchanged": {
                          "ownKey": "concentrationchanged",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/concentrationchanged",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/concentrationchanged"
                            },
                            "description": "",
                            "title": "ConcentrationChanged",
                            "content": "<p>A condition that holds true only if the tracked <code> Molecule <\/code> changed its <code> it.unibo.alchemist.model.interfaces.Concentration <\/code>.<\/p><init>\n\ncloneCondition\n\ntoString\n\ngetPropensityContribution\n\nisValid\n\ngetContext\n\n"
                          }]
                        },
                        "neighborhoodpresent": {
                          "ownKey": "neighborhoodpresent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/neighborhoodpresent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/neighborhoodpresent"
                            },
                            "description": "",
                            "title": "NeighborhoodPresent",
                            "content": "<p>A condition is valid if the node has a neighborhood, formally if the node has at least one node connected by a linking rule.<\/p><init>\n<p>Create the condition.<\/p>\ncloneCondition\n\ngetNeighborPropensity\n\ntoString\n\nisValid\n\n"
                          }]
                        },
                        "biomolpresentinneighbor": {
                          "ownKey": "biomolpresentinneighbor",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/biomolpresentinneighbor",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/biomolpresentinneighbor"
                            },
                            "description": "",
                            "title": "BiomolPresentInNeighbor",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>getNeighborPropensity<\/p>\n<p>toString<\/p>\n<p>isValid<\/p>\n"
                          }]
                        },
                        "lsaneighborhoodcondition": {
                          "ownKey": "lsaneighborhoodcondition",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/lsaneighborhoodcondition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/lsaneighborhoodcondition"
                            },
                            "description": "",
                            "title": "LsaNeighborhoodCondition",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>toString<\/p>\n<p>getContext<\/p>\n<p>getEnvironment<\/p>\n<p>filter<\/p>\n"
                          }]
                        },
                        "computationalroundcomplete": {
                          "ownKey": "computationalroundcomplete",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/computationalroundcomplete",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/computationalroundcomplete"
                            },
                            "description": "",
                            "title": "ComputationalRoundComplete",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>toString<\/p>\n<p>getNode<\/p>\n<p>getPropensityContribution<\/p>\n<p>isValid<\/p>\n<p>getContext<\/p>\n"
                          }]
                        },
                        "biomolpresentinenv": {
                          "ownKey": "biomolpresentinenv",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/biomolpresentinenv",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/biomolpresentinenv"
                            },
                            "description": "",
                            "title": "BiomolPresentInEnv",
                            "content": "<p><init><\/p>\n<p>Initialize condition for extra-cellular environment, implemented as a set of <code> EnvironmentNode <\/code>.<\/p>\ncloneCondition\n<p>getPropensityContribution<\/p>\n<p>getContext<\/p>\n<p>getEnviromentNodesSurrounding<\/p>\n<p>isValid<\/p>\n"
                          }]
                        },
                        "else": {
                          "ownKey": "else",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/else",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/else"
                            },
                            "description": "",
                            "title": "Else",
                            "content": "<p>The condition is valid if all the other reactions having at least one condition can not execute.<\/p><init>\n<p>The condition is valid if all the other reactions having at least one condition can not execute.<\/p>\ngetContext\n\ngetPropensityContribution\n\nisValid\n\n"
                          }]
                        },
                        "wanttoevacuate": {
                          "ownKey": "wanttoevacuate",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/wanttoevacuate",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/wanttoevacuate"
                            },
                            "description": "",
                            "title": "WantToEvacuate",
                            "content": "<p>The intention of the pedestrian to evacuate or not.<\/p><init>\n<p>The intention of the pedestrian to evacuate or not.<\/p>\ngetContext\n\ngetPropensityContribution\n\nisValid\n\n"
                          }]
                        },
                        "abstractcondition": {
                          "ownKey": "abstractcondition",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/abstractcondition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/abstractcondition"
                            },
                            "description": "",
                            "title": "AbstractCondition",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis. How to override: create a new action of your concrete subtype.<\/p>\ndeclareDependencyOn\n<p>toString<\/p>\n<p>getNode<\/p>\n<p>Override if your <code> Condition <\/code> can return a more specific type of node. The typical way is to cast the call to super.getNode().<\/p>\ngetInboundDependencies\n<p>How to override: if you intend your condition to be potentially changed by any change in the context, return null.<\/p>\n"
                          }]
                        },
                        "moleculehasconcentration": {
                          "ownKey": "moleculehasconcentration",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/moleculehasconcentration",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/moleculehasconcentration"
                            },
                            "description": "",
                            "title": "MoleculeHasConcentration",
                            "content": "<p>A condition that is valid iff a molecule has exactly the desired concentration.<\/p><init>\n\ncloneCondition\n\ntoString\n\ngetPropensityContribution\n\nisValid\n\ngetContext\n\n"
                          }]
                        },
                        "lsastandardcondition": {
                          "ownKey": "lsastandardcondition",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/lsastandardcondition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/lsastandardcondition"
                            },
                            "description": "",
                            "title": "LsaStandardCondition",
                            "content": "<p>simple LSA-condition (example: ). Search an instance of a template in a node. The LSAMolecule matched, if exist, will not be deleted from the node Lsa-space . It can be deleted from the reaction, if necessary.<\/p><init>\n<p>Builds an LsaStandardCondition.<\/p>\ncloneCondition\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis. How to override: create a new action of your concrete subtype.<\/p>\ntoString\n\ngetPropensityContribution\n\ngetContext\n\ngetMolecule\n\nsetValid\n<p>Allows to set the validity value for this condition by subclasses. Handle with care.<\/p>\nfilter\n<p>When this method is called, the condition must filter the current matches and allowed nodes.<\/p>\nisValid\n\n"
                          }]
                        },
                        "genericmoleculepresent": {
                          "ownKey": "genericmoleculepresent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/genericmoleculepresent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/genericmoleculepresent"
                            },
                            "description": "",
                            "title": "GenericMoleculePresent",
                            "content": "<p>This class implements a condition which checks if a molecule is present or not.<\/p><init>\n<p>Builds a new condition, which checks if the molecule exists or not inside the node n.<\/p>\ncloneCondition\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis. How to override: create a new action of your concrete subtype.<\/p>\ntoString\n\ngetPropensityContribution\n<p>Propensity influence is computed through the binomial coefficient. See Bernardo, Degano, Zavattaro - Formal Methods for Computational Systems Biology for the formulae.<\/p>\ngetContext\n\ngetQuantity\n<p>Allows to access the threshold.<\/p>\ngetMolecule\n<p>Allows to access the molecule.<\/p>\nisValid\n\n"
                          }]
                        },
                        "lsaabstractcondition": {
                          "ownKey": "lsaabstractcondition",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/lsaabstractcondition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/lsaabstractcondition"
                            },
                            "description": "",
                            "title": "LsaAbstractCondition",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>toString<\/p>\n<p>getNode<\/p>\n<p>calculateMatches<\/p>\n<p>createMatches<\/p>\n<p>updateMap<\/p>\n<p>Updates the matches map by adding the mapping between the variables of template and the contents of instance.<\/p>\nincorporateNewMatches\n<p>incorporateNewMatches<\/p>\n<p>This has to be used to incorporate new matches when the they are node-specific and available for multiple nodes.<\/p>\n"
                          }]
                        },
                        "containsmolecule": {
                          "ownKey": "containsmolecule",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/containsmolecule",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/containsmolecule"
                            },
                            "description": "",
                            "title": "ContainsMolecule",
                            "content": "<p>The condition is valid if the node contains the molecule.<\/p><init>\n<p>The condition is valid if the node contains the molecule.<\/p>\ngetContext\n\ngetPropensityContribution\n\nisValid\n\n"
                          }]
                        },
                        "abstractneighborcondition": {
                          "ownKey": "abstractneighborcondition",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/abstractneighborcondition",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/abstractneighborcondition"
                            },
                            "description": "",
                            "title": "AbstractNeighborCondition",
                            "content": "<p>Represents a condition on a neighbor. Formally this conditions is satisfied if at least one neighbor satisfy the condition.<\/p><init>\n\ncloneCondition\n\ngetNeighborPropensity\n<p>Given a node, which is supposed to be in the neighborhood of the current node, the function computes a double value representing the propensity of the neighbor to be the chosen one for the reaction to be executed. The value returned must be 0 if the neighbor is not eligible for the reaction due to this condition. This value could be used to compute the reaction's propensity, but the main usage is to give a rate to every neighbor and randomly choose one of them.<\/p>\ngetPropensityContribution\n<p>Override if desired behavior differs. Default is returning the sum of the neighbor's propensities<\/p>\ngetContext\n\ngetValidNeighbors\n<p>Searches in the given neighborhood which nodes satisfy the condition, and returns a list of valid neighbors. NOTE, it is NOT guaranteed that this method checks if the passed neighborhood is the actual neighborhood of the node. Make sure the passed neighborhood is up to date for avoid problems.<\/p>\ngetEnvironment\n\n"
                          }]
                        },
                        "envpresent": {
                          "ownKey": "envpresent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/envpresent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/envpresent"
                            },
                            "description": "",
                            "title": "EnvPresent",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>toString<\/p>\n<p>getPropensityContribution<\/p>\n<p>isValid<\/p>\n<p>getContext<\/p>\n"
                          }]
                        },
                        "tensionpresent": {
                          "ownKey": "tensionpresent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/conditions/tensionpresent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/tensionpresent"
                            },
                            "description": "",
                            "title": "TensionPresent",
                            "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>getPropensityContribution<\/p>\n<p>isValid<\/p>\n<p>getContext<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/conditions",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.conditions",
                        "content": "<p>WantToEvacuate<\/p>\n<p>The intention of the pedestrian to evacuate or not.<\/p>\nContainsMolecule\n<p>The condition is valid if the node contains the molecule.<\/p>\nElse\n<p>The condition is valid if all the other reactions having at least one condition can not execute.<\/p>\nConcentrationChanged\n<p>A condition that holds true only if the tracked <code> Molecule <\/code> changed its <code> it.unibo.alchemist.model.interfaces.Concentration <\/code>.<\/p>\nMoleculeHasConcentration\n<p>A condition that is valid iff a molecule has exactly the desired concentration.<\/p>\nAbstractCondition\n<p>GenericMoleculePresent<\/p>\n<p>This class implements a condition which checks if a molecule is present or not.<\/p>\nNeighborhoodPresent\n<p>A condition is valid if the node has a neighborhood, formally if the node has at least one node connected by a linking rule.<\/p>\nBiomolPresentInCell\n<p>GenericMoleculeUnderLevel<\/p>\n<p>JunctionPresentInCell<\/p>\n<p>AbstractNeighborCondition<\/p>\n<p>Represents a condition on a neighbor. Formally this conditions is satisfied if at least one neighbor satisfy the condition.<\/p>\nBiomolPresentInNeighbor\n<p>TensionPresent<\/p>\n<p>BiomolPresentInEnv<\/p>\n<p>EnvPresent<\/p>\n<p>ComputationalRoundComplete<\/p>\n<p>LsaStandardCondition<\/p>\n<p>simple LSA-condition (example: ). Search an instance of a template in a node. The LSAMolecule matched, if exist, will not be deleted from the node Lsa-space . It can be deleted from the reaction, if necessary.<\/p>\nLsaNeighborhoodCondition\n<p>LsaAbstractCondition<\/p>\n"
                      }]
                    },
                    "actions": {
                      "ownKey": "actions",
                      "childrenPages": {
                        "removenode": {
                          "ownKey": "removenode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/removenode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/removenode"
                            },
                            "description": "",
                            "title": "RemoveNode",
                            "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetEnvironment\n"
                          }]
                        },
                        "abstractaction": {
                          "ownKey": "abstractaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractaction"
                            },
                            "description": "",
                            "title": "AbstractAction",
                            "content": "<p>An abstract class facility with some generic methods implemented.<\/p><init>\n<p>Call this constructor in the subclasses in order to automatically instance the node.<\/p>\nsetConcentration\n<p>Sets the concentration locally.<\/p>\ntoString\n\ngetOutboundDependencies\n<p>How to override: if you intend your action to influence any reaction with compatible context, return null.<\/p>\nnodeContains\n\ndeclareDependencyTo\n<p>Allows to add an Molecule to the set of molecules which are modified by this action. This method must be called in the constructor, and not during the execution.<\/p>\nremoveConcentration\n<p>Deletes a molecule entirely in the local node.<\/p>\ngetConcentration\n\ngetNode\n\n"
                          }]
                        },
                        "reachknowndestination": {
                          "ownKey": "reachknowndestination",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/reachknowndestination",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/reachknowndestination"
                            },
                            "description": "",
                            "title": "ReachKnownDestination",
                            "content": "<p>A  NavigationAction  using  KnownDestinationReaching  navigation strategy.<\/p>strategy\n<p>The strategy used to navigate the environment.<\/p>\n<init>\n<p>A  NavigationAction  using  KnownDestinationReaching  navigation strategy.<\/p>\n"
                          }]
                        },
                        "protelisprogram": {
                          "ownKey": "protelisprogram",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/protelisprogram",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/protelisprogram"
                            },
                            "description": "",
                            "title": "ProtelisProgram",
                            "content": "<p>Class to retain backwards compatibility with the Alchemist XML loader.<\/p><init>\n\n"
                          }]
                        },
                        "abstracteuclidean2dconfigurablemovenode": {
                          "ownKey": "abstracteuclidean2dconfigurablemovenode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstracteuclidean2dconfigurablemovenode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstracteuclidean2dconfigurablemovenode"
                            },
                            "description": "",
                            "title": "AbstractEuclidean2DConfigurableMoveNode",
                            "content": "<p>It's an  AbstractConfigurableMoveNode  for  Euclidean2DPosition  which provides a default  interpolatePositions \nthat is accurate with respect to the target given and the current maximum speed.<\/p><init>\n<p>It's an  AbstractConfigurableMoveNode  for  Euclidean2DPosition  which provides a default  interpolatePositions \nthat is accurate with respect to the target given and the current maximum speed.<\/p>\ninterpolatePositions\n<p>If  maxWalk  is greater than the speed needed to reach  target  then it positions precisely on  target \nwithout going farther.<\/p>\n"
                          }]
                        },
                        "lsastandardaction": {
                          "ownKey": "lsastandardaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsastandardaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsastandardaction"
                            },
                            "description": "",
                            "title": "LsaStandardAction",
                            "content": "<p>This action add LsaMolecule in a single node.<\/p><init>\n<p>Builds a new local action, withouth any RandomGenerator. #RANDOM.<\/p>\n<init>\n<p>Builds a new local action.<\/p>\nsetConcentration\n<p>Executes on the passed node.<\/p>\ncloneAction\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetMolecule\n\ntoString\n\nexecute\n<p>Effectively executes this action.<\/p>\ngetContext\n\n"
                          }]
                        },
                        "extractclosestvisiblenodeatdistance": {
                          "ownKey": "extractclosestvisiblenodeatdistance",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/extractclosestvisiblenodeatdistance",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/extractclosestvisiblenodeatdistance"
                            },
                            "description": "",
                            "title": "ExtractClosestVisibleNodeAtDistance",
                            "content": "<p>Extracts the closest  VisibleNode  to the position at the given distance from the given node's position\nin the direction of the node's heading.<\/p><init>\n<p>visionMolecule is expected to contain a list of  VisibleNode .\nIf there are no visible nodes then targetMolecule will be removed from <a href=\"#\">node<\/a>,\notherwise the VisibleNode's position will be inserted in targetMolecule.<\/p>\ncloneAction\n\nexecute\n\ngetContext\n\n"
                          }]
                        },
                        "followroute": {
                          "ownKey": "followroute",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/followroute",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/followroute"
                            },
                            "description": "",
                            "title": "FollowRoute",
                            "content": "<p>A  NavigationAction  using  RouteFollowing  navigation strategy.<\/p><init>\n<p>A  NavigationAction  using  RouteFollowing  navigation strategy.<\/p>\n"
                          }]
                        },
                        "saperechemotaxis": {
                          "ownKey": "saperechemotaxis",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/saperechemotaxis",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperechemotaxis"
                            },
                            "description": "",
                            "title": "SAPEREChemotaxis",
                            "content": "<p>This class provides a chemotaxis implementation for SAPERE, namely, an agent able to move a molecule towards a specific node.<\/p><init>\n<p>Builds a new SAPEREChemotaxis.<\/p>\nexecute\n\n"
                          }]
                        },
                        "abstractnavigationaction": {
                          "ownKey": "abstractnavigationaction",
                          "childrenPages": {"navigationstate": {
                            "ownKey": "navigationstate",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractnavigationaction/navigationstate",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractnavigationaction/navigationstate"
                              },
                              "description": "",
                              "title": "NavigationState",
                              "content": "<p>START<\/p>\n<p>NEW_ROOM<\/p>\n<p>MOVING_TO_CROSSING_POINT_1<\/p>\n<p>Moving towards the first crossing point (see  crossDoor ).<\/p>\nMOVING_TO_CROSSING_POINT_2\n<p>Moving towards the second crossing point (see  crossDoor ).<\/p>\nCROSSING_DOOR\n<p>When the second crossing point  isReached  (see  crossDoor ), the pedestrian may still be outside\nany room. In such case it moves towards  expectedNewRoom  centroid until he/she enters a room.<\/p>\nMOVING_TO_FINAL\n<p>Moving to the final destination, which is inside  currentRoom  (this means it can be directly\napproached as no obstacle is placed in between).<\/p>\nARRIVED\n"
                            }]
                          }},
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractnavigationaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractnavigationaction"
                            },
                            "description": "",
                            "title": "AbstractNavigationAction",
                            "content": "<p>An abstract  NavigationAction , taking care of properly moving the pedestrian in the\nenvironment while delegating the decision on where to move it to a  NavigationStrategy .<\/p>strategy\n<p>The strategy used to navigate the environment.<\/p>\npedestrianPosition\n<p>The position of the  pedestrian  in the  environment , this is cached and updated\nevery time  update  is called so as to avoid potentially costly re-computations.<\/p>\ncurrentRoom\n<p>The room (= environment's area) the  pedestrian  is into, this is cached and updated\nevery time  update  is called so as to avoid potentially costly re-computations.<\/p>\nminDistance\n<p>Minimum distance to consider a target reached. Using zero (even with fuzzy equals) may lead to some\nboundary cases in which the pedestrian remains blocked due to how the environment manage collisions\nat present. This workaround allows to specify a minimum distance which is dependent on the pedestrian\nshape. In the future, something better could be done.<\/p>\nstate\n<p>previousRoom<\/p>\n<p>Caches the room the pedestrian is into when he/she starts moving. When the pedestrian is crossing a door, it\ncontains the room being left. When in  NavigationState.MOVING_TO_FINAL , it contains the room the pedestrian\nwas (and should be) into. It's used to detect if the pedestrian ended up in an unexpected room while moving.<\/p>\ncrossingPoints\n<p>Defined when crossing a door. See  crossDoor .<\/p>\nexpectedNewRoom\n<p>Defined when crossing a door.<\/p>\nfinalDestination\n<p>Defined in  NavigationState.MOVING_TO_FINAL .<\/p>\ntarget\n<p>The target of a directed edge of the environment's graph.<\/p>\ndesiredPosition\n<p>The position the pedestrian wants to reach.<\/p>\nenvironment\n<p>The environment the  pedestrian  is into.<\/p>\nreaction\n<p>The reaction in which this action is executed.<\/p>\npedestrian\n<p>The owner of this action.<\/p>\n<init>\n<p>An abstract  NavigationAction , taking care of properly moving the pedestrian in the\nenvironment while delegating the decision on where to move it to a  NavigationStrategy .<\/p>\nisReached\n\norFail\n\nupdateCachedVariables\n<p>Updates  pedestrianPosition  and  currentRoom , this can be costly.\nDepending on how  ConvexGeometricShape.contains  manage points on the boundary, the pedestrian could\nbe inside two (adjacent) rooms at once. This can happen in two cases:<\/p><ul><li>when in  NavigationState.MOVING_TO_CROSSING_POINT_1  or  NavigationState.MOVING_TO_FINAL  and the pedestrian\nis moving on  previousRoom 's boundary. In such case  previousRoom  is used.<\/li><li>when crossing a door or in  NavigationState.NEW_ROOM  and  expectedNewRoom  is adjacent to  previousRoom .\nIn such case  expectedNewRoom  is used.\nOtherwise the first room containing  pedestrianPosition  is used.<\/li><\/ul>\nonStart\n\ndoorsInSight\n\ncrossDoor\n<p>Moves the pedestrian across the provided  door , which must be among  doorsInSight .\nSince connected rooms may be non-adjacent, a pair of  crossingPoints  has to be provided:<\/p><ul><li>the first point must belong to the current room's boundary and will be reached first,<\/li><li>the second point must belong to the next room's boundary and will be pursued after\nreaching the former one.  crossingPoints  may coincide if the two rooms are adjacent.<\/li><\/ul>\nmoveToFinal\n<p>Moves the pedestrian to the given final  destination , which must be inside  currentRoom .<\/p>\nmoving\n\nupdate\n<p>Updates the internal state but does not move the pedestrian.<\/p>\n"
                          }]
                        },
                        "flowfieldsteeringaction": {
                          "ownKey": "flowfieldsteeringaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/flowfieldsteeringaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/flowfieldsteeringaction"
                            },
                            "description": "",
                            "title": "FlowFieldSteeringAction",
                            "content": "<p>Generic implementation of an action influenced by the concentration of a given molecule in the environment.<\/p>environment\n<pre><code>    the environment inside which the pedestrian moves.<\/code><\/pre>\ntargetMolecule\n<pre><code>    the {@link Molecule} you want to know the concentration in the different positions of the environment.<\/code><\/pre>\n<init>\n<p>Generic implementation of an action influenced by the concentration of a given molecule in the environment.<\/p>\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\nselectPosition\n<p>Selects a position from a list, given the layer and its concentration in the current position\nof the pedestrian.\nThis function contains the policy concerning how to select the most desirable position.<\/p>\nconcentrationIn\n\ngetLayerOrFail\n\ncenter\n\n"
                          }]
                        },
                        "lsachangeargument": {
                          "ownKey": "lsachangeargument",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsachangeargument",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsachangeargument"
                            },
                            "description": "",
                            "title": "LsaChangeArgument",
                            "content": "<p><init><\/p>\n<p>Builds a new action that test neighbors which contain in their lsaSpace an lsaMolecule matching . The effect of this Action is to add to the matches map the variable PreferredType (the most present type in neighborhood). The execution has no effect on influenced molecule of reaction.<\/p>\nrandom\n<p>toString<\/p>\n<p>execute<\/p>\n<p>getEnvironment<\/p>\n"
                          }]
                        },
                        "reproducegpstrace": {
                          "ownKey": "reproducegpstrace",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/reproducegpstrace",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/reproducegpstrace"
                            },
                            "description": "",
                            "title": "ReproduceGPSTrace",
                            "content": "<p><init><\/p>\n<p><init><\/p>\n"
                          }]
                        },
                        "goalorientedexplore": {
                          "ownKey": "goalorientedexplore",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/goalorientedexplore",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/goalorientedexplore"
                            },
                            "description": "",
                            "title": "GoalOrientedExplore",
                            "content": "<p>A  NavigationAction  using  GoalOrientedExploring  navigation strategy.<\/p><init>\n<p>A  NavigationAction  using  GoalOrientedExploring  navigation strategy.<\/p>\n"
                          }]
                        },
                        "separation": {
                          "ownKey": "separation",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/separation",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/separation"
                            },
                            "description": "",
                            "title": "Separation",
                            "content": "<p>Move the agent away from the pedestrians near to him.<\/p>env\n<pre><code>    the environment inside which the pedestrian moves.<\/code><\/pre>\npedestrian\n<pre><code>    the owner of this action.<\/code><\/pre>\n<init>\n<p>Move the agent away from the pedestrians near to him.<\/p>\ncloneAction\n\nnextPosition\n\ngroup\n<p>The list of pedestrians used to compute the group steering action.<\/p>\n"
                          }]
                        },
                        "seek2d": {
                          "ownKey": "seek2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/seek2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/seek2d"
                            },
                            "description": "",
                            "title": "Seek2D",
                            "content": "<p> Seek  behavior in a bidimensional environment. The actions performed are more\nsophisticated and allow the pedestrian to try to avoid other agents on its path.\nThis behavior is restricted to two dimensions because some geometry utils available\nonly in 2D are required to implement it.<\/p>environment\n<p><init><\/p>\n<p><init><\/p>\n<p> Seek  behavior in a bidimensional environment. The actions performed are more\nsophisticated and allow the pedestrian to try to avoid other agents on its path.\nThis behavior is restricted to two dimensions because some geometry utils available\nonly in 2D are required to implement it.<\/p>\ninterpolatePositions\n<p>Next relative position.<\/p>\ncloneAction\n"
                          }]
                        },
                        "reachdestination": {
                          "ownKey": "reachdestination",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/reachdestination",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/reachdestination"
                            },
                            "description": "",
                            "title": "ReachDestination",
                            "content": "<p>A  NavigationAction  using  DestinationReaching  navigation strategy.\nAccepts an array of coordinates representing the destinations and uses inferIsKnown to partition them into\nknown and unknown ones.<\/p>strategy\n<p>The strategy used to navigate the environment.<\/p>\n<init>\n<p>A  NavigationAction  using  DestinationReaching  navigation strategy.\nAccepts an array of coordinates representing the destinations and uses inferIsKnown to partition them into\nknown and unknown ones.<\/p>\n"
                          }]
                        },
                        "randomlytogglemolecule": {
                          "ownKey": "randomlytogglemolecule",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/randomlytogglemolecule",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/randomlytogglemolecule"
                            },
                            "description": "",
                            "title": "RandomlyToggleMolecule",
                            "content": "<p>Toggles a molecule randomly.<\/p><init>\n<p>Toggles a molecule randomly.<\/p>\ncloneAction\n\nexecute\n<p>Rolls the dice and toggles the molecule.<\/p>\nshouldToggle\n<p>Returns true if it is time to toggle the molecule.<\/p>\n"
                          }]
                        },
                        "movetotarget": {
                          "ownKey": "movetotarget",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/movetotarget",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/movetotarget"
                            },
                            "description": "",
                            "title": "MoveToTarget",
                            "content": "<p>Movement towards a target defined as a concentration.<\/p><init>\n\ninterpolatePositions\n\ncloneAction\n\n"
                          }]
                        },
                        "zigzagmove": {
                          "ownKey": "zigzagmove",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/zigzagmove",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/zigzagmove"
                            },
                            "description": "",
                            "title": "ZigZagMove",
                            "content": "<p>Moves toward a randomly chosen direction for up to distance meters, then chooses another one and so on.<\/p><init>\n<p>Moves toward a randomly chosen direction for up to distance meters, then chooses another one and so on.<\/p>\ncloneAction\n\n"
                          }]
                        },
                        "combine": {
                          "ownKey": "combine",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/combine",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/combine"
                            },
                            "description": "",
                            "title": "Combine",
                            "content": "<p>Combination of multiple steering actions.<\/p><init>\n<p>Combination of multiple steering actions.<\/p>\ncloneAction\n\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\n"
                          }]
                        },
                        "targetwalker": {
                          "ownKey": "targetwalker",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/targetwalker",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/targetwalker"
                            },
                            "description": "",
                            "title": "TargetWalker",
                            "content": "<p>DEFAULT_SPEED<\/p>\n<p>Default speed in meters per second.<\/p>\nDEFAULT_RANGE\n<p>Default interaction range.<\/p>\nDEFAULT_INTERACTION\n<p>Default interaction factor.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n"
                          }]
                        },
                        "celltensionpolarization": {
                          "ownKey": "celltensionpolarization",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/celltensionpolarization",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/celltensionpolarization"
                            },
                            "description": "",
                            "title": "CellTensionPolarization",
                            "content": "<p><init><\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n"
                          }]
                        },
                        "saperewalker": {
                          "ownKey": "saperewalker",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/saperewalker",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperewalker"
                            },
                            "description": "",
                            "title": "SAPEREWalker",
                            "content": "<p>DEFAULT_INTERACTING_TAG<\/p>\n<p>The default molecule that identifies an interacting object.<\/p>\n<init>\n\n<init>\n\ncloneAction\n\ngetNode\n\nsetExecutionContext\n\n"
                          }]
                        },
                        "steeringstrategies": {
                          "ownKey": "steeringstrategies",
                          "childrenPages": {
                            "singleprevalent": {
                              "ownKey": "singleprevalent",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/singleprevalent",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/singleprevalent"
                                },
                                "description": "",
                                "title": "SinglePrevalent",
                                "content": "<p>A  SteeringStrategy  in which one action is prevalent. Only  NavigationAction s can be prevalent, because\nthey guarantee to navigate the environment consciously (e.g. without getting stuck in obstacles). The\npurpose of this strategy is to linearly combine the potentially contrasting forces to which the pedestrian\nis subject, while maintaining that warranty. Such forces are combined as follows:\nlet f be the prevalent force,<\/p><ul><li>if f leads the pedestrian outside the room (= environment's area) he/she is into, no combination is performed\nand f is used as it is. This because crossing doors can be a thorny issue and we don't want to introduce\ndisturbing forces.<\/li><li>Otherwise, a linear combination is performed: f is assigned unitary weight, all other forces are assigned\nweight w equal to the maximum value in <a href=\"#\">0,1<\/a> so that the resulting force:<\/li><li>forms with f an angle smaller than or equal to the specified toleranceAngle,<\/li><li>doesn't lead the pedestrian outside the current room.\nThe idea is to decrease the intensity of non-prevalent forces until the resulting one enters in some tolerance\nsector defined by both the tolerance angle and the current room's boundary. With a suitable tolerance angle\nthis allows to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory\nwhich takes into account other urges as well.\nFinally, an exponential smoothing with the given alpha is applied to the resulting force in order to decrease\noscillatory movements (this also known as shaking behavior).<\/li><\/ul><init>\n<p>A  SteeringStrategy  in which one action is prevalent. Only  NavigationAction s can be prevalent, because\nthey guarantee to navigate the environment consciously (e.g. without getting stuck in obstacles). The\npurpose of this strategy is to linearly combine the potentially contrasting forces to which the pedestrian\nis subject, while maintaining that warranty. Such forces are combined as follows:\nlet f be the prevalent force,<\/p><ul><li>if f leads the pedestrian outside the room (= environment's area) he/she is into, no combination is performed\nand f is used as it is. This because crossing doors can be a thorny issue and we don't want to introduce\ndisturbing forces.<\/li><li>Otherwise, a linear combination is performed: f is assigned unitary weight, all other forces are assigned\nweight w equal to the maximum value in <a href=\"#\">0,1<\/a> so that the resulting force:<\/li><li>forms with f an angle smaller than or equal to the specified toleranceAngle,<\/li><li>doesn't lead the pedestrian outside the current room.\nThe idea is to decrease the intensity of non-prevalent forces until the resulting one enters in some tolerance\nsector defined by both the tolerance angle and the current room's boundary. With a suitable tolerance angle\nthis allows to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory\nwhich takes into account other urges as well.\nFinally, an exponential smoothing with the given alpha is applied to the resulting force in order to decrease\noscillatory movements (this also known as shaking behavior).<\/li><\/ul>\ncomputeNextPosition\n<p>Computes the next position starting from the steering actions the pedestrian obey to,\nin relative coordinates with respect to its current position.<\/p>\nSinglePrevalent\n<p>A  SteeringStrategy  in which one action is prevalent. Only  NavigationAction s can be prevalent, because\nthey guarantee to navigate the environment consciously (e.g. without getting stuck in obstacles). The\npurpose of this strategy is to linearly combine the potentially contrasting forces to which the pedestrian\nis subject, while maintaining that warranty. Such forces are combined as follows:\nlet f be the prevalent force,<\/p><ul><li>if f leads the pedestrian outside the room (= environment's area) he/she is into, no combination is performed\nand f is used as it is. This because crossing doors can be a thorny issue and we don't want to introduce\ndisturbing forces.<\/li><li>Otherwise, a linear combination is performed: f is assigned unitary weight, all other forces are assigned\nweight w equal to the maximum value in <a href=\"#\">0,1<\/a> so that the resulting force:<\/li><li>forms with f an angle smaller than or equal to the specified toleranceAngle,<\/li><li>doesn't lead the pedestrian outside the current room.\nThe idea is to decrease the intensity of non-prevalent forces until the resulting one enters in some tolerance\nsector defined by both the tolerance angle and the current room's boundary. With a suitable tolerance angle\nthis allows to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory\nwhich takes into account other urges as well.\nFinally, an exponential smoothing with the given alpha is applied to the resulting force in order to decrease\noscillatory movements (this also known as shaking behavior).<\/li><\/ul>\n"
                              }]
                            },
                            "distanceweighted": {
                              "ownKey": "distanceweighted",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/distanceweighted",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/distanceweighted"
                                },
                                "description": "",
                                "title": "DistanceWeighted",
                                "content": "<p>Weighted steering logic where the weight of each steering action is\nthe inverse of the pedestrian's distance from the action's target.<\/p><init>\n<p>Weighted steering logic where the weight of each steering action is\nthe inverse of the pedestrian's distance from the action's target.<\/p>\n"
                              }]
                            },
                            "filtered": {
                              "ownKey": "filtered",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/filtered",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/filtered"
                                },
                                "description": "",
                                "title": "Filtered",
                                "content": "<p>Steering logic in which a filter is applied to the steering actions\nin order to execute another steering logic with only some of these.<\/p><init>\n<p>Steering logic in which a filter is applied to the steering actions\nin order to execute another steering logic with only some of these.<\/p>\ncomputeNextPosition\n<p>Computes the next position starting from the steering actions the pedestrian obey to,\nin relative coordinates with respect to its current position.<\/p>\n"
                              }]
                            },
                            "exponentialsmoothing": {
                              "ownKey": "exponentialsmoothing",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/exponentialsmoothing",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/exponentialsmoothing"
                                },
                                "description": "",
                                "title": "ExponentialSmoothing",
                                "content": "<p>Exponential smoothing is a trivial way of smoothing signals.\nLet s(t) be the smoothed signal at time t, given a discrete signal g:\ns(t) = alpha * g(t) + (1 - alpha) * s(t-1)\ns(0) = g(0)<\/p><init>\n<p>Exponential smoothing is a trivial way of smoothing signals.\nLet s(t) be the smoothed signal at time t, given a discrete signal g:\ns(t) = alpha * g(t) + (1 - alpha) * s(t-1)\ns(0) = g(0)<\/p>\napply\n<p>Applies the smoothing to the given force.<\/p>\n"
                              }]
                            },
                            "weighted": {
                              "ownKey": "weighted",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/weighted",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/weighted"
                                },
                                "description": "",
                                "title": "Weighted",
                                "content": "<p>Steering logic where each steering action is associated to a weight\nand the final computed position is their weighted sum.<\/p><init>\n<p>Steering logic where each steering action is associated to a weight\nand the final computed position is their weighted sum.<\/p>\ncomputeNextPosition\n<p>Computes the next position starting from the steering actions the pedestrian obey to,\nin relative coordinates with respect to its current position.<\/p>\ncomputeTarget\n<p>The overall target is computed as follows: only  SteeringActionWithTarget  are considered,\nand we pick the action whose target is closest to the current position of the pedestrian,\nwhich will be considered the overall target.<\/p>\n"
                              }]
                            },
                            "nearest": {
                              "ownKey": "nearest",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/nearest",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/nearest"
                                },
                                "description": "",
                                "title": "Nearest",
                                "content": "<p>Steering logic where only the \"simple\" steering action and the group steering action (if present) whose targets\nare the nearest to the pedestrian's current position are considered.<\/p><init>\n<p>Steering logic where only the \"simple\" steering action and the group steering action (if present) whose targets\nare the nearest to the pedestrian's current position are considered.<\/p>\n"
                              }]
                            },
                            "typebased": {
                              "ownKey": "typebased",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/typebased",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/typebased"
                                },
                                "description": "",
                                "title": "TypeBased",
                                "content": "<p>Steering strategy which gives a weight based on the type of steering action you are considering.\nFor each type,\nonly the action with the target nearest to the current pedestrian position is taken into consideration.<\/p><init>\n<p>Steering strategy which gives a weight based on the type of steering action you are considering.\nFor each type,\nonly the action with the target nearest to the current pedestrian position is taken into consideration.<\/p>\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.model.implementations.actions.steeringstrategies",
                            "content": "<p>DistanceWeighted<\/p>\n<p>Weighted steering logic where the weight of each steering action is\nthe inverse of the pedestrian's distance from the action's target.<\/p>\nFiltered\n<p>Steering logic in which a filter is applied to the steering actions\nin order to execute another steering logic with only some of these.<\/p>\nNearest\n<p>Steering logic where only the \"simple\" steering action and the group steering action (if present) whose targets\nare the nearest to the pedestrian's current position are considered.<\/p>\nSinglePrevalent\n<p>A  SteeringStrategy  in which one action is prevalent. Only  NavigationAction s can be prevalent, because\nthey guarantee to navigate the environment consciously (e.g. without getting stuck in obstacles). The\npurpose of this strategy is to linearly combine the potentially contrasting forces to which the pedestrian\nis subject, while maintaining that warranty. Such forces are combined as follows:\nlet f be the prevalent force,<\/p><ul><li>if f leads the pedestrian outside the room (= environment's area) he/she is into, no combination is performed\nand f is used as it is. This because crossing doors can be a thorny issue and we don't want to introduce\ndisturbing forces.<\/li><li>Otherwise, a linear combination is performed: f is assigned unitary weight, all other forces are assigned\nweight w equal to the maximum value in <a href=\"#\">0,1<\/a> so that the resulting force:<\/li><li>forms with f an angle smaller than or equal to the specified toleranceAngle,<\/li><li>doesn't lead the pedestrian outside the current room.\nThe idea is to decrease the intensity of non-prevalent forces until the resulting one enters in some tolerance\nsector defined by both the tolerance angle and the current room's boundary. With a suitable tolerance angle\nthis allows to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory\nwhich takes into account other urges as well.\nFinally, an exponential smoothing with the given alpha is applied to the resulting force in order to decrease\noscillatory movements (this also known as shaking behavior).<\/li><\/ul>\nExponentialSmoothing\n<p>Exponential smoothing is a trivial way of smoothing signals.\nLet s(t) be the smoothed signal at time t, given a discrete signal g:\ns(t) = alpha * g(t) + (1 - alpha) * s(t-1)\ns(0) = g(0)<\/p>\nTypeBased\n<p>Steering strategy which gives a weight based on the type of steering action you are considering.\nFor each type,\nonly the action with the target nearest to the current pedestrian position is taken into consideration.<\/p>\nWeighted\n<p>Steering logic where each steering action is associated to a weight\nand the final computed position is their weighted sum.<\/p>\ntargetDistance\n<p>Calculate the distance between this pedestrian current position and the target of the specified steering action.<\/p>\npickNearestOrFirst\n<p>Picks the  SteeringActionWithTarget  whose target is nearest to the pedestrian's current position,\nor the first simple  SteeringAction  if none of them has a target. If the list is empty, null is\nreturned.<\/p>\n"
                          }]
                        },
                        "chemotacticpolarization": {
                          "ownKey": "chemotacticpolarization",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/chemotacticpolarization",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/chemotacticpolarization"
                            },
                            "description": "",
                            "title": "ChemotacticPolarization",
                            "content": "<p><init><\/p>\n<p><init><\/p>\n<p>Initialize a polarization activity regulated by environmental concentration of a molecule.<\/p>\nexecute\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n"
                          }]
                        },
                        "socialforceoldeuropeanagent": {
                          "ownKey": "socialforceoldeuropeanagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/socialforceoldeuropeanagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/socialforceoldeuropeanagent"
                            },
                            "description": "",
                            "title": "SocialForceOldEuropeanAgent",
                            "content": "<p>VMIN<\/p>\n<p>Minimum speed of a pedestrian.<\/p>\nMY_DIMENSION\n<p>Dimension of a pedestrian.<\/p>\nDESIRED_SPACE\n<p>Desired space of a pedestrian: minimum \"vital\" space that the agent wants to maintain around himself.<\/p>\nTURN_RIGHT_PROBABILITY\n<p>The probability of turn to the right if another pedestrian is too near.<\/p>\n<init>\n<p>Builds an European pedestrian.<\/p>\n"
                          }]
                        },
                        "socialforceagent": {
                          "ownKey": "socialforceagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/socialforceagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/socialforceagent"
                            },
                            "description": "",
                            "title": "SocialForceAgent",
                            "content": "<p>DECELERATION_FACTOR<\/p>\n<p>The proximity deceleration factor.<\/p>\nDELTA_T\n<p>Step time interval.<\/p>\nDESIRED_FORCE_FACTOR\n<p>Desired force (the attractive force contribution from the target node) weight factor.<\/p>\nDODGE_FORCE_FACTOR\n<p>Dodge force (the turn repulsive force contribution) weight factor.<\/p>\nDODGE_FORCE_STRENGTH\n<p>The dodge strength.<\/p>\nETA\n<p>The strength of the pedestrian repulsive force.<\/p>\nMIN_DISP_CYC_TH\n<p>Minimum Displacement Cycle Threshold: used to stop a pedestrian if he can't move enough for a certain number of cycles.<\/p>\nMIN_DISPLACEMENT\n<p>Minimum Displacement.<\/p>\nMIN_PHEROMONE_DISTANCE\n<p>A minimum distance value used to check if a pedestrian has reached the target node.<\/p>\nMOMENTUM_FACTOR\n<p>Momentum factor used to compute the new speed value.<\/p>\nNEW_W\n<p>OLD_W and NEW_W are weights used to compute the new direction as a weighted average starting from old and freshly computed directions. NEW_W is the freshly computed direction weight.<\/p>\nOBSTACLE_FORCE_FACTOR\n<p>Obstacle force (the repulsive force contribution from obstacles) weight factor.<\/p>\nOBSTACLE_FORCE_STRENGTH\n<p>The obstacle force strength.<\/p>\nOBSTACLE_INTERACTION_RANGE\n<p>The pedestrian interaction range with obstacles.<\/p>\nOLD_W\n<p>OLD_W and NEW_W are weights used to compute the new direction as a weighted average starting from old and freshly computed directions. OLD_W is the old direction weight.<\/p>\nPEJORATIVE_MOVE_PROBABILITY\n<p>The probability of choosing a pejorative move.<\/p>\nPROXIMITY_DEC_RANGE\n<p>Range in which a pedestrian will decelerate because of the presence of other pedestrians.<\/p>\nPROXIMITY_TURN_RANGE\n<p>Range in which a pedestrian will turn because of the presence of other pedestrians.<\/p>\nSOCIAL_FORCE_FACTOR\n<p>Social force (the repulsive force contribution from other pedestrians) weight factor.<\/p>\n<init>\n<p>Construct a pedestrian agent. with<\/p>\n<init>\n<p>Construct a pedestrian agent. with<\/p>\ncomputeInteractions\n<p>FIRST SOLUTION. Method used to compute the interaction (so the repulsive force contribution) between pedestrians<\/p>\ngetSpeed\n<p>Get speed of this agent.<\/p>\nexecute\n\n"
                          }]
                        },
                        "sapereagent": {
                          "ownKey": "sapereagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/sapereagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/sapereagent"
                            },
                            "description": "",
                            "title": "SAPEREAgent",
                            "content": "<p><init><\/p>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent does not modify any molecule (e.g. an agent that just moves a node).<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2 and/or the template passed in m3.<\/p>\ncloneAction\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ntoString\n\n"
                          }]
                        },
                        "saperelocalagent": {
                          "ownKey": "saperelocalagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/saperelocalagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperelocalagent"
                            },
                            "description": "",
                            "title": "SAPERELocalAgent",
                            "content": "<p>A SAPERE Agent that does not do actions on neighbors.<\/p><init>\n<p>Creates a new SAPERE Local Agent stub. If you use this constructor, you must be sure that your agent does not modify any molecule (e.g. an agent that just moves a node).<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2 and/or the template passed in m3.<\/p>\ngetContext\n\n"
                          }]
                        },
                        "baseeuclideannavigationaction": {
                          "ownKey": "baseeuclideannavigationaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/baseeuclideannavigationaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/baseeuclideannavigationaction"
                            },
                            "description": "",
                            "title": "BaseEuclideanNavigationAction",
                            "content": "<p>An  AbstractNavigationAction  working with euclidean spaces. This action accepts\nan  Euclidean2DEnvironmentWithGraph  whose graph features  ConvexPolygon al nodes\nand  Euclidean2DPassage s as edges.<\/p>target\n<p>The target of a directed edge of the environment's graph.<\/p>\nenvironment\n<p>The environment the  pedestrian  is into.<\/p>\n<init>\n<p>An  AbstractNavigationAction  working with euclidean spaces. This action accepts\nan  Euclidean2DEnvironmentWithGraph  whose graph features  ConvexPolygon al nodes\nand  Euclidean2DPassage s as edges.<\/p>\ncrossDoor\n<p>Moves the pedestrian across the provided  door , which must be among  doorsInSight .<\/p>\nmoving\n\nnextPosition\n\ncloneAction\n\nBaseEuclideanNavigationAction\n<p>An  AbstractNavigationAction  working with euclidean spaces. This action accepts\nan  Euclidean2DEnvironmentWithGraph  whose graph features  ConvexPolygon al nodes\nand  Euclidean2DPassage s as edges.<\/p>\n"
                          }]
                        },
                        "wander": {
                          "ownKey": "wander",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/wander",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/wander"
                            },
                            "description": "",
                            "title": "Wander",
                            "content": "<p>Give the impression of a random walk through the environment targeting an ever changing pseudo-randomly point\nof a circumference at a given distance and with a given radius from the current pedestrian position.<\/p>randomGenerator\n<pre><code>    the simulation {@link RandomGenerator}.<\/code><\/pre>\noffset\n<pre><code>    the distance from the pedestrian position of the center of the circle.<\/code><\/pre>\nradius\n<pre><code>    the radius of the circle.<\/code><\/pre>\n<init>\n<p>Give the impression of a random walk through the environment targeting an ever changing pseudo-randomly point\nof a circumference at a given distance and with a given radius from the current pedestrian position.<\/p>\ninterpolatePositions\n<p>Next relative position.<\/p>\ncloneAction\n\n"
                          }]
                        },
                        "abstractmovenode": {
                          "ownKey": "abstractmovenode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractmovenode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractmovenode"
                            },
                            "description": "",
                            "title": "AbstractMoveNode",
                            "content": "<p>This action moves a node inside a given environment.<\/p><init>\n<p>Builds a new move node action. By default the movements are relative.<\/p>\n<init>\n\nisAbsolute\n\ngetNodePosition\n<p>Given a node, computes its position.<\/p>\nexecute\n<p>Detects if the move is in absolute or relative coordinates, then calls the correct method on the <code> Environment <\/code>.<\/p>\ngetContext\n\ngetCurrentPosition\n\ngetEnvironment\n\ngetNextPosition\n\n"
                          }]
                        },
                        "addjunctioninneighbor": {
                          "ownKey": "addjunctioninneighbor",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/addjunctioninneighbor",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/addjunctioninneighbor"
                            },
                            "description": "",
                            "title": "AddJunctionInNeighbor",
                            "content": "<p>Represent the action of add a junction between a neighbor and the current node. <br> This action only create the junction reference inside the neighbor, the current node totally ignore that a junction has been created. <br> This is a part of the junction creation process. <br> See <code> AddJunctionInCell <\/code> for the other part of the process<\/p><init>\n\ntoString\n\nexecute\n<p>If no target node is given DO NOTHING. The junction can not be created.<\/p>\nexecute\n<p>Create the junction that links the target node and the node when this action is executed.<\/p>\ncloneAction\n\ngetNode\n\n"
                          }]
                        },
                        "cohesion": {
                          "ownKey": "cohesion",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/cohesion",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cohesion"
                            },
                            "description": "",
                            "title": "Cohesion",
                            "content": "<p>Move the agent towards the other members of his group.<\/p><init>\n<p>Move the agent towards the other members of his group.<\/p>\ncloneAction\n\nnextPosition\n\ngroup\n<p>The list of pedestrians used to compute the group steering action.<\/p>\n"
                          }]
                        },
                        "abstractrandomizableaction": {
                          "ownKey": "abstractrandomizableaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractrandomizableaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractrandomizableaction"
                            },
                            "description": "",
                            "title": "AbstractRandomizableAction",
                            "content": "<p><init><\/p>\n<p>getRandomGenerator<\/p>\n"
                          }]
                        },
                        "abstractconfigurablemovenode": {
                          "ownKey": "abstractconfigurablemovenode",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractconfigurablemovenode",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractconfigurablemovenode"
                            },
                            "description": "",
                            "title": "AbstractConfigurableMoveNode",
                            "content": "<p>An abstract class that factorizes code for multiple different movements. With three strategies can be defined: the next target to be reached, the routing strategy to adopt, the speed to move at.<\/p><init>\n<p>Builds a new move node action. By default the movements are relative.<\/p>\n<init>\n\ninterpolatePositions\n<p>Given a start position (current), a desired target position (target), and a maximum walkable distance (maxWalk), this method computes the actual position reached by the moving node, in absolute or relative coordinates depending on the value of isAbsolute in the constructor.<\/p>\ngetTargetPoint\n\ngetCurrentRoute\n\nsetTargetPoint\n\ngetNextPosition\n\nresetRoute\n<p>Resets the current route, e.g. because the target has been reached<\/p>\n"
                          }]
                        },
                        "lsaascendinggradientdist": {
                          "ownKey": "lsaascendinggradientdist",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsaascendinggradientdist",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsaascendinggradientdist"
                            },
                            "description": "",
                            "title": "LsaAscendingGradientDist",
                            "content": "<p><init><\/p>\n<p>execute<\/p>\n"
                          }]
                        },
                        "lsaabstractaction": {
                          "ownKey": "lsaabstractaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsaabstractaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsaabstractaction"
                            },
                            "description": "",
                            "title": "LsaAbstractAction",
                            "content": "<p><init><\/p>\n<p>getMatchAsDouble<\/p>\n<p>Given a variable, allows to access to its associated value as double. Note that this might fail if you try to access a value which is not numeric through this method.<\/p>\ngetMatchAsDouble\n<p>Given a variable, allows to access to its associated value as double. Note that this might fail if you try to access a value which is not numeric through this method.<\/p>\ngetLSAArgumentAsInt\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Double. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ngetLSAArgumentAsInt\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Double. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ngetLSAs\n<p>Accesses an LSA space and retrieves a molecule matching template. It can use the template as-is or instance its variables with the current matches before accessing the space.<\/p>\nsetSyntheticO\n<p>Sets #O to the local node.<\/p>\nsetSyntheticRoute\n<p>Sets #ROUTE.<\/p>\ngetLSAArgumentAsString\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as String. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ngetLSAArgumentAsString\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as String. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ncloneAction\n<p>getNode<\/p>\n<p>addMatch<\/p>\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\nsetExecutionContext\n<p>Sets the context in which this action will execute.<\/p>\nsetLSAArgument\n<p>Given an an LSA template, an argument number and some new data, sets the argument in the given position as the passed value.<\/p>\nsetLSAArgument\n<p>Given an an LSA template, an argument number and some new data, sets the argument in the given position as the passed value.<\/p>\nsetSyntheticNeigh\n<p>Sets #NEIGH equal to the passed node list.<\/p>\nallocateVars\n<p>Given an LSA template, allocates all the variables using the current matches. The allocations may or not produce an instance: it does only if all the variable within the LSA have a corresponding entry in the matches map.<\/p>\nallocateVarsAndBuildLSA\n<p>Same of <code> #allocateVars(ILsaMolecule) <\/code>, but also builds an ILsaMolecule.<\/p>\ngetLSAArgumentAsDouble\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Double. Hides some low-level details. If a molecule template is passed, it will be istanced using the current matches.<\/p>\ngetLSAArgumentAsDouble\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Double. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ninjectLocally\n<p>Injects an ILsaMolecule locally.<\/p>\ngetMatchAsString\n<p>Given a variable, allows to access to its associated value as String.<\/p>\ngetMatchAsString\n<p>Given a variable, allows to access to its associated value as String.<\/p>\ntoString\n<p>inject<\/p>\n<p>Injects an LSA in a node.<\/p>\nsetSyntheticD\n<p>Sets #D.<\/p>\ngetMatches\n<p>getNodes<\/p>\n<p>getMatch<\/p>\n<p>Given a variable, allows to access to its associated value.<\/p>\ngetMatch\n<p>Given a variable, allows to access to its associated value.<\/p>\ngetLSAArgumentAsObject\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Integer. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ngetLSAArgumentAsObject\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Object. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\n"
                          }]
                        },
                        "saperewalkerrisegradient": {
                          "ownKey": "saperewalkerrisegradient",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/saperewalkerrisegradient",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperewalkerrisegradient"
                            },
                            "description": "",
                            "title": "SAPEREWalkerRiseGradient",
                            "content": "<p><init><\/p>\n<p><init><\/p>\n"
                          }]
                        },
                        "lsacountneighborsaction": {
                          "ownKey": "lsacountneighborsaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsacountneighborsaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsacountneighborsaction"
                            },
                            "description": "",
                            "title": "LsaCountNeighborsAction",
                            "content": "<p><init><\/p>\n<p>Builds a new action that counts neighbors which contain in their lsaSpace an lsaMolecule matching mol. The effect of this Action is to add to the matches list the variable countVar. The execution has no effect on the set of influenced molecules for the reaction.<\/p>\n<init>\n<p>Builds a new action that counts neighbors which contain in their lsaSpace an lsaMolecule matching mol. The effect of this Action is to add to the matches list the variable countVar. The execution has no effect on the set of influenced molecules for the reaction.<\/p>\ncloneAction\n\nrandom\n\ntoString\n\nexecute\n\ngetEnvironment\n\n"
                          }]
                        },
                        "changebiomolconcentrationinenv": {
                          "ownKey": "changebiomolconcentrationinenv",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationinenv",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationinenv"
                            },
                            "description": "",
                            "title": "ChangeBiomolConcentrationInEnv",
                            "content": "<p>Action implementing the changing of the concentration of a given biomolecule in environment.<\/p><init>\n<p>Initialize a new <code> Action <\/code> that change concentration of the given <code> Biomolecule <\/code> of a \"deltaCon\" quantity.<\/p>\n<init>\n<p>Initialize a <code> ChangeBiomolConcentrationInEnv <\/code> with delta = -1.<\/p>\ntoString\n\ngetEnvironmentNodesSurrounding\n\nexecute\n\ngetContext\n\ncloneAction\n\n"
                          }]
                        },
                        "abstractneighboraction": {
                          "ownKey": "abstractneighboraction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractneighboraction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractneighboraction"
                            },
                            "description": "",
                            "title": "AbstractNeighborAction",
                            "content": "<p>Represents an action on a neighbor.<\/p><init>\n\nexecute\n<p>Execute the action on a random neighbor if the node has a neighborhood. Otherwise do nothing.<\/p>\nexecute\n<p>Execute the action on the given target node. NOTE, it is NOT guaranteed that this method checks if the target node is in the actual neighborhood of the node.<\/p>\ngetContext\n\ncloneAction\n\ngetEnvironment\n\n"
                          }]
                        },
                        "brownianmove": {
                          "ownKey": "brownianmove",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/brownianmove",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/brownianmove"
                            },
                            "description": "",
                            "title": "BrownianMove",
                            "content": "<p>Moves the node randomly.<\/p><init>\n\ncloneAction\n\ngetRadius\n\ngetRandomGenerator\n\ngetNextPosition\n\n"
                          }]
                        },
                        "abstractgroupsteeringaction": {
                          "ownKey": "abstractgroupsteeringaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractgroupsteeringaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractgroupsteeringaction"
                            },
                            "description": "",
                            "title": "AbstractGroupSteeringAction",
                            "content": "<p>An abstract  GroupSteeringAction .<\/p>env\n<p>The environment in which this action executes.<\/p>\n<init>\n<p>An abstract  GroupSteeringAction .<\/p>\ncentroid\n<p>Computes the centroid of the  group  in absolute coordinates.<\/p>\n"
                          }]
                        },
                        "abstractactiononsinglemolecule": {
                          "ownKey": "abstractactiononsinglemolecule",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractactiononsinglemolecule",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractactiononsinglemolecule"
                            },
                            "description": "",
                            "title": "AbstractActionOnSingleMolecule",
                            "content": "<p>This class offers the basic structures to provide operations with numeric concentrations on a single molecule.<\/p><init>\n<p>Call this constructor in the subclasses in order to automatically instance the node, the molecules and the dependency managing facilities.<\/p>\ngetMolecule\n\n"
                          }]
                        },
                        "setlocalmoleculeconcentration": {
                          "ownKey": "setlocalmoleculeconcentration",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/setlocalmoleculeconcentration",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/setlocalmoleculeconcentration"
                            },
                            "description": "",
                            "title": "SetLocalMoleculeConcentration",
                            "content": "<p><init><\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n"
                          }]
                        },
                        "flee": {
                          "ownKey": "flee",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/flee",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/flee"
                            },
                            "description": "",
                            "title": "Flee",
                            "content": "<p>Move the agent away from a target position. It's the opposite of Seek.<\/p><init>\n<p>Move the agent away from a target position. It's the opposite of Seek.<\/p>\ncloneAction\n\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\n"
                          }]
                        },
                        "crowdsensor": {
                          "ownKey": "crowdsensor",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/crowdsensor",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/crowdsensor"
                            },
                            "description": "",
                            "title": "CrowdSensor",
                            "content": "<p>The count N of neighbors containing \"person\" is stored within a tuple of the form \"crowd, N\".<\/p><init>\n\nexecute\n\n"
                          }]
                        },
                        "moveonmapwithgps": {
                          "ownKey": "moveonmapwithgps",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/moveonmapwithgps",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/moveonmapwithgps"
                            },
                            "description": "",
                            "title": "MoveOnMapWithGPS",
                            "content": "<p>basic action that follow a <code> GPSTrace <\/code>.<\/p><init>\n\n<init>\n\ngetTrace\n\ntraceFor\n\n"
                          }]
                        },
                        "seek": {
                          "ownKey": "seek",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/seek",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/seek"
                            },
                            "description": "",
                            "title": "Seek",
                            "content": "<p>Move the pedestrian towards the target position as fast as possible.<\/p><init>\n\n<init>\n<p>Move the pedestrian towards the target position as fast as possible.<\/p>\ncloneAction\n\n"
                          }]
                        },
                        "randompolarization": {
                          "ownKey": "randompolarization",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/randompolarization",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/randompolarization"
                            },
                            "description": "",
                            "title": "RandomPolarization",
                            "content": "<p><init><\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n"
                          }]
                        },
                        "randomrotate": {
                          "ownKey": "randomrotate",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/randomrotate",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/randomrotate"
                            },
                            "description": "",
                            "title": "RandomRotate",
                            "content": "<p>Changes the heading of the node randomly.<\/p><init>\n<p>Changes the heading of the node randomly.<\/p>\ncloneAction\n<p>{@inheritDoc}.<\/p>\nexecute\n<p>Changes the heading of the node randomly.<\/p>\ngetContext\n<p>{@inheritDoc}.<\/p>\n"
                          }]
                        },
                        "headtowardtarget": {
                          "ownKey": "headtowardtarget",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/headtowardtarget",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/headtowardtarget"
                            },
                            "description": "",
                            "title": "HeadTowardTarget",
                            "content": "<p>Reads the target's absolute coordinates from the target molecule\ncontained in  getNode  and sets the node's heading accordingly.<\/p><init>\n<p>Reads the target's absolute coordinates from the target molecule\ncontained in  getNode  and sets the node's heading accordingly.<\/p>\ncloneAction\n\nexecute\n<p>Sets the heading of the node according to the target molecule.<\/p>\ngetContext\n\n"
                          }]
                        },
                        "see": {
                          "ownKey": "see",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/see",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/see"
                            },
                            "description": "",
                            "title": "See",
                            "content": "<p>Checks nodes in the env and writes in outputMolecule a list of  it.unibo.alchemist.model.interfaces.VisibleNode ,\nfiltered by those containing filterByMolecule.\n distance  and  angle  define the field of view.<\/p>distance\n<p>Distance of the field of view.<\/p>\nangle\n<p>Angle in degrees of the field of view.<\/p>\n<init>\n<p>Checks nodes in the env and writes in outputMolecule a list of  it.unibo.alchemist.model.interfaces.VisibleNode ,\nfiltered by those containing filterByMolecule.\n distance  and  angle  define the field of view.<\/p>\ncloneAction\n\nexecute\n\ngetContext\n\n"
                          }]
                        },
                        "pursue": {
                          "ownKey": "pursue",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/pursue",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/pursue"
                            },
                            "description": "",
                            "title": "Pursue",
                            "content": "<p>A  NavigationAction  using  Pursuing  navigation strategy.<\/p><init>\n<p>A  NavigationAction  using  Pursuing  navigation strategy.<\/p>\n"
                          }]
                        },
                        "levywalk": {
                          "ownKey": "levywalk",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/levywalk",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/levywalk"
                            },
                            "description": "",
                            "title": "LevyWalk",
                            "content": "<p>Selects a target based on a random direction extracted from rng,\nand a random distance extracted from a <a href=\"#\">ParetoDistribution<\/a> of parameters scale and shape.\nMoves toward the targets at a constant speed and changes targets on collision.<\/p><init>\n<p>Selects a target based on a random direction extracted from rng,\nand a random distance extracted from a <a href=\"#\">ParetoDistribution<\/a> of parameters scale and shape.\nMoves toward the targets at a constant speed and changes targets on collision.<\/p>\ncloneAction\n\n"
                          }]
                        },
                        "arrive": {
                          "ownKey": "arrive",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/arrive",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/arrive"
                            },
                            "description": "",
                            "title": "Arrive",
                            "content": "<p>Move the agent towards a target position.\nIt is similar to Seek but it attempts to arrive at the target position with a zero velocity.<\/p>decelerationRadius\n<pre><code>    the distance from which the pedestrian starts to decelerate.<\/code><\/pre>\narrivalTolerance\n<pre><code>    the distance at which the pedestrian is considered arrived to the target.<\/code><\/pre>\ncoordinates\n<pre><code>    the coordinates of the position the pedestrian moves towards.<\/code><\/pre>\n<init>\n\n<init>\n<p>Move the agent towards a target position.\nIt is similar to Seek but it attempts to arrive at the target position with a zero velocity.<\/p>\ncloneAction\n\n"
                          }]
                        },
                        "obstacleavoidance": {
                          "ownKey": "obstacleavoidance",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/obstacleavoidance",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/obstacleavoidance"
                            },
                            "description": "",
                            "title": "ObstacleAvoidance",
                            "content": "<p>Move the agent avoiding potential obstacles in its path.<\/p>reaction\n<pre><code>    the reaction which executes this action.<\/code><\/pre>\n<init>\n<p>Move the agent avoiding potential obstacles in its path.<\/p>\ncloneAction\n\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\n"
                          }]
                        },
                        "sapereneighboragent": {
                          "ownKey": "sapereneighboragent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/sapereneighboragent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/sapereneighboragent"
                            },
                            "description": "",
                            "title": "SAPERENeighborAgent",
                            "content": "<p>A SAPERE Agent that modifies something on neighboring nodes.<\/p><init>\n<p>Creates a new SAPERE Neighbor Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2 and/or the template passed in m3.<\/p>\ngetCurrentPosition\n\ngetNeighborhood\n\ngetPosition\n\ngetContext\n\ngetLocalNeighborhood\n\nallocateAndInject\n\ngetEnvironment\n\nmove\n\n"
                          }]
                        },
                        "moveforwardandteleport": {
                          "ownKey": "moveforwardandteleport",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/moveforwardandteleport",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/moveforwardandteleport"
                            },
                            "description": "",
                            "title": "MoveForwardAndTeleport",
                            "content": "<p><init><\/p>\n<p>cloneAction<\/p>\n<p>getNextPosition<\/p>\n"
                          }]
                        },
                        "steeringactionwithtargetimpl": {
                          "ownKey": "steeringactionwithtargetimpl",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/steeringactionwithtargetimpl",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringactionwithtargetimpl"
                            },
                            "description": "",
                            "title": "SteeringActionWithTargetImpl",
                            "content": "<p>Implementation of a generic  SteeringActionWithTarget  in a vector space.<\/p>pedestrian\n<pre><code>    the owner of this action.<\/code><\/pre>\ntarget\n<pre><code>    the strategy used to compute the next target.<\/code><\/pre>\nspeed\n<pre><code>    the speed selection strategy.<\/code><\/pre>\nrouting\n<pre><code>    the routing strategy.<\/code><\/pre>\n<init>\n<p>Implementation of a generic  SteeringActionWithTarget  in a vector space.<\/p>\ncloneAction\n\ninterpolatePositions\n<p>Next relative position.<\/p>\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\ntarget\n<p>The position the owner of this action moves towards, in absolute coordinates.<\/p>\ngetNode\n\nrequireNodeTypeAndProduce\n\n"
                          }]
                        },
                        "abstractlocalaction": {
                          "ownKey": "abstractlocalaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractlocalaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractlocalaction"
                            },
                            "description": "",
                            "title": "AbstractLocalAction",
                            "content": "<p><init><\/p>\n<p>getContext<\/p>\n"
                          }]
                        },
                        "lsadeletenodeaction": {
                          "ownKey": "lsadeletenodeaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsadeletenodeaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsadeletenodeaction"
                            },
                            "description": "",
                            "title": "LsaDeleteNodeAction",
                            "content": "<p><init><\/p>\n<p>cloneAction<\/p>\n<p>setExecutionContext<\/p>\n"
                          }]
                        },
                        "togglemolecule": {
                          "ownKey": "togglemolecule",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/togglemolecule",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/togglemolecule"
                            },
                            "description": "",
                            "title": "ToggleMolecule",
                            "content": "<p>Toggles a molecule.<\/p>molecule\n<p>the molecule to toggle<\/p>\nconcentration\n<p>the concentration to set<\/p>\n<init>\n<p>Toggles a molecule.<\/p>\ncloneAction\n\nexecute\n<p>Toggles concentration.<\/p>\nisOn\n<p>Returns true if it is on, already toggled.<\/p>\ngetContext\n\n"
                          }]
                        },
                        "avoidflowfield": {
                          "ownKey": "avoidflowfield",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/avoidflowfield",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/avoidflowfield"
                            },
                            "description": "",
                            "title": "AvoidFlowField",
                            "content": "<p>Move the pedestrian towards positions of the environment with a low concentration of the target molecule.<\/p>pedestrian\n<pre><code>    the owner of this action.<\/code><\/pre>\nviewDepth\n<pre><code>    the depth of view of the pedestrian, defaults to infinity.<\/code><\/pre>\n<init>\n<p>Move the pedestrian towards positions of the environment with a low concentration of the target molecule.<\/p>\ncloneAction\n\nnextPosition\n\nselectPosition\n<p>Selects a position from a list, given the layer and its concentration in the current position\nof the pedestrian.\nThis function contains the policy concerning how to select the most desirable position.<\/p>\n"
                          }]
                        },
                        "addjunctionincell": {
                          "ownKey": "addjunctionincell",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/addjunctionincell",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/addjunctionincell"
                            },
                            "description": "",
                            "title": "AddJunctionInCell",
                            "content": "<p>Represent the action of add a junction between the current node and a neighbor. <br> This action only create the junction reference inside this node, the neighbor totally ignore that a junction has been created. <br> This is a part of the junction creation process. <br> See <code> AddJunctionInNeighbor <\/code> for the other part of the process<\/p><init>\n\ntoString\n\nexecute\n<p>If no target node is given DO NOTHING. The junction can not be created.<\/p>\nexecute\n<p>Create the junction that links the node where this action is executed and the target node.<\/p>\ncloneAction\n\ngetNode\n\n"
                          }]
                        },
                        "moveonmap": {
                          "ownKey": "moveonmap",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/moveonmap",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/moveonmap"
                            },
                            "description": "",
                            "title": "MoveOnMap",
                            "content": "<p><init><\/p>\n<p>interpolatePositions<\/p>\n<p>cloneAction<\/p>\n<p>Fails, can't be cloned.<\/p>\ngetEnvironment\n"
                          }]
                        },
                        "explore": {
                          "ownKey": "explore",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/explore",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/explore"
                            },
                            "description": "",
                            "title": "Explore",
                            "content": "<p>A  NavigationAction  using  Exploring  navigation strategy.<\/p><init>\n<p>A  NavigationAction  using  Exploring  navigation strategy.<\/p>\n"
                          }]
                        },
                        "sendtoneighbor": {
                          "ownKey": "sendtoneighbor",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/sendtoneighbor",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/sendtoneighbor"
                            },
                            "description": "",
                            "title": "SendToNeighbor",
                            "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getProtelisProgram<\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n"
                          }]
                        },
                        "changebiomolconcentrationinneighbor": {
                          "ownKey": "changebiomolconcentrationinneighbor",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationinneighbor",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationinneighbor"
                            },
                            "description": "",
                            "title": "ChangeBiomolConcentrationInNeighbor",
                            "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>execute<\/p>\n<p>execute<\/p>\n<p>cloneAction<\/p>\n"
                          }]
                        },
                        "lsaascendingagent": {
                          "ownKey": "lsaascendingagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsaascendingagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsaascendingagent"
                            },
                            "description": "",
                            "title": "LsaAscendingAgent",
                            "content": "<p><init><\/p>\n<p>computeWalkedTime<\/p>\n<p>execute<\/p>\n"
                          }]
                        },
                        "changebiomolconcentrationincell": {
                          "ownKey": "changebiomolconcentrationincell",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationincell",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationincell"
                            },
                            "description": "",
                            "title": "ChangeBiomolConcentrationInCell",
                            "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n"
                          }]
                        },
                        "lsaallneighborsaction": {
                          "ownKey": "lsaallneighborsaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsaallneighborsaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsaallneighborsaction"
                            },
                            "description": "",
                            "title": "LsaAllNeighborsAction",
                            "content": "<p>The execution involves all neighbours. The molecule can be different from a neighbor to the other, because some special Variable (#D) are specific for each node. This is why N molecules are instanced if there are N neighbours.<\/p><init>\n\n<init>\n\ntoString\n\nexecute\n\n"
                          }]
                        },
                        "randomwalker": {
                          "ownKey": "randomwalker",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/randomwalker",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/randomwalker"
                            },
                            "description": "",
                            "title": "RandomWalker",
                            "content": "<p>Chooses random targets in a direction extracted from randomGenerator\nat a distance extracted from distanceDistribution.\nMoves the node towards the targets at the given constant speed. Changes target on collision.<\/p><init>\n<p>Chooses random targets in a direction extracted from randomGenerator\nat a distance extracted from distanceDistribution.\nMoves the node towards the targets at the given constant speed. Changes target on collision.<\/p>\ncloneAction\n\n"
                          }]
                        },
                        "followflowfield": {
                          "ownKey": "followflowfield",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/followflowfield",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/followflowfield"
                            },
                            "description": "",
                            "title": "FollowFlowField",
                            "content": "<p>Move the pedestrian towards positions of the environment with a high concentration of the target molecule.<\/p><init>\n<p>Move the pedestrian towards positions of the environment with a high concentration of the target molecule.<\/p>\ncloneAction\n\nselectPosition\n<p>Selects a position from a list, given the layer and its concentration in the current position\nof the pedestrian.\nThis function contains the policy concerning how to select the most desirable position.<\/p>\n"
                          }]
                        },
                        "cellmove": {
                          "ownKey": "cellmove",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/cellmove",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cellmove"
                            },
                            "description": "",
                            "title": "CellMove",
                            "content": "<p><init><\/p>\n<p>Initialize an Action that move the cell of a given space delta, which can be expressed in percent of the cell's diameter or in absolute. If the cell has diameter 0, the only way to express delta is absolute. There's no way to decide the direction of the cell by this <code> it.unibo.alchemist.model.interfaces.Action <\/code>. This is inferred by the polarization vector contained in the cell.<\/p>\nexecute\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n<p>getNextPosition<\/p>\n"
                          }]
                        },
                        "fakemove": {
                          "ownKey": "fakemove",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/fakemove",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/fakemove"
                            },
                            "description": "",
                            "title": "FakeMove",
                            "content": "<p>Fake movement class, used only to trigger the neighborhood update.<\/p><init>\n\ncloneAction\n\ngetNextPosition\n\n"
                          }]
                        },
                        "crowdsteeringservice": {
                          "ownKey": "crowdsteeringservice",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/crowdsteeringservice",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/crowdsteeringservice"
                            },
                            "description": "",
                            "title": "CrowdSteeringService",
                            "content": "<p><init><\/p>\n<p>execute<\/p>\n"
                          }]
                        },
                        "saperemovenodeagent": {
                          "ownKey": "saperemovenodeagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/saperemovenodeagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperemovenodeagent"
                            },
                            "description": "",
                            "title": "SAPEREMoveNodeAgent",
                            "content": "<p><init><\/p>\n<p>Creates a new SAPERE Local Agent stub. If you use this constructor, you must be sure that your agent does not modify any molecule (e.g. an agent that just moves a node).<\/p>\n<init>\n<p>Creates a new SAPERE Local Agent stub. Use this constructor if you agent modifies a molecule (locally!)<\/p>\ngetCurrentPosition\n\ngetNeighborhood\n\ngetPosition\n\ngetLocalNeighborhood\n\ngetEnvironment\n\nmove\n\n"
                          }]
                        },
                        "lsarandomneighboraction": {
                          "ownKey": "lsarandomneighboraction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/lsarandomneighboraction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsarandomneighboraction"
                            },
                            "description": "",
                            "title": "LsaRandomNeighborAction",
                            "content": "<p><init><\/p>\n<p>Builds a new action in a neighborhood. es: + This class extend LsaAbstractAction.<\/p>\ncloneAction\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\nsetSynthectics\n<p>Sets the synthetic variables.<\/p>\ntoString\n<p>execute<\/p>\n<p>Effectively executes this action.<\/p>\ngetContext\n<p>getEnvironment<\/p>\n<p>getRandomGenerator<\/p>\n"
                          }]
                        },
                        "followatdistance": {
                          "ownKey": "followatdistance",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/followatdistance",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/followatdistance"
                            },
                            "description": "",
                            "title": "FollowAtDistance",
                            "content": "<p>Follows a target at distance.<\/p><init>\n<p>Follows a target at distance.<\/p>\ncloneAction\n\nexecute\n\ngetContext\n\n"
                          }]
                        },
                        "gpstracewalker": {
                          "ownKey": "gpstracewalker",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/gpstracewalker",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/gpstracewalker"
                            },
                            "description": "",
                            "title": "GPSTraceWalker",
                            "content": "<p>A walker that follows a trace. The trace is mandatory.<\/p><init>\n\ncloneAction\n\n"
                          }]
                        },
                        "runprotelisprogram": {
                          "ownKey": "runprotelisprogram",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/runprotelisprogram",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/runprotelisprogram"
                            },
                            "description": "",
                            "title": "RunProtelisProgram",
                            "content": "<p><init><\/p>\n<p><init><\/p>\n<p>hashCode<\/p>\n<p>equals<\/p>\n<p>toString<\/p>\n<p>getOutboundDependencies<\/p>\n<p>getRetentionTime<\/p>\n<p>asMolecule<\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getEnvironment<\/p>\n<p>getNode<\/p>\n<p>prepareForComputationalCycle<\/p>\n<p>Resets the computation status (used for dependency management).<\/p>\ngetRandomGenerator\n<p>isComputationalCycleComplete<\/p>\n"
                          }]
                        },
                        "removejunctionincell": {
                          "ownKey": "removejunctionincell",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/removejunctionincell",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/removejunctionincell"
                            },
                            "description": "",
                            "title": "RemoveJunctionInCell",
                            "content": "<p>Represent the action of removing a junction between the current node and a neighbor. <br> This action only remove the junction reference inside this node, the neighbor totally ignore that a junction has been removed. <br> This is a part of the junction removal process. <br> See <code> RemoveJunctionInNeighbor <\/code> for the other part of the process<\/p><init>\n\ntoString\n\nexecute\n<p>If no target node is given DO NOTHING. The junction can not be removed.<\/p>\nexecute\n<p>Removes the junction that links the node where this action is executed and the target node.<\/p>\ncloneAction\n\ngetNode\n\n"
                          }]
                        },
                        "navigationstrategies": {
                          "ownKey": "navigationstrategies",
                          "childrenPages": {
                            "pursuing": {
                              "ownKey": "pursuing",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/pursuing",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/pursuing"
                                },
                                "description": "",
                                "title": "Pursuing",
                                "content": "<p>A  NavigationStrategy  allowing to pursue a known (static)  destination  without knowing any\npath leading there, this is also known as path searching.\nIn this context, knowing a destination means knowing its position, which, in turn, means\nknowing two things:<\/p><ul><li>the direction that connects the destination and the current position as the crow flies,<\/li><li>an estimation of the distance between the destination and the current position.\nIn order to reach the  destination  without a route to follow, the weighting system used\nin  Exploring  is extended so as to take into account the (estimated) suitability of each\ndoor to reach the provided  destination , see  suitabilityFactor .<\/li><\/ul>destination\n<p>The destination to pursue.<\/p>\n<init>\n<p>A  NavigationStrategy  allowing to pursue a known (static)  destination  without knowing any\npath leading there, this is also known as path searching.\nIn this context, knowing a destination means knowing its position, which, in turn, means\nknowing two things:<\/p><ul><li>the direction that connects the destination and the current position as the crow flies,<\/li><li>an estimation of the distance between the destination and the current position.\nIn order to reach the  destination  without a route to follow, the weighting system used\nin  Exploring  is extended so as to take into account the (estimated) suitability of each\ndoor to reach the provided  destination , see  suitabilityFactor .<\/li><\/ul>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\nweight\n<p>Assigns a weight to a visible door (= passage). This weighting system is derived from the one\nby <a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>. The  suitabilityFactor \nis added to the factors of super method (=  Exploring.weight ).<\/p>\nsuitabilityFactor\n<p>Takes into account the rank given to the passage when assessing its suitability to reach\nthe  destination  (see  computeDoorsRankings ). It is computed as 1 - 0.5^ rank . This is\nderived from <a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen's work<\/a>.<\/p>\ncomputeDoorsRankings\n<p>Assign an integer rank to each door in sight, a lower rank means the door is preferable to\nreach the  destination . This method allows the pedestrian to perform an educated guess of\nwhich door to take in order to get closer to the  destination . It works as follows:\nthe spatial structure of the  currentRoom  is assumed to be entirely perceived, this is\nthe only spatial information taken into account a part from the  destination  itself.\nThe shortest paths (represented as polygonal chains) connecting the doors of the current room\nand the  destination  are computed, the lengths of these polygonal chains are calculated\nunder the constraint that the room must not be traversed by them but has to be bypassed (the\npolygon chains must not overlap with  currentRoom ).\nTo do so, a graph composed by the doors' midpoints, the room vertices and the  destination \nis built, then the shortest path between each door and the  destination  is computed and\neach door is ranked consequently (the shorter the path, the lower the rank).<\/p>\n"
                              }]
                            },
                            "exploring": {
                              "ownKey": "exploring",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/exploring",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/exploring"
                                },
                                "description": "",
                                "title": "Exploring",
                                "content": "<p>A  NavigationStrategy  allowing to explore the environment.\nIn order to choose which direction to take, a weighting system is used: every time the\npedestrian enters a new room all the visible doors are weighted, the one with minimum\nweight is then crossed. The weighting system used here is derived from the one by\n<a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>, see  weight .<\/p>pedestrian\n<p>Shortcut to obtain the pedestrian.<\/p>\ncomparator\n<p>The comparator used to determine which passage to cross, a nearest door heuristic\nis used when multiple passages have the same weight.<\/p>\naction\n<p>The  NavigationAction  used to navigate the environment.<\/p>\n<init>\n<p>A  NavigationStrategy  allowing to explore the environment.\nIn order to choose which direction to take, a weighting system is used: every time the\npedestrian enters a new room all the visible doors are weighted, the one with minimum\nweight is then crossed. The weighting system used here is derived from the one by\n<a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>, see  weight .<\/p>\ndistanceToPedestrian\n<p>Computes the distance between the pedestrian and a visible passage.<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\nweight\n<p>Assigns a weight to a visible door (= passage). This weighting system is derived from the one\nby <a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>. By default, it comprises\nthree factors:  volatileMemoryFactor ,  congestionFactor  and  impasseFactor .<\/p>\nvolatileMemoryFactor\n<p>Takes into account the information stored in the pedestrian's volatile memory. It is computed\nas 2^v where v is the number of visits to the area the edge being weighted leads to (in other\nwords, less visited rooms are preferred).<\/p>\ncongestionFactor\n<p>Takes into account the congestion of the area the edge being weighted leads to (it is assumed\nthat the pedestrian can estimate the congestion level of a neighboring room). It is computed\nas density of the area + 1, so as to have a value in <a href=\"#\">1,2<\/a> (less crowded rooms are preferred).<\/p>\nimpasseFactor\n<p>Takes into account whereas the assessed edge leads to a known impasse or not, known impasses\nare given knownImpasseWeight (which is usually a high value, allowing to avoid them), otherwise\nthis factor assumes unitary value.<\/p>\narea\n<p>A rough estimation of the area of a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">Shape<\/a>.<\/p>\nisKnownImpasse\n<p>Checks if the pedestrian knows that the area is an impasse (= an area with a single door).<\/p>\nExploring\n<p>A  NavigationStrategy  allowing to explore the environment.\nIn order to choose which direction to take, a weighting system is used: every time the\npedestrian enters a new room all the visible doors are weighted, the one with minimum\nweight is then crossed. The weighting system used here is derived from the one by\n<a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>, see  weight .<\/p>\n"
                              }]
                            },
                            "knowndestinationreaching": {
                              "ownKey": "knowndestinationreaching",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/knowndestinationreaching",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/knowndestinationreaching"
                                },
                                "description": "",
                                "title": "KnownDestinationReaching",
                                "content": "<p>A  NavigationStrategy  allowing to reach a known (static) destination (see  Pursuing ).\nThe client can specify a list of known destinations, the pedestrian will try to reach the\nclosest one for which a valid path leading there is known.\nThe difference between this behavior and  Pursuing  is that the latter assumes no route\nleading to the destination is known, whereas this behavior tries to exploit the pedestrian's\ncognitive map to obtain a route to follow.<\/p>route\n<p>The route to follow.<\/p>\nenvironment\n<p>Shortcut to get the environment.<\/p>\n<init>\n<p>A  NavigationStrategy  allowing to reach a known (static) destination (see  Pursuing ).\nThe client can specify a list of known destinations, the pedestrian will try to reach the\nclosest one for which a valid path leading there is known.\nThe difference between this behavior and  Pursuing  is that the latter assumes no route\nleading to the destination is known, whereas this behavior tries to exploit the pedestrian's\ncognitive map to obtain a route to follow.<\/p>\nisReached\n<p>A  waypoint  is considered reached when inside  currentRoom  or in an adjacent room.<\/p>\n"
                              }]
                            },
                            "destinationreaching": {
                              "ownKey": "destinationreaching",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/destinationreaching",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/destinationreaching"
                                },
                                "description": "",
                                "title": "DestinationReaching",
                                "content": "<p>A  NavigationStrategy  allowing to reach a (static) destination.\nThe client can specify a list of knownDestinations (see  Pursuing ) and unknownDestinations (see\n GoalOrientedExploring ).\nThe pedestrian will try to reach the closest known destination for which a valid path leading there is\nknown, but in case another destination is found along the way (either known or unknown), the latter will\nbe approached instead of the chosen known destination. To put it in another way, this behavior mixes\n KnownDestinationReaching  and  GoalOrientedExploring .<\/p><init>\n<p>A  NavigationStrategy  allowing to reach a (static) destination.\nThe client can specify a list of knownDestinations (see  Pursuing ) and unknownDestinations (see\n GoalOrientedExploring ).\nThe pedestrian will try to reach the closest known destination for which a valid path leading there is\nknown, but in case another destination is found along the way (either known or unknown), the latter will\nbe approached instead of the chosen known destination. To put it in another way, this behavior mixes\n KnownDestinationReaching  and  GoalOrientedExploring .<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\n"
                              }]
                            },
                            "routefollowing": {
                              "ownKey": "routefollowing",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/routefollowing",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/routefollowing"
                                },
                                "description": "",
                                "title": "RouteFollowing",
                                "content": "<p>A  NavigationStrategy  allowing to follow a given  route .\nThe  route  consists of a list of positions (= waypoints) that may or may not be in sight of each\nother (i.e. the path leading from a waypoint to the next one may or may not be representable\nas a single segment), for this reason  Pursuing  behavior is used to reach each waypoint.\nIn this context, a waypoint is considered reached when it's inside the current room (not when the\npedestrian reach that exact position), apart from the last waypoint which is actually approached.\nCuts to the route are allowed (i.e. if the pedestrian finds a waypoint which is farther than the\nexpected next one, he/she skips all the waypoints in between).<\/p>route\n<p>The route to follow.<\/p>\n<init>\n<p>A  NavigationStrategy  allowing to follow a given  route .\nThe  route  consists of a list of positions (= waypoints) that may or may not be in sight of each\nother (i.e. the path leading from a waypoint to the next one may or may not be representable\nas a single segment), for this reason  Pursuing  behavior is used to reach each waypoint.\nIn this context, a waypoint is considered reached when it's inside the current room (not when the\npedestrian reach that exact position), apart from the last waypoint which is actually approached.\nCuts to the route are allowed (i.e. if the pedestrian finds a waypoint which is farther than the\nexpected next one, he/she skips all the waypoints in between).<\/p>\ninUnexpectedNewRoom\n<p>When in an unexpected room the pedestrian gets back to  previousRoom  so as to continue following the\nroute correctly.<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\nwaypointReached\n<p>Checks if a new waypoint has been reached and updates indexOfNextWaypoint accordingly.<\/p>\nisReached\n<p>Checks if the given  waypoint  is reached (as stated above, if it's inside  currentRoom ).<\/p>\n"
                              }]
                            },
                            "goalorientedexploring": {
                              "ownKey": "goalorientedexploring",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/goalorientedexploring",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/goalorientedexploring"
                                },
                                "description": "",
                                "title": "GoalOrientedExploring",
                                "content": "<p>A  NavigationStrategy  allowing to explore the environment looking for something specific whose position\nis unknown.\nThe client can specify a list of unknownDestinations: these can be recognized once they're in sight,\nbut the pedestrian doesn't know their position until that moment (think e.g. of exits in an evacuation\nscenario). More specifically, unknown destinations can be detected if located in a room adjacent to the\nroom the pedestrian is into. Once a destination is detected, the pedestrian will reach it and stop.<\/p><init>\n<p>A  NavigationStrategy  allowing to explore the environment looking for something specific whose position\nis unknown.\nThe client can specify a list of unknownDestinations: these can be recognized once they're in sight,\nbut the pedestrian doesn't know their position until that moment (think e.g. of exits in an evacuation\nscenario). More specifically, unknown destinations can be detected if located in a room adjacent to the\nroom the pedestrian is into. Once a destination is detected, the pedestrian will reach it and stop.<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\nreachUnknownDestination\n<p>If one or more unknown destinations are inside  newRoom  (= the room the pedestrian is into), the closest\none is approached. Otherwise, if one or more destinations are in a room adjacent to the current one, the\nrelated doors are weighted using  weightExit  and the one with minimum weight is crossed.  orElse  is\nexecuted otherwise.<\/p>\nleadsToUnknownDestination\n\nweightExit\n<p>Assigns a weight to a door (= passage) leading to an unknown destination (e.g. an exit).\nBy default, the exit's distance and its congestion are considered.<\/p>\n"
                              }]
                            },
                            "dynamicpursuing": {
                              "ownKey": "dynamicpursuing",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/dynamicpursuing",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/dynamicpursuing"
                                },
                                "description": "",
                                "title": "DynamicPursuing",
                                "content": "<p> Pursuing  strategy allowing to dynamically change  destination .<\/p>destination\n<p>The destination to pursue.<\/p>\n<init>\n<p> Pursuing  strategy allowing to dynamically change  destination .<\/p>\nsetDestination\n<p>Changes the destination of the strategy. If  voidVolatileMemory  is true, the pedestrian's\nvolatile memory is set to zero. This has two effects:<\/p><ul><li>known impasses remain stored (hence the pedestrian will keep avoiding them)<\/li><li>rooms visited while pursuing the previous destination won't be penalised (= won't be avoided)\nDefaults to false.<\/li><\/ul>\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.model.implementations.actions.navigationstrategies",
                            "content": "<p>DestinationReaching<\/p>\n<p>A  NavigationStrategy  allowing to reach a (static) destination.\nThe client can specify a list of knownDestinations (see  Pursuing ) and unknownDestinations (see\n GoalOrientedExploring ).\nThe pedestrian will try to reach the closest known destination for which a valid path leading there is\nknown, but in case another destination is found along the way (either known or unknown), the latter will\nbe approached instead of the chosen known destination. To put it in another way, this behavior mixes\n KnownDestinationReaching  and  GoalOrientedExploring .<\/p>\nDynamicPursuing\n<p> Pursuing  strategy allowing to dynamically change  destination .<\/p>\nExploring\n<p>A  NavigationStrategy  allowing to explore the environment.\nIn order to choose which direction to take, a weighting system is used: every time the\npedestrian enters a new room all the visible doors are weighted, the one with minimum\nweight is then crossed. The weighting system used here is derived from the one by\n<a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>, see  weight .<\/p>\nGoalOrientedExploring\n<p>A  NavigationStrategy  allowing to explore the environment looking for something specific whose position\nis unknown.\nThe client can specify a list of unknownDestinations: these can be recognized once they're in sight,\nbut the pedestrian doesn't know their position until that moment (think e.g. of exits in an evacuation\nscenario). More specifically, unknown destinations can be detected if located in a room adjacent to the\nroom the pedestrian is into. Once a destination is detected, the pedestrian will reach it and stop.<\/p>\nKnownDestinationReaching\n<p>A  NavigationStrategy  allowing to reach a known (static) destination (see  Pursuing ).\nThe client can specify a list of known destinations, the pedestrian will try to reach the\nclosest one for which a valid path leading there is known.\nThe difference between this behavior and  Pursuing  is that the latter assumes no route\nleading to the destination is known, whereas this behavior tries to exploit the pedestrian's\ncognitive map to obtain a route to follow.<\/p>\nPursuing\n<p>A  NavigationStrategy  allowing to pursue a known (static)  destination  without knowing any\npath leading there, this is also known as path searching.\nIn this context, knowing a destination means knowing its position, which, in turn, means\nknowing two things:<\/p><ul><li>the direction that connects the destination and the current position as the crow flies,<\/li><li>an estimation of the distance between the destination and the current position.\nIn order to reach the  destination  without a route to follow, the weighting system used\nin  Exploring  is extended so as to take into account the (estimated) suitability of each\ndoor to reach the provided  destination , see  suitabilityFactor .<\/li><\/ul>\nRouteFollowing\n<p>A  NavigationStrategy  allowing to follow a given  route .\nThe  route  consists of a list of positions (= waypoints) that may or may not be in sight of each\nother (i.e. the path leading from a waypoint to the next one may or may not be representable\nas a single segment), for this reason  Pursuing  behavior is used to reach each waypoint.\nIn this context, a waypoint is considered reached when it's inside the current room (not when the\npedestrian reach that exact position), apart from the last waypoint which is actually approached.\nCuts to the route are allowed (i.e. if the pedestrian finds a waypoint which is farther than the\nexpected next one, he/she skips all the waypoints in between).<\/p>\n"
                          }]
                        },
                        "removejunctioninneighbor": {
                          "ownKey": "removejunctioninneighbor",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/removejunctioninneighbor",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/removejunctioninneighbor"
                            },
                            "description": "",
                            "title": "RemoveJunctionInNeighbor",
                            "content": "<p>Represent the action of removing a junction between a neighbor and the current node. <br> This action only remove the junction reference inside the neighbor node, the current one totally ignore that a junction has been removed. <br> This is a part of the junction removal process. <br> See <code> RemoveJunctionInCell <\/code> for the other part of the process.<\/p><init>\n\ntoString\n\nexecute\n<p>If no target node is given DO NOTHING. The junction can not be removed.<\/p>\nexecute\n\ncloneAction\n\ngetNode\n\n"
                          }]
                        },
                        "spin": {
                          "ownKey": "spin",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/spin",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/spin"
                            },
                            "description": "",
                            "title": "Spin",
                            "content": "<p>Spins a <a href=\"#\">node<\/a> around itself at angularSpeedDegrees normalized according to the speed of the reaction.<\/p><init>\n<p>Spins a <a href=\"#\">node<\/a> around itself at angularSpeedDegrees normalized according to the speed of the reaction.<\/p>\ncloneAction\n\nexecute\n<p>Spins the node around itself.<\/p>\ngetContext\n\n"
                          }]
                        },
                        "abstractsteeringaction": {
                          "ownKey": "abstractsteeringaction",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/abstractsteeringaction",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractsteeringaction"
                            },
                            "description": "",
                            "title": "AbstractSteeringAction",
                            "content": "<p>A  SteeringAction  in a vector space. The definition of  nextPosition  is left to\nsubclasses.<\/p>reaction\n<p>The reaction in which this action is executed.<\/p>\npedestrian\n<p>The owner of this action.<\/p>\n<init>\n<p>A  SteeringAction  in a vector space. The definition of  nextPosition  is left to\nsubclasses.<\/p>\ngetNextPosition\n<p>Next relative position.<\/p>\nmaxWalk\n<p>The maximum distance the pedestrian can walk, this is a length.<\/p>\nresizedToMaxWalkIfGreater\n<p>If the magnitude of the vector is greater than  maxWalk , a resized version with\nmagnitude equal to such quantity is returned. Otherwise, the original vector is\nreturned.<\/p>\n"
                          }]
                        },
                        "socialforceasianagent": {
                          "ownKey": "socialforceasianagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/socialforceasianagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/socialforceasianagent"
                            },
                            "description": "",
                            "title": "SocialForceAsianAgent",
                            "content": "<p>VMIN<\/p>\n<p>Minimum speed of a pedestrian.<\/p>\nMY_DIMENSION\n<p>Dimension of a pedestrian.<\/p>\nDESIRED_SPACE\n<p>Desired space of a pedestrian: minimum \"vital\" space that the agent wants to maintain around himself.<\/p>\nTURN_RIGHT_PROBABILITY\n<p>The probability of turn to the right if another pedestrian is too near.<\/p>\n<init>\n<p>Construct an Asian pedestrian. with<\/p>\n"
                          }]
                        },
                        "socialforceeuropeanagent": {
                          "ownKey": "socialforceeuropeanagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/socialforceeuropeanagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/socialforceeuropeanagent"
                            },
                            "description": "",
                            "title": "SocialForceEuropeanAgent",
                            "content": "<p>VMIN<\/p>\n<p>Minimum speed of a pedestrian.<\/p>\nMY_DIMENSION\n<p>Dimension of a pedestrian.<\/p>\nDESIRED_SPACE\n<p>Desired space of a pedestrian: minimum \"vital\" space that the agent wants to maintain around himself.<\/p>\nTURN_RIGHT_PROBABILITY\n<p>The probability of turn to the right if another pedestrian is too near.<\/p>\n<init>\n<p>Builds an European pedestrian.<\/p>\n"
                          }]
                        },
                        "saperemovelsatoagent": {
                          "ownKey": "saperemovelsatoagent",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/saperemovelsatoagent",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperemovelsatoagent"
                            },
                            "description": "",
                            "title": "SAPEREMoveLSAToAgent",
                            "content": "<p>This agent matches a template, removes a single instance of it from the current node and moves the LSA to another node (specified at creation time). Please note that, since the destination could be anywhere in the system, this action has a GLOBAL <code> Context <\/code>, and thus may trigger a large number of updates, slowing down the whole simulation. Handle with care.<\/p><init>\n<p>This is the constructor that should be called from DSL. Dynamically computes the destination node if an id is given.<\/p>\n<init>\n\nexecute\n\ngetContext\n\n"
                          }]
                        },
                        "randomlytogglemoleculewithduration": {
                          "ownKey": "randomlytogglemoleculewithduration",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/actions/randomlytogglemoleculewithduration",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/randomlytogglemoleculewithduration"
                            },
                            "description": "",
                            "title": "RandomlyToggleMoleculeWithDuration",
                            "content": "<p>When the molecule is off, rolls the dices according to odds and if it is time to toggle, sets the concentration\nand choses a random duration in the interval [minDuration, maxDuration].\nThe molecule will be removed after the chosen duration has elapsed.<\/p><init>\n<p>When the molecule is off, rolls the dices according to odds and if it is time to toggle, sets the concentration\nand choses a random duration in the interval [minDuration, maxDuration].\nThe molecule will be removed after the chosen duration has elapsed.<\/p>\ncloneAction\n\nexecute\n<p>Rolls the dice and toggles the molecule.<\/p>\nshouldToggle\n<p>Returns true if it is time to toggle the molecule.<\/p>\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/actions",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.actions",
                        "content": "<p>AbstractGroupSteeringAction<\/p>\n<p>An abstract  GroupSteeringAction .<\/p>\nAbstractNavigationAction\n<p>An abstract  NavigationAction , taking care of properly moving the pedestrian in the\nenvironment while delegating the decision on where to move it to a  NavigationStrategy .<\/p>\nAbstractSteeringAction\n<p>A  SteeringAction  in a vector space. The definition of  nextPosition  is left to\nsubclasses.<\/p>\nArrive\n<p>Move the agent towards a target position.\nIt is similar to Seek but it attempts to arrive at the target position with a zero velocity.<\/p>\nAvoidFlowField\n<p>Move the pedestrian towards positions of the environment with a low concentration of the target molecule.<\/p>\nBaseEuclideanNavigationAction\n<p>An  AbstractNavigationAction  working with euclidean spaces. This action accepts\nan  Euclidean2DEnvironmentWithGraph  whose graph features  ConvexPolygon al nodes\nand  Euclidean2DPassage s as edges.<\/p>\nCohesion\n<p>Move the agent towards the other members of his group.<\/p>\nCombine\n<p>Combination of multiple steering actions.<\/p>\nExplore\n<p>A  NavigationAction  using  Exploring  navigation strategy.<\/p>\nFlee\n<p>Move the agent away from a target position. It's the opposite of Seek.<\/p>\nFlowFieldSteeringAction\n<p>Generic implementation of an action influenced by the concentration of a given molecule in the environment.<\/p>\nFollowFlowField\n<p>Move the pedestrian towards positions of the environment with a high concentration of the target molecule.<\/p>\nFollowRoute\n<p>A  NavigationAction  using  RouteFollowing  navigation strategy.<\/p>\nGoalOrientedExplore\n<p>A  NavigationAction  using  GoalOrientedExploring  navigation strategy.<\/p>\nObstacleAvoidance\n<p>Move the agent avoiding potential obstacles in its path.<\/p>\nPursue\n<p>A  NavigationAction  using  Pursuing  navigation strategy.<\/p>\nReachDestination\n<p>A  NavigationAction  using  DestinationReaching  navigation strategy.\nAccepts an array of coordinates representing the destinations and uses inferIsKnown to partition them into\nknown and unknown ones.<\/p>\nReachKnownDestination\n<p>A  NavigationAction  using  KnownDestinationReaching  navigation strategy.<\/p>\nSeek\n<p>Move the pedestrian towards the target position as fast as possible.<\/p>\nSeek2D\n<p> Seek  behavior in a bidimensional environment. The actions performed are more\nsophisticated and allow the pedestrian to try to avoid other agents on its path.\nThis behavior is restricted to two dimensions because some geometry utils available\nonly in 2D are required to implement it.<\/p>\nSeparation\n<p>Move the agent away from the pedestrians near to him.<\/p>\nSteeringActionWithTargetImpl\n<p>Implementation of a generic  SteeringActionWithTarget  in a vector space.<\/p>\nWander\n<p>Give the impression of a random walk through the environment targeting an ever changing pseudo-randomly point\nof a circumference at a given distance and with a given radius from the current pedestrian position.<\/p>\nAbstractEuclidean2DConfigurableMoveNode\n<p>It's an  AbstractConfigurableMoveNode  for  Euclidean2DPosition  which provides a default  interpolatePositions \nthat is accurate with respect to the target given and the current maximum speed.<\/p>\nFollowAtDistance\n<p>Follows a target at distance.<\/p>\nRandomRotate\n<p>Changes the heading of the node randomly.<\/p>\nExtractClosestVisibleNodeAtDistance\n<p>Extracts the closest  VisibleNode  to the position at the given distance from the given node's position\nin the direction of the node's heading.<\/p>\nHeadTowardTarget\n<p>Reads the target's absolute coordinates from the target molecule\ncontained in  getNode  and sets the node's heading accordingly.<\/p>\nLevyWalk\n<p>Selects a target based on a random direction extracted from rng,\nand a random distance extracted from a <a href=\"#\">ParetoDistribution<\/a> of parameters scale and shape.\nMoves toward the targets at a constant speed and changes targets on collision.<\/p>\nRandomWalker\n<p>Chooses random targets in a direction extracted from randomGenerator\nat a distance extracted from distanceDistribution.\nMoves the node towards the targets at the given constant speed. Changes target on collision.<\/p>\nRandomlyToggleMolecule\n<p>Toggles a molecule randomly.<\/p>\nRandomlyToggleMoleculeWithDuration\n<p>When the molecule is off, rolls the dices according to odds and if it is time to toggle, sets the concentration\nand choses a random duration in the interval [minDuration, maxDuration].\nThe molecule will be removed after the chosen duration has elapsed.<\/p>\nSee\n<p>Checks nodes in the env and writes in outputMolecule a list of  it.unibo.alchemist.model.interfaces.VisibleNode ,\nfiltered by those containing filterByMolecule.\n distance  and  angle  define the field of view.<\/p>\nSpin\n<p>Spins a <a href=\"#\">node<\/a> around itself at angularSpeedDegrees normalized according to the speed of the reaction.<\/p>\nToggleMolecule\n<p>Toggles a molecule.<\/p>\nZigZagMove\n<p>Moves toward a randomly chosen direction for up to distance meters, then chooses another one and so on.<\/p>\nAbstractAction\n<p>An abstract class facility with some generic methods implemented.<\/p>\nFakeMove\n<p>Fake movement class, used only to trigger the neighborhood update.<\/p>\nRemoveNode\n<p>MoveForwardAndTeleport<\/p>\n<p>BrownianMove<\/p>\n<p>Moves the node randomly.<\/p>\nAbstractConfigurableMoveNode\n<p>An abstract class that factorizes code for multiple different movements. With three strategies can be defined: the next target to be reached, the routing strategy to adopt, the speed to move at.<\/p>\nAbstractActionOnSingleMolecule\n<p>This class offers the basic structures to provide operations with numeric concentrations on a single molecule.<\/p>\nAbstractLocalAction\n<p>MoveToTarget<\/p>\n<p>Movement towards a target defined as a concentration.<\/p>\nAbstractMoveNode\n<p>This action moves a node inside a given environment.<\/p>\nSetLocalMoleculeConcentration\n<p>ChangeBiomolConcentrationInNeighbor<\/p>\n<p>AddJunctionInNeighbor<\/p>\n<p>Represent the action of add a junction between a neighbor and the current node. <br> This action only create the junction reference inside the neighbor, the current node totally ignore that a junction has been created. <br> This is a part of the junction creation process. <br> See <code> AddJunctionInCell <\/code> for the other part of the process<\/p>\nAbstractNeighborAction\n<p>Represents an action on a neighbor.<\/p>\nChemotacticPolarization\n<p>RemoveJunctionInCell<\/p>\n<p>Represent the action of removing a junction between the current node and a neighbor. <br> This action only remove the junction reference inside this node, the neighbor totally ignore that a junction has been removed. <br> This is a part of the junction removal process. <br> See <code> RemoveJunctionInNeighbor <\/code> for the other part of the process<\/p>\nChangeBiomolConcentrationInCell\n<p>CellTensionPolarization<\/p>\n<p>AbstractRandomizableAction<\/p>\n<p>CellMove<\/p>\n<p>AddJunctionInCell<\/p>\n<p>Represent the action of add a junction between the current node and a neighbor. <br> This action only create the junction reference inside this node, the neighbor totally ignore that a junction has been created. <br> This is a part of the junction creation process. <br> See <code> AddJunctionInNeighbor <\/code> for the other part of the process<\/p>\nRemoveJunctionInNeighbor\n<p>Represent the action of removing a junction between a neighbor and the current node. <br> This action only remove the junction reference inside the neighbor node, the current one totally ignore that a junction has been removed. <br> This is a part of the junction removal process. <br> See <code> RemoveJunctionInCell <\/code> for the other part of the process.<\/p>\nRandomPolarization\n<p>ChangeBiomolConcentrationInEnv<\/p>\n<p>Action implementing the changing of the concentration of a given biomolecule in environment.<\/p>\nRunProtelisProgram\n<p>SendToNeighbor<\/p>\n<p>ProtelisProgram<\/p>\n<p>Class to retain backwards compatibility with the Alchemist XML loader.<\/p>\nLsaAbstractAction\n<p>SAPEREChemotaxis<\/p>\n<p>This class provides a chemotaxis implementation for SAPERE, namely, an agent able to move a molecule towards a specific node.<\/p>\nLsaCountNeighborsAction\n<p>LsaAllNeighborsAction<\/p>\n<p>The execution involves all neighbours. The molecule can be different from a neighbor to the other, because some special Variable (#D) are specific for each node. This is why N molecules are instanced if there are N neighbours.<\/p>\nLsaStandardAction\n<p>This action add LsaMolecule in a single node.<\/p>\nLsaDeleteNodeAction\n<p>SAPEREAgent<\/p>\n<p>SAPEREWalker<\/p>\n<p>LsaChangeArgument<\/p>\n<p>LsaAscendingAgent<\/p>\n<p>SAPEREMoveLSAToAgent<\/p>\n<p>This agent matches a template, removes a single instance of it from the current node and moves the LSA to another node (specified at creation time). Please note that, since the destination could be anywhere in the system, this action has a GLOBAL <code> Context <\/code>, and thus may trigger a large number of updates, slowing down the whole simulation. Handle with care.<\/p>\nSocialForceAgent\n<p>SocialForceOldEuropeanAgent<\/p>\n<p>SAPEREMoveNodeAgent<\/p>\n<p>SocialForceEuropeanAgent<\/p>\n<p>SAPERENeighborAgent<\/p>\n<p>A SAPERE Agent that modifies something on neighboring nodes.<\/p>\nCrowdSteeringService\n<p>SocialForceAsianAgent<\/p>\n<p>SAPEREWalkerRiseGradient<\/p>\n<p>SAPERELocalAgent<\/p>\n<p>A SAPERE Agent that does not do actions on neighbors.<\/p>\nLsaRandomNeighborAction\n<p>CrowdSensor<\/p>\n<p>The count N of neighbors containing \"person\" is stored within a tuple of the form \"crowd, N\".<\/p>\nLsaAscendingGradientDist\n<p>GPSTraceWalker<\/p>\n<p>A walker that follows a trace. The trace is mandatory.<\/p>\nReproduceGPSTrace\n<p>MoveOnMap<\/p>\n<p>TargetWalker<\/p>\n<p>MoveOnMapWithGPS<\/p>\n<p>basic action that follow a <code> GPSTrace <\/code>.<\/p>\nit.unibo.alchemist.model.implementations.actions.navigationstrategies\n<p>it.unibo.alchemist.model.implementations.actions.steeringstrategies<\/p>\n<p>cartesianProduct<\/p>\n<p>Performs the cartesian product of the given sequences.<\/p>\ndiscardUnsuitablePositions\n<p>Discards the positions the pedestrian can't fit.<\/p>\ntakePercentage\n<p>Takes the first  percentage  * size elements of the list.<\/p>\ntoPositions\n<p>Converts an array of numbers representing positions to an actual list of positions. E.g. the array <a href=\"#\">2,3,4,5<\/a> in\na bidimensional environment would be transformed into a list containing positions (2,3) and (4,5).<\/p>\n"
                      }]
                    },
                    "linkingrules": {
                      "ownKey": "linkingrules",
                      "childrenPages": {
                        "conditionalclosestn": {
                          "ownKey": "conditionalclosestn",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/conditionalclosestn",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/conditionalclosestn"
                            },
                            "description": "",
                            "title": "ConditionalClosestN",
                            "content": "<p>A <code> ClosestN <\/code> rule that also checks that a <code> Molecule <\/code> has a specific concentration before allowing the connection.<\/p><init>\n\n<init>\n\nnodeIsEnabled\n\n"
                          }]
                        },
                        "connectwithindistance": {
                          "ownKey": "connectwithindistance",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/connectwithindistance",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connectwithindistance"
                            },
                            "description": "",
                            "title": "ConnectWithinDistance",
                            "content": "<p>LinkingRule which connects nodes whose euclidean distance is shorter than a given radius.<\/p><init>\n\ngetRange\n\ncomputeNeighborhood\n<p>Subclasses may change the way a neighborhood is computed.<\/p>\n"
                          }]
                        },
                        "nolinks": {
                          "ownKey": "nolinks",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/nolinks",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/nolinks"
                            },
                            "description": "",
                            "title": "NoLinks",
                            "content": "<p>This rule guarantees that no links are created at all.<\/p><init>\n<p>This rule guarantees that no links are created at all.<\/p>\ncomputeNeighborhood\n\n"
                          }]
                        },
                        "fullyconnected": {
                          "ownKey": "fullyconnected",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/fullyconnected",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/fullyconnected"
                            },
                            "description": "",
                            "title": "FullyConnected",
                            "content": "<p>This rule connects each and every node to each and every other.<\/p><init>\n<p>This rule connects each and every node to each and every other.<\/p>\nisLocallyConsistent\n\ncomputeNeighborhood\n\n"
                          }]
                        },
                        "selectiveadaptiverange": {
                          "ownKey": "selectiveadaptiverange",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/selectiveadaptiverange",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/selectiveadaptiverange"
                            },
                            "description": "",
                            "title": "SelectiveAdaptiveRange",
                            "content": "<p>DEFAULT_MOLECULETYPE<\/p>\n<p>The default filter molecule.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\nconditionForRemoval\n<p>Acts as a filter. It is called to test if the nodes in the computed neighborhood (namely, those nodes within the communication range of the current node) should be removed or not, and must return true if the node should not be inserted in the neighborhood. This implementation checks that the actual distance between the nodes is shorter than the communication range of the neighbor.<\/p>\n"
                          }]
                        },
                        "abstractlocallyconsistentlinkingrule": {
                          "ownKey": "abstractlocallyconsistentlinkingrule",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/abstractlocallyconsistentlinkingrule",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/abstractlocallyconsistentlinkingrule"
                            },
                            "description": "",
                            "title": "AbstractLocallyConsistentLinkingRule",
                            "content": "<p><init><\/p>\n<p>isLocallyConsistent<\/p>\n"
                          }]
                        },
                        "obstaclesbreakconnection": {
                          "ownKey": "obstaclesbreakconnection",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/obstaclesbreakconnection",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/obstaclesbreakconnection"
                            },
                            "description": "",
                            "title": "ObstaclesBreakConnection",
                            "content": "<p>Similar to <code> ConnectWithinDistance <\/code>, but if the environment has obstacles, the links are removed.<\/p><init>\n\ncomputeNeighborhood\n\n"
                          }]
                        },
                        "connecttoaccesspoint": {
                          "ownKey": "connecttoaccesspoint",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/connecttoaccesspoint",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connecttoaccesspoint"
                            },
                            "description": "",
                            "title": "ConnectToAccessPoint",
                            "content": "<p>accessPointId<\/p>\n<p>the id of the access point.<\/p>\n<init>\n\ncomputeNeighborhood\n\n"
                          }]
                        },
                        "connectionbeam": {
                          "ownKey": "connectionbeam",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/connectionbeam",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connectionbeam"
                            },
                            "description": "",
                            "title": "ConnectionBeam",
                            "content": "<p>Connects two nodes if, throwing a beam from one to the other, there exists at least one path entirely inside the beam that connects the two nodes. This rule is ideal for environments with obstacles, where the user wants some tolerance in connection breaking.<\/p><init>\n\ncomputeNeighborhood\n\n"
                          }]
                        },
                        "closestn": {
                          "ownKey": "closestn",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/closestn",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/closestn"
                            },
                            "description": "",
                            "title": "ClosestN",
                            "content": "<p>Non local-consistent rule that connect the closest N nodes together. Two nodes get connected if either one belongs to the set of the ten devices closest to the other.<\/p><init>\n\n<init>\n\n<init>\n\nnodesInRange\n\ngetRange\n<p>Gets the communication range of a node.<\/p>\ngetN\n\ncomputeNeighborhood\n\nsetRange\n<p>Sets a communication range for a node. Used for optimization purposes.<\/p>\nisLocallyConsistent\n\nnodeIsEnabled\n<p>This method always return true. Subclasses can override it.<\/p>\n"
                          }]
                        },
                        "connectviaaccesspoint": {
                          "ownKey": "connectviaaccesspoint",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/connectviaaccesspoint",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connectviaaccesspoint"
                            },
                            "description": "",
                            "title": "ConnectViaAccessPoint",
                            "content": "<p>accessPointId<\/p>\n<p>the id of the access point.<\/p>\n<init>\n\ncomputeNeighborhood\n\n"
                          }]
                        },
                        "linknodeswithinroutingrange": {
                          "ownKey": "linknodeswithinroutingrange",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/linknodeswithinroutingrange",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/linknodeswithinroutingrange"
                            },
                            "description": "",
                            "title": "LinkNodesWithinRoutingRange",
                            "content": "<p><init><\/p>\n<p>computeNeighborhood<\/p>\n"
                          }]
                        },
                        "adaptiverange": {
                          "ownKey": "adaptiverange",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/linkingrules/adaptiverange",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/adaptiverange"
                            },
                            "description": "",
                            "title": "AdaptiveRange",
                            "content": "<p>This linking rule dynamically searches for the best radius for each device, in such a way that it connects to a certain number of devices.<\/p>DEFAULT_ADJUSTMENT\n<p>Default adjustment.<\/p>\nDEFAULT_MAXRANGE\n<p>Default maximum range.<\/p>\nDEFAULT_MINRANGE\n<p>Default minimum range.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\nconditionForRemoval\n<p>Acts as a filter. It is called to test if the nodes in the computed neighborhood (namely, those nodes within the communication range of the current node) should be removed or not, and must return true if the node should not be inserted in the neighborhood. This implementation checks that the actual distance between the nodes is shorter than the communication range of the neighbor.<\/p>\ncomputeNeighborhood\n\n"
                          }]
                        }
                      },
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/implementations/linkingrules",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.model.implementations.linkingrules",
                        "content": "<p>ConnectToAccessPoint<\/p>\n<p>ConnectViaAccessPoint<\/p>\n<p>FullyConnected<\/p>\n<p>This rule connects each and every node to each and every other.<\/p>\nConnectionBeam\n<p>Connects two nodes if, throwing a beam from one to the other, there exists at least one path entirely inside the beam that connects the two nodes. This rule is ideal for environments with obstacles, where the user wants some tolerance in connection breaking.<\/p>\nAdaptiveRange\n<p>This linking rule dynamically searches for the best radius for each device, in such a way that it connects to a certain number of devices.<\/p>\nConnectWithinDistance\n<p>LinkingRule which connects nodes whose euclidean distance is shorter than a given radius.<\/p>\nConditionalClosestN\n<p>A <code> ClosestN <\/code> rule that also checks that a <code> Molecule <\/code> has a specific concentration before allowing the connection.<\/p>\nObstaclesBreakConnection\n<p>Similar to <code> ConnectWithinDistance <\/code>, but if the environment has obstacles, the links are removed.<\/p>\nAbstractLocallyConsistentLinkingRule\n<p>NoLinks<\/p>\n<p>This rule guarantees that no links are created at all.<\/p>\nClosestN\n<p>Non local-consistent rule that connect the closest N nodes together. Two nodes get connected if either one belongs to the set of the ten devices closest to the other.<\/p>\nSelectiveAdaptiveRange\n<p>LinkNodesWithinRoutingRange<\/p>\n"
                      }]
                    }
                  }
                },
                "sapereincarnation": {
                  "ownKey": "sapereincarnation",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/model/sapereincarnation",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/sapereincarnation"
                    },
                    "description": "",
                    "title": "SAPEREIncarnation",
                    "content": "<p><init><\/p>\n<p>createNode<\/p>\n<p>createCondition<\/p>\n<p>createTimeDistribution<\/p>\n<p>toString<\/p>\n<p>createReaction<\/p>\n<p>createConcentration<\/p>\n<p>createAction<\/p>\n<p>createMolecule<\/p>\n<p>getProperty<\/p>\n"
                  }]
                }
              },
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/model",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model"
                },
                "description": "",
                "title": "it.unibo.alchemist.model",
                "content": "<p>BiochemistryIncarnation<\/p>\n<p>ProtelisIncarnation<\/p>\n<p>SAPEREIncarnation<\/p>\n<p>it.unibo.alchemist.model.cognitiveagents.characteristics<\/p>\n<p>it.unibo.alchemist.model.implementations.actions<\/p>\n<p>it.unibo.alchemist.model.implementations.conditions<\/p>\n<p>it.unibo.alchemist.model.implementations.groups<\/p>\n<p>it.unibo.alchemist.model.implementations.nodes<\/p>\n<p>it.unibo.alchemist.model.implementations.reactions<\/p>\n<p>it.unibo.alchemist.model.interfaces<\/p>\n<p>it.unibo.alchemist.model.math<\/p>\n<p>it.unibo.alchemist.model.implementations.environments<\/p>\n<p>it.unibo.alchemist.model.implementations.geometry<\/p>\n<p>it.unibo.alchemist.model.implementations.movestrategies<\/p>\n<p>it.unibo.alchemist.model.implementations.layers<\/p>\n<p>it.unibo.alchemist.model.implementations.linkingrules<\/p>\n<p>it.unibo.alchemist.model.implementations.neighborhoods<\/p>\n<p>it.unibo.alchemist.model.implementations.terminators<\/p>\n<p>it.unibo.alchemist.model.smartcam<\/p>\n<p>it.unibo.alchemist.model.implementations.obstacles<\/p>\n<p>it.unibo.alchemist.model.implementations.positions<\/p>\n<p>it.unibo.alchemist.model.implementations.times<\/p>\n<p>it.unibo.alchemist.model.implementations.routes<\/p>\n<p>it.unibo.alchemist.model.implementations.molecules<\/p>\n<p>it.unibo.alchemist.model.implementations.timedistributions<\/p>\n<p>it.unibo.alchemist.model.implementations.concentrations<\/p>\n<p>randomAngle<\/p>\n<p>Generates a random value in 0..2π.<\/p>\nplus\n<p>Plus operator for  Time  and Double.<\/p>\nminus\n<p>Minus operator for  Time  and Double.<\/p>\n"
              }]
            },
            "protelis": {
              "ownKey": "protelis",
              "childrenPages": {
                "alchemistnetworkmanager": {
                  "ownKey": "alchemistnetworkmanager",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/protelis/alchemistnetworkmanager",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/protelis/alchemistnetworkmanager"
                    },
                    "description": "",
                    "title": "AlchemistNetworkManager",
                    "content": "<p>Emulates a NetworkManager. This particular network manager does not send messages instantly. Instead, it records the last message to send, and only when <code> #simulateMessageArrival(double) <\/code> is called the transfer is actually done.<\/p><init>\n\n<init>\n\nshareState\n\nsimulateMessageArrival\n<p>Simulates the arrival of the message to other nodes.<\/p>\ngetRetentionTime\n\ngetNeighborState\n\n"
                  }]
                },
                "alchemistexecutioncontext": {
                  "ownKey": "alchemistexecutioncontext",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/protelis/alchemistexecutioncontext",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/protelis/alchemistexecutioncontext"
                    },
                    "description": "",
                    "title": "AlchemistExecutionContext",
                    "content": "<p>USE_ROUTES_AS_DISTANCES<\/p>\n<p>Put this <code> Molecule <\/code> inside nodes that should compute distances using routes. It only makes sense in case the environment is a <code> MapEnvironment <\/code><\/p>\nAPPROXIMATE_NBR_RANGE\n<p>Put this <code> Molecule <\/code> inside nodes that should compute distances using routes approximating them. It only makes sense in case the environment is a <code> MapEnvironment <\/code><\/p>\n<init>\n\nhashCode\n\ngetEnvironmentAccess\n\nnextRandomDouble\n\nequals\n\ngetDeviceUID\n\ngetCurrentTime\n\ninstance\n\nroutingDistance\n<p>Computes the distance along a map. Requires a <code> MapEnvironment <\/code>.<\/p>\nroutingDistance\n<p>Computes the distance along a map. Requires a <code> MapEnvironment <\/code>.<\/p>\nroutingDistance\n<p>Computes the distance along a map. Requires a <code> MapEnvironment <\/code>.<\/p>\nroutingDistance\n<p>Computes the distance along a map. Requires a <code> MapEnvironment <\/code>.<\/p>\nnbrDelay\n\nnbrRange\n\ngetDevicePosition\n\ngetCoordinates\n\nnbrLag\n\nnbrVector\n\ndistanceTo\n<p>Computes the distance between two nodes, through <code> Environment#getDistanceBetweenNodes(Node, Node) <\/code>.<\/p>\ndistanceTo\n<p>Computes the distance between two nodes, through <code> Environment#getDistanceBetweenNodes(Node, Node) <\/code>.<\/p>\n"
                  }]
                }
              },
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc",
                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                  "fileName": "it/unibo/alchemist/protelis",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/protelis"
                },
                "description": "",
                "title": "it.unibo.alchemist.protelis",
                "content": "<p>AlchemistExecutionContext<\/p>\n<p>AlchemistNetworkManager<\/p>\n<p>Emulates a NetworkManager. This particular network manager does not send messages instantly. Instead, it records the last message to send, and only when <code> #simulateMessageArrival(double) <\/code> is called the transfer is actually done.<\/p>\n"
              }]
            }
          },
          "ownPages": [{
            "reference": {
              "path": "kotlindoc",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "it/unibo/alchemist",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist"
            },
            "description": "",
            "title": "it.unibo.alchemist",
            "content": "<p>ClassPathScanner<\/p>\n<p>An utility class providing support for loading arbitrary subclasses available in the classpath.<\/p>\nAlchemist\n<p>Starts Alchemist.<\/p>\nAlchemistExecutionOptions\n<p>Alchemist options provided by the command line.<\/p>\nSupportedIncarnations\n<p>This enum interfaces the generic components of the graphical interface with the specific incarnation details.<\/p>\nit.unibo.alchemist.core.implementations\n<p>it.unibo.alchemist.launch<\/p>\n<p>it.unibo.alchemist.model<\/p>\n<p>it.unibo.alchemist.boundary.util<\/p>\n<p>it.unibo.alchemist.cli<\/p>\n<p>it.unibo.alchemist.grid.cluster<\/p>\n<p>it.unibo.alchemist.grid.util<\/p>\n<p>it.unibo.alchemist.grid.exceptions<\/p>\n<p>it.unibo.alchemist.grid.simulation<\/p>\n<p>it.unibo.alchemist.grid.config<\/p>\n<p>it.unibo.alchemist.exceptions<\/p>\n<p>it.unibo.alchemist.biochemistrydsl<\/p>\n<p>it.unibo.alchemist.protelis<\/p>\n<p>it.unibo.alchemist.boundary.interfaces<\/p>\n<p>it.unibo.alchemist.core.interfaces<\/p>\n<p>it.unibo.alchemist.loader<\/p>\n<p>it.unibo.alchemist.boundary.gpsload.api<\/p>\n<p>it.unibo.alchemist.boundary.gpsload.impl<\/p>\n<p>it.unibo.alchemist.utils<\/p>\n<p>it.unibo.alchemist.expressions.parser<\/p>\n<p>it.unibo.alchemist.expressions.implementations<\/p>\n<p>it.unibo.alchemist.expressions.interfaces<\/p>\n<p>it.unibo.alchemist.boundary.l10n<\/p>\n<p>it.unibo.alchemist.boundary.gui<\/p>\n<p>it.unibo.alchemist.boundary.wormhole.interfaces<\/p>\n<p>it.unibo.alchemist.boundary.wormhole.implementation<\/p>\n<p>it.unibo.alchemist.boundary.monitors<\/p>\n<p>unfold<\/p>\n<p>The opposite of <a href=\"#\">fold<\/a>.<\/p>\ntoPosition\n<p>Tries to convert a concentration  T  into a valid position of type  P  descriptor.\nTypes are bound to the  environment  types.<\/p>\nnextDouble\n<p>Generate a random double between the given bounds.<\/p>\nrangeFromUnordered\n<p>Creates a ClosedRange from a couple of unordered values.<\/p>\nfuzzyIn\n<p>Checks if a double value is fuzzy contained in a range.<\/p>\nshuffled\n<p><a href=\"https://bit.ly/33Z3xFu\">Fisher\u2013Yates shuffle algorithm<\/a>\nusing Apache random number generator.\nMore information <a href=\"https://en.wikipedia.org/wiki/Fisher-Yates_shuffle\">on Wikipedia<\/a>.<\/p>\ncoincidesWith\n<p>Checks whether two ranges coincide. It's a different way of checking if they're equals,\nwhich doesn't depend on their actual implementation. Note that the way you obtain a range\nmay influence the actual class used, and you can have two coincident ranges which don't\nresult equals because of different classes.<\/p>\ncontains\n<p>Checks whether the range contains the  other  one.\nThis method is faster than checking if the range contains both of the endpoints of  other .<\/p>\nintersects\n<p>Checks whether the range intersects the  other  one.<\/p>\nintersect\n<p>Finds the intersection between two ranges, the resulting range may feature a single value\n(if the ranges only share an endpoint) or can be null, if they don't intersect at all.<\/p>\nintersectsBoundsExcluded\n<p>Checks whether two ranges intersect, excluding their bounds (i.e., excluding both\nClosedRange.start and ClosedRange.endInclusive). This means false is returned in\ncase the ranges share a single endpoint.<\/p>\nminus\n<p>Performs a subtraction between ranges. The operation can produce an empty list (e.g. if\nthe current range is contained in the  other  one), a list featuring a single element,\nor a list featuring two elements (e.g. if the current range contains the  other  one).<\/p>\nsubtractAll\n<p>Subtracts all the given ranges from the current one. See  ClosedRange.minus .<\/p>\nfindExtremeCoordsOnX\n<p>Given a non empty list of points represented as vectors, this method finds the extreme coordinates\n(i.e. min and max coordinates) on the X-axis, these are used to create the returned ClosedRange.<\/p>\nfindExtremeCoordsOnY\n<p>Given a non empty list of points represented as vectors, this method finds the extreme coordinates\n(i.e. min and max coordinates) on the Y-axis, these are used to create the returned ClosedRange.<\/p>\n"
          }]
        }}
      }}
    }},
    "ownPages": [{
      "reference": {
        "path": "kotlindoc",
        "baseUrl": "https://alchemistsimulator.github.io/latest",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://alchemistsimulator.github.io/latest/kotlindoc"
      },
      "description": "",
      "title": "README",
      "content": "<h1 id=\"alchemist\"><a href=\"#alchemist\" id=\"alchemist\" class=\"anchor\"><\/a>Alchemist<\/h1>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/logo.svg\" alt=\"Alchemist logo\" /><\/p>\n<p>Alchemist is a simulator for pervasive, aggregate, and nature-inspired computing.\nAt the moment, the simulator features:<\/p>\n<ul>\n<li>Executing <a href=\"http://protelis.org\">Protelis<\/a> programs<\/li>\n<li>Executing <a href=\"https://scafi.github.io/\">Scafi<\/a> programs<\/li>\n<li>Executing biological simulations with chemical-like reactions<\/li>\n<li>Executing <a href=\"http://dx.doi.org/10.1016/j.pmcj.2014.12.002\">SAPERE<\/a> -like programs, written in a tuple based language resembling <a href=\"https://doi.org/10.1109%2Fmc.1986.1663305\">Linda<\/a><\/li>\n<li>Simulating bidimensional environments<\/li>\n<li>Simulating real-world maps, with support for navigation along roads, and for importing gpx format gps traces<\/li>\n<li>Simulating indoor environments by importing black and white images<\/li>\n<li>Creating batches and run with different value of parameters<\/li>\n<li>Run in grid computing environments<\/li>\n<\/ul>\n<h2 id=\"users\"><a href=\"#users\" id=\"users\" class=\"anchor\"><\/a>Users<\/h2>\n<p>Alchemist users should rely on the documentation available on <a href=\"http://alchemistsimulator.github.io/\">the official Alchemist website<\/a>.\nAlchemist is available on Maven Central. You can import all the components by importing the <code>it.unibo.alchemist:alchemist<\/code> artifact.<\/p>\n<h3 id=\"gradle\"><a href=\"#gradle\" id=\"gradle\" class=\"anchor\"><\/a>Gradle<\/h3>\n<p>You need to add the alchemist core dependency, plus the modules you need for your simulation.\nAdd this dependency to your build, substituting <code>ALCHEMIST_VERSION<\/code> with the version you want to use\n(change the scope appropriately if you need Alchemist only for runtime or testing).<\/p>\n<pre><code class=\"language-kotlin\">dependencies {\n    // Alchemist core dependency\n    implementation(&quot;it.unibo.alchemist:alchemist:ALCHEMIST_VERSION&quot;)\n    // Example incarnation\n    implementation(&quot;it.unibo.alchemist:alchemist-incarnation-protelis:ALCHEMIST_VERSION&quot;)\n    // Example additional module\n    implementation(&quot;it.unibo.alchemist:alchemist-cognitive-agents:ALCHEMIST_VERSION&quot;)\n}\n<\/code><\/pre>\n<h3 id=\"maven\"><a href=\"#maven\" id=\"maven\" class=\"anchor\"><\/a>Maven<\/h3>\n<p>Add this dependency to your build, substitute <code>ALCHEMIST_VERSION<\/code> with the version you want to use. If you do not need the whole Alchemist machinery but just a sub-part of it, you can restrict the set of imported artifacts by using as dependencies the modules you are actually in need of.<\/p>\n<pre><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;it.unibo.alchemist&lt;/groupId&gt;\n        &lt;artifactId&gt;alchemist&lt;/artifactId&gt;\n        &lt;version&gt;ALCHEMIST_VERSION&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;it.unibo.alchemist&lt;/groupId&gt;\n        &lt;artifactId&gt;alchemist-incarnation-protelis&lt;/artifactId&gt;\n        &lt;version&gt;ALCHEMIST_VERSION&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;it.unibo.alchemist&lt;/groupId&gt;\n        &lt;artifactId&gt;alchemist-cognitive-agents&lt;/artifactId&gt;\n        &lt;version&gt;ALCHEMIST_VERSION&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n<\/code><\/pre>\n<h2 id=\"developers\"><a href=\"#developers\" id=\"developers\" class=\"anchor\"><\/a>Developers<\/h2>\n<h3 id=\"status-badges\"><a href=\"#status-badges\" id=\"status-badges\" class=\"anchor\"><\/a>Status Badges<\/h3>\n<h4 id=\"stable-branch\"><a href=\"#stable-branch\" id=\"stable-branch\" class=\"anchor\"><\/a>Stable branch<\/h4>\n<h5 id=\"info\"><a href=\"#info\" id=\"info\" class=\"anchor\"><\/a>Info<\/h5>\n<p>master: <a href=\"https://travis-ci.org/AlchemistSimulator/Alchemist\"><img src=\"https://travis-ci.org/AlchemistSimulator/Alchemist.svg?branch=master\" alt=\"Build Status\" /><\/a><\/p>\n<p>develop: <a href=\"https://travis-ci.org/AlchemistSimulator/Alchemist\"><img src=\"https://travis-ci.org/AlchemistSimulator/Alchemist.svg?branch=develop\" alt=\"Build Status\" /><\/a><\/p>\n<p><a href=\"https://www.javadoc.io/doc/it.unibo.alchemist/alchemist\"><img src=\"https://www.javadoc.io/badge/it.unibo.alchemist/alchemist.svg\" alt=\"Javadocs\" /><\/a>\n<img src=\"https://img.shields.io/github/license/AlchemistSimulator/Alchemist\" alt=\"GitHub\" />\n<a href=\"https://bestpractices.coreinfrastructure.org/projects/TODO\"><img src=\"https://bestpractices.coreinfrastructure.org/projects/TODO/badge\" alt=\"CII Best Practices\" /><\/a>\n<img src=\"https://img.shields.io/github/languages/count/AlchemistSimulator/Alchemist\" alt=\"GitHub language count\" />\n<img src=\"https://img.shields.io/github/languages/top/AlchemistSimulator/Alchemist\" alt=\"GitHub top language\" />\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=ncloc\" alt=\"Lines of Code\" /><\/a>\n<img src=\"https://img.shields.io/github/languages/code-size/AlchemistSimulator/Alchemist\" alt=\"GitHub code size in bytes\" />\n<img src=\"https://img.shields.io/github/repo-size/AlchemistSimulator/Alchemist\" alt=\"GitHub repo size\" />\n<img src=\"https://img.shields.io/maven-central/v/it.unibo.alchemist/alchemist\" alt=\"Maven Central\" />\n<img src=\"https://img.shields.io/github/contributors/AlchemistSimulator/Alchemist\" alt=\"GitHub contributors\" /><\/p>\n<h5 id=\"quality\"><a href=\"#quality\" id=\"quality\" class=\"anchor\"><\/a>Quality<\/h5>\n<p><a href=\"https://ktlint.github.io/\"><img src=\"https://img.shields.io/badge/code%20style-%E2%9D%A4-FF4081.svg\" alt=\"ktlint\" /><\/a>\n<a href=\"https://www.codacy.com/app/Alchemist/Alchemist?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=AlchemistSimulator/Alchemist&amp;utm_campaign=Badge_Grade\"><img src=\"https://api.codacy.com/project/badge/Grade/c7304e8bd4044aa5955c6d5c844f39a4\" alt=\"Codacy Badge\" /><\/a>\n<img src=\"https://img.shields.io/codecov/c/github/AlchemistSimulator/Alchemist\" alt=\"Codecov\" />\n<img src=\"https://img.shields.io/codeclimate/maintainability-percentage/AlchemistSimulator/Alchemist\" alt=\"Code Climate maintainability\" />\n<img src=\"https://img.shields.io/codeclimate/issues/AlchemistSimulator/Alchemist\" alt=\"Code Climate maintainability\" />\n<img src=\"https://img.shields.io/codeclimate/tech-debt/AlchemistSimulator/Alchemist\" alt=\"Code Climate maintainability\" />\n<a href=\"https://www.codefactor.io/repository/github/alchemistsimulator/alchemist\"><img src=\"https://www.codefactor.io/repository/github/alchemistsimulator/alchemist/badge\" alt=\"CodeFactor\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=alert_status\" alt=\"Quality Gate Status\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=bugs\" alt=\"Bugs\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=code_smells\" alt=\"Code Smells\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=duplicated_lines_density\" alt=\"Duplicated Lines (%)\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=sqale_rating\" alt=\"Maintainability Rating\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=reliability_rating\" alt=\"Reliability Rating\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=security_rating\" alt=\"Security Rating\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=sqale_index\" alt=\"Technical Debt\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=vulnerabilities\" alt=\"Vulnerabilities\" /><\/a><\/p>\n<h5 id=\"progress\"><a href=\"#progress\" id=\"progress\" class=\"anchor\"><\/a>Progress<\/h5>\n<p><img src=\"https://img.shields.io/github/issues/AlchemistSimulator/Alchemist\" alt=\"GitHub issues\" />\n<img src=\"https://img.shields.io/github/issues-closed/AlchemistSimulator/Alchemist\" alt=\"GitHub closed issues\" />\n<img src=\"https://img.shields.io/github/issues-pr/AlchemistSimulator/Alchemist\" alt=\"GitHub pull requests\" />\n<img src=\"https://img.shields.io/github/issues-pr-closed/AlchemistSimulator/Alchemist\" alt=\"GitHub closed pull requests\" />\n<img src=\"https://img.shields.io/github/commit-activity/y/AlchemistSimulator/Alchemist\" alt=\"GitHub commit activity\" />\n<img src=\"https://img.shields.io/github/commits-since/AlchemistSimulator/Alchemist/latest/develop\" alt=\"GitHub commits since latest release (by date)\" />\n<img src=\"https://img.shields.io/github/last-commit/AlchemistSimulator/Alchemist/develop\" alt=\"GitHub last commit\" /><\/p>\n<h3 id=\"javadocs\"><a href=\"#javadocs\" id=\"javadocs\" class=\"anchor\"><\/a>Javadocs<\/h3>\n<p>Javadocs are available for both <a href=\"http://alchemist-doc.surge.sh/\">the latest stable version<\/a> and <a href=\"http://alchemist-unstable-doc.surge.sh/\">the latest development snapshot<\/a>.\nIf you need to access the documentation for any older stable version, <a href=\"https://www.javadoc.io/doc/it.unibo.alchemist/alchemist/\">javadoc.io<\/a> is probably the right place to search in.<\/p>\n<h3 id=\"importing-the-project\"><a href=\"#importing-the-project\" id=\"importing-the-project\" class=\"anchor\"><\/a>Importing the project<\/h3>\n<p>The project is easiest to import in IntelliJ Idea.<\/p>\n<h4 id=\"recommended-configuration\"><a href=\"#recommended-configuration\" id=\"recommended-configuration\" class=\"anchor\"><\/a>Recommended configuration<\/h4>\n<p>Install the following plugins (use <kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>A<\/kbd>, then search for &quot;Plugins&quot;):<\/p>\n<ul>\n<li>From the main list:\n<ul>\n<li>Scala<\/li>\n<li>Kotlin<\/li>\n<\/ul>\n<\/li>\n<li>From &quot;Browse Repositories&quot;:\n<ul>\n<li><a href=\"https://plugins.jetbrains.com/plugin/7358-antlr-v4-grammar-plugin\">ANTLR v4 grammar plugin<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/1065-checkstyle-idea\">Checkstyle-IDEA<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/3847-findbugs-idea\">FindBugs-IDEA<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/1137-pmdplugin\">PMDPlugin<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4 id=\"importing-the-project-1\"><a href=\"#importing-the-project-1\" id=\"importing-the-project-1\" class=\"anchor\"><\/a>Importing the project<\/h4>\n<ol start=\"0\">\n<li>Windows user should perform an additional first step: before cloning the repository, make sure that the autocrlf feature of git is disabled, by issuing <code>git config --global core.autocrlf false<\/code>. If the step is not performed, git will automatically insert CRLF line endings, violating the project's Checkstyle rules (which are rather strict, and prevent the build from succeeding).<\/li>\n<li>Clone this repository in a folder of your preference using <code>git clone<\/code> appropriately<\/li>\n<li>Open IntellJ. If a project opens automatically, select &quot;Close project&quot;. You should be on the welcome screen of IntelliJ idea.<\/li>\n<li>Select &quot;Import Project&quot;<\/li>\n<li>Navigate your file system and find the folder where you cloned the repository. <strong>Do not select it<\/strong>. Open the folder, and you should find a lowercase <code>alchemist<\/code> folder. That is the correct project folder, not the outermost <code>Alchemist<\/code> folder (created by <code>git<\/code> in case you cloned without specifying a different folder name). Once the correct folder has been selected, click <kbd>Ok<\/kbd><\/li>\n<li>Select &quot;Import Project from external model&quot;<\/li>\n<li>Make sure &quot;Gradle&quot; is selected as external model tool<\/li>\n<li>Click <kbd>Finish<\/kbd><\/li>\n<li>If prompted to override any .idea file, try to answer <kbd>No<\/kbd>. It's possible that IntelliJ refuses to proceed, in which case click <kbd>Finish<\/kbd> again, then select <kbd>Yes<\/kbd>.<\/li>\n<li>A dialog stating that &quot;IntelliJ IDEA found a Gradle build script&quot; may appear, in such case answer <kbd>Import Gradle Project<\/kbd>.<\/li>\n<li>Wait for the IDE to import the project from Gradle. The process may take several minutes, due to the amount of dependencies. Should the synchronization fail, make sure that the IDE's Gradle is configured correctly:<\/li>\n<li>In 'Settings -&gt; Build, Execution, Deployment -&gt; Build Tools &gt; Gradle', for the option 'Use Gradle from' select 'gradle-wrapper.properties file'. Enabling auto-import is also recommended.<\/li>\n<li><strong>Important:<\/strong> Alchemist requires java 11+, so make sure the 'Gradle JVM' option points to such a version (if you don't have a JDK 11+ installed make sure to get one).<\/li>\n<li>Once imported, the project may still be unable to compile, due to missing sources in incarnation-biochemistry. This problem can be solved by opening the IntelliJ terminal (e.g. with <kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>A<\/kbd>, typing &quot;terminal&quot; and pressing <kbd>Enter<\/kbd>), and issue:<\/li>\n<\/ol>\n<ul>\n<li>On Unix: <code>./gradlew alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<li>On Windows: <code>gradlew.bat alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<\/ul>\n<h3 id=\"developing-the-project\"><a href=\"#developing-the-project\" id=\"developing-the-project\" class=\"anchor\"><\/a>Developing the project<\/h3>\n<p>Contributions to this project are welcome. Just some rules:<\/p>\n<ul>\n<li>We use <a href=\"https://github.com/nvie/gitflow\">git flow<\/a>, so if you write new features, please do so in a separate <code>feature-<\/code> branch.<\/li>\n<li>We recommend forking the project, developing your stuff, then contributing back via pull request directly from GitHub<\/li>\n<li>Commit often. Do not throw at me pull requests with a single giant commit adding or changing the whole world. Split it in multiple commits and request a merge to the mainline often.<\/li>\n<li>Stay in sync with the <code>develop<\/code> branch: pull often from <code>develop<\/code> (if the build passes), so that you don't diverge too much from the main development line.<\/li>\n<li>Do not introduce low quality code. All the new code must comply with the checker rules (that are quite strict) and must not introduce any other warning. Resolutions of existing warnings (if any is present) are very welcome instead.<\/li>\n<\/ul>\n<h4 id=\"building-the-project\"><a href=\"#building-the-project\" id=\"building-the-project\" class=\"anchor\"><\/a>Building the project<\/h4>\n<p>While developing, you can rely on IntelliJ to build the project, it will generally do a very good job.\nIf you want to generate the artifacts, you can rely on Gradle. Just point a terminal on the project's root and issue<\/p>\n<pre><code class=\"language-bash\">./gradlew build\n<\/code><\/pre>\n<p>This will trigger the creation of the artifacts the executions of the tests, the generation of the documentation and of the project reports.<\/p>\n<p><em><strong>NOTE THAT:<\/strong><\/em> Alchemist requires java 11+ to work, make sure to have a JDK version 11+ installed.<\/p>\n<h4 id=\"build-reports\"><a href=\"#build-reports\" id=\"build-reports\" class=\"anchor\"><\/a>Build reports<\/h4>\n<p>Every Alchemist build triggers the creation of a set of reports, that provide hints regarding the current status of quality of the code base. Such reports are available for both <a href=\"http://alchemist-reports.surge.sh/build/reports/buildDashboard/\">the latest stable<\/a> and <a href=\"http://alchemist-unstable-reports.surge.sh/build/reports/buildDashboard/\">the latest development<\/a> versions.<\/p>\n"
    }]
  }}
}