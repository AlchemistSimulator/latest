{
  "ownKey": "kotlindoc",
  "childrenPages": {"kotlindoc": {
    "ownKey": "kotlindoc",
    "childrenPages": {
      "org": {
        "ownKey": "org",
        "childrenPages": {"apache": {
          "ownKey": "apache",
          "childrenPages": {"commons": {
            "ownKey": "commons",
            "childrenPages": {"math3": {
              "ownKey": "math3",
              "childrenPages": {"distribution": {
                "ownKey": "distribution",
                "childrenPages": {"diracdeltadistribution": {
                  "ownKey": "diracdeltadistribution",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "org/apache/commons/math3/distribution/diracdeltadistribution",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/org/apache/commons/math3/distribution/diracdeltadistribution"
                    },
                    "description": "",
                    "title": "DiracDeltaDistribution",
                    "content": "<p>Models a Real Distribution backed by a Dirac Delta Function.\nThis is similar to a Logistic probability function with a shape whose value tends to zero.<\/p><p>In practice, samples from this function return the provided  value  as a constant.\nThe variance is zero, there is no randomness involved, and most of the useful information of a real distribution\nare actually lost.\nHowever, this utility can transform tools meant to work with a probability function in such a way that\nthey work with a constant value (e.g., random walks with a constant step).<\/p>value\n<p><init><\/p>\n<p>This constructor is meant for reflection compatibility only.\n randomGenerator  is unused.<\/p>\n<init>\n<p>Models a Real Distribution backed by a Dirac Delta Function.\nThis is similar to a Logistic probability function with a shape whose value tends to zero.<\/p><p>In practice, samples from this function return the provided  value  as a constant.\nThe variance is zero, there is no randomness involved, and most of the useful information of a real distribution\nare actually lost.\nHowever, this utility can transform tools meant to work with a probability function in such a way that\nthey work with a constant value (e.g., random walks with a constant step).<\/p>\nprobability\n\ndensity\n\ncumulativeProbability\n\ncumulativeProbability\n\ninverseCumulativeProbability\n\ngetNumericalMean\n\ngetNumericalVariance\n\ngetSupportLowerBound\n\ngetSupportUpperBound\n\nisSupportLowerBoundInclusive\n\nisSupportUpperBoundInclusive\n\nisSupportConnected\n\nreseedRandomGenerator\n\nsample\n\nsample\n\n"
                  }]
                }},
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "org/apache/commons/math3/distribution",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/org/apache/commons/math3/distribution"
                  },
                  "description": "",
                  "title": "org.apache.commons.math3.distribution",
                  "content": "<p>DiracDeltaDistribution<\/p>\n<p>Models a Real Distribution backed by a Dirac Delta Function.\nThis is similar to a Logistic probability function with a shape whose value tends to zero.<\/p><p>In practice, samples from this function return the provided  value  as a constant.\nThe variance is zero, there is no randomness involved, and most of the useful information of a real distribution\nare actually lost.\nHowever, this utility can transform tools meant to work with a probability function in such a way that\nthey work with a constant value (e.g., random walks with a constant step).<\/p>\n"
                }]
              }}
            }}
          }}
        }}
      },
      "it": {
        "ownKey": "it",
        "childrenPages": {"unibo": {
          "ownKey": "unibo",
          "childrenPages": {"alchemist": {
            "ownKey": "alchemist",
            "childrenPages": {
              "boundary": {
                "ownKey": "boundary",
                "childrenPages": {
                  "interfaces": {
                    "ownKey": "interfaces",
                    "childrenPages": {
                      "fxoutputmonitor": {
                        "ownKey": "fxoutputmonitor",
                        "childrenPages": {"viewstatus": {
                          "ownKey": "viewstatus",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/interfaces/fxoutputmonitor/viewstatus",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/fxoutputmonitor/viewstatus"
                            },
                            "description": "",
                            "title": "ViewStatus",
                            "content": "<p>The enum models the status of the view.<\/p>PANNING\n<p>SELECTING<\/p>\n<p>MOVING<\/p>\n<p>CLONING<\/p>\n<p>DELETING<\/p>\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interfaces/fxoutputmonitor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/fxoutputmonitor"
                          },
                          "description": "",
                          "title": "FXOutputMonitor",
                          "content": "<p><code>OutputMonitor<\/code> that handles the graphical part of the simulation in JavaFX.<\/p>getViewStatus\n<p>Getter method for the current view status.<\/p>\nasJavaFXNode\n<p>Returns the JavaFX Node that is this monitor.<\/p>\ngetEffects\n<p>Getter method for the <code> Effects <\/code> to draw.<\/p>\nsetEffects\n<p>Setter method for the effects to draw. <\/p><p> All previous set <code> Effects <\/code> are removed.<\/p>\naddEffectGroup\n<p>Add the <code> EffectGroup <\/code> in the collection to the <code> Effects <\/code> to draw.<\/p>\nsetViewStatus\n<p>Setter method for the current view status.<\/p>\naddEffects\n<p>Add all the <code> EffectGroup <\/code>s in the collection to the <code> Effects <\/code> to draw.<\/p>\nrepaint\n<p>Repaints this javafx.scene.canvas.Canvas' javafx.scene.canvas.GraphicsContext by drawing all the <code> Effect <\/code>s of each <code> it.unibo.alchemist.model.interfaces.Node <\/code> of the specified <code> it.unibo.alchemist.model.interfaces.Environment <\/code>.<\/p>\nsetRealTime\n<p>If enabled, the monitor tries to synchronize the simulation time with the real time, slowing down the simulator if needed. If the simulation is slower than the real time, then the display refreshes fast enough to keep the default frame rate.<\/p>\ngetKeyboardListener\n<p>Returns the keyboard listener associated with this monitor.<\/p>\n"
                        }]
                      },
                      "graphical2doutputmonitor": {
                        "ownKey": "graphical2doutputmonitor",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interfaces/graphical2doutputmonitor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/graphical2doutputmonitor"
                          },
                          "description": "",
                          "title": "Graphical2DOutputMonitor",
                          "content": "<p>An output monitor that supports zooming on bidimensional environments.<\/p>zoomTo\n"
                        }]
                      },
                      "outputmonitor": {
                        "ownKey": "outputmonitor",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interfaces/outputmonitor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/outputmonitor"
                          },
                          "description": "",
                          "title": "OutputMonitor",
                          "content": "<p>An interface for the visualization of the simulation.<\/p>finished\n<p>This method will be called by the simulation once the whole simulation has finished, either because it reached its latest point or because the user stopped it. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\ninitialized\n<p>This method will be called by the simulation as soon as the initialization phase is completed. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\nstepDone\n<p>This method will be called by the simulation every time a simulation step is done. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\n"
                        }]
                      },
                      "drawcommand": {
                        "ownKey": "drawcommand",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interfaces/drawcommand",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/drawcommand"
                          },
                          "description": "",
                          "title": "DrawCommand",
                          "content": "<p>Functional interface that models a command for JavaFX thread to draw something on a javafx.scene.canvas.Canvas.<\/p>wrap\n<p>Wrapper method that wraps this <code> DrawCommand <\/code> into another that checks if should execute or not the <code> #accept(GraphicsContext, Wormhole2D) <\/code> method.<\/p>\naccept\n<p>The method consumes a graphic and a wormhole to draw something.<\/p>\n"
                        }]
                      },
                      "graphicaloutputmonitor": {
                        "ownKey": "graphicaloutputmonitor",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interfaces/graphicaloutputmonitor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/graphicaloutputmonitor"
                          },
                          "description": "",
                          "title": "GraphicalOutputMonitor",
                          "content": "<p><code>OutputMonitor<\/code> that handles the graphical part of the simulation.<\/p>setStep\n<p>setEffectStack<\/p>\n<p>isRealTime<\/p>\n<p>getStep<\/p>\n<p>repaint<\/p>\n<p>Repaints the GUI.<\/p>\nsetMarkCloserNode\n<p>If set, the node closer to the mouse will be put in evidence.<\/p>\nsetRealTime\n<p>If enabled, the monitor tries to synchronize the simulation time with the real time, slowing down the simulator if needed. If the simulation is slower than the real time, then the display refreshes fast enough to keep the default frame rate.<\/p>\nsetDrawLinks\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/interfaces",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.boundary.interfaces",
                      "content": "<p>FXOutputMonitor<\/p>\n<p><code>OutputMonitor<\/code> that handles the graphical part of the simulation in JavaFX.<\/p>\nDrawCommand\n<p>Functional interface that models a command for JavaFX thread to draw something on a javafx.scene.canvas.Canvas.<\/p>\nOutputMonitor\n<p>An interface for the visualization of the simulation.<\/p>\nGraphical2DOutputMonitor\n<p>An output monitor that supports zooming on bidimensional environments.<\/p>\nGraphicalOutputMonitor\n<p><code>OutputMonitor<\/code> that handles the graphical part of the simulation.<\/p>\n"
                    }]
                  },
                  "keybindmodel": {
                    "ownKey": "keybindmodel",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/keybindmodel",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/keybindmodel"
                      },
                      "description": "",
                      "title": "KeybindModel",
                      "content": "<p>The ItemViewModel of a Keybind.<\/p>actionProperty\n<p>The property of the action.<\/p>\nkeyProperty\n<p>The property of the key.<\/p>\n<init>\n<p>The ItemViewModel of a Keybind.<\/p>\n"
                    }]
                  },
                  "monitor": {
                    "ownKey": "monitor",
                    "childrenPages": {
                      "playpausemonitor": {
                        "ownKey": "playpausemonitor",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitor/playpausemonitor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitor/playpausemonitor"
                          },
                          "description": "",
                          "title": "PlayPauseMonitor",
                          "content": "<p><code>OutputMonitor<\/code> that monitors the current <code> status <\/code> of the <code>Simulation<\/code>, acting as a toggle to <code> play <\/code> and <code> pause <\/code> the <code>Simulation<\/code>.<\/p><init>\n<p>No arguments constructor. Current <code> Simulation <\/code> is not set.<\/p>\n<init>\n<p>Default constructor.<\/p>\nfinished\n<p>This method will be called by the simulation once the whole simulation has finished, either because it reached its latest point or because the user stopped it. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\nsetSimulation\n<p>Setter method for the simulation.<\/p>\ngetSimulation\n<p>Getter method for the current simulation.<\/p>\ninitialized\n<p>This method will be called by the simulation as soon as the initialization phase is completed. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\nstepDone\n<p>This method will be called by the simulation every time a simulation step is done. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\n"
                        }]
                      },
                      "fxstepmonitor": {
                        "ownKey": "fxstepmonitor",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitor/fxstepmonitor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitor/fxstepmonitor"
                          },
                          "description": "",
                          "title": "FXStepMonitor",
                          "content": "<p><code>OutputMonitor<\/code> that monitors the current <code> steps <\/code> of the <code>Simulation<\/code>.<\/p><init>\n<p>Default constructor.<\/p>\nfinished\n<p>This method will be called by the simulation once the whole simulation has finished, either because it reached its latest point or because the user stopped it. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\nstepDone\n<p>This method will be called by the simulation every time a simulation step is done. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\n"
                        }]
                      },
                      "generic": {
                        "ownKey": "generic",
                        "childrenPages": {"numericlabelmonitor": {
                          "ownKey": "numericlabelmonitor",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/monitor/generic/numericlabelmonitor",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitor/generic/numericlabelmonitor"
                            },
                            "description": "",
                            "title": "NumericLabelMonitor",
                            "content": "<p><code>OutputMonitor<\/code> that monitors the current <code> steps <\/code> of the <code>Simulation<\/code>.<\/p><init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\nupdate\n<p>Updates the GUI.<\/p>\nsetName\n<p>Setter method for name tag to be put before the numerical value.<\/p>\ngetName\n<p>Getter method for name tag to be put before the numerical value.<\/p>\ninitialized\n<p>This method will be called by the simulation as soon as the initialization phase is completed. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitor/generic",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitor/generic"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.monitor.generic",
                          "content": "<p>NumericLabelMonitor<\/p>\n<p><code>OutputMonitor<\/code> that monitors the current <code> steps <\/code> of the <code>Simulation<\/code>.<\/p>\n"
                        }]
                      },
                      "fxtimemonitor": {
                        "ownKey": "fxtimemonitor",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitor/fxtimemonitor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitor/fxtimemonitor"
                          },
                          "description": "",
                          "title": "FXTimeMonitor",
                          "content": "<p><code>OutputMonitor<\/code> that monitors the current <code> steps <\/code> of the <code>Simulation<\/code>.<\/p><init>\n<p>Default constructor.<\/p>\nfinished\n<p>This method will be called by the simulation once the whole simulation has finished, either because it reached its latest point or because the user stopped it. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\nstepDone\n<p>This method will be called by the simulation every time a simulation step is done. Thread safety note: no specific policy is defined for the control flow which will execute this method. A new thread could have been spawned or the same flow of the simulation may execute this method. This depends on the specific <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> implementation.<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/monitor",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitor"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.boundary.monitor",
                      "content": "<p>FXStepMonitor<\/p>\n<p><code>OutputMonitor<\/code> that monitors the current <code> steps <\/code> of the <code>Simulation<\/code>.<\/p>\nPlayPauseMonitor\n<p><code>OutputMonitor<\/code> that monitors the current <code> status <\/code> of the <code>Simulation<\/code>, acting as a toggle to <code> play <\/code> and <code> pause <\/code> the <code>Simulation<\/code>.<\/p>\nFXTimeMonitor\n<p><code>OutputMonitor<\/code> that monitors the current <code> steps <\/code> of the <code>Simulation<\/code>.<\/p>\nit.unibo.alchemist.boundary.monitor.generic\n"
                    }]
                  },
                  "wormhole": {
                    "ownKey": "wormhole",
                    "childrenPages": {
                      "interfaces": {
                        "ownKey": "interfaces",
                        "childrenPages": {
                          "zoommanager": {
                            "ownKey": "zoommanager",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/zoommanager",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/zoommanager"
                              },
                              "description": "",
                              "title": "ZoomManager",
                              "content": "<p>A class that implements the <code>IZoomManager<\/code> interface is able to convert the sliding of any physical/virtual device/control into a positive <code>double<\/code> value that represents a zoom rate.<\/p>setZoom\n<p>Sets the zoom rate.<\/p>\ngetZoom\n<p>Gets the zoom rate.<\/p>\n"
                            }]
                          },
                          "pointerspeed": {
                            "ownKey": "pointerspeed",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/pointerspeed",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/pointerspeed"
                              },
                              "description": "",
                              "title": "PointerSpeed",
                              "content": "<p>Base type for any pointing device: it provides services to analyze the pointer's movement.<\/p>getOldPosition\n<p>Gets the pointer's old position.<\/p>\ngetVariation\n<p>Gets the vector [current position - old position].<\/p>\nsetCurrentPosition\n<p>Sets the pointer's current position and, consequently, updates the old one.<\/p>\ngetCurrentPosition\n<p>Gets the pointer's current position.<\/p>\n"
                            }]
                          },
                          "slideinputmanager": {
                            "ownKey": "slideinputmanager",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/slideinputmanager",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/slideinputmanager"
                              },
                              "description": "",
                              "title": "SlideInputManager",
                              "content": "<p><code>ISlideInputManager<\/code> is the base type for any class whose aim is to handle the the sliding of any physical/virtual device/control.<\/p>dec\n<p>Decreases the total amount of slides.<\/p>\ninc\n<p>Increases the total amount of slides.<\/p>\n"
                            }]
                          },
                          "anglemanager": {
                            "ownKey": "anglemanager",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/anglemanager",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/anglemanager"
                              },
                              "description": "",
                              "title": "AngleManager",
                              "content": "<p>A class that implements the <code>IAngleManager<\/code> interface is able to convert the sliding of any physical/virtual device/control into a positive <code>double<\/code> value that represents an angle.<\/p>getAngle\n<p>Gets the angle.<\/p>\n"
                            }]
                          },
                          "viewport": {
                            "ownKey": "viewport",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/viewport",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/viewport"
                              },
                              "description": "",
                              "title": "ViewPort",
                              "content": "<p>This interface implements an Adapter pattern between a generic view element and the needs of a <code> Wormhole2D <\/code>.<\/p>getHeight\n<p>Getter method for the height of the adapted view.<\/p>\ngetWidth\n<p>Getter method for the width of the adapted view.<\/p>\n"
                            }]
                          },
                          "wormhole2d": {
                            "ownKey": "wormhole2d",
                            "childrenPages": {"mode": {
                              "ownKey": "mode",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/wormhole2d/mode",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/wormhole2d/mode"
                                },
                                "description": "",
                                "title": "Mode",
                                "content": "<p>Wormhole mode.<\/p>ISOMETRIC\n<p>ADAPT_TO_VIEW<\/p>\n<p>SETTABLE<\/p>\n<p>MAP<\/p>\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces/wormhole2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces/wormhole2d"
                              },
                              "description": "",
                              "title": "Wormhole2D",
                              "content": "<p>A Wormhole (in this context) is an entity that \"connects\" two worlds: the \"environment\" and the \"view\". Above all it provides services to convert coordinates from the \"environment-space\" to the \"view-space\". <code>IWormhole2D<\/code> is the type of a wormhole whose both environment and view are bi-dimensional spaces. <br> <br> <b>Terminology:<\/b> <br> <br> - \"Environment\" is the 'rectangle' we need to render ON the view.<br> - \"View\" is a 'window' that let us see the environment.<br> - \"Environment-space\" is the algebraic space on which 'lies' the environment.<br> - \"View-space\" is the algebraic space on which 'lies' the view.<br> - \"Env\" before a point's name => it refers to a point into the environment-space.<br> - \"View\" before a point's name => it refers to a point into the view-space.<br> - \"Position\" is the point of the view-space every transformation applied to the environment refers to: e.g. if I want to move the environment, I have to change the position; it is also the point the environment rotates around.<br> - \"EnvOffset\" is the vector from (0; 0) into env-space to the left-bottom corner of the part of the environment we want to render. E.g. if I am representing a map with Earth-coordinates (16; 48), the intersection between the prime meridian and the equator is (0; 0), so I have to set the envOffset to (16; 48) in order to see the \"beginning\" of the map on the left-bottom corner of the view.<br><\/p>rotateAroundPoint\n<p>Rotates around a point into the view-space.<\/p>\nisInsideView\n<p>Check if a point of the view-space is \"visible\", i.e. it is inside the view.<\/p>\nsetRotation\n<p>Rotates the environment around the Position.<\/p>\nzoomOnPoint\n<p>Zooms on a point into the view-space.<\/p>\ncenter\n<p>Points the center of the view on the center of the environment.<\/p>\ngetViewPosition\n<p>Gets the Position.<\/p>\nsetEnvPosition\n<p>Sets the position to the view-point corresponding to <code>envPoint<\/code>.<\/p>\ngetViewPoint\n<p>Converts a point from the env-space to the view-space.<\/p>\noptimalZoom\n<p>Automatically sets the zoom rate in order to make the environment entirely visible on the view.<\/p>\ngetMode\n<p>Gets the rendering mode.<\/p>\ngetEnvPoint\n<p>Converts a point from the view-space to the env-space.<\/p>\nsetViewPosition\n<p>Sets the Position to <code>viewPoint<\/code>.<\/p>\ngetViewSize\n<p>Gets the view's size.<\/p>\nsetZoom\n<p>Changes the zoom factor.<\/p>\ngetZoom\n<p>Gets the zoom factor.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/wormhole/interfaces",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/interfaces"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.wormhole.interfaces",
                          "content": "<p>AngleManager<\/p>\n<p>A class that implements the <code>IAngleManager<\/code> interface is able to convert the sliding of any physical/virtual device/control into a positive <code>double<\/code> value that represents an angle.<\/p>\nSlideInputManager\n<p><code>ISlideInputManager<\/code> is the base type for any class whose aim is to handle the the sliding of any physical/virtual device/control.<\/p>\nZoomManager\n<p>A class that implements the <code>IZoomManager<\/code> interface is able to convert the sliding of any physical/virtual device/control into a positive <code>double<\/code> value that represents a zoom rate.<\/p>\nViewPort\n<p>This interface implements an Adapter pattern between a generic view element and the needs of a <code> Wormhole2D <\/code>.<\/p>\nPointerSpeed\n<p>Base type for any pointing device: it provides services to analyze the pointer's movement.<\/p>\nWormhole2D\n<p>A Wormhole (in this context) is an entity that \"connects\" two worlds: the \"environment\" and the \"view\". Above all it provides services to convert coordinates from the \"environment-space\" to the \"view-space\". <code>IWormhole2D<\/code> is the type of a wormhole whose both environment and view are bi-dimensional spaces. <br> <br> <b>Terminology:<\/b> <br> <br> - \"Environment\" is the 'rectangle' we need to render ON the view.<br> - \"View\" is a 'window' that let us see the environment.<br> - \"Environment-space\" is the algebraic space on which 'lies' the environment.<br> - \"View-space\" is the algebraic space on which 'lies' the view.<br> - \"Env\" before a point's name => it refers to a point into the environment-space.<br> - \"View\" before a point's name => it refers to a point into the view-space.<br> - \"Position\" is the point of the view-space every transformation applied to the environment refers to: e.g. if I want to move the environment, I have to change the position; it is also the point the environment rotates around.<br> - \"EnvOffset\" is the vector from (0; 0) into env-space to the left-bottom corner of the part of the environment we want to render. E.g. if I am representing a map with Earth-coordinates (16; 48), the intersection between the prime meridian and the equator is (0; 0), so I have to set the envOffset to (16; 48) in order to see the \"beginning\" of the map on the left-bottom corner of the view.<br><\/p>\n"
                        }]
                      },
                      "implementation": {
                        "ownKey": "implementation",
                        "childrenPages": {
                          "pointadapter": {
                            "ownKey": "pointadapter",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/pointadapter",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/pointadapter"
                              },
                              "description": "",
                              "title": "PointAdapter",
                              "content": "<p>Adapts various representations of bidimensional positions.<\/p>hashCode\n<p>sum<\/p>\n<p>getX<\/p>\n<p>equals<\/p>\n<p>getY<\/p>\n<p>toPoint<\/p>\n<p>toString<\/p>\n<p>toPosition<\/p>\n<p>diff<\/p>\n<p>toPoint2D<\/p>\n<p>from<\/p>\n<p>Builds a <code> PointAdapter <\/code> from coordinates.<\/p>\nfrom\n<p>Builds a <code> PointAdapter <\/code>.<\/p>\nfrom\n<p>Builds a <code> PointAdapter <\/code>.<\/p>\n"
                            }]
                          },
                          "mapwormhole": {
                            "ownKey": "mapwormhole",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/mapwormhole",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/mapwormhole"
                              },
                              "description": "",
                              "title": "MapWormhole",
                              "content": "<p>Wormhole used for maps rendering.<\/p>MAX_ZOOM\n<p>Maximum zoom.<\/p>\n<init>\n<p>Initializes a new <code> MapWormhole <\/code> copying the state of the one in input.<\/p>\nrotateAroundPoint\n\noptimalZoom\n\ngetEnvPoint\n\nsetViewPosition\n\nsetZoom\n\nzoomOnPoint\n\ngetViewPosition\n\nsetEnvPosition\n\ngetViewPoint\n\nmakePosition\n<p>Returns a <code> GeoPosition <\/code> with the given coordinates.<\/p>\n"
                            }]
                          },
                          "adapter": {
                            "ownKey": "adapter",
                            "childrenPages": {"componentviewport": {
                              "ownKey": "componentviewport",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/adapter/componentviewport",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/adapter/componentviewport"
                                },
                                "description": "",
                                "title": "ComponentViewPort",
                                "content": "<p>Adapter class that adapts the AWT <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Component.html\">Component<\/a><\/code> class to a generic ViewPort for usage in <code> it.unibo.alchemist.boundary.wormhole.implementation.AbstractWormhole2D <\/code>.<\/p><init>\n<p>Default constructor.<\/p>\nhashCode\n\ngetHeight\n<p>Getter method for the height of the adapted view.<\/p>\nequals\n\ngetComponent\n<p>Getter method for the component to be adapted.<\/p>\nsetComponent\n<p>Setter method for the component to be adapted.<\/p>\ngetWidth\n<p>Getter method for the width of the adapted view.<\/p>\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/adapter",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/adapter"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.boundary.wormhole.implementation.adapter",
                              "content": "<p>ComponentViewPort<\/p>\n<p>Adapter class that adapts the AWT <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Component.html\">Component<\/a><\/code> class to a generic ViewPort for usage in <code> it.unibo.alchemist.boundary.wormhole.implementation.AbstractWormhole2D <\/code>.<\/p>\n"
                            }]
                          },
                          "pointerspeedimpl": {
                            "ownKey": "pointerspeedimpl",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/pointerspeedimpl",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/pointerspeedimpl"
                              },
                              "description": "",
                              "title": "PointerSpeedImpl",
                              "content": "<p>Implementation for <code> PointerSpeed <\/code> interface.<\/p><init>\n<p>Implementation for <code> PointerSpeed <\/code> interface.<\/p>\ngetOldPosition\n\ngetVariation\n\nsetCurrentPosition\n\ngetCurrentPosition\n\n"
                            }]
                          },
                          "linearzoommanager": {
                            "ownKey": "linearzoommanager",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/linearzoommanager",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/linearzoommanager"
                              },
                              "description": "",
                              "title": "LinearZoomManager",
                              "content": "<p>A <code> LinearZoomManager <\/code> converts the sliding of any physical/virtual device/control into a zoom rate through a linear function.<br> Zoom = amount of slides * rate.<\/p><init>\n<p>Same of <code> #LinearZoomManager(double, double, double, double) <\/code> but rate is 1, and minimum and maximum are +/- <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#MAX_VALUE\">Double#MAX_VALUE<\/a><\/code>.<\/p>\n<init>\n<p>Initialize a new <code> LinearZoomManager <\/code> instance with the parameters in input.<\/p>\nsetZoom\n\ngetZoom\n\n"
                            }]
                          },
                          "doubledimension": {
                            "ownKey": "doubledimension",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/doubledimension",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/doubledimension"
                              },
                              "description": "",
                              "title": "DoubleDimension",
                              "content": "<p>Implementation of the <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Dimension2D.html\">Dimension2D<\/a><\/code> abstract class with double precision.<\/p><init>\n<p>Initializes a new <code>DoubleDimension<\/code> instance with both width and height set to zero.<\/p>\n<init>\n<p>Initializes a new <code>DoubleDimension<\/code> instance using another <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Dimension2D.html\">Dimension2D<\/a><\/code> object's data.<br> No side effects.<\/p>\n<init>\n<p>Initializes a new <code>DoubleDimension<\/code> using raw data.<\/p>\n<init>\n<p>Initializes a new <code>DoubleDimension<\/code> through an array of numbers.<br> d[0] is width, d[1] is height, other elements will be ignored.<\/p>\ngetHeight\n\nsetSize\n\ngetWidth\n\n"
                            }]
                          },
                          "abstractwormhole2d": {
                            "ownKey": "abstractwormhole2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/abstractwormhole2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/abstractwormhole2d"
                              },
                              "description": "",
                              "title": "AbstractWormhole2D",
                              "content": "<p>Partial, abstract, implementation for the interface <code> Wormhole2D <\/code>. This implementation considers the particular case of the view as an entity into the sceern-space: the y-axis grows on the bottom side of the screen. This abstract class is independent from the 2D graphical component wrapped.<\/p><init>\n<p>Wormhole constructor for any <code> ViewPort <\/code>. Initializes a new instance directly setting the size of both view and environment, and the offset too.<\/p>\nrotateAroundPoint\n<p>Rotates around a point into the view-space.<\/p>\ngetView\n<p>Getter method for the controlled View.<\/p>\nisInsideView\n<p>Check if a point of the view-space is \"visible\", i.e. it is inside the view.<\/p>\nsetRotation\n\nviewPointFromEnv\n<p>Translates a point to the view space.<\/p>\ngetHRate\n<p>Getter method for the horizontal stretch rate.<\/p>\ncalculateTransform\n<p>Calculates the <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/AffineTransform.html\">AffineTransform<\/a><\/code> that allows the wormhole to convert points from env-space to view-space.<\/p>\ngetViewRatio\n<p>Returns the dimensions ratio of the controlled view.<\/p>\nenvPointFromView\n<p>Translates a point to the env space.<\/p>\noptimalZoom\n<p>Automatically sets the zoom rate in order to make the environment entirely visible on the view.<\/p>\ngetMode\n<p>Gets the rendering mode.<\/p>\ngetNIVerticalRatio\n<p>Gets the viewHeight / envHeight ratio. NI = Not Isometric.<\/p>\ngetEnvPoint\n<p>Converts a point from the view-space to the env-space.<\/p>\nsetViewPosition\n<p>Sets the Position to <code>viewPoint<\/code>.<\/p>\nsetZoom\n<p>Changes the zoom factor.<\/p>\ngetZoom\n<p>Gets the zoom factor.<\/p>\nsetMode\n<p>Allows child-classes to modify the <code>#mode<\/code> field.<\/p>\ngetVRate\n<p>Getter method for the vertical stretch rate.<\/p>\ngetEnvRatio\n<p>Returns the dimensions ratio of the <code> Environment <\/code> used as model.<\/p>\nzoomOnPoint\n<p>Zooms on a point into the view-space.<\/p>\ngetPosition\n<p>Getter method for position field.<\/p>\ncenter\n<p>Points the center of the view on the center of the environment.<\/p>\ngetViewPosition\n<p>Gets the Position.<\/p>\nsetEnvPosition\n<p>Sets the position to the view-point corresponding to <code>envPoint<\/code>.<\/p>\ngetViewPoint\n<p>Converts a point from the env-space to the view-space.<\/p>\ngetEnvironment\n<p>Getter method for the <code>Environment<\/code> model.<\/p>\nsetPosition\n<p>Setter method for position field.<\/p>\ngetViewSize\n<p>Gets the view's size.<\/p>\ngetRotation\n<p>Getter method for the rotation angle, in radians.<\/p>\ngetNIHorizontalRatio\n<p>Gets the viewWidth / envWidth ratio. NI = Not Isometric.<\/p>\n"
                            }]
                          },
                          "abstractslideinputmanager": {
                            "ownKey": "abstractslideinputmanager",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/abstractslideinputmanager",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/abstractslideinputmanager"
                              },
                              "description": "",
                              "title": "AbstractSlideInputManager",
                              "content": "<p><code>ASlideInputManager<\/code> is the base class for any class whose aim is to handle the the sliding of any physical/virtual device/control.<\/p><init>\n<p>Creates a new <code>ASlideInputManager<\/code> with the value in input. <br> This is useful if you want to have an initial output.<\/p>\ndec\n\nsetValue\n<p>Allow any child class to modify the value directly.<\/p>\ninc\n\ngetValue\n<p>Allow any child class to see the current value.<\/p>\n"
                            }]
                          },
                          "wormholeswing": {
                            "ownKey": "wormholeswing",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/wormholeswing",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/wormholeswing"
                              },
                              "description": "",
                              "title": "WormholeSwing",
                              "content": "<p>An implementation of [AbstractWormhole2D] for Swing.<\/p><init>\n\n"
                            }]
                          },
                          "anglemanagerimpl": {
                            "ownKey": "anglemanagerimpl",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/anglemanagerimpl",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/anglemanagerimpl"
                              },
                              "description": "",
                              "title": "AngleManagerImpl",
                              "content": "<p>An <code>AngleManager<\/code> converts the sliding of any physical/virtual device/control into an angle expressed with radians.<\/p>DEF_DEG_PER_PIXEL\n<p><code>DEF_DEG_PER_PIXEL<\/code> = \"DEFault amount of DEGrees PER PIXEL\".<br> Currently set to <code>3 * 360 / screenWidth<\/code> i.e.: by sliding the mouse through the entire width of the screen you will obtain a 3 rounds rotation.<br> This constant is intended for an implementation that converts mouse motion over x axis into degrees.<\/p>\n<init>\n<p>Initializes a new <code>AngleManager<\/code> instance with <code>dUnit = 1<\/code> and <code>dPhase = 0<\/code>.<\/p>\n<init>\n<p>Initializes a new <code>AngleManager<\/code> instance with <code>dPhase = 0<\/code>.<\/p>\n<init>\n<p>Initializes a new <code>AngleManager<\/code> with the initial phase and unit in input.<\/p>\ngetDegUnit\n<p>Allow any child class to see the degrees-per-slide unit.<\/p>\ngetAngle\n\ngetDegPhase\n<p>Allow any child class to see the initial phase.<\/p>\nsetDegPhase\n<p>Allow any child class to modify the initial phase.<\/p>\nsetDegUnit\n<p>Allow any child class to modify the degrees-per-slide unit.<\/p>\n"
                            }]
                          },
                          "exponentialzoommanager": {
                            "ownKey": "exponentialzoommanager",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/wormhole/implementation/exponentialzoommanager",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation/exponentialzoommanager"
                              },
                              "description": "",
                              "title": "ExponentialZoomManager",
                              "content": "<p>An <code>ExpZoomManager<\/code> converts the sliding of any physical/virtual device/control into a zoom rate through an exponential function (in this way I am sure to not see negative values ;-).<br> Zoom = base ^ (amount of slides / normalization value).<\/p>DEF_BASE\n<p>DEF_BASE = \"DEFault BASE\".<br> It is the default base for the exponential function. It is meant to be greater than 1. Currently its value is {@value #DEF_BASE} that seems pretty good to me.<\/p>\n<init>\n<p>Same of <code> #ExponentialZoomManager(double, double, double) <\/code> but normalization value is 1.<\/p>\n<init>\n<p>Initialize a new <code>ExpZoomManager<\/code> instance with the parameters in input.<\/p>\ngetBase\n<p>Allow any child class to see the base of the exponential.<\/p>\nsetBase\n<p>Allow any child class to modify the base of the exponential.<\/p>\nsetNormal\n<p>Allow any child class to modify the normalization value.<\/p>\nsetZoom\n\ngetNormal\n<p>Allow any child class to see the normalization value.<\/p>\ngetZoom\n\ngetSlideValueFromZoom\n<p>Calculates the initial amount of slides (i.e. <code>value<\/code>) to have a zoom rate equal to <code>z<\/code>.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/wormhole/implementation",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/wormhole/implementation"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.wormhole.implementation",
                          "content": "<p>AngleManagerImpl<\/p>\n<p>An <code>AngleManager<\/code> converts the sliding of any physical/virtual device/control into an angle expressed with radians.<\/p>\nMapWormhole\n<p>Wormhole used for maps rendering.<\/p>\nWormholeSwing\n<p>An implementation of [AbstractWormhole2D] for Swing.<\/p>\nAbstractWormhole2D\n<p>Partial, abstract, implementation for the interface <code> Wormhole2D <\/code>. This implementation considers the particular case of the view as an entity into the sceern-space: the y-axis grows on the bottom side of the screen. This abstract class is independent from the 2D graphical component wrapped.<\/p>\nExponentialZoomManager\n<p>An <code>ExpZoomManager<\/code> converts the sliding of any physical/virtual device/control into a zoom rate through an exponential function (in this way I am sure to not see negative values ;-).<br> Zoom = base ^ (amount of slides / normalization value).<\/p>\nDoubleDimension\n<p>Implementation of the <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Dimension2D.html\">Dimension2D<\/a><\/code> abstract class with double precision.<\/p>\nLinearZoomManager\n<p>A <code> LinearZoomManager <\/code> converts the sliding of any physical/virtual device/control into a zoom rate through a linear function.<br> Zoom = amount of slides * rate.<\/p>\nPointAdapter\n<p>Adapts various representations of bidimensional positions.<\/p>\nAbstractSlideInputManager\n<p><code>ASlideInputManager<\/code> is the base class for any class whose aim is to handle the the sliding of any physical/virtual device/control.<\/p>\nPointerSpeedImpl\n<p>Implementation for <code> PointerSpeed <\/code> interface.<\/p>\nit.unibo.alchemist.boundary.wormhole.implementation.adapter\n"
                        }]
                      }
                    }
                  },
                  "interactions": {
                    "ownKey": "interactions",
                    "childrenPages": {
                      "interactionmanager": {
                        "ownKey": "interactionmanager",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interactions/interactionmanager",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interactions/interactionmanager"
                          },
                          "description": "",
                          "title": "InteractionManager",
                          "content": "<p>An interaction manager that controls the input/output on the environment done through the GUI.<\/p>environment\n<p>The current environment.<\/p>\nnodes\n<p>The nodes in the environment.\nShould be updated as frequently as possible to ensure a representation of\nthe feedback that is consistent with the actual environment.<\/p>\nkeyboardListener\n<p>The keyboard listener.<\/p>\ncanvases\n<p>The canvases used for input/output.<\/p>\nrepaint\n<p>Clears and then paints every currently active feedback.<\/p>\nsetWormhole\n<p>Sets the wormhole.<\/p>\nsetZoomManager\n<p>Sets the zoom manager.<\/p>\nonMonitorRepaint\n<p>To be called whenever the monitor paints its effects.<\/p>\n"
                        }]
                      },
                      "selectionhelper": {
                        "ownKey": "selectionhelper",
                        "childrenPages": {"selectionbox": {
                          "ownKey": "selectionbox",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/interactions/selectionhelper/selectionbox",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interactions/selectionhelper/selectionbox"
                            },
                            "description": "",
                            "title": "SelectionBox",
                            "content": "<p>Allows basic multi-element box selections.<\/p>rectangle\n<p>The rectangle representing the box.\nIf the rectangle's dimensions are (0, 0), the rectangle is to be considered non-existing.<\/p>\nclosed\n<p>Returns whether the SelectionBox has been closed.<\/p>\nanchorPoint\n<p>the starting and unchanging <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Point.html\">Point<\/a> of the selection<\/p>\n<init>\n<p>Allows basic multi-element box selections.<\/p>\nclose\n<p>Closes this SelectionBox.<\/p>\ntoString\n\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interactions/selectionhelper",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interactions/selectionhelper"
                          },
                          "description": "",
                          "title": "SelectionHelper",
                          "content": "<p>Manages multi-element selection and click-selection.<\/p>isBoxSelectionInProgress\n<p>Returns whether a box selection is currently occurring.<\/p>\nrectangle\n<p>The rectangle representing the box.\nIf the rectangle's dimensions are (0, 0), the rectangle is to be considered non-existing.<\/p>\n<init>\n<p>Manages multi-element selection and click-selection.<\/p>\nbegin\n<p>Begins a new selection at the given point.<\/p>\nupdate\n<p>Updates the selection with a new point.<\/p>\nclose\n<p>Closes the selection.<\/p>\nclickSelection\n<p>Retrieves the element selected by clicking. If selection was not done by clicking, null.<\/p>\nboxSelection\n<p>Retrieves the elements selected by box selection, thus possibly empty.<\/p>\n"
                        }]
                      },
                      "digitalpanmanager": {
                        "ownKey": "digitalpanmanager",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interactions/digitalpanmanager",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interactions/digitalpanmanager"
                          },
                          "description": "",
                          "title": "DigitalPanManager",
                          "content": "<p>Manages panning towards a cardinal (N, S, E, W) or intercardinal (NE, NW, SE, SW) direction.\nWhen a direction is added, panning towards it begins and doesn't stop until the given direction is removed.<\/p><init>\n<p>Manages panning towards a cardinal (N, S, E, W) or intercardinal (NE, NW, SE, SW) direction.\nWhen a direction is added, panning towards it begins and doesn't stop until the given direction is removed.<\/p>\nplusAssign\n<p>Inputs a movement towards a certain direction.<\/p>\nminusAssign\n<p>Stops moving towards a certain direction.<\/p>\n"
                        }]
                      },
                      "analogpanhelper": {
                        "ownKey": "analogpanhelper",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interactions/analogpanhelper",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interactions/analogpanhelper"
                          },
                          "description": "",
                          "title": "AnalogPanHelper",
                          "content": "<p>Helps manage panning done through the mouse,\ntherefore analog in the sense that the\npanning can go towards any direction.<\/p>valid\n<p>Returns whether this  AnalogPanHelper  is still valid.\nInvalidation happens when  close  is called, for example when the mouse goes out of bounds.<\/p>\n<init>\n<p>Helps manage panning done through the mouse,\ntherefore analog in the sense that the\npanning can go towards any direction.<\/p>\nupdate\n<p>Updates the panning position and returns it.<\/p>\nclose\n<p>Closes the helper. This invalidates the  AnalogPanHelper <\/p>\n"
                        }]
                      },
                      "direction2d": {
                        "ownKey": "direction2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interactions/direction2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interactions/direction2d"
                          },
                          "description": "",
                          "title": "Direction2D",
                          "content": "<p>Cardinal and intercardinal directions indicating a movement.<\/p>NONE\n<p>NORTH<\/p>\n<p>SOUTH<\/p>\n<p>EAST<\/p>\n<p>WEST<\/p>\n<p>NORTHEAST<\/p>\n<p>SOUTHEAST<\/p>\n<p>SOUTHWEST<\/p>\n<p>NORTHWEST<\/p>\n<p>flipped<\/p>\n<p>Flips the direction horizontally and vertically.<\/p>\nflippedX\n<p>Flips the direction's X-values.<\/p>\nflippedY\n<p>Flips the direction's Y-values.<\/p>\nx\n<p>the X-value. Grows positively towards the \"right\".<\/p>\ny\n<p>the Y-value. Grows positively upwards.<\/p>\nplus\n<p>Sums with a direction.<\/p>\nminus\n<p>Subtracts with a direction.<\/p>\ntimes\n<p>Multiplies by a scalar.<\/p>\ncontains\n<p>Returns whether this direction contains  other .\nSpecifically, a direction \"D\" contains another if D  Direction2D.plus  equals D.\nFor example,  NORTHEAST  contains  NORTH  and  EAST , but not  WEST .\nAll directions contain  NONE .  NONE  contains only  NONE .<\/p>\n"
                        }]
                      },
                      "baseinteractionmanager": {
                        "ownKey": "baseinteractionmanager",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/interactions/baseinteractionmanager",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interactions/baseinteractionmanager"
                          },
                          "description": "",
                          "title": "BaseInteractionManager",
                          "content": "<p>An interaction manager that implements pan, select, move, delete and zoom.<\/p>environment\n<p>The current environment.<\/p>\nnodes\n<p>The nodes in the environment.\nShould be updated as frequently as possible to ensure a representation of\nthe feedback that is consistent with the actual environment.<\/p>\nkeyboardListener\n<p>The keyboard listener.<\/p>\ncanvases\n<p>The canvases used for input/output.<\/p>\n<init>\n<p>An interaction manager that implements pan, select, move, delete and zoom.<\/p>\nrepaint\n<p>Clears and then paints every currently active feedback.<\/p>\nsetWormhole\n<p>Sets the wormhole.<\/p>\nsetZoomManager\n<p>Sets the zoom manager.<\/p>\nonMonitorRepaint\n<p>To be called whenever the monitor paints its effects.<\/p>\nBaseInteractionManager\n<p>An interaction manager that implements pan, select, move, delete and zoom.<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/interactions",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interactions"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.boundary.interactions",
                      "content": "<p>AnalogPanHelper<\/p>\n<p>Helps manage panning done through the mouse,\ntherefore analog in the sense that the\npanning can go towards any direction.<\/p>\nBaseInteractionManager\n<p>An interaction manager that implements pan, select, move, delete and zoom.<\/p>\nDigitalPanManager\n<p>Manages panning towards a cardinal (N, S, E, W) or intercardinal (NE, NW, SE, SW) direction.\nWhen a direction is added, panning towards it begins and doesn't stop until the given direction is removed.<\/p>\nDirection2D\n<p>Cardinal and intercardinal directions indicating a movement.<\/p>\nInteractionManager\n<p>An interaction manager that controls the input/output on the environment done through the GUI.<\/p>\nSelectionHelper\n<p>Manages multi-element selection and click-selection.<\/p>\n"
                    }]
                  },
                  "keybinder": {
                    "ownKey": "keybinder",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/keybinder",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/keybinder"
                      },
                      "description": "",
                      "title": "Keybinder",
                      "content": "<p>The keybinder app.<\/p><init>\n<p>The keybinder app.<\/p>\nKeybinder\n<p>The keybinder app.<\/p>\n"
                    }]
                  },
                  "customleafletmapview": {
                    "ownKey": "customleafletmapview",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/customleafletmapview",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/customleafletmapview"
                      },
                      "description": "",
                      "title": "CustomLeafletMapView",
                      "content": "<p>A <a href=\"#\">LeafletMapView<\/a> that implements functions used to manage the map without any mouse events.<\/p><init>\n<p>A <a href=\"#\">LeafletMapView<\/a> that implements functions used to manage the map without any mouse events.<\/p>\npanBy\n<p>Pan the map by a given amount of pixels.<\/p>\nsetZoomWithoutAnimating\n<p>Set the zoom to the given value without animating.<\/p>\ngetLatLongFromPoint\n<p>Retrieve the <a href=\"#\">LatLong<\/a> of the given <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Point.html\">Point<\/a> on the screen (pixel coordinates).<\/p>\ngetPointFromLatLong\n<p>Retrieve the <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Point.html\">Point<\/a> on the screen (in pixel coordinates) of the given <a href=\"#\">LatLong<\/a> position.<\/p>\npreventWrapping\n<p>Prevent the map from wrapping.\nCannot be simply called in the init block\nsince the map does not yet exist at that\npoint in time in the javascript engine.<\/p>\nCustomLeafletMapView\n<p>A <a href=\"#\">LeafletMapView<\/a> that implements functions used to manage the map without any mouse events.<\/p>\n"
                    }]
                  },
                  "l10n": {
                    "ownKey": "l10n",
                    "childrenPages": {"localizedresourcebundle": {
                      "ownKey": "localizedresourcebundle",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/l10n/localizedresourcebundle",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/l10n/localizedresourcebundle"
                        },
                        "description": "",
                        "title": "LocalizedResourceBundle",
                        "content": "<p>Shorthand for getting resources.<\/p>get\n<p>get<\/p>\n<p>getString<\/p>\n<p>Looks up on the property files and returns the correct String.<\/p>\n"
                      }]
                    }},
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/l10n",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/l10n"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.boundary.l10n",
                      "content": "<p>LocalizedResourceBundle<\/p>\n<p>Shorthand for getting resources.<\/p>\n"
                    }]
                  },
                  "util": {
                    "ownKey": "util",
                    "childrenPages": {"initmapsforge": {
                      "ownKey": "initmapsforge",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/boundary/util/initmapsforge",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/util/initmapsforge"
                        },
                        "description": "",
                        "title": "InitMapsForge",
                        "content": "<p>Static configurator for Mapsforge, providing a custom user-agent and referer to identify Alchemist\non the OpenStreetMaps side.<\/p>initAgent\n"
                      }]
                    }},
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/util",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/util"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.boundary.util",
                      "content": "<p>InitMapsForge<\/p>\n<p>Static configurator for Mapsforge, providing a custom user-agent and referer to identify Alchemist\non the OpenStreetMaps side.<\/p>\n"
                    }]
                  },
                  "gpsload": {
                    "ownKey": "gpsload",
                    "childrenPages": {
                      "impl": {
                        "ownKey": "impl",
                        "childrenPages": {
                          "traceloader": {
                            "ownKey": "traceloader",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/impl/traceloader",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/impl/traceloader"
                              },
                              "description": "",
                              "title": "TraceLoader",
                              "content": "<p><init><\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p>iterator<\/p>\n<p>size<\/p>\n"
                            }]
                          },
                          "gpxloader": {
                            "ownKey": "gpxloader",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/impl/gpxloader",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/impl/gpxloader"
                              },
                              "description": "",
                              "title": "GPXLoader",
                              "content": "<p>Class that reads GPS tracks from gpx files.<\/p><init>\n<p>Class that reads GPS tracks from gpx files.<\/p>\nreadTrace\n\nsupportedExtensions\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gpsload/impl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/impl"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gpsload.impl",
                          "content": "<p>TraceLoader<\/p>\n<p>GPXLoader<\/p>\n<p>Class that reads GPS tracks from gpx files.<\/p>\n"
                        }]
                      },
                      "api": {
                        "ownKey": "api",
                        "childrenPages": {
                          "abstractgpstimealignment": {
                            "ownKey": "abstractgpstimealignment",
                            "childrenPages": {"singlepointbehavior": {
                              "ownKey": "singlepointbehavior",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/gpsload/api/abstractgpstimealignment/singlepointbehavior",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/abstractgpstimealignment/singlepointbehavior"
                                },
                                "description": "",
                                "title": "SinglePointBehavior",
                                "content": "<p>Define the behavior for trace with single point.<\/p>RETAIN_SINGLE_POINTS\n<p>DISCARD_SINGLE_POINTS<\/p>\n<p>THROW_EXCEPTION_ON_SINGLE_POINTS<\/p>\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/api/abstractgpstimealignment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/abstractgpstimealignment"
                              },
                              "description": "",
                              "title": "AbstractGPSTimeAlignment",
                              "content": "<p><init><\/p>\n<p>computeStartTime<\/p>\n<p>alignTime<\/p>\n"
                            }]
                          },
                          "aligntofirsttrace": {
                            "ownKey": "aligntofirsttrace",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/api/aligntofirsttrace",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/aligntofirsttrace"
                              },
                              "description": "",
                              "title": "AlignToFirstTrace",
                              "content": "<p>Aligns all traces at the start time of the first trace. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 0 and second point with time = 3 - second trace start with time = 2 and second point with time = 4<\/p><init>\n<p>Default empty constructor, builds a AlignToFirstTrace with RETAIN_SINGLE_POINTS behavior for trace with single point.<\/p>\ncomputeStartTime\n\n"
                            }]
                          },
                          "gpsfileloader": {
                            "ownKey": "gpsfileloader",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/api/gpsfileloader",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/gpsfileloader"
                              },
                              "description": "",
                              "title": "GPSFileLoader",
                              "content": "<p>Strategy to read GPSTrace from file.<\/p>readTrace\n<p>supportedExtensions<\/p>\n"
                            }]
                          },
                          "gpstimealignment": {
                            "ownKey": "gpstimealignment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/api/gpstimealignment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/gpstimealignment"
                              },
                              "description": "",
                              "title": "GPSTimeAlignment",
                              "content": "<p>Strategy to define how align the time of all trace.<\/p>alignTime\n"
                            }]
                          },
                          "aligntosimulationtime": {
                            "ownKey": "aligntosimulationtime",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/api/aligntosimulationtime",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/aligntosimulationtime"
                              },
                              "description": "",
                              "title": "AlignToSimulationTime",
                              "content": "<p>Aligns all traces at the initial simulation time. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 0 and second point with time = 3 - second trace start with time = 0 and second point with time = 2<\/p><init>\n<p>Default empty constructor, builds a AlignToSimulationTime with RETAIN_SINGLE_POINTS behavior for trace with single point.<\/p>\ncomputeStartTime\n\n"
                            }]
                          },
                          "aligntotime": {
                            "ownKey": "aligntotime",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/api/aligntotime",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/aligntotime"
                              },
                              "description": "",
                              "title": "AlignToTime",
                              "content": "<p>Alings the traces with the given time in seconds from Epoch. All points before such time will be discarded. All points after the provided time will be shifted back. Summarizing, the time that is provided represents in the real world the time zero of the simulation.<\/p><init>\n\n<init>\n\ncomputeStartTime\n\n"
                            }]
                          },
                          "noalignment": {
                            "ownKey": "noalignment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gpsload/api/noalignment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/noalignment"
                              },
                              "description": "",
                              "title": "NoAlignment",
                              "content": "<p>No alignment is performed. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 2 and second point with time = 5 - second trace start with time = 4 and second point with time = 6<\/p><init>\n<p>Default empty constructor, builds a NoAlignment with RETAIN_SINGLE_POINTS behavior for trace with single point.<\/p>\ncomputeStartTime\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gpsload/api",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gpsload.api",
                          "content": "<p>AlignToSimulationTime<\/p>\n<p>Aligns all traces at the initial simulation time. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 0 and second point with time = 3 - second trace start with time = 0 and second point with time = 2<\/p>\nAlignToTime\n<p>Alings the traces with the given time in seconds from Epoch. All points before such time will be discarded. All points after the provided time will be shifted back. Summarizing, the time that is provided represents in the real world the time zero of the simulation.<\/p>\nGPSTimeAlignment\n<p>Strategy to define how align the time of all trace.<\/p>\nGPSFileLoader\n<p>Strategy to read GPSTrace from file.<\/p>\nAbstractGPSTimeAlignment\n<p>AlignToFirstTrace<\/p>\n<p>Aligns all traces at the start time of the first trace. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 0 and second point with time = 3 - second trace start with time = 2 and second point with time = 4<\/p>\nNoAlignment\n<p>No alignment is performed. If you have two traces, the first trace start with time = 2 and second point with time = 5, the second trace start with time = 4 and second point with time = 6, the result will be: - first trace start with time = 2 and second point with time = 5 - second trace start with time = 4 and second point with time = 6<\/p>\n"
                        }]
                      }
                    }
                  },
                  "keybindcontroller": {
                    "ownKey": "keybindcontroller",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/keybindcontroller",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/keybindcontroller"
                      },
                      "description": "",
                      "title": "KeybindController",
                      "content": "<p>The controller for ListKeybindsView.<\/p>keybinds\n<p>The current keybinds.<\/p>\nselected\n<p>The keybind currently selected in the view.<\/p>\n<init>\n<p>The controller for ListKeybindsView.<\/p>\n"
                    }]
                  },
                  "keybind": {
                    "ownKey": "keybind",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/keybind",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/keybind"
                      },
                      "description": "",
                      "title": "Keybind",
                      "content": "<p>A class that describes the relation between a KeyCode and an Action.<\/p>action\n<p>The action.<\/p>\nactionProperty\n<p>The property of the action.<\/p>\nkey\n<p>The key.<\/p>\nkeyProperty\n<p>The property of the key.<\/p>\n<init>\n<p>A class that describes the relation between a KeyCode and an Action.<\/p>\n"
                    }]
                  },
                  "gui": {
                    "ownKey": "gui",
                    "childrenPages": {
                      "controller": {
                        "ownKey": "controller",
                        "childrenPages": {
                          "buttonsbarcontroller": {
                            "ownKey": "buttonsbarcontroller",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/controller/buttonsbarcontroller",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/controller/buttonsbarcontroller"
                              },
                              "description": "",
                              "title": "ButtonsBarController",
                              "content": "<p>This class models a JavaFX controller for ButtonsBarLayout.fxml.<\/p>BUTTONS_BAR_LAYOUT\n<p>Layout path.<\/p>\n<init>\n<p>Default constructor.<\/p>\n<init>\n<p>Same as <code> default constructor <\/code>, but lets specify an <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code> to display the effects. <\/p><p> Useful to pass to <code> EffectsGroupBarController <\/code>, <code> EffectBarController <\/code> and <code> EffectPropertiesController <\/code>.<\/p>\n<init>\n<p>Same as <code> default constructor <\/code>, but lets specify the play/pause Button, a Label for the steps and a Label for the time.<\/p>\n<init>\n<p>Same as <code> default constructor <\/code>, but lets specify an <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code> to display the effects, the play/pause Button, a Label for the steps and a Label for the time. <\/p><p> Useful to pass to <code> EffectsGroupBarController <\/code>, <code> EffectBarController <\/code> and <code> EffectPropertiesController <\/code>.<\/p>\nsetStepMonitor\n<p>Sets the step monitor label.<\/p>\nsetDisplayMonitor\n<p>Setter method for the graphical <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code>.<\/p>\nsetTimeMonitor\n<p>Sets the time monitor label.<\/p>\ninitialize\n\nsetStartStopButton\n<p>Sets the play/pause toggle.<\/p>\ngetDisplayMonitor\n<p>Getter method for the graphical <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code>.<\/p>\ngetObservableEffectsList\n<p>Getter method for the <code>List<\/code> of groups of <code> effects <\/code> in the side drawer.<\/p>\n"
                            }]
                          },
                          "effectpropertiescontroller": {
                            "ownKey": "effectpropertiescontroller",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/controller/effectpropertiescontroller",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/controller/effectpropertiescontroller"
                              },
                              "description": "",
                              "title": "EffectPropertiesController",
                              "content": "<p>This class models a JavaFX controller for EffectProperties.fxml. <\/p><p> Using the FXML design it builds the basic components, then using reflection on the effect specified in <code> constructor <\/code> it builds up the other effect-specific controls.<\/p>EFFECT_PROPERTIES_LAYOUT\n<p>Layout path.<\/p>\n<init>\n<p>Default constructor.<\/p>\ninitialize\n\neffectNameProperty\n<p>The JavaFX Property that wraps the <code> effect <\/code> <code> name <\/code>.<\/p>\n"
                            }]
                          },
                          "effectbarcontroller": {
                            "ownKey": "effectbarcontroller",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/controller/effectbarcontroller",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/controller/effectbarcontroller"
                              },
                              "description": "",
                              "title": "EffectBarController",
                              "content": "<p>This class models a JavaFX controller for EffectBar.fxml.<\/p>EFFECT_BAR_LAYOUT\n<p>Layout path.<\/p>\n<init>\n<p>Default constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\naddEffectToGroup\n<p>Add the <code> Effect <\/code> to the ListView controlled by this class and to the <code> it.unibo.alchemist.boundary.gui.effects.EffectGroup <\/code> that the GUI controlled by this claass is representation of.<\/p>\nsetDisplayMonitor\n<p>Setter method for the graphical <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code>.<\/p>\ngroupNameProperty\n<p>The name property of this representation of the group.<\/p>\ninitialize\n\ngetDisplayMonitor\n<p>Getter method for the graphical <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code>.<\/p>\n"
                            }]
                          },
                          "controltypepopovercontroller": {
                            "ownKey": "controltypepopovercontroller",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/controller/controltypepopovercontroller",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/controller/controltypepopovercontroller"
                              },
                              "description": "",
                              "title": "ControlTypePopoverController",
                              "content": "<p>This class models a JavaFX controller for ControlTypePopoverLayout.fxml.<\/p>CONTROL_TYPE_POPOVER_LAYOUT\n<p>Layout path.<\/p>\n<init>\n<p>This class models a JavaFX controller for ControlTypePopoverLayout.fxml.<\/p>\ngetPanButton\n<p>Getter method for the pan button.<\/p>\ninitialize\n\ngetSelectButton\n<p>Getter method for the select button.<\/p>\n"
                            }]
                          },
                          "effectsgroupbarcontroller": {
                            "ownKey": "effectsgroupbarcontroller",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/controller/effectsgroupbarcontroller",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/controller/effectsgroupbarcontroller"
                              },
                              "description": "",
                              "title": "EffectsGroupBarController",
                              "content": "<p>This class models a JavaFX controller for EffectsGroupBar.fxml.<\/p>EFFECT_GROUP_BAR_LAYOUT\n<p>Layout path.<\/p>\n<init>\n<p>Default constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\nsetDisplayMonitor\n<p>Setter method for the graphical <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code>.<\/p>\ninitialize\n\ngetDisplayMonitor\n<p>Getter method for the graphical <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code>.<\/p>\ngetObservableEffectsList\n<p>Getter method and lazy initializer for the internal ObservableList.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/controller",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/controller"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gui.controller",
                          "content": "<p>EffectPropertiesController<\/p>\n<p>This class models a JavaFX controller for EffectProperties.fxml. <\/p><p> Using the FXML design it builds the basic components, then using reflection on the effect specified in <code> constructor <\/code> it builds up the other effect-specific controls.<\/p>\nButtonsBarController\n<p>This class models a JavaFX controller for ButtonsBarLayout.fxml.<\/p>\nEffectBarController\n<p>This class models a JavaFX controller for EffectBar.fxml.<\/p>\nControlTypePopoverController\n<p>This class models a JavaFX controller for ControlTypePopoverLayout.fxml.<\/p>\nEffectsGroupBarController\n<p>This class models a JavaFX controller for EffectsGroupBar.fxml.<\/p>\n"
                        }]
                      },
                      "simcontrolpanel": {
                        "ownKey": "simcontrolpanel",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/simcontrolpanel",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/simcontrolpanel"
                          },
                          "description": "",
                          "title": "SimControlPanel",
                          "content": "<p>This class maintains multiple control panels for controlling a simulation, ensuring that they are coherently updated.<\/p>setSimulation\n<p>setButtonEnabled<\/p>\n<p>addActionListener<\/p>\n<p>See <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/AbstractButton.html#addActionListener(java.awt.event.ActionListener)\">SimControlButton#addActionListener(ActionListener)<\/a><\/code>.<\/p>\nisDown\n<p>setEnabled<\/p>\n<p>getSimulation<\/p>\n<p>shutdown<\/p>\n<p>To be called when this control panel will be no longer useful.<\/p>\ntoString\n<p>createControlPanel<\/p>\n"
                        }]
                      },
                      "abstractmenu": {
                        "ownKey": "abstractmenu",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/abstractmenu",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/abstractmenu"
                          },
                          "description": "",
                          "title": "AbstractMenu",
                          "content": "<p><init><\/p>\n"
                        }]
                      },
                      "filemenu": {
                        "ownKey": "filemenu",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/filemenu",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/filemenu"
                          },
                          "description": "",
                          "title": "FileMenu",
                          "content": "<p><init><\/p>\n<p>Builds the File menu.<\/p>\nactionPerformed\n"
                        }]
                      },
                      "utility": {
                        "ownKey": "utility",
                        "childrenPages": {
                          "svgimageutils": {
                            "ownKey": "svgimageutils",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/utility/svgimageutils",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/utility/svgimageutils"
                              },
                              "description": "",
                              "title": "SVGImageUtils",
                              "content": "<p>Utility class that install that wraps SvgImageLoaderFactory, letting install a SVG loader and return a SVG image.<\/p>DEFAULT_ALCHEMIST_ICON_PATH\n<p>Default Alchemist icon path.<\/p>\ngetSvgImage\n<p>Returns the Image of a SVG image.<\/p>\ngetSvgImage\n<p>Returns the Image of a SVG image.<\/p>\n"
                            }]
                          },
                          "resourceloader": {
                            "ownKey": "resourceloader",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/utility/resourceloader",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/utility/resourceloader"
                              },
                              "description": "",
                              "title": "ResourceLoader",
                              "content": "<p>This utility class provides a working file loading everywhere in the project, and both in source running and jar running.<\/p>getStringRes\n<p>Looks up on the property files and returns the correct String.<\/p>\ngetStringRes\n<p>Looks up on the property files and returns the correct String.<\/p>\n"
                            }]
                          },
                          "dataformatfactory": {
                            "ownKey": "dataformatfactory",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/utility/dataformatfactory",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/utility/dataformatfactory"
                              },
                              "description": "",
                              "title": "DataFormatFactory",
                              "content": "<p>Simple factory that returns the DataFormat for the specified class. <\/p><p> The DataFormat is cached to return only one per class and avoid <code>IllegalArgumentException: DataFormat 'xxx' already exists<\/code>. <\/p><p><\/p>getDataFormat\n<p>Static DataFormat loader for the specified class.<\/p>\ngetDataFormat\n<p>Static DataFormat loader for the specified class.<\/p>\n"
                            }]
                          },
                          "fxresourceloader": {
                            "ownKey": "fxresourceloader",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/utility/fxresourceloader",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/utility/fxresourceloader"
                              },
                              "description": "",
                              "title": "FXResourceLoader",
                              "content": "<p>Utility class for loading resources related to layout.<\/p>getLayout\n<p>Loads a layout FXML file returning the base pane defined by the layout.<\/p>\ngetLayout\n<p>Loads a layout FXML file returning the base pane defined by the layout. It doesn't set any controller.<\/p>\ngetInjectionErrorMessage\n<p>Returns the standard message for a problem in class injection from FXML.<\/p>\ngetWhiteIcon\n<p>Loads an icon from Google Material Design Icons filled in white.<\/p>\ngetColoredIcon\n<p>Loads an icon from Google Material Design Icons.<\/p>\ngetStyle\n<p>Returns the <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/net/URL.html\">java.net.URL<\/a><\/code> to a CSS stylesheet of given name in string form.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/utility",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/utility"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gui.utility",
                          "content": "<p>DataFormatFactory<\/p>\n<p>Simple factory that returns the DataFormat for the specified class. <\/p><p> The DataFormat is cached to return only one per class and avoid <code>IllegalArgumentException: DataFormat 'xxx' already exists<\/code>. <\/p><p><\/p>\nResourceLoader\n<p>This utility class provides a working file loading everywhere in the project, and both in source running and jar running.<\/p>\nFXResourceLoader\n<p>Utility class for loading resources related to layout.<\/p>\nSVGImageUtils\n<p>Utility class that install that wraps SvgImageLoaderFactory, letting install a SVG loader and return a SVG image.<\/p>\n"
                        }]
                      },
                      "simcontrolbutton": {
                        "ownKey": "simcontrolbutton",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/simcontrolbutton",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/simcontrolbutton"
                          },
                          "description": "",
                          "title": "SimControlButton",
                          "content": "<p><init><\/p>\n<p>Builds a new Button.<\/p>\n"
                        }]
                      },
                      "commandqueuebuilder": {
                        "ownKey": "commandqueuebuilder",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/commandqueuebuilder",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/commandqueuebuilder"
                          },
                          "description": "",
                          "title": "CommandQueueBuilder",
                          "content": "<p>Builder class that eases the building of a queue of <code> DrawCommand <\/code>s.<\/p><init>\n<p>Builder class that eases the building of a queue of <code> DrawCommand <\/code>s.<\/p>\nwrapAndAdd\n<p>Wraps a <code>DrawCommand<\/code> around to the queue to be executed on the JavaFX thread.<\/p>\naddCommand\n<p>Adds a <code>DrawCommand<\/code> to the queue to be executed on the JavaFX thread.<\/p>\nbuildCommandQueue\n<p>Builds the queue of commands.<\/p>\ncleanQueue\n<p>Clears the queue.<\/p>\n"
                        }]
                      },
                      "alchemistswingui": {
                        "ownKey": "alchemistswingui",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/alchemistswingui",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/alchemistswingui"
                          },
                          "description": "",
                          "title": "AlchemistSwingUI",
                          "content": "<p>The main frame for the standard Alchemist GUI.<\/p>DEFAULT_ICON_SIZE\n<p>The default icon size.<\/p>\n<init>\n<p>The main frame for the standard Alchemist GUI.<\/p>\nloadScaledImage\n<p>Loads an image and scales it to the default Alchemist's icon size.<\/p>\nloadScaledImage\n<p>Loads an image and scales it to the desired size.<\/p>\n"
                        }]
                      },
                      "numerictextfield": {
                        "ownKey": "numerictextfield",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/numerictextfield",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/numerictextfield"
                          },
                          "description": "",
                          "title": "NumericTextField",
                          "content": "<p><init><\/p>\n<p>createDefaultModel<\/p>\n"
                        }]
                      },
                      "singlerungui": {
                        "ownKey": "singlerungui",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/singlerungui",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/singlerungui"
                          },
                          "description": "",
                          "title": "SingleRunGUI",
                          "content": "<p>Utility class for quickly creating non-reusable graphical interfaces.<\/p>make\n<p>Builds a single-use graphical interface.<\/p>\nmake\n<p>make<\/p>\n<p>Builds a single-use graphical interface.<\/p>\nmake\n<p>Builds a single-use graphical interface.<\/p>\nmake\n<p>Builds a single-use graphical interface.<\/p>\n"
                        }]
                      },
                      "layouts": {
                        "ownKey": "layouts",
                        "childrenPages": {
                          "aflowlayout": {
                            "ownKey": "aflowlayout",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/layouts/aflowlayout",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/layouts/aflowlayout"
                              },
                              "description": "",
                              "title": "AFlowLayout",
                              "content": "<p>CENTER<\/p>\n<p>The horizontal alignment constant that designates centering. Also used to designate center anchoring.<\/p>\nRIGHT\n<p>The horizontal alignment constant that designates right justification.<\/p>\nLEFT\n<p>The horizontal alignment constant that designates left justification.<\/p>\nBOTH\n<p>The horizontal alignment constant that designates stretching the component horizontally.<\/p>\nTOP\n<p>The anchoring constant that designates anchoring to the top of the display area.<\/p>\n<init>\n\ngetComponentOrder\n\nsetComponentOrder\n\ngetComponentsList\n\ngetAlignment\n\nsetAlignment\n\nsetGap\n\ntoString\n\nminimumLayoutSize\n\nlayoutSize\n<p>Calculates the size dimensions for the specified container, given the components it contains.<\/p>\nremoveLayoutComponent\n\nisOrdered\n\nlayoutContainer\n\ngetAnchor\n\npreferredLayoutSize\n\naddLayoutComponent\n\nsetAnchor\n\ngetGap\n\n"
                            }]
                          },
                          "horizontalflowlayout": {
                            "ownKey": "horizontalflowlayout",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/layouts/horizontalflowlayout",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/layouts/horizontalflowlayout"
                              },
                              "description": "",
                              "title": "HorizontalFlowLayout",
                              "content": "<p>A vertical layout manager similar to java.awt.FlowLayout. Like FlowLayout components do not expand to fill available space except when the horizontal getAlignment() is <code>BOTH<\/code> in which case components are stretched horizontally. Unlike FlowLayout, components will not wrap to form another column if there isn't enough space vertically. VerticalLayout can optionally getAnchor() components to the top or bottom of the display area or center them between the top and bottom. Revision date 12th July 2001 Homepage:www.kagi.com/equitysoft - Based on 'FlexLayout' in Java class libraries Vol 2 Chan/Lee Addison-Wesley 1998<\/p><init>\n<p>Constructs an instance of VerticalLayout with a vertical vgap of 5 pixels, horizontal centering and anchored to the top of the display area.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance with horizontal centering, anchored to the top with the specified vgap.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance anchored to the top with the specified hgap and horizontal alignment.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance with the specified vgap, horizontal getAlignment() and anchoring.<\/p>\nlayoutSize\n\nlayoutContainer\n\n"
                            }]
                          },
                          "verticalflowlayout": {
                            "ownKey": "verticalflowlayout",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/layouts/verticalflowlayout",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/layouts/verticalflowlayout"
                              },
                              "description": "",
                              "title": "VerticalFlowLayout",
                              "content": "<p>A vertical layout manager similar to java.awt.FlowLayout. Like FlowLayout components do not expand to fill available space except when the horizontal alignment is <code>BOTH<\/code> in which case components are stretched horizontally. Unlike FlowLayout, components will not wrap to form another column if there isn't enough space vertically. VerticalLayout can optionally anchor components to the top or bottom of the display area or center them between the top and bottom. Revision date 12th July 2001 Homepage:www.kagi.com/equitysoft - Based on 'FlexLayout' in Java class libraries Vol 2 Chan/Lee Addison-Wesley 1998<\/p><init>\n<p>Constructs an instance of VerticalLayout with a vertical vgap of 5 pixels, horizontal centering and anchored to the top of the display area.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance with horizontal centering, anchored to the top with the specified vgap.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance anchored to the top with the specified vgap and horizontal alignment.<\/p>\n<init>\n<p>Constructs a VerticalLayout instance with the specified vgap, horizontal alignment and anchoring.<\/p>\nlayoutSize\n\nlayoutContainer\n<p>Lays out the container.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/layouts",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/layouts"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gui.layouts",
                          "content": "<p>AFlowLayout<\/p>\n<p>HorizontalFlowLayout<\/p>\n<p>A vertical layout manager similar to java.awt.FlowLayout. Like FlowLayout components do not expand to fill available space except when the horizontal getAlignment() is <code>BOTH<\/code> in which case components are stretched horizontally. Unlike FlowLayout, components will not wrap to form another column if there isn't enough space vertically. VerticalLayout can optionally getAnchor() components to the top or bottom of the display area or center them between the top and bottom. Revision date 12th July 2001 Homepage:www.kagi.com/equitysoft - Based on 'FlexLayout' in Java class libraries Vol 2 Chan/Lee Addison-Wesley 1998<\/p>\nVerticalFlowLayout\n<p>A vertical layout manager similar to java.awt.FlowLayout. Like FlowLayout components do not expand to fill available space except when the horizontal alignment is <code>BOTH<\/code> in which case components are stretched horizontally. Unlike FlowLayout, components will not wrap to form another column if there isn't enough space vertically. VerticalLayout can optionally anchor components to the top or bottom of the display area or center them between the top and bottom. Revision date 12th July 2001 Homepage:www.kagi.com/equitysoft - Based on 'FlexLayout' in Java class libraries Vol 2 Chan/Lee Addison-Wesley 1998<\/p>\n"
                        }]
                      },
                      "isolines": {
                        "ownKey": "isolines",
                        "childrenPages": {
                          "isoline": {
                            "ownKey": "isoline",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/isolines/isoline",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isoline"
                              },
                              "description": "",
                              "title": "Isoline",
                              "content": "<p>An isoline (also contour line, isopleth, or isarithm) of a function of two variables is a curve along which the function has a constant value, so that the curve joins points of equal value. Here the curve is approximated as a collection of 2D segments.<\/p>getValue\n<p>getSegments<\/p>\n"
                            }]
                          },
                          "conrecisolinesfinder": {
                            "ownKey": "conrecisolinesfinder",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/isolines/conrecisolinesfinder",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/conrecisolinesfinder"
                              },
                              "description": "",
                              "title": "ConrecIsolinesFinder",
                              "content": "<p>Conrec algorithm adapter to IsolinesFinder interface.<\/p><init>\n\nfindIsolines\n<p>Find the isolines of the given function. You can specify which isolines will be extracted with the levels parameter: for each value included in the collection, the corresponding isoline will be extracted. Isolines will be calculated within a rectangular region defined by two opposite vertexes. This means that the algorithm will not consider the space outside the given region at all.<\/p>\nfindIsolines\n<p>Find the isolines of the given function. This method is equivalent to <code> IsolinesFinder#findIsolines(BidimensionalFunction, Number, Number, Number, Number, Collection) <\/code>, with the difference that it allows you to specify the diagonal of the rectangular region, instead of the four vertexes separately.<\/p>\n"
                            }]
                          },
                          "concreteisolinesfactory": {
                            "ownKey": "concreteisolinesfactory",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/isolines/concreteisolinesfactory",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/concreteisolinesfactory"
                              },
                              "description": "",
                              "title": "ConcreteIsolinesFactory",
                              "content": "<p><init><\/p>\n<p>makeIsolinesFinder<\/p>\n<p>Create an IsolinesFinder object, capable of finding isolines. As different finders could be available - each one extracting isolines in a different way - you can specify which one to use with the algorithm parameter.<\/p>\nmakeIsoline\n<p>Create an Isoline.<\/p>\nmakeSegment\n<p>Create a 2D segment.<\/p>\n"
                            }]
                          },
                          "isolinesfinder": {
                            "ownKey": "isolinesfinder",
                            "childrenPages": {"bidimensionalfunction": {
                              "ownKey": "bidimensionalfunction",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/gui/isolines/isolinesfinder/bidimensionalfunction",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isolinesfinder/bidimensionalfunction"
                                },
                                "description": "",
                                "title": "BidimensionalFunction",
                                "content": "<p>Defines a basic bidimensional function.<\/p>apply\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/isolines/isolinesfinder",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isolinesfinder"
                              },
                              "description": "",
                              "title": "IsolinesFinder",
                              "content": "<p>Defines an object capable of finding isolines (i.e. an isolines finding algorithm).<\/p>findIsolines\n<p>Find the isolines of the given function. You can specify which isolines will be extracted with the levels parameter: for each value included in the collection, the corresponding isoline will be extracted. Isolines will be calculated within a rectangular region defined by two opposite vertexes. This means that the algorithm will not consider the space outside the given region at all.<\/p>\nfindIsolines\n<p>Find the isolines of the given function. This method is equivalent to <code> IsolinesFinder#findIsolines(BidimensionalFunction, Number, Number, Number, Number, Collection) <\/code>, with the difference that it allows you to specify the diagonal of the rectangular region, instead of the four vertexes separately.<\/p>\n"
                            }]
                          },
                          "segment2d": {
                            "ownKey": "segment2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/isolines/segment2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/segment2d"
                              },
                              "description": "",
                              "title": "Segment2D",
                              "content": "<p>A basic 2-dimensional segment.<\/p>getX2\n<p>getX1<\/p>\n<p>getY2<\/p>\n<p>getY1<\/p>\n"
                            }]
                          },
                          "isolinesfactory": {
                            "ownKey": "isolinesfactory",
                            "childrenPages": {"isolinefinders": {
                              "ownKey": "isolinefinders",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/gui/isolines/isolinesfactory/isolinefinders",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isolinesfactory/isolinefinders"
                                },
                                "description": "",
                                "title": "IsolineFinders",
                                "content": "<p>Enum containing all the available isolines finding algorithms.<\/p>CONREC\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/isolines/isolinesfactory",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines/isolinesfactory"
                              },
                              "description": "",
                              "title": "IsolinesFactory",
                              "content": "<p>A factory for the creation of the basic astractions contained in this package.<\/p>makeIsolinesFinder\n<p>Create an IsolinesFinder object, capable of finding isolines. As different finders could be available - each one extracting isolines in a different way - you can specify which one to use with the algorithm parameter.<\/p>\nmakeIsoline\n<p>Create an Isoline.<\/p>\nmakeSegment\n<p>Create a 2D segment.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/isolines",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/isolines"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gui.isolines",
                          "content": "<p>Isoline<\/p>\n<p>An isoline (also contour line, isopleth, or isarithm) of a function of two variables is a curve along which the function has a constant value, so that the curve joins points of equal value. Here the curve is approximated as a collection of 2D segments.<\/p>\nConrecIsolinesFinder\n<p>Conrec algorithm adapter to IsolinesFinder interface.<\/p>\nConcreteIsolinesFactory\n<p>IsolinesFinder<\/p>\n<p>Defines an object capable of finding isolines (i.e. an isolines finding algorithm).<\/p>\nSegment2D\n<p>A basic 2-dimensional segment.<\/p>\nIsolinesFactory\n<p>A factory for the creation of the basic astractions contained in this package.<\/p>\n"
                        }]
                      },
                      "effects": {
                        "ownKey": "effects",
                        "childrenPages": {
                          "functiondrawer": {
                            "ownKey": "functiondrawer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/functiondrawer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/functiondrawer"
                              },
                              "description": "",
                              "title": "FunctionDrawer",
                              "content": "<p>Defines an object capable of drawing functions that take a Position of type P as input and give a Number as output.<\/p>drawFunction\n<p>Draw the provided function.<\/p>\n"
                            }]
                          },
                          "effectserializationfactory": {
                            "ownKey": "effectserializationfactory",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/effectserializationfactory",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectserializationfactory"
                              },
                              "description": "",
                              "title": "EffectSerializationFactory",
                              "content": "<p>Serialize Alchemist effects from/to file in human readable format.<\/p>effectsFromFile\n<p>Get a list of effects from the specified file. Try to deserialize a JSON file at first. If this operation is not successful (for the sake of backward compatibility) try to deserialize a binary file.<\/p>\neffectToFile\n<p>Write the given effect to the destination file.<\/p>\neffectsToFile\n<p>Write the given effects to the destination file.<\/p>\n"
                            }]
                          },
                          "drawdot": {
                            "ownKey": "drawdot",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawdot",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawdot"
                              },
                              "description": "",
                              "title": "DrawDot",
                              "content": "<p>Simple effect that draws a Color#BLACK dot for each <code> it.unibo.alchemist.model.interfaces.Node <\/code>. <\/p><p> It's possible to set the size of the dots.<\/p><init>\n<p>Empty constructor. <\/p><p> Name is set to default name. <\/p><p> Default visibility is true.<\/p>\n<init>\n<p>Default constructor. <\/p><p> Default visibility is true.<\/p>\nhashCode\n\nconsumeData\n<p>The method is called to consume the data extrapolated from <code> Environment <\/code> by <code> #storeData(Environment) <\/code> method.<\/p>\nsizeProperty\n<p>The size of the dots representing each <code> it.unibo.alchemist.model.interfaces.Node <\/code> in the <code> Environment <\/code> specified when drawing.<\/p>\nequals\n\ngetColor\n<p>Gets the color of the dots. <\/p><p> Default color should be Color#BLACK.<\/p>\ngetSize\n<p>Gets the value of the property <code>sizeProperty<\/code>.<\/p>\nsetSize\n<p>Sets the value of the property <code>sizeProperty<\/code>.<\/p>\nsetColor\n<p>Sets the color of the dots.<\/p>\nstoreData\n<p>The method extracts <code> it.unibo.alchemist.model.interfaces.Position <\/code>s of each <code> it.unibo.alchemist.model.interfaces.Node <\/code> from the <code>Environment<\/code>.<\/p>\n"
                            }]
                          },
                          "drawlinks": {
                            "ownKey": "drawlinks",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlinks",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlinks"
                              },
                              "description": "",
                              "title": "DrawLinks",
                              "content": "<p>Simple effect that draws a Color#BLACK line for each <code> it.unibo.alchemist.model.interfaces.Node <\/code> in a <code> it.unibo.alchemist.model.interfaces.Neighborhood <\/code>. <\/p><p> It's possible to set the size of the dots.<\/p><init>\n<p>Empty constructor. <\/p><p> Name is set to default name. <\/p><p> Default visibility is true.<\/p>\n<init>\n<p>Default constructor. <\/p><p> Default visibility is true.<\/p>\nhashCode\n\nconsumeData\n<p>The method is called to consume the data extrapolated from <code> Environment <\/code> by <code> #storeData(Environment) <\/code> method.<\/p>\nsizeProperty\n<p>The size of the dots representing each <code> it.unibo.alchemist.model.interfaces.Node <\/code> in the <code> Environment <\/code> specified when drawing.<\/p>\nequals\n\ngetColor\n<p>Gets the color of the dots. <\/p><p> Default color should be Color#BLACK.<\/p>\ngetSize\n<p>Gets the value of the property <code>sizeProperty<\/code>.<\/p>\nsetSize\n<p>Sets the value of the property <code>sizeProperty<\/code>.<\/p>\nsetColor\n<p>Sets the color of the dots.<\/p>\nstoreData\n<p>The method extrapolates data from environment. <\/p><p> It is strongly recommended not to keep any reference to <code> Environment <\/code>- or <code> it.unibo.alchemist.core.interfaces.Simulation <\/code>-specific objects.<\/p>\n"
                            }]
                          },
                          "jeffectrepresentation": {
                            "ownKey": "jeffectrepresentation",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/jeffectrepresentation",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/jeffectrepresentation"
                              },
                              "description": "",
                              "title": "JEffectRepresentation",
                              "content": "<p>Representation of an <code> Effect <\/code>. Useful to let the user interact with an effect (create/edit). Effects are relative to a <code> GraphicalOutputMonitor <\/code> instance.<\/p><init>\n<p>Creates a new representation for the effect and monitor in input.<\/p>\nremoveItemListener\n\naddItemListener\n\ngetEffect\n<p>Gets the represented effects.<\/p>\nisSelected\n<p>Check if the representation is selected.<\/p>\ngetSelectedObjects\n\nsetEnabled\n\nsetSelected\n<p>(Un)selects this representation.<\/p>\n"
                            }]
                          },
                          "effectbuilderfx": {
                            "ownKey": "effectbuilderfx",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/effectbuilderfx",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectbuilderfx"
                              },
                              "description": "",
                              "title": "EffectBuilderFX",
                              "content": "<p>Class that lets the user choose the effect from all it can find.<\/p><init>\n<p>Default constructor.<\/p>\nchooseAndLoad\n<p>Asks the user to chose an effect and returns a new instance of the desired class. <\/p><p> Call this method is the same as calling <code> EffectBuilderFX#getResult() <\/code> and <code> #chooseAndLoad() <\/code>.<\/p>\ngetResult\n<p>Asks the user to chose an effect and returns the related Class.<\/p>\ngetFoundEffects\n<p>Gets an unmodifiable view of the effects found during construction.<\/p>\ninstantiateEffect\n<p>Instantiates the desired effect.<\/p>\n"
                            }]
                          },
                          "drawonce": {
                            "ownKey": "drawonce",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawonce",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawonce"
                              },
                              "description": "",
                              "title": "DrawOnce",
                              "content": "<p>Effects are normally applied for each node, this is a base class for effects that do not need to be redrawn for each node. In other words, this effect will be applied for a single node instead of redrawing for all of them.<\/p><init>\n<p>Effects are normally applied for each node, this is a base class for effects that do not need to be redrawn for each node. In other words, this effect will be applied for a single node instead of redrawing for all of them.<\/p>\napply\n<p>Applies the effect.<\/p>\ndraw\n<p>Draws the effect, this method is called only for a single a node of the environment.<\/p>\ngetMarkerNodeID\n\n"
                            }]
                          },
                          "effectstack": {
                            "ownKey": "effectstack",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/effectstack",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectstack"
                              },
                              "description": "",
                              "title": "EffectStack",
                              "content": "<p>The class models a group of effects, stored as a stack. It can manage priority of visualization and visibility of each effect inside it.<\/p>size\n<p><init><\/p>\n<p>Constructor that creates an empty stack of effects with default name.<\/p>\n<init>\n<p>Default constructor. It creates an empty stack of effects with a given name.<\/p>\ncontains\n\naddAll\n\nclear\n\nelement\n\ngetName\n\npush\n<p>Puts the effects in the group, giving it the maximum priority. <\/p><p> Acts nearly the same than using <code> #add(EffectFX) <\/code> or <code> #offer(EffectFX) <\/code>.<\/p>\nsearch\n\ncomputeDrawCommands\n\nremoveAll\n\nadd\n\ngetVisibilityOf\n\noffer\n\niterator\n\npeek\n<p>Returns the effect with maximum priority, without removing it. <\/p><p> See <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/util/Queue.html#peek()\">Queue#peek()<\/a><\/code>.<\/p>\nsetVisibilityOf\n\ntoArray\n\ntoArray\n\nhashCode\n\nequals\n\nisEmpty\n\nremove\n\nremove\n\ncontainsAll\n\nchangePriority\n\nsetName\n\nretainAll\n\nisVisible\n\npop\n<p>Removes the effect with maximum priority and returns it. <\/p><p> Acts nearly the same than using <code> #remove() <\/code> or <code> #poll() <\/code>.<\/p>\nsetVisibility\n\npoll\n\ngetTypeAdapter\n<p>Returns a com.google.gson.JsonSerializer and com.google.gson.JsonDeserializer combo class to be used as a <code>TypeAdapter<\/code> for this <code>EffectStack<\/code>.<\/p>\n"
                            }]
                          },
                          "bidimensionalgaussianlayersmapper": {
                            "ownKey": "bidimensionalgaussianlayersmapper",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/bidimensionalgaussianlayersmapper",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/bidimensionalgaussianlayersmapper"
                              },
                              "description": "",
                              "title": "BidimensionalGaussianLayersMapper",
                              "content": "<p>Maps  BidimensionalGaussianLayer s, it ignores any other layer.<\/p><p>This class also manages to infer optimal min and max layer values automatically\nso the user does not have to set them by hand.<\/p><init>\n<p>Maps  BidimensionalGaussianLayer s, it ignores any other layer.<\/p><p>This class also manages to infer optimal min and max layer values automatically\nso the user does not have to set them by hand.<\/p>\nprepare\n<p>Prepare the mapping (if necessary).<\/p>\nmap\n<p>Effectively map the given layers, layers may be filtered too if the mapper is only able\nto map certain types of layers.<\/p>\nmap\n<p>see  LayerToFunctionMapper.map .<\/p>\nBidimensionalGaussianLayersMapper\n<p>Maps  BidimensionalGaussianLayer s, it ignores any other layer.<\/p><p>This class also manages to infer optimal min and max layer values automatically\nso the user does not have to set them by hand.<\/p>\n"
                            }]
                          },
                          "drawcoloreddot": {
                            "ownKey": "drawcoloreddot",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawcoloreddot",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawcoloreddot"
                              },
                              "description": "",
                              "title": "DrawColoredDot",
                              "content": "<p>Simple effect that draws a colored dot for each <code> it.unibo.alchemist.model.interfaces.Node <\/code>. <\/p><p> It's possible to set the size and the color of the dots.<\/p><init>\n<p>Empty constructor. <\/p><p> Name is set to default name. <\/p><p> Default visibility is true.<\/p>\n<init>\n<p>Default constructor. <\/p><p> Default visibility is true.<\/p>\ngetRed\n<p>Gets the value of <code>redProperty<\/code>.<\/p>\ngetGreen\n<p>Gets the value of <code>greenProperty<\/code>.<\/p>\ngetBlue\n<p>Gets the value of <code>blueProperty<\/code>.<\/p>\nsetGreen\n<p>Sets the value of <code>greenProperty<\/code>.<\/p>\ngetAlpha\n<p>Gets the value of <code>alphaProperty<\/code>.<\/p>\nsetAlpha\n<p>Sets the value of <code>alphaProperty<\/code>.<\/p>\ngreenProperty\n<p>The green channel of the color of the dots representing each <code> it.unibo.alchemist.model.interfaces.Node <\/code> in the <code> it.unibo.alchemist.model.interfaces.Environment <\/code> specified when drawing.<\/p>\nredProperty\n<p>The red channel of the color of the dots representing each <code> it.unibo.alchemist.model.interfaces.Node <\/code> in the <code> it.unibo.alchemist.model.interfaces.Environment <\/code> specified when drawing.<\/p>\nsetRed\n<p>Sets the value of <code>redProperty<\/code>.<\/p>\nhashCode\n\nequals\n\ngetColor\n\nsetBlue\n<p>Sets the value of <code>blueProperty<\/code>.<\/p>\nblueProperty\n<p>The blue channel of the color of the dots representing each <code> it.unibo.alchemist.model.interfaces.Node <\/code> in the <code> it.unibo.alchemist.model.interfaces.Environment <\/code> specified when drawing.<\/p>\nalphaProperty\n<p>The alpha channel of the color of the dots representing each <code> it.unibo.alchemist.model.interfaces.Node <\/code> in the <code> it.unibo.alchemist.model.interfaces.Environment <\/code> specified when drawing.<\/p>\nsetColor\n<p>Sets the color of the dots. <\/p><p> Updates also all color-related properties.<\/p>\nconvertColor\n<p>Convert a Color to an <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Color.html\">AWT color<\/a><\/code>.<\/p>\n"
                            }]
                          },
                          "drawshape": {
                            "ownKey": "drawshape",
                            "childrenPages": {"mode": {
                              "ownKey": "mode",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/gui/effects/drawshape/mode",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawshape/mode"
                                },
                                "description": "",
                                "title": "Mode",
                                "content": "<p>DRAW_ELLIPSE<\/p>\n<p>DRAW_RECTANGLE<\/p>\n<p>FILL_ELLIPSE<\/p>\n<p>FILL_RECTANGLE<\/p>\n<p>toString<\/p>\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawshape",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawshape"
                              },
                              "description": "",
                              "title": "DrawShape",
                              "content": "<p><init><\/p>\n<p>Builds a new <code> DrawShape <\/code> effect.<\/p>\ngetPropoom\n<p>getRed<\/p>\n<p>setWritingPropertyValue<\/p>\n<p>getGreen<\/p>\n<p>setMolString<\/p>\n<p>getScaleFactor<\/p>\n<p>getBlue<\/p>\n<p>getSize<\/p>\n<p>isMolFilter<\/p>\n<p>getProperty<\/p>\n<p>setScaleFactor<\/p>\n<p>setMaxprop<\/p>\n<p>setMolPropertyFilter<\/p>\n<p>isMolPropertyFilter<\/p>\n<p>setIncarnation<\/p>\n<p>getMaxprop<\/p>\n<p>getMolecule<\/p>\n<p>getIncarnation<\/p>\n<p>getMode<\/p>\n<p>setMinprop<\/p>\n<p>setGreen<\/p>\n<p>getAlpha<\/p>\n<p>getMolString<\/p>\n<p>isReverse<\/p>\n<p>setAlpha<\/p>\n<p>getMinprop<\/p>\n<p>setPropoom<\/p>\n<p>setRed<\/p>\n<p>getColorSummary<\/p>\n<p>setMode<\/p>\n<p>setProperty<\/p>\n<p>setBlue<\/p>\n<p>setSize<\/p>\n<p>setReverse<\/p>\n<p>apply<\/p>\n<p>getColorChannel<\/p>\n<p>setC<\/p>\n<p>isWritingPropertyValue<\/p>\n<p>setMolFilter<\/p>\n"
                            }]
                          },
                          "drawnavigationgraph": {
                            "ownKey": "drawnavigationgraph",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawnavigationgraph",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawnavigationgraph"
                              },
                              "description": "",
                              "title": "DrawNavigationGraph",
                              "content": "<p>Draws the navigation graph of an <code> ImageEnvironmentWithGraph <\/code>.<\/p>MAX_COLOUR_VALUE\n<p>INITIAL_ALPHA_DIVIDER<\/p>\n<p>L<\/p>\n<p><init><\/p>\n<p>Draws the navigation graph of an <code> ImageEnvironmentWithGraph <\/code>.<\/p>\ngetColorSummary\n<p>getRed<\/p>\n<p>getGreen<\/p>\n<p>getBlue<\/p>\n<p>setBlue<\/p>\n<p>draw<\/p>\n<p>setGreen<\/p>\n<p>getAlpha<\/p>\n<p>setAlpha<\/p>\n<p>setRed<\/p>\n"
                            }]
                          },
                          "json": {
                            "ownKey": "json",
                            "childrenPages": {
                              "effectgroupadapter": {
                                "ownKey": "effectgroupadapter",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/effects/json/effectgroupadapter",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/json/effectgroupadapter"
                                  },
                                  "description": "",
                                  "title": "EffectGroupAdapter",
                                  "content": "<p>This class should be registered in a com.google.gson.GsonBuilder to serialize and deserialize a <code> EffectGroup <\/code> compatible class.<\/p><init>\n<p>This class should be registered in a com.google.gson.GsonBuilder to serialize and deserialize a <code> EffectGroup <\/code> compatible class.<\/p>\ndeserialize\n\nserialize\n\n"
                                }]
                              },
                              "colorserializationadapter": {
                                "ownKey": "colorserializationadapter",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/effects/json/colorserializationadapter",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/json/colorserializationadapter"
                                  },
                                  "description": "",
                                  "title": "ColorSerializationAdapter",
                                  "content": "<p>This class should be registered in a com.google.gson.GsonBuilder to serialize and deserialize JavaFX Color objects.<\/p><init>\n<p>This class should be registered in a com.google.gson.GsonBuilder to serialize and deserialize JavaFX Color objects.<\/p>\ndeserialize\n\nserialize\n\nwriteColor\n<p>Generalized way to serialize JavaFX Color on a stream.<\/p>\nreadColor\n<p>Generalized way to deserialize a JavaFX Color from a stream.<\/p>\n"
                                }]
                              },
                              "effectserializer": {
                                "ownKey": "effectserializer",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/effects/json/effectserializer",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/json/effectserializer"
                                  },
                                  "description": "",
                                  "title": "EffectSerializer",
                                  "content": "<p>Serialize Alchemist <code> effect groups <\/code> from/to file in human readable format (JSON). <\/p><p> This class can be considered a clean boundary between Google Gson library and the needs of this project, providing methods to serialize and deserialize from JSON files instances of EffectGroup. <\/p><p> The Gson object used for serialization is statically updated at runtime with all available <code>TypeAdapters<\/code> and <code>RuntimeTypeAdapter<\/code>.<\/p>DEFAULT_EXTENSION\n<p>Default extension of serialized groups of effects.<\/p>\nDEFAULT_CHARSET\n<p>Default charset of serialized groups of effects.<\/p>\neffectFromFile\n<p>Get an <code> Effect <\/code> from the specified file. It tries to deserialize a JSON file.<\/p>\neffectFromResources\n<p>Get an <code> Effect <\/code> from the specified resource file. It tries to deserialize a JSON file.<\/p>\neffectToFile\n<p>Write the given <code> EffectFX <\/code> to the destination file.<\/p>\neffectsFromFile\n<p>Get an <code> EffectGroup <\/code> from the specified file. It tries to deserialize a JSON file.<\/p>\neffectsFromResources\n<p>Get an <code> EffectGroup <\/code> from the specified resource file. It tries to deserialize a JSON file.<\/p>\neffectsToFile\n<p>Write the given <code> EffectGroup <\/code> to the destination file.<\/p>\neffectGroupsFromFile\n<p>Get a list of <code> EffectGroup <\/code> from the specified file. It tries to deserialize a JSON file.<\/p>\neffectGroupsFromResources\n<p>Get a list of <code> EffectGroup <\/code> from the specified resource file. It tries to deserialize a JSON file.<\/p>\neffectGroupsToFile\n<p>Write the given list of <code> EffectGroup <\/code>s to the destination file.<\/p>\ngetGSON\n<p>Returns the internal static instance of Gson object used for serialization. It includes all needed com.google.gson.TypeAdapters for <code> Effects <\/code> and Property serialization. <\/p><p> Useful for serialize related objects not directly managed by this class.<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/json",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/json"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.boundary.gui.effects.json",
                              "content": "<p>EffectSerializer<\/p>\n<p>Serialize Alchemist <code> effect groups <\/code> from/to file in human readable format (JSON). <\/p><p> This class can be considered a clean boundary between Google Gson library and the needs of this project, providing methods to serialize and deserialize from JSON files instances of EffectGroup. <\/p><p> The Gson object used for serialization is statically updated at runtime with all available <code>TypeAdapters<\/code> and <code>RuntimeTypeAdapter<\/code>.<\/p>\nColorSerializationAdapter\n<p>This class should be registered in a com.google.gson.GsonBuilder to serialize and deserialize JavaFX Color objects.<\/p>\nEffectGroupAdapter\n<p>This class should be registered in a com.google.gson.GsonBuilder to serialize and deserialize a <code> EffectGroup <\/code> compatible class.<\/p>\n"
                            }]
                          },
                          "drawbidimensionalgaussianlayersisolines": {
                            "ownKey": "drawbidimensionalgaussianlayersisolines",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawbidimensionalgaussianlayersisolines",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawbidimensionalgaussianlayersisolines"
                              },
                              "description": "",
                              "title": "DrawBidimensionalGaussianLayersIsolines",
                              "content": "<p>Draw isolines for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s. It ignores any other layer.<\/p><init>\n\ncreateMapper\n\n"
                            }]
                          },
                          "drawlayers": {
                            "ownKey": "drawlayers",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayers",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayers"
                              },
                              "description": "",
                              "title": "DrawLayers",
                              "content": "<p>Basic interface for every effect that draws something related to <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s. This class is a workaround: the <code> Effect <\/code> abstraction is meant to add effects to nodes, not to draw layers. At present, is the finest workaround available. This workaround has the following disadvantages: - when there aren't nodes visible in the gui the effects are not used at all, so this effect won't work.<\/p>drawLayers\n<p>Effectively draw the layers.<\/p>\n"
                            }]
                          },
                          "drawpedestrianpath": {
                            "ownKey": "drawpedestrianpath",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawpedestrianpath",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawpedestrianpath"
                              },
                              "description": "",
                              "title": "DrawPedestrianPath",
                              "content": "<p>Draws the paths took by pedestrians.<\/p>MAX_COLOUR_VALUE\n<p>INITIAL_ALPHA_DIVIDER<\/p>\n<p>L<\/p>\n<p>DIAMETER<\/p>\n<p>The paths will be drawn as circles of this diameter.<\/p>\n<init>\n<p>Draws the paths took by pedestrians.<\/p>\ngetColorSummary\n\ngetRed\n\nisToBeDrawn\n\ngetGreen\n\ngetBlue\n\nsetBlue\n\ndraw\n\nsetToBeDrawn\n\nsetGreen\n\ngetAlpha\n\nsetAlpha\n\nsetRed\n\n"
                            }]
                          },
                          "drawlayersgradient": {
                            "ownKey": "drawlayersgradient",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayersgradient",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayersgradient"
                              },
                              "description": "",
                              "title": "DrawLayersGradient",
                              "content": "<p>Draw layers values as background in the gui. The higher is the layer concentration in a point, the higher is the alpha channel for the background in that point. The user must specify: - the number of samples for each side, basically more samples correspond to a smoother and more detailed background - the min layer value - the max layer value The purpose and structure of this class is similar to <code> DrawLayersIsolines <\/code>.<\/p><init>\n<p>Draw layers values as background in the gui. The higher is the layer concentration in a point, the higher is the alpha channel for the background in that point. The user must specify: - the number of samples for each side, basically more samples correspond to a smoother and more detailed background - the min layer value - the max layer value The purpose and structure of this class is similar to <code> DrawLayersIsolines <\/code>.<\/p>\nsetSamples\n\ncreateMapper\n\ngetSamples\n\ndrawFunction\n<p>Draw the provided function.<\/p>\nmap\n<p>Map x from [xmin, xmax] to [ymin, ymax].<\/p>\n"
                            }]
                          },
                          "drawlayersvalues": {
                            "ownKey": "drawlayersvalues",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayersvalues",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayersvalues"
                              },
                              "description": "",
                              "title": "DrawLayersValues",
                              "content": "<p>This is a basic class for all the effects meant to draw <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s values in different points of the view. One effect could draw isolines, whereas another could represent different values with a gradient. Normally, drawing a layer's values only makes sense for \"numerical\" layers (i.e. layers for which the values are <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Number.html\">Number<\/a><\/code>s). However, one could have a \"non-numerical\" layer whose <code> it.unibo.alchemist.model.interfaces.Layer#getValue(it.unibo.alchemist.model.interfaces.Position) <\/code> return type is an object from which a value can be extracted somehow. In the end, drawing a layer's values makes sense as long as there is a way to map those values to Numbers. More generally, a <code> LayerToFunctionMapper <\/code> is needed. As this class is not aware of which mapper to use, this responsibility is left to subclasses. When drawing layers values, it can be important to know the min and max layer values that will be drawn. This class declares gui controls that allow the user to specify such boundaries.<\/p><init>\n<p>This is a basic class for all the effects meant to draw <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s values in different points of the view. One effect could draw isolines, whereas another could represent different values with a gradient. Normally, drawing a layer's values only makes sense for \"numerical\" layers (i.e. layers for which the values are <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Number.html\">Number<\/a><\/code>s). However, one could have a \"non-numerical\" layer whose <code> it.unibo.alchemist.model.interfaces.Layer#getValue(it.unibo.alchemist.model.interfaces.Position) <\/code> return type is an object from which a value can be extracted somehow. In the end, drawing a layer's values makes sense as long as there is a way to map those values to Numbers. More generally, a <code> LayerToFunctionMapper <\/code> is needed. As this class is not aware of which mapper to use, this responsibility is left to subclasses. When drawing layers values, it can be important to know the min and max layer values that will be drawn. This class declares gui controls that allow the user to specify such boundaries.<\/p>\ngetMinLayerValueCached\n\ngetMaxLayerValueDouble\n\ndrawLayers\n<p>Effectively draw the layers.<\/p>\nsetMaxLayerValueCached\n\ncreateMapper\n\ngetMaxLayerValueCached\n\nminOrMaxLayerValuesNeedsToBeUpdated\n\nsetMaxLayerValueDouble\n\nsetMinLayerValueCached\n\ndrawFunction\n<p>Draw the provided function.<\/p>\nsetMinLayerValueDouble\n\nupdateMinAndMaxLayerValues\n<p>Update min and max layer values.<\/p>\ngetMinLayerValue\n\ngetMinLayerValueDouble\n\nsetMinLayerValue\n\ngetMaxLayerValue\n\nsetMaxLayerValue\n\n"
                            }]
                          },
                          "abstracteffect": {
                            "ownKey": "abstracteffect",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/abstracteffect",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/abstracteffect"
                              },
                              "description": "",
                              "title": "AbstractEffect",
                              "content": "<p>It models an abstract implementation of the <code> effect <\/code> interface, implementing default name and visibility properties. <\/p><p> The effect behavior can be implemented via <code> #computeDrawCommands(Environment) <\/code> template method.<\/p>DEFAULT_NAME\n<p>Default name of the effect.<\/p>\nDEFAULT_VISIBILITY\n<p>Default visibility of an effect.<\/p>\n<init>\n<p>No parameters constructor. <\/p><p> Default visibility is {@value DEFAULT_VISIBILITY}.<\/p>\n<init>\n<p>Constructor that lets set the name of the effect. <\/p><p> Default visibility is {@value DEFAULT_VISIBILITY}.<\/p>\n<init>\n<p>Constructor that lets set the visibility of the effect.<\/p>\n<init>\n<p>Default contructor.<\/p>\ncomputeDrawCommands\n<p>Computes a queue of commands to Draw something.<\/p>\nhashCode\n\nsetName\n\nconsumeData\n<p>The method is called to consume the data extrapolated from <code> Environment <\/code> by <code> #storeData(Environment) <\/code> method.<\/p>\nequals\n\ngetName\n\nisVisible\n\nstoreData\n<p>The method extrapolates data from environment. <\/p><p> It is strongly recommended not to keep any reference to <code> Environment <\/code>- or <code> it.unibo.alchemist.core.interfaces.Simulation <\/code>-specific objects.<\/p>\nsetVisibility\n\ncheckEqualsProperties\n<p>The method is useful to implement comparisons of properties in <code> #equals(Object) <\/code> method.<\/p>\ncheckBasicProperties\n<p>The method compares two <code> Effects <\/code> to check basic properties of visibility, name and class.<\/p>\n"
                            }]
                          },
                          "effectfactory": {
                            "ownKey": "effectfactory",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/effectfactory",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectfactory"
                              },
                              "description": "",
                              "title": "EffectFactory",
                              "content": "<p>buildDefaultEffect<\/p>\n<p>buildEffect<\/p>\n<p>Given a class, builds the corresponding effect.<\/p>\n"
                            }]
                          },
                          "layertofunctionmapper": {
                            "ownKey": "layertofunctionmapper",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/layertofunctionmapper",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/layertofunctionmapper"
                              },
                              "description": "",
                              "title": "LayerToFunctionMapper",
                              "content": "<p>Defines an object capable of mapping a Layer<T, P> to a Function<* in P, * out Number>.<\/p>prepare\n<p>Prepare the mapping (if necessary).<\/p>\nmap\n<p>Effectively map the given layers, layers may be filtered too if the mapper is only able\nto map certain types of layers.<\/p>\nmap\n<p>see  LayerToFunctionMapper.map .<\/p>\n"
                            }]
                          },
                          "abstractdrawlayers": {
                            "ownKey": "abstractdrawlayers",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/abstractdrawlayers",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/abstractdrawlayers"
                              },
                              "description": "",
                              "title": "AbstractDrawLayers",
                              "content": "<p>This class collects the following responsibilities: - it manages to draw layers only when necessary (as the apply method will be called for every node). Every subclass must only define the <code> AbstractDrawLayers#drawLayers(Collection, Environment, Graphics2D, Wormhole2D) <\/code> method, which is guaranteed to be called only when necessary. - it declares gui controls for the selection of the color to use - it declares gui controls for the selection of a filter, used to filter the layers to draw. In particular, it allows the user to specify a molecule, meaning that only the layer containing such molecule will be drawn (otherwise the effect is applied to all layers)<\/p>MAX_COLOUR_VALUE\n<p>INITIAL_ALPHA_DIVIDER<\/p>\n<p>L<\/p>\n<p><init><\/p>\n<p>This class collects the following responsibilities: - it manages to draw layers only when necessary (as the apply method will be called for every node). Every subclass must only define the <code> AbstractDrawLayers#drawLayers(Collection, Environment, Graphics2D, Wormhole2D) <\/code> method, which is guaranteed to be called only when necessary. - it declares gui controls for the selection of the color to use - it declares gui controls for the selection of a filter, used to filter the layers to draw. In particular, it allows the user to specify a molecule, meaning that only the layer containing such molecule will be drawn (otherwise the effect is applied to all layers)<\/p>\ngetColorSummary\n<p>getRed<\/p>\n<p>setLayerFilter<\/p>\n<p>setMolString<\/p>\n<p>getGreen<\/p>\n<p>getBlue<\/p>\n<p>drawLayers<\/p>\n<p>Effectively draw the layers.<\/p>\nsetBlue\n<p>draw<\/p>\n<p>Draws the effect, this method is called only for a single a node of the environment.<\/p>\ngetColorCache\n<p>getMolecule<\/p>\n<p>setColorCache<\/p>\n<p>setGreen<\/p>\n<p>getMolString<\/p>\n<p>getAlpha<\/p>\n<p>isLayerFilter<\/p>\n<p>setAlpha<\/p>\n<p>setRed<\/p>\n"
                            }]
                          },
                          "drawlayersisolines": {
                            "ownKey": "drawlayersisolines",
                            "childrenPages": {"distribution": {
                              "ownKey": "distribution",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayersisolines/distribution",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayersisolines/distribution"
                                },
                                "description": "",
                                "title": "Distribution",
                                "content": "<p>Distributions describing how values within an interval should be spaced.<\/p>LINEAR\n<p>LOGARITHMIC<\/p>\n<p>toString<\/p>\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawlayersisolines",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawlayersisolines"
                              },
                              "description": "",
                              "title": "DrawLayersIsolines",
                              "content": "<p>Draw layers isolines. The user must specify: - the number of isolines to draw - the min layer value - the max layer value - the distribution, used to space isoline values between min and max This class defines the DrawLayersIsolines#drawFunction(Function, Environment, Graphics2D, Wormhole2D) method, which is capable of drawing a layer's isolines given a function. The only responsibility left to subclasses is to provide a <code> LayerToFunctionMapper <\/code>.<\/p><init>\n<p>Every class extending this one should call this constructor.<\/p>\ngetDrawValues\n\ngetNumberOfIsolines\n\nsetDistribution\n\ngetIsolinesFinder\n\nsetDrawValues\n\ndrawFunction\n<p>Draw the provided function.<\/p>\ngetDistribution\n\nsetNumberOfIsolines\n\nlogspace\n<p>generates n logarithmically-spaced points between d1 and d2 using the provided base.<\/p>\nlinspace\n<p>generates n linearly-spaced points between d1 and d2.<\/p>\n"
                            }]
                          },
                          "drawbidimensionalgaussianlayersgradient": {
                            "ownKey": "drawbidimensionalgaussianlayersgradient",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawbidimensionalgaussianlayersgradient",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawbidimensionalgaussianlayersgradient"
                              },
                              "description": "",
                              "title": "DrawBidimensionalGaussianLayersGradient",
                              "content": "<p>Draw a gradient in the background of the gui for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s values. It ignores any other layer.<\/p><init>\n<p>Draw a gradient in the background of the gui for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s values. It ignores any other layer.<\/p>\ncreateMapper\n\n"
                            }]
                          },
                          "effect": {
                            "ownKey": "effect",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/effect",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effect"
                              },
                              "description": "",
                              "title": "Effect",
                              "content": "<p>getColorSummary<\/p>\n<p>apply<\/p>\n<p>Applies the effect.<\/p>\napply\n<p>Applies the effect.<\/p>\n"
                            }]
                          },
                          "jeffectstab": {
                            "ownKey": "jeffectstab",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/jeffectstab",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/jeffectstab"
                              },
                              "description": "",
                              "title": "JEffectsTab",
                              "content": "<p>Graphic component to handle effects.<\/p><init>\n<p>Initialize the component.<\/p>\nsetEffects\n<p>Sets a new effect stack.<\/p>\nitemStateChanged\n\naddEffect\n<p>Adds a new <code> Effect <\/code> to this stack.<\/p>\nmoveSelectedLeft\n<p>Decreases the priority of the selected effect.<\/p>\naddActionListener\n<p>See <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/AbstractButton.html#addActionListener(java.awt.event.ActionListener)\">JToggleButton#addActionListener(ActionListener)<\/a><\/code>.<\/p>\nsetEnabled\n\nmoveSelectedRight\n<p>Increases the priority of the selected effect.<\/p>\ngetEffects\n\nclearEffects\n<p>Removes every effect.<\/p>\n"
                            }]
                          },
                          "drawsmartcam": {
                            "ownKey": "drawsmartcam",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawsmartcam",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawsmartcam"
                              },
                              "description": "",
                              "title": "DrawSmartcam",
                              "content": "<p>Draws node's shapes and cameras' fields of view.<\/p><init>\n<p>Draws node's shapes and cameras' fields of view.<\/p>\ngetColorSummary\n\napply\n\n"
                            }]
                          },
                          "effectgroup": {
                            "ownKey": "effectgroup",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/effectgroup",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectgroup"
                              },
                              "description": "",
                              "title": "EffectGroup",
                              "content": "<p>Models a group of effects. Each effect has a different priority of visualization.<\/p>search\n<p>Checks if an effect is present in the group.<\/p>\ngetVisibilityOf\n<p>Returns the visibility of the specified effect.<\/p>\nsetVisibilityOf\n<p>Sets the visibility of the specified effect.<\/p>\nchangePriority\n<p>Changes the specified offset priority of the specified offset.<\/p>\n"
                            }]
                          },
                          "effectfx": {
                            "ownKey": "effectfx",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/effectfx",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectfx"
                              },
                              "description": "",
                              "title": "EffectFX",
                              "content": "<p>Graphical visualization of something happening in the environment.<\/p>computeDrawCommands\n<p>Computes a queue of commands to Draw something.<\/p>\nsetName\n<p>Sets the name of the effect.<\/p>\ngetName\n<p>Gets the name of the effect.<\/p>\nisVisible\n<p>Gets the visibility of the effect.<\/p>\nsetVisibility\n<p>Sets the visibility of the effect.<\/p>\n"
                            }]
                          },
                          "drawcognitivemap": {
                            "ownKey": "drawcognitivemap",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/drawcognitivemap",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/drawcognitivemap"
                              },
                              "description": "",
                              "title": "DrawCognitiveMap",
                              "content": "<p>Draws an orienting pedestrian' cognitive map.<\/p>MAX_COLOUR_VALUE\n<p>INITIAL_ALPHA_DIVIDER<\/p>\n<p>L<\/p>\n<p><init><\/p>\n<p>Draws an orienting pedestrian' cognitive map.<\/p>\ngetColorSummary\n<p>getRed<\/p>\n<p>getGreen<\/p>\n<p>getBlue<\/p>\n<p>setBlue<\/p>\n<p>draw<\/p>\n<p>Draws the effect, this method is called only for a single a node of the environment.<\/p>\napply\n<p>setGreen<\/p>\n<p>getAlpha<\/p>\n<p>setAlpha<\/p>\n<p>setRed<\/p>\n"
                            }]
                          },
                          "effectbuilder": {
                            "ownKey": "effectbuilder",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/effects/effectbuilder",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects/effectbuilder"
                              },
                              "description": "",
                              "title": "EffectBuilder",
                              "content": "<p><init><\/p>\n<p>Default constructor.<\/p>\ngetResult\n<p>actionPerformed<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/effects",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/effects"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gui.effects",
                          "content": "<p>BidimensionalGaussianLayersMapper<\/p>\n<p>Maps  BidimensionalGaussianLayer s, it ignores any other layer.<\/p><p>This class also manages to infer optimal min and max layer values automatically\nso the user does not have to set them by hand.<\/p>\nLayerToFunctionMapper\n<p>Defines an object capable of mapping a Layer<T, P> to a Function<* in P, * out Number>.<\/p>\nDrawColoredDot\n<p>Simple effect that draws a colored dot for each <code> it.unibo.alchemist.model.interfaces.Node <\/code>. <\/p><p> It's possible to set the size and the color of the dots.<\/p>\nEffectFX\n<p>Graphical visualization of something happening in the environment.<\/p>\nDrawDot\n<p>Simple effect that draws a Color#BLACK dot for each <code> it.unibo.alchemist.model.interfaces.Node <\/code>. <\/p><p> It's possible to set the size of the dots.<\/p>\nAbstractEffect\n<p>It models an abstract implementation of the <code> effect <\/code> interface, implementing default name and visibility properties. <\/p><p> The effect behavior can be implemented via <code> #computeDrawCommands(Environment) <\/code> template method.<\/p>\nEffectStack\n<p>The class models a group of effects, stored as a stack. It can manage priority of visualization and visibility of each effect inside it.<\/p>\nDrawLinks\n<p>Simple effect that draws a Color#BLACK line for each <code> it.unibo.alchemist.model.interfaces.Node <\/code> in a <code> it.unibo.alchemist.model.interfaces.Neighborhood <\/code>. <\/p><p> It's possible to set the size of the dots.<\/p>\nEffectBuilderFX\n<p>Class that lets the user choose the effect from all it can find.<\/p>\nEffectGroup\n<p>Models a group of effects. Each effect has a different priority of visualization.<\/p>\nDrawCognitiveMap\n<p>Draws an orienting pedestrian' cognitive map.<\/p>\nDrawLayers\n<p>Basic interface for every effect that draws something related to <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s. This class is a workaround: the <code> Effect <\/code> abstraction is meant to add effects to nodes, not to draw layers. At present, is the finest workaround available. This workaround has the following disadvantages: - when there aren't nodes visible in the gui the effects are not used at all, so this effect won't work.<\/p>\nEffect\n<p>DrawNavigationGraph<\/p>\n<p>Draws the navigation graph of an <code> ImageEnvironmentWithGraph <\/code>.<\/p>\nDrawOnce\n<p>Effects are normally applied for each node, this is a base class for effects that do not need to be redrawn for each node. In other words, this effect will be applied for a single node instead of redrawing for all of them.<\/p>\nJEffectRepresentation\n<p>Representation of an <code> Effect <\/code>. Useful to let the user interact with an effect (create/edit). Effects are relative to a <code> GraphicalOutputMonitor <\/code> instance.<\/p>\nDrawPedestrianPath\n<p>Draws the paths took by pedestrians.<\/p>\nDrawBidimensionalGaussianLayersIsolines\n<p>Draw isolines for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s. It ignores any other layer.<\/p>\nFunctionDrawer\n<p>Defines an object capable of drawing functions that take a Position of type P as input and give a Number as output.<\/p>\nJEffectsTab\n<p>Graphic component to handle effects.<\/p>\nDrawLayersIsolines\n<p>Draw layers isolines. The user must specify: - the number of isolines to draw - the min layer value - the max layer value - the distribution, used to space isoline values between min and max This class defines the DrawLayersIsolines#drawFunction(Function, Environment, Graphics2D, Wormhole2D) method, which is capable of drawing a layer's isolines given a function. The only responsibility left to subclasses is to provide a <code> LayerToFunctionMapper <\/code>.<\/p>\nDrawShape\n<p>AbstractDrawLayers<\/p>\n<p>This class collects the following responsibilities: - it manages to draw layers only when necessary (as the apply method will be called for every node). Every subclass must only define the <code> AbstractDrawLayers#drawLayers(Collection, Environment, Graphics2D, Wormhole2D) <\/code> method, which is guaranteed to be called only when necessary. - it declares gui controls for the selection of the color to use - it declares gui controls for the selection of a filter, used to filter the layers to draw. In particular, it allows the user to specify a molecule, meaning that only the layer containing such molecule will be drawn (otherwise the effect is applied to all layers)<\/p>\nDrawSmartcam\n<p>Draws node's shapes and cameras' fields of view.<\/p>\nDrawLayersValues\n<p>This is a basic class for all the effects meant to draw <code> it.unibo.alchemist.model.interfaces.Layer <\/code>s values in different points of the view. One effect could draw isolines, whereas another could represent different values with a gradient. Normally, drawing a layer's values only makes sense for \"numerical\" layers (i.e. layers for which the values are <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Number.html\">Number<\/a><\/code>s). However, one could have a \"non-numerical\" layer whose <code> it.unibo.alchemist.model.interfaces.Layer#getValue(it.unibo.alchemist.model.interfaces.Position) <\/code> return type is an object from which a value can be extracted somehow. In the end, drawing a layer's values makes sense as long as there is a way to map those values to Numbers. More generally, a <code> LayerToFunctionMapper <\/code> is needed. As this class is not aware of which mapper to use, this responsibility is left to subclasses. When drawing layers values, it can be important to know the min and max layer values that will be drawn. This class declares gui controls that allow the user to specify such boundaries.<\/p>\nDrawLayersGradient\n<p>Draw layers values as background in the gui. The higher is the layer concentration in a point, the higher is the alpha channel for the background in that point. The user must specify: - the number of samples for each side, basically more samples correspond to a smoother and more detailed background - the min layer value - the max layer value The purpose and structure of this class is similar to <code> DrawLayersIsolines <\/code>.<\/p>\nEffectBuilder\n<p>EffectFactory<\/p>\n<p>DrawBidimensionalGaussianLayersGradient<\/p>\n<p>Draw a gradient in the background of the gui for <code> it.unibo.alchemist.model.implementations.layers.BidimensionalGaussianLayer <\/code>s values. It ignores any other layer.<\/p>\nEffectSerializationFactory\n<p>Serialize Alchemist effects from/to file in human readable format.<\/p>\nit.unibo.alchemist.boundary.gui.effects.json\n"
                        }]
                      },
                      "view": {
                        "ownKey": "view",
                        "childrenPages": {
                          "cells": {
                            "ownKey": "cells",
                            "childrenPages": {
                              "effectgroupcell": {
                                "ownKey": "effectgroupcell",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/cells/effectgroupcell",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/cells/effectgroupcell"
                                  },
                                  "description": "",
                                  "title": "EffectGroupCell",
                                  "content": "<p>This ListView cell implements the <code> AbstractEffectCell <\/code> for containing an <code> EffectGroup <\/code>. It has a name that identifies the EffectGroup and when clicked should open a javafx.scene.control.ListView to show the <code> effects <\/code> the group is composed of.<\/p><init>\n<p>Default constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\ngetDataFormat\n<p>Returns the DataFormat of the object contained in the cell.<\/p>\ngetLabel\n<p>Returns the label with the effect name.<\/p>\ngetToggle\n<p>Returns the toggle of the visibility.<\/p>\nupdateItem\n<p> The side drawer opened by this cell is also rebuilt.<\/p>\n"
                                }]
                              },
                              "abstracteffectcell": {
                                "ownKey": "abstracteffectcell",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/cells/abstracteffectcell",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/cells/abstracteffectcell"
                                  },
                                  "description": "",
                                  "title": "AbstractEffectCell",
                                  "content": "<p>Abstract class that models a ListView Cell to represent <code> it.unibo.alchemist.boundary.gui.effects.EffectFX <\/code>s or <code> it.unibo.alchemist.boundary.gui.effects.EffectGroup <\/code>s.<\/p><init>\n<p>Default constructor. The class accepts many nodes that will be injected between the Label that acts as an handle for Drag'n'Drop and the visibility toggle.<\/p>\ngetNodeAt\n<p>Returns a node in the root of the cell. It considers all the nodes.<\/p>\ngetDataFormat\n<p>Returns the DataFormat of the object contained in the cell.<\/p>\nremoveItself\n<p>Removes the item of this cell from the items of the ListView that contains this cell, if any.<\/p>\nsetDisplayMonitor\n<p>Setter method for the graphical <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code>.<\/p>\ndropDragNDrop\n<p>This method ends the drag'n'drop action. This should not be overridden unless you want to change Drag'n'Drop behavior and you now what you are doing.<\/p>\ngetInjectedNodeAt\n<p>Returns a node in the root of the cell. The position is calculated ignoring nodes not injected with constructor<\/p>\nstartDragNDrop\n<p>This method configures the environment to start drag'n'drop. This should not be overridden unless you want to change Drag'n'Drop behavior and you now what you are doing.<\/p>\ngetPane\n<p>Getter method for the root Pane of the cell.<\/p>\ngetDisplayMonitor\n<p>Getter method for the graphical <code> it.unibo.alchemist.boundary.interfaces.OutputMonitor <\/code>.<\/p>\nupdateItem\n\nrename\n<p>Renames some <code>Property<\/code> opening a dialog.<\/p>\nsetupLabel\n<p>Configures the label that would probably show the element name and adds an optional listener to the Label#textProperty().<\/p>\nsetupToggle\n<p>Configures a toggle and adds an optional listener to the JFXToggleButton#selectedProperty().<\/p>\n"
                                }]
                              },
                              "effectcell": {
                                "ownKey": "effectcell",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/cells/effectcell",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/cells/effectcell"
                                  },
                                  "description": "",
                                  "title": "EffectCell",
                                  "content": "<p>This ListView cell implements the <code> AbstractEffectCell <\/code> for containing an <code> EffectFX <\/code>. It has a name that identifies the Effect and when clicked should open another view to edit effect-specific parameters.<\/p><init>\n<p>Default constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor. Creates a cell with a default name.<\/p>\ngetDataFormat\n<p>Returns the DataFormat of the object contained in the cell.<\/p>\ngetLabel\n<p>Returns the label with the effect name.<\/p>\ngetToggle\n<p>Returns the toggle of the visibility.<\/p>\nupdateItem\n\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/view/cells",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/cells"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.boundary.gui.view.cells",
                              "content": "<p>EffectCell<\/p>\n<p>This ListView cell implements the <code> AbstractEffectCell <\/code> for containing an <code> EffectFX <\/code>. It has a name that identifies the Effect and when clicked should open another view to edit effect-specific parameters.<\/p>\nEffectGroupCell\n<p>This ListView cell implements the <code> AbstractEffectCell <\/code> for containing an <code> EffectGroup <\/code>. It has a name that identifies the EffectGroup and when clicked should open a javafx.scene.control.ListView to show the <code> effects <\/code> the group is composed of.<\/p>\nAbstractEffectCell\n<p>Abstract class that models a ListView Cell to represent <code> it.unibo.alchemist.boundary.gui.effects.EffectFX <\/code>s or <code> it.unibo.alchemist.boundary.gui.effects.EffectGroup <\/code>s.<\/p>\n"
                            }]
                          },
                          "singlerunapp": {
                            "ownKey": "singlerunapp",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/view/singlerunapp",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/singlerunapp"
                              },
                              "description": "",
                              "title": "SingleRunApp",
                              "content": "<p>The class models a non-reusable GUI for simulation display.<\/p>ROOT_LAYOUT\n<p>Main layout without nested layouts. Must inject eventual other nested layouts.<\/p>\nUSE_EFFECT_GROUPS_FROM_FILE\n<p>Effect pass param name.<\/p>\nPARAMETER_NAME_START\n<p>Default parameter start string.<\/p>\nPARAMETER_NAME_END\n<p>Default parameter end string.<\/p>\n<init>\n<p>The class models a non-reusable GUI for simulation display.<\/p>\nsetEffectGroups\n<p>Setter method for the collection of groups of effects.<\/p>\nsetSimulation\n<p>Setter method for simulation.<\/p>\nsetParams\n<p>The method sets the parameters. All previously add params will be removed.<\/p>\ninitKeybindings\n<p>Initializes the key bindings. <\/p><p> Should be overridden to implement keyboard interaction with the GUI.<\/p>\nstart\n\naddParam\n<p>The method adds a new named parameter.<\/p>\naddEffectGroups\n<p>Adds the effects to the current effects.<\/p>\naddEffectGroups\n<p>Adds effect from a file.<\/p>\n"
                            }]
                          },
                          "properties": {
                            "ownKey": "properties",
                            "childrenPages": {
                              "rangedintegerproperty": {
                                "ownKey": "rangedintegerproperty",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/properties/rangedintegerproperty",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/properties/rangedintegerproperty"
                                  },
                                  "description": "",
                                  "title": "RangedIntegerProperty",
                                  "content": "<p>This javafx.beans.property.IntegerProperty is designed to have a range for the wrapped value and to be serializable.<\/p>TOO_BIG_MESSAGE\n<p>Error for exceeding upper bound.<\/p>\nTOO_SMALL_MESSAGE\n<p>Error for exceeding lower bound.<\/p>\n<init>\n<p>Based on constructor of IntegerPropertyBase, adds the specified bounds.<\/p>\n<init>\n<p>Based on constructor of IntegerPropertyBase, adds the specified bounds. <\/p><p> Initial value is set to 0.<\/p>\n<init>\n<p>Based on constructor of IntegerPropertyBase, adds the specified bounds.<\/p>\n<init>\n<p>Based on constructor of IntegerPropertyBase, adds the specified bounds. <\/p><p> Initial value is set to 0.<\/p>\n<init>\n<p>The constructor of IntegerPropertyBase. <\/p><p> Bounds are set to <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MAX_VALUE\">Integer#MAX_VALUE<\/a><\/code> and <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MIN_VALUE\">Integer#MIN_VALUE<\/a><\/code>.<\/p>\n<init>\n<p>The constructor of IntegerPropertyBase. <\/p><p> Initial value is set to 0. <\/p><p> Bounds are set to <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MAX_VALUE\">Integer#MAX_VALUE<\/a><\/code> and <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MIN_VALUE\">Integer#MIN_VALUE<\/a><\/code>.<\/p>\n<init>\n<p>The constructor of IntegerPropertyBase. <\/p><p> Bounds are set to <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MAX_VALUE\">Integer#MAX_VALUE<\/a><\/code> and <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MIN_VALUE\">Integer#MIN_VALUE<\/a><\/code>.<\/p>\n<init>\n<p>The constructor of IntegerPropertyBase. <\/p><p> Initial value is set to 0. <\/p><p> Bounds are set to <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MAX_VALUE\">Integer#MAX_VALUE<\/a><\/code> and <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#MIN_VALUE\">Integer#MIN_VALUE<\/a><\/code>.<\/p>\nsetValue\n\nsetUpperBound\n<p>Setter method for the upper bound.<\/p>\nhashCode\n\ngetLowerBound\n<p>Getter method for the lower bound.<\/p>\nequals\n\ngetName\n<p>Getter method for the name of the property.<\/p>\ngetBean\n<p>Getter method for unused field bean.<\/p>\nset\n\nsetLowerBound\n<p>Setter method for the lower bound.<\/p>\ngetUpperBound\n<p>Getter method for the upper bound.<\/p>\nsetName\n<p>Setter method for the name of the property.<\/p>\ngetTypeAdapter\n<p>Returns a com.google.gson.JsonSerializer and com.google.gson.JsonDeserializer combo class to be used as a <code>TypeAdapter<\/code> for this <code>RangedIntegerProperty<\/code>.<\/p>\n"
                                }]
                              },
                              "serializablestringproperty": {
                                "ownKey": "serializablestringproperty",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/properties/serializablestringproperty",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/properties/serializablestringproperty"
                                  },
                                  "description": "",
                                  "title": "SerializableStringProperty",
                                  "content": "<p>javafx.beans.property.SimpleStringProperty that implements also <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Serializable<\/a><\/code>.<\/p><init>\n<p>The constructor of <code>SimpleStringProperty<\/code>.<\/p>\n<init>\n<p>The constructor of <code>SimpleStringProperty<\/code>.<\/p>\n<init>\n<p>The constructor of <code>SimpleStringProperty<\/code>.<\/p>\nhashCode\n\nsetName\n<p>Setter method for the name.<\/p>\nequals\n\ngetName\n<p>Getter method for the name.<\/p>\ngetBean\n<p>Getter method for unused field bean.<\/p>\ngetTypeAdapter\n<p>Returns a com.google.gson.JsonSerializer and com.google.gson.JsonDeserializer combo class to be used as a <code>TypeAdapter<\/code> for this <code>SerializableStringProperty<\/code>.<\/p>\n"
                                }]
                              },
                              "propertyfactory": {
                                "ownKey": "propertyfactory",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/properties/propertyfactory",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/properties/propertyfactory"
                                  },
                                  "description": "",
                                  "title": "PropertyFactory",
                                  "content": "<p>Factory for custom <code>Property<\/code>.<\/p>getAWTColorChannelProperty\n<p>Returns a new <code> RangedIntegerProperty <\/code> with range between 255 and 0 and a name that identifies the color channel.<\/p>\ngetAWTColorChannelProperty\n<p>Returns a new <code> RangedIntegerProperty <\/code> with range between 255 and 0 and a name that identifies the color channel.<\/p>\ngetFXColorChannelProperty\n<p>Returns a new <code> RangedDoubleProperty <\/code> with range between 1.0 and 0.0 and a name that identifies the color channel.<\/p>\ngetFXColorChannelProperty\n<p>Returns a new <code> RangedDoubleProperty <\/code> with range between 1.0 and 0.0 and a name that identifies the color channel.<\/p>\ngetPercentageRangedProperty\n<p>Returns a new <code> RangedDoubleProperty <\/code> with range between 100 and 0 and a name that identifies the <code>Property<\/code>.<\/p>\ngetPercentageRangedProperty\n<p>Returns a new <code> RangedDoubleProperty <\/code> with range between 100 and 0 and a name that identifies the <code>Property<\/code>.<\/p>\ngetIncarnationsListProperty\n<p>Returns a new ListProperty with all available incarnations of Alchemist found via reflection.<\/p>\ngetIncarnationsSetProperty\n<p>Returns a new SetProperty with all available incarnations of Alchemist found via reflection.<\/p>\n"
                                }]
                              },
                              "serializablebooleanproperty": {
                                "ownKey": "serializablebooleanproperty",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/properties/serializablebooleanproperty",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/properties/serializablebooleanproperty"
                                  },
                                  "description": "",
                                  "title": "SerializableBooleanProperty",
                                  "content": "<p>javafx.beans.property.SimpleBooleanProperty that implements also <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Serializable<\/a><\/code>.<\/p><init>\n<p>The constructor of <code>SimpleBooleanProperty<\/code>.<\/p>\n<init>\n<p>The constructor of <code>SimpleBooleanProperty<\/code>.<\/p>\n<init>\n<p>The constructor of <code>SimpleBooleanProperty<\/code>.<\/p>\n<init>\n<p>The constructor of <code>SimpleBooleanProperty<\/code>.<\/p>\nhashCode\n\nsetName\n<p>Setter method for the name of the property.<\/p>\nequals\n\ngetName\n<p>Getter method for the name of the property.<\/p>\ngetBean\n<p>Getter method for unused field bean.<\/p>\ngetTypeAdapter\n<p>Returns a com.google.gson.JsonSerializer and com.google.gson.JsonDeserializer combo class to be used as a <code>TypeAdapter<\/code> for this <code>SerializableBooleanProperty<\/code>.<\/p>\n"
                                }]
                              },
                              "serializableenumproperty": {
                                "ownKey": "serializableenumproperty",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/properties/serializableenumproperty",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/properties/serializableenumproperty"
                                  },
                                  "description": "",
                                  "title": "SerializableEnumProperty",
                                  "content": "<p>javafx.beans.property.Property designed to wrap an <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Enum.html\">enum<\/a><\/code>. <\/p><p> It is based on <code>ObjectPropertyBase<\/code> and is <code>Serializable<\/code>.<\/p><init>\n<p>The constructor of <code>ObjectPropertyBase<\/code>.<\/p>\n<init>\n<p>The constructor of <code>ObjectPropertyBase<\/code>.<\/p>\n<init>\n<p>The constructor of <code>ObjectPropertyBase<\/code>.<\/p>\n<init>\n<p>The constructor of <code>ObjectPropertyBase<\/code>.<\/p>\nvalues\n<p>Returns the elements of the enum class wrapped by this javafx.beans.property.Property.<\/p>\nhashCode\n\nsetName\n<p>Setter method for the name of the property.<\/p>\nequals\n\ngetName\n<p>Getter method for the name of the property.<\/p>\ngetBean\n<p>Getter method for unused field bean.<\/p>\n"
                                }]
                              },
                              "rangeddoubleproperty": {
                                "ownKey": "rangeddoubleproperty",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/properties/rangeddoubleproperty",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/properties/rangeddoubleproperty"
                                  },
                                  "description": "",
                                  "title": "RangedDoubleProperty",
                                  "content": "<p>This <a href=\"#\">DoubleProperty<\/a> is designed to have a range for the wrapped value\nand to be serializable.<\/p>lowerBound\n<p>The lower bound value of the property.<\/p>\nupperBound\n<p>The upper bound value of the property.<\/p>\n<init>\n<p>Based on constructor of <a href=\"#\">DoubleProperty<\/a>, adds the specified bounds.<\/p>\nset\n<p>{@inheritDoc}.<\/p>\nsetValue\n<p>{@inheritDoc}.<\/p>\ngetBean\n<p>Getter method for unused field bean.<\/p>\ngetName\n<p>Getter method for name.<\/p>\nhashCode\n\nequals\n\nRangedDoubleProperty\n<p>This <a href=\"#\">DoubleProperty<\/a> is designed to have a range for the wrapped value\nand to be serializable.<\/p>\n"
                                }]
                              },
                              "propertytypeadapter": {
                                "ownKey": "propertytypeadapter",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/boundary/gui/view/properties/propertytypeadapter",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/properties/propertytypeadapter"
                                  },
                                  "description": "",
                                  "title": "PropertyTypeAdapter",
                                  "content": "<p>This interface lets implement classes for JavaFX custom property serialization.<\/p>NAME\n<p>Static default JSON key for field \"name\".<\/p>\nVALUE\n<p>Static default JSON key for field \"value\".<\/p>\nBEAN\n<p>Static default JSON key for field \"bean\".<\/p>\ndeserialize\n<p>serialize<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/view/properties",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view/properties"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.boundary.gui.view.properties",
                              "content": "<p>RangedDoubleProperty<\/p>\n<p>This <a href=\"#\">DoubleProperty<\/a> is designed to have a range for the wrapped value\nand to be serializable.<\/p>\nPropertyFactory\n<p>Factory for custom <code>Property<\/code>.<\/p>\nSerializableStringProperty\n<p>javafx.beans.property.SimpleStringProperty that implements also <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Serializable<\/a><\/code>.<\/p>\nSerializableEnumProperty\n<p>javafx.beans.property.Property designed to wrap an <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Enum.html\">enum<\/a><\/code>. <\/p><p> It is based on <code>ObjectPropertyBase<\/code> and is <code>Serializable<\/code>.<\/p>\nPropertyTypeAdapter\n<p>This interface lets implement classes for JavaFX custom property serialization.<\/p>\nSerializableBooleanProperty\n<p>javafx.beans.property.SimpleBooleanProperty that implements also <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Serializable<\/a><\/code>.<\/p>\nRangedIntegerProperty\n<p>This javafx.beans.property.IntegerProperty is designed to have a range for the wrapped value and to be serializable.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/view",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/view"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gui.view",
                          "content": "<p>SingleRunApp<\/p>\n<p>The class models a non-reusable GUI for simulation display.<\/p>\nit.unibo.alchemist.boundary.gui.view.properties\n<p>it.unibo.alchemist.boundary.gui.view.cells<\/p>\n"
                        }]
                      },
                      "tape": {
                        "ownKey": "tape",
                        "childrenPages": {
                          "jtapegroup": {
                            "ownKey": "jtapegroup",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapegroup",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapegroup"
                              },
                              "description": "",
                              "title": "JTapeGroup",
                              "content": "<p>A <code> JTapeGroup <\/code> is a set of <code> JTapeSection <\/code> identified by a common description.<\/p><init>\n<p>Initializes a new <code> JTapeGroup <\/code> with the description in input.<\/p>\nsetDescription\n<p>Sets the description.<\/p>\ngetDescription\n<p>Gets the description.<\/p>\nregisterSection\n<p>Adds a section to the current group.<\/p>\n"
                            }]
                          },
                          "jtapesection": {
                            "ownKey": "jtapesection",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapesection",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapesection"
                              },
                              "description": "",
                              "title": "JTapeSection",
                              "content": "<p>A <code> JTapeSection <\/code> is a set of one or more feature that should appear close to each other because of stylistic or semantic reasons.<\/p><init>\n<p>A <code> JTapeSection <\/code> is a set of one or more feature that should appear close to each other because of stylistic or semantic reasons.<\/p>\nunregisterFeature\n<p>Removes a feature from the current section.<\/p>\nregisterFeature\n<p>Adds a feature to the current section.<\/p>\n"
                            }]
                          },
                          "jtapefeaturestack": {
                            "ownKey": "jtapefeaturestack",
                            "childrenPages": {"type": {
                              "ownKey": "type",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapefeaturestack/type",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapefeaturestack/type"
                                },
                                "description": "",
                                "title": "Type",
                                "content": "<p>HORIZONTAL_STACK<\/p>\n<p>VERTICAL_STACK<\/p>\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapefeaturestack",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapefeaturestack"
                              },
                              "description": "",
                              "title": "JTapeFeatureStack",
                              "content": "<p><init><\/p>\n<p><init><\/p>\n<p>unregisterFeature<\/p>\n<p>Removes a feature from the current section.<\/p>\ngetOrderedComponents\n<p>getLayout<\/p>\n<p>setComponentOrder<\/p>\n<p>remove<\/p>\n<p>add<\/p>\n<p>registerFeature<\/p>\n<p>Adds a feature to the current section.<\/p>\ngetType\n"
                            }]
                          },
                          "jtapetab": {
                            "ownKey": "jtapetab",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapetab",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapetab"
                              },
                              "description": "",
                              "title": "JTapeTab",
                              "content": "<p>A <code> JTapeTab <\/code> is composed of a title and a set of <code> JTapeGroup <\/code>. Each <code> JTapeTab <\/code> contains an hidden <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/JProgressBar.html\">JProgressBar<\/a><\/code> too. Features with a common context should appear into the same tab. E.g. Common operations like New, Open, Close, Save, etc. should stay togheter.<\/p><init>\n<p>Initializes a new <code> JTapeTab <\/code> with the title in input.<\/p>\nsetProgressBar\n<p>Lets child-classes change the progress bar.<\/p>\ngetTitle\n<p>Gets the title.<\/p>\ngetProgressBar\n<p>Lets child-classes access the progress bar.<\/p>\nregisterGroup\n<p>Adds a group of features to the tab.<\/p>\nsetTitle\n<p>Sets the title.<\/p>\n"
                            }]
                          },
                          "jtape": {
                            "ownKey": "jtape",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/tape/jtape",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtape"
                              },
                              "description": "",
                              "title": "JTape",
                              "content": "<p>JTape is a container for a commands bar that should expose the whole set of features of an application that may concern the user.<\/p><init>\n<p>JTape is a container for a commands bar that should expose the whole set of features of an application that may concern the user.<\/p>\nderegisterTab\n<p>Removes a tab.<\/p>\nregisterTab\n<p>Adds a tab to the JTape instance.<\/p>\n"
                            }]
                          },
                          "jtapemainfeature": {
                            "ownKey": "jtapemainfeature",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/tape/jtapemainfeature",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape/jtapemainfeature"
                              },
                              "description": "",
                              "title": "JTapeMainFeature",
                              "content": "<p><init><\/p>\n<p>unregisterFeature<\/p>\n<p>registerFeature<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/tape",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/tape"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gui.tape",
                          "content": "<p>JTapeMainFeature<\/p>\n<p>JTapeSection<\/p>\n<p>A <code> JTapeSection <\/code> is a set of one or more feature that should appear close to each other because of stylistic or semantic reasons.<\/p>\nJTapeGroup\n<p>A <code> JTapeGroup <\/code> is a set of <code> JTapeSection <\/code> identified by a common description.<\/p>\nJTapeFeatureStack\n<p>JTapeTab<\/p>\n<p>A <code> JTapeTab <\/code> is composed of a title and a set of <code> JTapeGroup <\/code>. Each <code> JTapeTab <\/code> contains an hidden <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/JProgressBar.html\">JProgressBar<\/a><\/code> too. Features with a common context should appear into the same tab. E.g. Common operations like New, Open, Close, Save, etc. should stay togheter.<\/p>\nJTape\n<p>JTape is a container for a commands bar that should expose the whole set of features of an application that may concern the user.<\/p>\n"
                        }]
                      },
                      "colorchannel": {
                        "ownKey": "colorchannel",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/colorchannel",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/colorchannel"
                          },
                          "description": "",
                          "title": "ColorChannel",
                          "content": "<p>ALPHA<\/p>\n<p>RED<\/p>\n<p>GREEN<\/p>\n<p>HUE<\/p>\n<p>SATURATION<\/p>\n<p>BRIGHTNESS<\/p>\n<p>BLUE<\/p>\n<p>alter<\/p>\n<p>Given a color, modifies the channel setting the passed value.<\/p>\n"
                        }]
                      },
                      "reactivitypanel": {
                        "ownKey": "reactivitypanel",
                        "childrenPages": {"status": {
                          "ownKey": "status",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/gui/reactivitypanel/status",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/reactivitypanel/status"
                            },
                            "description": "",
                            "title": "Status",
                            "content": "<p>MAX_REACTIVITY<\/p>\n<p>REAL_TIME<\/p>\n<p>USER_SELECTED<\/p>\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/reactivitypanel",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/reactivitypanel"
                          },
                          "description": "",
                          "title": "ReactivityPanel",
                          "content": "<p><init><\/p>\n<p>itemStateChanged<\/p>\n<p>setActionCommand<\/p>\n<p>Sets the command name for the action event fired by this component.<\/p>\naddActionListener\n<p>See <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/AbstractButton.html#addActionListener(java.awt.event.ActionListener)\">JToggleButton#addActionListener(ActionListener)<\/a><\/code>.<\/p>\naddChangeLister\n<p>getStatus<\/p>\n<p>getUserReactivity<\/p>\n"
                        }]
                      },
                      "statusbar": {
                        "ownKey": "statusbar",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/statusbar",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/statusbar"
                          },
                          "description": "",
                          "title": "StatusBar",
                          "content": "<p><init><\/p>\n<p>setOK<\/p>\n<p>setNo<\/p>\n"
                        }]
                      },
                      "simcontrolcommand": {
                        "ownKey": "simcontrolcommand",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/simcontrolcommand",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/simcontrolcommand"
                          },
                          "description": "",
                          "title": "SimControlCommand",
                          "content": "<p>PLAY<\/p>\n<p>STEP<\/p>\n<p>PAUSE<\/p>\n<p>STOP<\/p>\n<p>equalsToString<\/p>\n<p>Compares this enum to a String.<\/p>\ncreateButton\n"
                        }]
                      },
                      "monitors": {
                        "ownKey": "monitors",
                        "childrenPages": {
                          "joutputmonitorrepresentation": {
                            "ownKey": "joutputmonitorrepresentation",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/monitors/joutputmonitorrepresentation",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/monitors/joutputmonitorrepresentation"
                              },
                              "description": "",
                              "title": "JOutputMonitorRepresentation",
                              "content": "<p><init><\/p>\n<p>removeItemListener<\/p>\n<p>addItemListener<\/p>\n<p>isSelected<\/p>\n<p>getSelectedObjects<\/p>\n<p>getMonitor<\/p>\n<p>setSelected<\/p>\n"
                            }]
                          },
                          "classitem": {
                            "ownKey": "classitem",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/boundary/gui/monitors/classitem",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/monitors/classitem"
                              },
                              "description": "",
                              "title": "ClassItem",
                              "content": "<p>A simple <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html\">Class<\/a><\/code> wrapper exposing a better <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#toString()\">Object#toString()<\/a><\/code>.<\/p><init>\n\nhashCode\n\ngetPayload\n\nequals\n\ntoString\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/gui/monitors",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui/monitors"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.boundary.gui.monitors",
                          "content": "<p>ClassItem<\/p>\n<p>A simple <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html\">Class<\/a><\/code> wrapper exposing a better <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#toString()\">Object#toString()<\/a><\/code>.<\/p>\nJOutputMonitorRepresentation\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/gui",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gui"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.boundary.gui",
                      "content": "<p>CommandQueueBuilder<\/p>\n<p>Builder class that eases the building of a queue of <code> DrawCommand <\/code>s.<\/p>\nFileMenu\n<p>StatusBar<\/p>\n<p>ReactivityPanel<\/p>\n<p>SimControlCommand<\/p>\n<p>AbstractMenu<\/p>\n<p>SimControlButton<\/p>\n<p>AlchemistSwingUI<\/p>\n<p>The main frame for the standard Alchemist GUI.<\/p>\nSingleRunGUI\n<p>Utility class for quickly creating non-reusable graphical interfaces.<\/p>\nColorChannel\n<p>SimControlPanel<\/p>\n<p>This class maintains multiple control panels for controlling a simulation, ensuring that they are coherently updated.<\/p>\nNumericTextField\n<p>it.unibo.alchemist.boundary.gui.effects<\/p>\n<p>it.unibo.alchemist.boundary.gui.utility<\/p>\n<p>it.unibo.alchemist.boundary.gui.view<\/p>\n<p>it.unibo.alchemist.boundary.gui.controller<\/p>\n<p>it.unibo.alchemist.boundary.gui.isolines<\/p>\n<p>it.unibo.alchemist.boundary.gui.tape<\/p>\n<p>it.unibo.alchemist.boundary.gui.layouts<\/p>\n<p>it.unibo.alchemist.boundary.gui.monitors<\/p>\n"
                    }]
                  },
                  "jfx": {
                    "ownKey": "jfx",
                    "childrenPages": {"events": {
                      "ownKey": "events",
                      "childrenPages": {
                        "mouse": {
                          "ownKey": "mouse",
                          "childrenPages": {
                            "mousetriggeraction": {
                              "ownKey": "mousetriggeraction",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/mousetriggeraction",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/mousetriggeraction"
                                },
                                "description": "",
                                "title": "MouseTriggerAction",
                                "content": "<p>The  TriggerAction  regarding mouse events.<\/p>\n"
                              }]
                            },
                            "nodeboundmouseeventdispatcher": {
                              "ownKey": "nodeboundmouseeventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/nodeboundmouseeventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/nodeboundmouseeventdispatcher"
                                },
                                "description": "",
                                "title": "NodeBoundMouseEventDispatcher",
                                "content": "<p>A mouse event dispatcher that catches mouse input from a node.<\/p><init>\n<p>A mouse event dispatcher that catches mouse input from a node.<\/p>\n"
                              }]
                            },
                            "simplemouseeventdispatcher": {
                              "ownKey": "simplemouseeventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/simplemouseeventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/simplemouseeventdispatcher"
                                },
                                "description": "",
                                "title": "SimpleMouseEventDispatcher",
                                "content": "<p>A basic implementation of a mouse event dispatcher.<\/p>listener\n<p>The listener bound to this dispatcher.<\/p>\n<init>\n<p>A basic implementation of a mouse event dispatcher.<\/p>\n"
                              }]
                            },
                            "mouseeventdispatcher": {
                              "ownKey": "mouseeventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/mouseeventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/mouseeventdispatcher"
                                },
                                "description": "",
                                "title": "MouseEventDispatcher",
                                "content": "<p>An event dispatcher in the context of mouse events.<\/p>listener\n<p>The listener bound to this dispatcher.<\/p>\n<init>\n<p>An event dispatcher in the context of mouse events.<\/p>\n"
                              }]
                            },
                            "mousemovement": {
                              "ownKey": "mousemovement",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/mousemovement",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/mousemovement"
                                },
                                "description": "",
                                "title": "MouseMovement",
                                "content": "<p>Simple mouse actions.<\/p>\n"
                              }]
                            },
                            "actiononmouse": {
                              "ownKey": "actiononmouse",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/actiononmouse",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/actiononmouse"
                                },
                                "description": "",
                                "title": "ActionOnMouse",
                                "content": "<p>Actions that can happen on a mouse and a certain mouse button.\nThe enum's values are based on JavaFX's mouse events, such as onMouseClicked<\/p>CLICKED\n<p>DRAGGED<\/p>\n<p>ENTERED<\/p>\n<p>EXITED<\/p>\n<p>MOVED<\/p>\n<p>PRESSED<\/p>\n<p>RELEASED<\/p>\n"
                              }]
                            },
                            "mouseactionlistener": {
                              "ownKey": "mouseactionlistener",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/mouseactionlistener",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/mouseactionlistener"
                                },
                                "description": "",
                                "title": "MouseActionListener",
                                "content": "<p>An action listener in the context of mouse events.<\/p>\n"
                              }]
                            },
                            "dynamicmouseeventdispatcher": {
                              "ownKey": "dynamicmouseeventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/dynamicmouseeventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/dynamicmouseeventdispatcher"
                                },
                                "description": "",
                                "title": "DynamicMouseEventDispatcher",
                                "content": "<p>A mouse event dispatcher which can receive temporary actions to listen to which will only be triggered once.\nThese temporary actions have a higher priority than actions set through <a href=\"#\">action<\/a>.<\/p>listener\n<p>The listener bound to this dispatcher.<\/p>\n<init>\n<p>A mouse event dispatcher which can receive temporary actions to listen to which will only be triggered once.\nThese temporary actions have a higher priority than actions set through <a href=\"#\">action<\/a>.<\/p>\nsetDynamicAction\n<p>Set a dynamic action.<\/p>\n"
                              }]
                            },
                            "mousebuttontriggeraction": {
                              "ownKey": "mousebuttontriggeraction",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse/mousebuttontriggeraction",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse/mousebuttontriggeraction"
                                },
                                "description": "",
                                "title": "MouseButtonTriggerAction",
                                "content": "<p>A  MouseTriggerAction  related to mouse button presses.<\/p>type\n<p>the type of the action performed with the mouse<\/p>\nbutton\n<p>the button related to the action performed<\/p>\n<init>\n<p>A  MouseTriggerAction  related to mouse button presses.<\/p>\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/jfx/events/mouse",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/mouse"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.boundary.jfx.events.mouse",
                            "content": "<p>ActionOnMouse<\/p>\n<p>Actions that can happen on a mouse and a certain mouse button.\nThe enum's values are based on JavaFX's mouse events, such as onMouseClicked<\/p>\nDynamicMouseEventDispatcher\n<p>A mouse event dispatcher which can receive temporary actions to listen to which will only be triggered once.\nThese temporary actions have a higher priority than actions set through <a href=\"#\">action<\/a>.<\/p>\nMouseActionListener\n<p>An action listener in the context of mouse events.<\/p>\nMouseButtonTriggerAction\n<p>A  MouseTriggerAction  related to mouse button presses.<\/p>\nMouseEventDispatcher\n<p>An event dispatcher in the context of mouse events.<\/p>\nMouseMovement\n<p>Simple mouse actions.<\/p>\nMouseTriggerAction\n<p>The  TriggerAction  regarding mouse events.<\/p>\nNodeBoundMouseEventDispatcher\n<p>A mouse event dispatcher that catches mouse input from a node.<\/p>\nSimpleMouseEventDispatcher\n<p>A basic implementation of a mouse event dispatcher.<\/p>\n"
                          }]
                        },
                        "keyboard": {
                          "ownKey": "keyboard",
                          "childrenPages": {
                            "keyboardtriggeraction": {
                              "ownKey": "keyboardtriggeraction",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/keyboard/keyboardtriggeraction",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/keyboard/keyboardtriggeraction"
                                },
                                "description": "",
                                "title": "KeyboardTriggerAction",
                                "content": "<p>The keyboard-related  TriggerAction .<\/p>type\n<p>the action performed with the key.<\/p>\nkey\n<p>the on which the action is performed.<\/p>\n<init>\n<p>The keyboard-related  TriggerAction .<\/p>\n"
                              }]
                            },
                            "keyboardactionlistener": {
                              "ownKey": "keyboardactionlistener",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/keyboard/keyboardactionlistener",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/keyboard/keyboardactionlistener"
                                },
                                "description": "",
                                "title": "KeyboardActionListener",
                                "content": "<p>An action listener in the context of a keyboard.<\/p>\n"
                              }]
                            },
                            "keyboardeventdispatcher": {
                              "ownKey": "keyboardeventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/keyboard/keyboardeventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/keyboard/keyboardeventdispatcher"
                                },
                                "description": "",
                                "title": "KeyboardEventDispatcher",
                                "content": "<p>An event dispatcher in the context of a keyboard.<\/p>listener\n<p>The listener bound to this dispatcher.<\/p>\n<init>\n<p>An event dispatcher in the context of a keyboard.<\/p>\nisHeld\n<p>Returns whether a given key is being held or not at the time of the call.<\/p>\n"
                              }]
                            },
                            "actiononkey": {
                              "ownKey": "actiononkey",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/keyboard/actiononkey",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/keyboard/actiononkey"
                                },
                                "description": "",
                                "title": "ActionOnKey",
                                "content": "<p>The  TriggerAction  objects regarding key strokes.<\/p>PRESSED\n<p>RELEASED<\/p>\n<p>with<\/p>\n<p>Returns a  KeyboardTriggerAction  initialized with this  ActionOnKey  and the given <a href=\"#\">KeyCode<\/a>.<\/p>\n"
                              }]
                            },
                            "simplekeyboardeventdispatcher": {
                              "ownKey": "simplekeyboardeventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/keyboard/simplekeyboardeventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/keyboard/simplekeyboardeventdispatcher"
                                },
                                "description": "",
                                "title": "SimpleKeyboardEventDispatcher",
                                "content": "<p>A basic implementation of  KeyboardEventDispatcher .<\/p>listener\n<p>The listener bound to this dispatcher.<\/p>\n<init>\n<p>A basic implementation of  KeyboardEventDispatcher .<\/p>\nisHeld\n<p>Returns whether a given key is being held or not at the time of the call.<\/p>\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/jfx/events/keyboard",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/keyboard"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.boundary.jfx.events.keyboard",
                            "content": "<p>ActionOnKey<\/p>\n<p>The  TriggerAction  objects regarding key strokes.<\/p>\nKeyboardActionListener\n<p>An action listener in the context of a keyboard.<\/p>\nKeyboardEventDispatcher\n<p>An event dispatcher in the context of a keyboard.<\/p>\nKeyboardTriggerAction\n<p>The keyboard-related  TriggerAction .<\/p>\nSimpleKeyboardEventDispatcher\n<p>A basic implementation of  KeyboardEventDispatcher .<\/p>\n"
                          }]
                        },
                        "generic": {
                          "ownKey": "generic",
                          "childrenPages": {
                            "persistenteventdispatcher": {
                              "ownKey": "persistenteventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/generic/persistenteventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/generic/persistenteventdispatcher"
                                },
                                "description": "",
                                "title": "PersistentEventDispatcher",
                                "content": "<p>An event dispatcher which doesn't overwrite its triggers when  set  is called on an already existing trigger.<\/p><init>\n<p>An event dispatcher which doesn't overwrite its triggers when  set  is called on an already existing trigger.<\/p>\nset\n<p>Adds a job to be performed whenever an event triggers the dispatcher through the  listener .<\/p>\n"
                              }]
                            },
                            "triggeraction": {
                              "ownKey": "triggeraction",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/generic/triggeraction",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/generic/triggeraction"
                                },
                                "description": "",
                                "title": "TriggerAction",
                                "content": "<p>The action that triggers an event dispatcher. May contain information about the trigger.<\/p>\n"
                              }]
                            },
                            "actionlistener": {
                              "ownKey": "actionlistener",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/generic/actionlistener",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/generic/actionlistener"
                                },
                                "description": "",
                                "title": "ActionListener",
                                "content": "<p>An action listener.<\/p>action\n<p>To be called whenever a certain action happens.<\/p>\n"
                              }]
                            },
                            "abstracteventdispatcher": {
                              "ownKey": "abstracteventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/generic/abstracteventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/generic/abstracteventdispatcher"
                                },
                                "description": "",
                                "title": "AbstractEventDispatcher",
                                "content": "<p>A generic event dispatcher that implements action management.<\/p>triggers\n<p>Inheriting classes can access and modify the collection of triggers to change the behaviour of the dispatcher.<\/p>\n<init>\n<p>A generic event dispatcher that implements action management.<\/p>\nset\n<p>Adds a job to be performed whenever an event triggers the dispatcher through the  listener .<\/p>\n"
                              }]
                            },
                            "eventdispatcher": {
                              "ownKey": "eventdispatcher",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/boundary/jfx/events/generic/eventdispatcher",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/generic/eventdispatcher"
                                },
                                "description": "",
                                "title": "EventDispatcher",
                                "content": "<p>An event dispatcher.<\/p>listener\n<p>The listener bound to this dispatcher.<\/p>\nset\n<p>Adds a job to be performed whenever an event triggers the dispatcher through the  listener .<\/p>\n"
                              }]
                            }
                          },
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/jfx/events/generic",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/jfx/events/generic"
                            },
                            "description": "",
                            "title": "it.unibo.alchemist.boundary.jfx.events.generic",
                            "content": "<p>AbstractEventDispatcher<\/p>\n<p>A generic event dispatcher that implements action management.<\/p>\nActionListener\n<p>An action listener.<\/p>\nEventDispatcher\n<p>An event dispatcher.<\/p>\nPersistentEventDispatcher\n<p>An event dispatcher which doesn't overwrite its triggers when  set  is called on an already existing trigger.<\/p>\nTriggerAction\n<p>The action that triggers an event dispatcher. May contain information about the trigger.<\/p>\n"
                          }]
                        }
                      }
                    }}
                  },
                  "monitors": {
                    "ownKey": "monitors",
                    "childrenPages": {
                      "leafletmapdisplay": {
                        "ownKey": "leafletmapdisplay",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitors/leafletmapdisplay",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/leafletmapdisplay"
                          },
                          "description": "",
                          "title": "LeafletMapDisplay",
                          "content": "<p>Simple implementation of a monitor that graphically represents a simulation on a 2D map, specifically LeafletMap.<\/p><init>\n<p>Simple implementation of a monitor that graphically represents a simulation on a 2D map, specifically LeafletMap.<\/p>\ninit\n<p>The method initializes everything that is not initializable before first step.\nInheriting classes that override this function should always call super.init to ensure proper initialization.<\/p>\ncreateWormhole\n<p>Creates a wormhole for this monitor.\nSubclasses that make use of their own wormholes can set them through this method.<\/p>\ncreateZoomManager\n<p>Creates a zoom manager for this monitor.\nSubclasess that make use of their own zoom managers can set them through this method.<\/p>\n"
                        }]
                      },
                      "abstractfxdisplay": {
                        "ownKey": "abstractfxdisplay",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitors/abstractfxdisplay",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/abstractfxdisplay"
                          },
                          "description": "",
                          "title": "AbstractFXDisplay",
                          "content": "<p>Base abstract class for each display able to graphically represent a 2D space and simulation.<\/p>background\n<p>Group dedicated for painting the background.<\/p>\n<init>\n<p>Base abstract class for each display able to graphically represent a 2D space and simulation.<\/p>\ngetViewStatus\n\nsetViewStatus\n\nsetRealTime\n\nrepaint\n\naddEffects\n\naddEffectGroup\n\ngetEffects\n\nsetEffects\n\ngetKeyboardListener\n\ninitialized\n\nstepDone\n\ninit\n<p>The method initializes everything that is not initializable before first step.\nInheriting classes that override this function should always call super.init to ensure proper initialization.<\/p>\ncreateWormhole\n<p>Creates a wormhole for this monitor.\nSubclasses that make use of their own wormholes can set them through this method.<\/p>\ncreateZoomManager\n<p>Creates a zoom manager for this monitor.\nSubclasess that make use of their own zoom managers can set them through this method.<\/p>\nfinished\n\nasJavaFXNode\n\nAbstractFXDisplay\n<p>Base abstract class for each display able to graphically represent a 2D space and simulation.<\/p>\n"
                        }]
                      },
                      "nodetracker": {
                        "ownKey": "nodetracker",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitors/nodetracker",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/nodetracker"
                          },
                          "description": "",
                          "title": "NodeTracker",
                          "content": "<p><init><\/p>\n<p>finished<\/p>\n<p>actionPerformed<\/p>\n<p>initialized<\/p>\n<p>stepDone<\/p>\n"
                        }]
                      },
                      "fx2ddisplay": {
                        "ownKey": "fx2ddisplay",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitors/fx2ddisplay",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/fx2ddisplay"
                          },
                          "description": "",
                          "title": "FX2DDisplay",
                          "content": "<p>Simple implementation of a monitor that graphically represents a 2D space and simulation.<\/p><init>\n<p>Simple implementation of a monitor that graphically represents a 2D space and simulation.<\/p>\n"
                        }]
                      },
                      "timestepmonitor": {
                        "ownKey": "timestepmonitor",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitors/timestepmonitor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/timestepmonitor"
                          },
                          "description": "",
                          "title": "TimeStepMonitor",
                          "content": "<p><init><\/p>\n<p>Constructor.<\/p>\nfinished\n<p>initialized<\/p>\n<p>stepDone<\/p>\n"
                        }]
                      },
                      "mapdisplay": {
                        "ownKey": "mapdisplay",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitors/mapdisplay",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/mapdisplay"
                          },
                          "description": "",
                          "title": "MapDisplay",
                          "content": "<p>Graphical 2D display of an environments that uses a map.<\/p><init>\n<p>Default constructor.<\/p>\nsetMouseTooltipTo\n\nfinished\n\ndrawBackground\n\ninitialized\n\npaint\n\n"
                        }]
                      },
                      "moleculeinjectorgui": {
                        "ownKey": "moleculeinjectorgui",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitors/moleculeinjectorgui",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/moleculeinjectorgui"
                          },
                          "description": "",
                          "title": "MoleculeInjectorGUI",
                          "content": "<p>This class raises a new JPanel which allows to graphically inject a new molecule inside a node (or a group of nodes) or to modify the value of a certain molecule.<\/p><init>\n\n"
                        }]
                      },
                      "generic2ddisplay": {
                        "ownKey": "generic2ddisplay",
                        "childrenPages": {"mousemanager": {
                          "ownKey": "mousemanager",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/boundary/monitors/generic2ddisplay/mousemanager",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/generic2ddisplay/mousemanager"
                            },
                            "description": "",
                            "title": "MouseManager",
                            "content": "<p>Custom listener for <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/event/MouseEvent.html\">MouseEvent<\/a><\/code>s.<\/p><init>\n<p>Custom listener for <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/event/MouseEvent.html\">MouseEvent<\/a><\/code>s.<\/p>\nmouseReleased\n\nmouseMoved\n\nmouseEntered\n\nmouseDragged\n\nmouseClicked\n\nmouseExited\n\nmousePressed\n\nmouseWheelMoved\n\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/boundary/monitors/generic2ddisplay",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors/generic2ddisplay"
                          },
                          "description": "",
                          "title": "Generic2DDisplay",
                          "content": "<p>Base-class for each display able a graphically represent a 2D space and simulation.<\/p>DEFAULT_FRAME_RATE\n<p>The default frame rate.<\/p>\nSELECTED_NODE_DRAWING_SIZE\n<p>How big (in pixels) the selected node should appear.<\/p>\nSELECTED_NODE_INTERNAL_SIZE\n<p><init><\/p>\n<p>Initializes a new display with out redrawing the first step.<\/p>\n<init>\n<p>Initializes a new display.<\/p>\nisCloserNodeMarked\n<p>The method checks if the closer node is marked.<\/p>\nsetMouseTooltipTo\n<p>Updates <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/JComponent.html#setToolTipText(java.lang.String)\">tooltip<\/a><\/code> of this component with nearest node from the mouse position.<\/p>\nsetEffectStack\n\nsetStep\n\ngetWormhole\n<p>Lets child-classes access the wormhole.<\/p>\nisRealTime\n\nsetZoomManager\n<p>Lets child-classes change the zoom manager.<\/p>\nsetDrawLinks\n\nzoomTo\n\nsetWormhole\n<p>Lets child-classes change the wormhole.<\/p>\ngetStep\n\ndrawEnvOnView\n<p>Actually draws the environment on the view.<\/p>\nfinished\n<p>Override to change or add operations to be done after a simulation is concluded.<\/p>\ndrawBackground\n<p>This method is meant to be overridden by subclasses that want to display a more sophisticated background than a simple color.<\/p>\nisInitialized\n<p>Lets child-classes check if the display is initialized.<\/p>\npaintComponent\n<p>Override as per <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/JComponent.html#paintComponent(java.awt.Graphics)\">javax.swing.JComponent#paintComponent(Graphics)<\/a><\/code>.<\/p>\ninitialized\n<p>Defines what to do when the UI is initialized.<\/p>\ngetZoomManager\n<p>Lets child-classes access the zoom manager.<\/p>\nsetMarkCloserNode\n\nsetRealTime\n\nstepDone\n\nmakeFrame\n<p>Builds a frame. After building a <code><a href=\"https://docs.oracle.com/javase/6/docs/api/javax/swing/JFrame.html\">JFrame<\/a><\/code>, it performs the given operation on it, if any.<\/p>\nenvHasMobileObstacles\n\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/monitors",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/monitors"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.boundary.monitors",
                      "content": "<p>AbstractFXDisplay<\/p>\n<p>Base abstract class for each display able to graphically represent a 2D space and simulation.<\/p>\nFX2DDisplay\n<p>Simple implementation of a monitor that graphically represents a 2D space and simulation.<\/p>\nLeafletMapDisplay\n<p>Simple implementation of a monitor that graphically represents a simulation on a 2D map, specifically LeafletMap.<\/p>\nTimeStepMonitor\n<p>MapDisplay<\/p>\n<p>Graphical 2D display of an environments that uses a map.<\/p>\nGeneric2DDisplay\n<p>Base-class for each display able a graphically represent a 2D space and simulation.<\/p>\nNodeTracker\n<p>MoleculeInjectorGUI<\/p>\n<p>This class raises a new JPanel which allows to graphically inject a new molecule inside a node (or a group of nodes) or to modify the value of a certain molecule.<\/p>\n"
                    }]
                  },
                  "editkeybindview": {
                    "ownKey": "editkeybindview",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/editkeybindview",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/editkeybindview"
                      },
                      "description": "",
                      "title": "EditKeybindView",
                      "content": "<p>The view through which keybinds can be edited.<\/p>titleProperty\n<p>{@inheritDoc}.<\/p>\nroot\n<p>{@inheritDoc}.<\/p>\n<init>\n<p>The view through which keybinds can be edited.<\/p>\n"
                    }]
                  },
                  "listkeybindsview": {
                    "ownKey": "listkeybindsview",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/boundary/listkeybindsview",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/listkeybindsview"
                      },
                      "description": "",
                      "title": "ListKeybindsView",
                      "content": "<p>The view that lists current keybinds.<\/p>controller\n<p>The controller.<\/p>\ntitleProperty\n<p>{@inheritDoc}.<\/p>\nroot\n<p>{@inheritDoc}.<\/p>\n<init>\n<p>The view that lists current keybinds.<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/boundary",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.boundary",
                  "content": "<p>CustomLeafletMapView<\/p>\n<p>A <a href=\"#\">LeafletMapView<\/a> that implements functions used to manage the map without any mouse events.<\/p>\nKeybind\n<p>A class that describes the relation between a KeyCode and an Action.<\/p>\nKeybindModel\n<p>The ItemViewModel of a Keybind.<\/p>\nKeybindController\n<p>The controller for ListKeybindsView.<\/p>\nListKeybindsView\n<p>The view that lists current keybinds.<\/p>\nEditKeybindView\n<p>The view through which keybinds can be edited.<\/p>\nKeybinder\n<p>The keybinder app.<\/p>\nit.unibo.alchemist.boundary.interactions\n<p>it.unibo.alchemist.boundary.jfx.events.generic<\/p>\n<p>it.unibo.alchemist.boundary.jfx.events.keyboard<\/p>\n<p>it.unibo.alchemist.boundary.jfx.events.mouse<\/p>\n<p>it.unibo.alchemist.boundary.monitors<\/p>\n<p>it.unibo.alchemist.boundary.util<\/p>\n<p>it.unibo.alchemist.boundary.monitor<\/p>\n<p>it.unibo.alchemist.boundary.gui<\/p>\n<p>it.unibo.alchemist.boundary.interfaces<\/p>\n<p>it.unibo.alchemist.boundary.gpsload.impl<\/p>\n<p>it.unibo.alchemist.boundary.gpsload.api<\/p>\n<p>it.unibo.alchemist.boundary.l10n<\/p>\n<p>it.unibo.alchemist.boundary.wormhole.implementation<\/p>\n<p>it.unibo.alchemist.boundary.wormhole.interfaces<\/p>\n<p>clear<\/p>\n<p>Clears a given canvas.<\/p>\ncreateDrawRectangleCommand\n<p>Returns a command for drawing the given rectangle on the caller canvas.<\/p>\nmakePoint\n<p>Creates a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Point.html\">Point<\/a>.<\/p>\nintersectingNodes\n<p>Returns the nodes intersecting with the caller rectangle.<\/p>\ncontains\n<p>Returns whether the  Rectangle  contains  point .<\/p>\nplus\n<p>Sums  this  and the given <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Point.html\">Point<\/a>.<\/p>\nminus\n<p>Subtracts  this  and the given <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Point.html\">Point<\/a>.<\/p>\nmakeRectangleWith\n<p>Creates a rectangle that has  this  and  other  as its opposite-diagonal vertexes.<\/p>\n"
                }]
              },
              "cli": {
                "ownKey": "cli",
                "childrenPages": {"climaker": {
                  "ownKey": "climaker",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/cli/climaker",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/cli/climaker"
                    },
                    "description": "",
                    "title": "CLIMaker",
                    "content": "<p>This support class generates a CLI interface backed by a property file.<\/p>getOptions\n"
                  }]
                }},
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/cli",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/cli"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.cli",
                  "content": "<p>CLIMaker<\/p>\n<p>This support class generates a CLI interface backed by a property file.<\/p>\n"
                }]
              },
              "alchemist": {
                "ownKey": "alchemist",
                "childrenPages": {"alchemistwouldhaveexitedexception": {
                  "ownKey": "alchemistwouldhaveexitedexception",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/alchemist/alchemistwouldhaveexitedexception",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/alchemist/alchemistwouldhaveexitedexception"
                    },
                    "description": "",
                    "title": "AlchemistWouldHaveExitedException",
                    "content": "<p>This exception is thrown in place of calling <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#exit(int)\">System.exit<\/a> when the simulator is used in debug mode.\nThe  exitStatus  returns the exit status the execution would have had.<\/p>exitStatus\n<p><init><\/p>\n<p>This exception is thrown in place of calling <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/System.html#exit(int)\">System.exit<\/a> when the simulator is used in debug mode.\nThe  exitStatus  returns the exit status the execution would have had.<\/p>\n"
                  }]
                }},
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/alchemist",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/alchemist"
                  },
                  "description": "",
                  "title": "Alchemist",
                  "content": "<p>Starts Alchemist.<\/p>main\n<p>enableTestMode<\/p>\n<p>Call this method to enable testing mode, preventing Alchemist from shutting down the JVM.<\/p>\n"
                }]
              },
              "loader": {
                "ownKey": "loader",
                "childrenPages": {
                  "yamlloader": {
                    "ownKey": "yamlloader",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/loader/yamlloader",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/yamlloader"
                      },
                      "description": "",
                      "title": "YamlLoader",
                      "content": "<p>Loads a properly formatted YAML file and provides method for instancing a batch of scenarios.<\/p><init>\n\n<init>\n\n<init>\n\ngetVariables\n\ngetDefault\n\ngetWith\n\ngetConstants\n\ngetDependencies\n\ngetDependentVariables\n\ngetDataExtractors\n\n"
                    }]
                  },
                  "graphstreamsupport": {
                    "ownKey": "graphstreamsupport",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/loader/graphstreamsupport",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/graphstreamsupport"
                      },
                      "description": "",
                      "title": "GraphStreamSupport",
                      "content": "<p>Support class for GraphStream, composed of a  linkingRule  and a  displacement .<\/p>linkingRule\n<p>displacement<\/p>\n<p><init><\/p>\n<p>Support class for GraphStream, composed of a  linkingRule  and a  displacement .<\/p>\nGraphStreamSupport\n<p>Support class for GraphStream, composed of a  linkingRule  and a  displacement .<\/p>\n"
                    }]
                  },
                  "variables": {
                    "ownKey": "variables",
                    "childrenPages": {
                      "jsr223variable": {
                        "ownKey": "jsr223variable",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/jsr223variable",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/jsr223variable"
                          },
                          "description": "",
                          "title": "JSR223Variable",
                          "content": "<p>This variable loads any <a href=\"http://archive.fo/PGdk8\">JSR-233<\/a> language available in the classpath.<\/p>language\n<p>can be the name of the language, the file extension, or its mime type<\/p>\nformula\n<p>the script that will get interpreted<\/p>\n<init>\n<p>builds a new JSR223Variable given a language name and a script.<\/p>\ngetWith\n<p>Given the current controlled variables, computes the current values for\nthis variable.<\/p>\n"
                        }]
                      },
                      "linearvariable": {
                        "ownKey": "linearvariable",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/linearvariable",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/linearvariable"
                          },
                          "description": "",
                          "title": "LinearVariable",
                          "content": "<p>This class represents a linear variable, namely a variable whose values span linearly between minimum and maximum.<\/p><init>\n\ngetDefault\n\nstream\n\nsteps\n\n"
                        }]
                      },
                      "arbitraryvariable": {
                        "ownKey": "arbitraryvariable",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/arbitraryvariable",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/arbitraryvariable"
                          },
                          "description": "",
                          "title": "ArbitraryVariable",
                          "content": "<p>A variable spanning over an arbitrary set of values.<\/p><init>\n\n<init>\n\ngetDefault\n\nstream\n\n"
                        }]
                      },
                      "flag": {
                        "ownKey": "flag",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/flag",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/flag"
                          },
                          "description": "",
                          "title": "Flag",
                          "content": "<p>This variable is a flag. Being booleans not a valid data type in charts, this variable just outputs 0 and 1. This is equivalent to a <code> LinearVariable <\/code> with two samples ranging from 0 to 1.<\/p><init>\n\ngetDefault\n\nstream\n\n"
                        }]
                      },
                      "geometricvariable": {
                        "ownKey": "geometricvariable",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/geometricvariable",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/geometricvariable"
                          },
                          "description": "",
                          "title": "GeometricVariable",
                          "content": "<p>A variable ranging geometrically (exponentially) in a range. Ideal for log-scale comparisons. e.g. a <code> GeometricVariable <\/code> with minimum = 1, maximum = 100 and samples = 5 will range over [1, ~3.16, 10, ~31.62 100]. Both min and max must be strictly bigger than 0.<\/p><init>\n\ngetDefault\n\nstream\n\ntoString\n\n"
                        }]
                      },
                      "variable": {
                        "ownKey": "variable",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/variable",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/variable"
                          },
                          "description": "",
                          "title": "Variable",
                          "content": "<p>A variable simulation value, that provides a range of values for batches, and a default value for single-shot runs.<\/p>getDefault\n<p>stream<\/p>\n<p>steps<\/p>\n<p>iterator<\/p>\n"
                        }]
                      },
                      "numericconstant": {
                        "ownKey": "numericconstant",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/numericconstant",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/numericconstant"
                          },
                          "description": "",
                          "title": "NumericConstant",
                          "content": "<p>A numeric constant.<\/p><init>\n\ngetWith\n\n"
                        }]
                      },
                      "dependentvariable": {
                        "ownKey": "dependentvariable",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/dependentvariable",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/dependentvariable"
                          },
                          "description": "",
                          "title": "DependentVariable",
                          "content": "<p>A dependent variable, namely a variable whose value can be obtained given the values of other variables.<\/p>getWith\n<p>Given the current controlled variables, computes the current values for this variable.<\/p>\n"
                        }]
                      },
                      "printablevariable": {
                        "ownKey": "printablevariable",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/variables/printablevariable",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables/printablevariable"
                          },
                          "description": "",
                          "title": "PrintableVariable",
                          "content": "<p>A variable stub, with a default <code> #toString() <\/code> method.<\/p><init>\n<p>A variable stub, with a default <code> #toString() <\/code> method.<\/p>\ntoString\n\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/loader/variables",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/variables"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.loader.variables",
                      "content": "<p>JSR223Variable<\/p>\n<p>This variable loads any <a href=\"http://archive.fo/PGdk8\">JSR-233<\/a> language available in the classpath.<\/p>\nNumericConstant\n<p>A numeric constant.<\/p>\nVariable\n<p>A variable simulation value, that provides a range of values for batches, and a default value for single-shot runs.<\/p>\nLinearVariable\n<p>This class represents a linear variable, namely a variable whose values span linearly between minimum and maximum.<\/p>\nArbitraryVariable\n<p>A variable spanning over an arbitrary set of values.<\/p>\nPrintableVariable\n<p>A variable stub, with a default <code> #toString() <\/code> method.<\/p>\nGeometricVariable\n<p>A variable ranging geometrically (exponentially) in a range. Ideal for log-scale comparisons. e.g. a <code> GeometricVariable <\/code> with minimum = 1, maximum = 100 and samples = 5 will range over [1, ~3.16, 10, ~31.62 100]. Both min and max must be strictly bigger than 0.<\/p>\nDependentVariable\n<p>A dependent variable, namely a variable whose value can be obtained given the values of other variables.<\/p>\nFlag\n<p>This variable is a flag. Being booleans not a valid data type in charts, this variable just outputs 0 and 1. This is equivalent to a <code> LinearVariable <\/code> with two samples ranging from 0 to 1.<\/p>\n"
                    }]
                  },
                  "shapes": {
                    "ownKey": "shapes",
                    "childrenPages": {
                      "shape": {
                        "ownKey": "shape",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/shapes/shape",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/shape"
                          },
                          "description": "",
                          "title": "Shape",
                          "content": "<p>A Shape, representing an partition of the space where a <code> Position <\/code> may lie in.<\/p>contains\n"
                        }]
                      },
                      "rectangle": {
                        "ownKey": "rectangle",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/shapes/rectangle",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/rectangle"
                          },
                          "description": "",
                          "title": "Rectangle",
                          "content": "<p>A Rectangle.<\/p><init>\n\n"
                        }]
                      },
                      "abstract2dshape": {
                        "ownKey": "abstract2dshape",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/shapes/abstract2dshape",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/abstract2dshape"
                          },
                          "description": "",
                          "title": "Abstract2DShape",
                          "content": "<p>A bidimensional Alchemist <code> Shape <\/code> that relies on AWT <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a><\/code>.<\/p><init>\n\ncontains\n\ntoString\n\n"
                        }]
                      },
                      "circle": {
                        "ownKey": "circle",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/shapes/circle",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/circle"
                          },
                          "description": "",
                          "title": "Circle",
                          "content": "<p>A circle.<\/p><init>\n\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/loader/shapes",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.loader.shapes",
                      "content": "<p>Shape<\/p>\n<p>A Shape, representing an partition of the space where a <code> Position <\/code> may lie in.<\/p>\nRectangle\n<p>A Rectangle.<\/p>\nCircle\n<p>A circle.<\/p>\nAbstract2DShape\n<p>A bidimensional Alchemist <code> Shape <\/code> that relies on AWT <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a><\/code>.<\/p>\n"
                    }]
                  },
                  "loader": {
                    "ownKey": "loader",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/loader/loader",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/loader"
                      },
                      "description": "",
                      "title": "Loader",
                      "content": "<p>An entity which is able to produce an Alchemist <code> Environment <\/code>, possibly with user defined variable values.<\/p>getDefault\n<p>getVariables<\/p>\n<p>getWith<\/p>\n<p>getConstants<\/p>\n<p>Allows to access the currently defined constants, namely variables defined in the simulation file whose value is constant and does not depend on the value of any free variable (directly or indirectly).<\/p>\ngetDependencies\n<p>getDependentVariables<\/p>\n<p>Allows to access the currently defined dependent variable (those variables whose value can be determined given a valid set of values for the free variables).<\/p>\ngetDataExtractors\n"
                    }]
                  },
                  "displacements": {
                    "ownKey": "displacements",
                    "childrenPages": {
                      "graphstreamdisplacement": {
                        "ownKey": "graphstreamdisplacement",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/graphstreamdisplacement",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/graphstreamdisplacement"
                          },
                          "description": "",
                          "title": "GraphStreamDisplacement",
                          "content": "<p>A deployment based on a <a href=\"https://graphstream-project.org/\">GraphStream<\/a> graph.<\/p>associatedLinkingRule\n<p>The  LinkingRule  associated with this  GraphStreamDisplacement ,\nor null if the displacement has been created without static linking.<\/p>\n<init>\n<p>Builds a new GraphStream-based deployment, given the  nodeCount ,\nwhether or not the arcs of such graph shoud be links ( createLinks ),\nthe  generatorName  (must be the name of a subclass of BaseGenerator),\nand its  parameters .<\/p>\n<init>\n<p>A deployment based on a <a href=\"https://graphstream-project.org/\">GraphStream<\/a> graph.<\/p>\n"
                        }]
                      },
                      "fromgpstrace": {
                        "ownKey": "fromgpstrace",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/fromgpstrace",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/fromgpstrace"
                          },
                          "description": "",
                          "title": "FromGPSTrace",
                          "content": "<p>Distributes nodes in the first positions of <code> it.unibo.alchemist.model.interfaces.GPSTrace <\/code>.<\/p><init>\n\nstream\n\n"
                        }]
                      },
                      "closetoalreadydisplaced": {
                        "ownKey": "closetoalreadydisplaced",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/closetoalreadydisplaced",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/closetoalreadydisplaced"
                          },
                          "description": "",
                          "title": "CloseToAlreadyDisplaced",
                          "content": "<p>This  Displacement  places new nodes in the proximity of those already included in the environment.\nBehaviour if there are no nodes already inserted is undefined.<\/p>sources\n<p><init><\/p>\n<p>This  Displacement  places new nodes in the proximity of those already included in the environment.\nBehaviour if there are no nodes already inserted is undefined.<\/p>\n"
                        }]
                      },
                      "abstractcloseto": {
                        "ownKey": "abstractcloseto",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/abstractcloseto",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/abstractcloseto"
                          },
                          "description": "",
                          "title": "AbstractCloseTo",
                          "content": "<p>A generic  Displacement  that displaces a certain  nodeCount  of nodes in the proximity of a number of  sources .\nHigher  variance  implies higher dispersion.\nSubclasses must identify the  sources <\/p>sources\n<p>randomGenerator<\/p>\n<p>environment<\/p>\n<p>nodeCount<\/p>\n<p>variance<\/p>\n<p><init><\/p>\n<p>A generic  Displacement  that displaces a certain  nodeCount  of nodes in the proximity of a number of  sources .\nHigher  variance  implies higher dispersion.\nSubclasses must identify the  sources <\/p>\ncovarianceMatrix\n<p>stream<\/p>\n"
                        }]
                      },
                      "point": {
                        "ownKey": "point",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/point",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/point"
                          },
                          "description": "",
                          "title": "Point",
                          "content": "<p>A single node in a single point.<\/p><init>\n\nstream\n\n"
                        }]
                      },
                      "closetogpstrace": {
                        "ownKey": "closetogpstrace",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/closetogpstrace",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/closetogpstrace"
                          },
                          "description": "",
                          "title": "CloseToGPSTrace",
                          "content": "<p>This  Displacement  displaces nodes in the proximity of a GPS trace.\nGiven a time interval from some time  to  another,\nit creates a  TraceLoader , then uses the points in the interval to generate the sources for a\nGaussian bivariate function and uses its probability density to deploy.\nHigher  variance  spreads nodes farther away from the trace with higher probability.<\/p>sources\n<p>to<\/p>\n<p><init><\/p>\n<p>This  Displacement  displaces nodes in the proximity of a GPS trace.\nGiven a time interval from some time  to  another,\nit creates a  TraceLoader , then uses the points in the interval to generate the sources for a\nGaussian bivariate function and uses its probability density to deploy.\nHigher  variance  spreads nodes farther away from the trace with higher probability.<\/p>\n"
                        }]
                      },
                      "polygon": {
                        "ownKey": "polygon",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/polygon",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/polygon"
                          },
                          "description": "",
                          "title": "Polygon",
                          "content": "<p>Creates a new Polygon with the given points.<\/p>polygon\n<p>The polygon in which positions are generated.<\/p>\nbounds\n<p>The rectangular bounds of the polygon.<\/p>\nisOnMaps\n<p>True if this environment works with  GeoPosition .<\/p>\ntoPosition\n<p>Converts a Point2D to a  P .<\/p>\n<init>\n<p>Creates a new Polygon with the given points.<\/p>\nindexToPosition\n\nmoveTo\n<p>Moves the path to the specified  Position2D .<\/p>\nlineTo\n<p>Adds a line to the path, connecting it to the specified  Position2D .<\/p>\ncontains\n<p>Checks if a  Position2D  is inside the Polygon.<\/p>\n"
                        }]
                      },
                      "grid": {
                        "ownKey": "grid",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/grid",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/grid"
                          },
                          "description": "",
                          "title": "Grid",
                          "content": "<p>A (possibly randomized) grid of nodes.<\/p><init>\n<p>A (possibly randomized) grid of nodes.<\/p>\nstream\n\n"
                        }]
                      },
                      "specificpositions": {
                        "ownKey": "specificpositions",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/specificpositions",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/specificpositions"
                          },
                          "description": "",
                          "title": "SpecificPositions",
                          "content": "<p>Given an environment and a list of list of numbers, it creates a list of the right position type for the environment.<\/p><init>\n<p>Given an environment and a list of list of numbers, it creates a list of the right position type for the environment.<\/p>\nstream\n\n"
                        }]
                      },
                      "rectangle": {
                        "ownKey": "rectangle",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/rectangle",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/rectangle"
                          },
                          "description": "",
                          "title": "Rectangle",
                          "content": "<p><init><\/p>\n<p>indexToPosition<\/p>\n<p>getX<\/p>\n<p>getHeight<\/p>\n<p>getY<\/p>\n<p>getWidth<\/p>\n"
                        }]
                      },
                      "displacement": {
                        "ownKey": "displacement",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/displacement",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/displacement"
                          },
                          "description": "",
                          "title": "Displacement",
                          "content": "<p>stream<\/p>\n<p>iterator<\/p>\n"
                        }]
                      },
                      "abstractrandomdisplacement": {
                        "ownKey": "abstractrandomdisplacement",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/abstractrandomdisplacement",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/abstractrandomdisplacement"
                          },
                          "description": "",
                          "title": "AbstractRandomDisplacement",
                          "content": "<p>environment<\/p>\n<p>the  Environment <\/p>\nrandomGenerator\n<p>the <a href=\"#\">RandomGenerator<\/a><\/p>\nnodeCount\n<p>the number of nodes<\/p>\n<init>\n\nstream\n\nmakePosition\n<p>Builds a position, relying on the internal  Environment .<\/p>\nrandomDouble\n\nrandomDouble\n\nrandomInt\n\nindexToPosition\n\n"
                        }]
                      },
                      "circle": {
                        "ownKey": "circle",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/circle",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/circle"
                          },
                          "description": "",
                          "title": "Circle",
                          "content": "<p><init><\/p>\n<p>indexToPosition<\/p>\n"
                        }]
                      },
                      "geometricgradientrectangle": {
                        "ownKey": "geometricgradientrectangle",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/geometricgradientrectangle",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/geometricgradientrectangle"
                          },
                          "description": "",
                          "title": "GeometricGradientRectangle",
                          "content": "<p>Distributes nodes geometrically within a rectangular shape.<\/p><init>\n<p>Use this constructor to displace multiple groups of devices with exponentially varied density along an axis.<\/p>\n<init>\n<p>Use this constructor to displace devices with an exponentially varied density along an axis.<\/p>\nindexToPosition\n\n"
                        }]
                      },
                      "point2d": {
                        "ownKey": "point2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/point2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/point2d"
                          },
                          "description": "",
                          "title": "Point2D",
                          "content": "<p>Alias for using pairs as bidimensional points.<\/p>\n"
                        }]
                      },
                      "circulararc": {
                        "ownKey": "circulararc",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/displacements/circulararc",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements/circulararc"
                          },
                          "description": "",
                          "title": "CircularArc",
                          "content": "<p>Displaces the nodes in the  environment  in a circular arc, given a  nodeCount ,\nthe coordinates of the circle's center  centerX  and  centerY ,\nthe circle's radius  radius ,\nperturbation randomness (uniform, generated via  randomGenerator )\nfor radius  radiusRandomness  and for angle  angleRandomness ,\na  startAngle , and an  endAngle .<\/p><p>Default values generate a uniform displacement on a circumference.<\/p>environment\n<p>randomGenerator<\/p>\n<p>nodeCount<\/p>\n<p>centerX<\/p>\n<p>centerY<\/p>\n<p>radius<\/p>\n<p>radiusRandomness<\/p>\n<p>angleRandomness<\/p>\n<p>startAngle<\/p>\n<p>endAngle<\/p>\n<p><init><\/p>\n<p>Displaces the nodes in the  environment  in a circular arc, given a  nodeCount ,\nthe coordinates of the circle's center  centerX  and  centerY ,\nthe circle's radius  radius ,\nperturbation randomness (uniform, generated via  randomGenerator )\nfor radius  radiusRandomness  and for angle  angleRandomness ,\na  startAngle , and an  endAngle .<\/p><p>Default values generate a uniform displacement on a circumference.<\/p>\nstream\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/loader/displacements",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/displacements"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.loader.displacements",
                      "content": "<p>AbstractCloseTo<\/p>\n<p>A generic  Displacement  that displaces a certain  nodeCount  of nodes in the proximity of a number of  sources .\nHigher  variance  implies higher dispersion.\nSubclasses must identify the  sources <\/p>\nAbstractRandomDisplacement\n<p>CircularArc<\/p>\n<p>Displaces the nodes in the  environment  in a circular arc, given a  nodeCount ,\nthe coordinates of the circle's center  centerX  and  centerY ,\nthe circle's radius  radius ,\nperturbation randomness (uniform, generated via  randomGenerator )\nfor radius  radiusRandomness  and for angle  angleRandomness ,\na  startAngle , and an  endAngle .<\/p><p>Default values generate a uniform displacement on a circumference.<\/p>\nCloseToAlreadyDisplaced\n<p>This  Displacement  places new nodes in the proximity of those already included in the environment.\nBehaviour if there are no nodes already inserted is undefined.<\/p>\nGraphStreamDisplacement\n<p>A deployment based on a <a href=\"https://graphstream-project.org/\">GraphStream<\/a> graph.<\/p>\nGrid\n<p>A (possibly randomized) grid of nodes.<\/p>\nPoint2D\n<p>Alias for using pairs as bidimensional points.<\/p>\nPolygon\n<p>Creates a new Polygon with the given points.<\/p>\nSpecificPositions\n<p>Given an environment and a list of list of numbers, it creates a list of the right position type for the environment.<\/p>\nCloseToGPSTrace\n<p>This  Displacement  displaces nodes in the proximity of a GPS trace.\nGiven a time interval from some time  to  another,\nit creates a  TraceLoader , then uses the points in the interval to generate the sources for a\nGaussian bivariate function and uses its probability density to deploy.\nHigher  variance  spreads nodes farther away from the trace with higher probability.<\/p>\nPoint\n<p>A single node in a single point.<\/p>\nDisplacement\n<p>GeometricGradientRectangle<\/p>\n<p>Distributes nodes geometrically within a rectangular shape.<\/p>\nRectangle\n<p>Circle<\/p>\n<p>FromGPSTrace<\/p>\n<p>Distributes nodes in the first positions of <code> it.unibo.alchemist.model.interfaces.GPSTrace <\/code>.<\/p>\nPoint2D\n<p>Alias for using pairs as bidimensional points.<\/p>\n"
                    }]
                  },
                  "illegalalchemistyamlexception": {
                    "ownKey": "illegalalchemistyamlexception",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/loader/illegalalchemistyamlexception",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/illegalalchemistyamlexception"
                      },
                      "description": "",
                      "title": "IllegalAlchemistYAMLException",
                      "content": "<p>This exception is thrown when the Alchemist YAML does not conform to the specification.<\/p><init>\n\n<init>\n\n"
                    }]
                  },
                  "export": {
                    "ownKey": "export",
                    "childrenPages": {
                      "meansquarederror": {
                        "ownKey": "meansquarederror",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/meansquarederror",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/meansquarederror"
                          },
                          "description": "",
                          "title": "MeanSquaredError",
                          "content": "<p>Exports the Mean Squared Error for the concentration of some molecule, given another molecule that carries the correct result. The correct value is extracted from every node, then the provided UnivariateStatistic is applied to get a single, global correct value. Then, the actual value is extracted from every node, its value is compared (subtracted) to the computed correct value, it gets squared, and then logged.<\/p><init>\n\nextractData\n\ngetNames\n\n"
                        }]
                      },
                      "executiontime": {
                        "ownKey": "executiontime",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/executiontime",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/executiontime"
                          },
                          "description": "",
                          "title": "ExecutionTime",
                          "content": "<p>An extractor which provides informations about the running time of the simulation.<\/p><init>\n<p>An extractor which provides informations about the running time of the simulation.<\/p>\nextractData\n\ngetNames\n\n"
                        }]
                      },
                      "statistic": {
                        "ownKey": "statistic",
                        "childrenPages": {"countdistinct": {
                          "ownKey": "countdistinct",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/loader/export/statistic/countdistinct",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/statistic/countdistinct"
                            },
                            "description": "",
                            "title": "CountDistinct",
                            "content": "<p>Counts the number of distinct entries.<\/p><init>\n<p>Counts the number of distinct entries.<\/p>\nevaluate\n\ncopy\n\ntoString\n\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/statistic",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/statistic"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.loader.export.statistic",
                          "content": "<p>CountDistinct<\/p>\n<p>Counts the number of distinct entries.<\/p>\n"
                        }]
                      },
                      "exporter": {
                        "ownKey": "exporter",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/exporter",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/exporter"
                          },
                          "description": "",
                          "title": "Exporter",
                          "content": "<p>Writes on file data provided by a number of <code> Extractor <\/code>s. Produces a CSV with '#' as comment character. Even though this class implements <code> OutputMonitor <\/code>, it is not <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">java.io.Serializable<\/a><\/code>.<\/p><init>\n\nfinished\n\ninitialized\n\nstepDone\n\n"
                        }]
                      },
                      "numberofnodes": {
                        "ownKey": "numberofnodes",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/numberofnodes",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/numberofnodes"
                          },
                          "description": "",
                          "title": "NumberOfNodes",
                          "content": "<p>Logs the number of nodes in the scenario.<\/p><init>\n<p>Logs the number of nodes in the scenario.<\/p>\nextractData\n\ngetNames\n\n"
                        }]
                      },
                      "filteringpolicy": {
                        "ownKey": "filteringpolicy",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/filteringpolicy",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/filteringpolicy"
                          },
                          "description": "",
                          "title": "FilteringPolicy",
                          "content": "<p>Expresses a flat map operation over a double.<\/p>apply\n<p>From a single value, builds a stream of values.<\/p>\n"
                        }]
                      },
                      "extractor": {
                        "ownKey": "extractor",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/extractor",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/extractor"
                          },
                          "description": "",
                          "title": "Extractor",
                          "content": "<p>An object that is able to extract numeric informations from an Alchemist <code> Environment <\/code>, given the current <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> <code> Time <\/code>, the last <code> Reaction <\/code> executed and the current simulation step.<\/p>extractData\n<p>Extracts numeric properties from an environment.<\/p>\ngetNames\n"
                        }]
                      },
                      "filters": {
                        "ownKey": "filters",
                        "childrenPages": {"commonfilters": {
                          "ownKey": "commonfilters",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/loader/export/filters/commonfilters",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/filters/commonfilters"
                            },
                            "description": "",
                            "title": "CommonFilters",
                            "content": "<p>Utilities with the most common filtering operations on values.<\/p>FILTERNAN\n<p>FILTERINFINITY<\/p>\n<p>ONLYFINITE<\/p>\n<p>NOFILTER<\/p>\n<p>getFilteringPolicy<\/p>\n<p>fromString<\/p>\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/filters",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/filters"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.loader.export.filters",
                          "content": "<p>CommonFilters<\/p>\n<p>Utilities with the most common filtering operations on values.<\/p>\n"
                        }]
                      },
                      "time": {
                        "ownKey": "time",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/time",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/time"
                          },
                          "description": "",
                          "title": "Time",
                          "content": "<p>Exports a column with the current time.<\/p><init>\n<p>Exports a column with the current time.<\/p>\nextractData\n\ngetNames\n\n"
                        }]
                      },
                      "moleculereader": {
                        "ownKey": "moleculereader",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/moleculereader",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/moleculereader"
                          },
                          "description": "",
                          "title": "MoleculeReader",
                          "content": "<p>Reads the value of a molecule and logs it.<\/p><init>\n\nextractData\n\ngetNames\n\n"
                        }]
                      },
                      "statutil": {
                        "ownKey": "statutil",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/loader/export/statutil",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export/statutil"
                          },
                          "description": "",
                          "title": "StatUtil",
                          "content": "<p>Utility to translate statistics names into a UnivariateStatistic.<\/p>makeUnivariateStatistic\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/loader/export",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/export"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.loader.export",
                      "content": "<p>ExecutionTime<\/p>\n<p>An extractor which provides informations about the running time of the simulation.<\/p>\nExtractor\n<p>An object that is able to extract numeric informations from an Alchemist <code> Environment <\/code>, given the current <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> <code> Time <\/code>, the last <code> Reaction <\/code> executed and the current simulation step.<\/p>\nMeanSquaredError\n<p>Exports the Mean Squared Error for the concentration of some molecule, given another molecule that carries the correct result. The correct value is extracted from every node, then the provided UnivariateStatistic is applied to get a single, global correct value. Then, the actual value is extracted from every node, its value is compared (subtracted) to the computed correct value, it gets squared, and then logged.<\/p>\nFilteringPolicy\n<p>Expresses a flat map operation over a double.<\/p>\nTime\n<p>Exports a column with the current time.<\/p>\nExporter\n<p>Writes on file data provided by a number of <code> Extractor <\/code>s. Produces a CSV with '#' as comment character. Even though this class implements <code> OutputMonitor <\/code>, it is not <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">java.io.Serializable<\/a><\/code>.<\/p>\nNumberOfNodes\n<p>Logs the number of nodes in the scenario.<\/p>\nStatUtil\n<p>Utility to translate statistics names into a UnivariateStatistic.<\/p>\nMoleculeReader\n<p>Reads the value of a molecule and logs it.<\/p>\nit.unibo.alchemist.loader.export.statistic\n<p>it.unibo.alchemist.loader.export.filters<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/loader",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.loader",
                  "content": "<p>GraphStreamSupport<\/p>\n<p>Support class for GraphStream, composed of a  linkingRule  and a  displacement .<\/p>\nLoader\n<p>An entity which is able to produce an Alchemist <code> Environment <\/code>, possibly with user defined variable values.<\/p>\nIllegalAlchemistYAMLException\n<p>This exception is thrown when the Alchemist YAML does not conform to the specification.<\/p>\nYamlLoader\n<p>Loads a properly formatted YAML file and provides method for instancing a batch of scenarios.<\/p>\nit.unibo.alchemist.loader.displacements\n<p>it.unibo.alchemist.loader.variables<\/p>\n<p>it.unibo.alchemist.loader.export<\/p>\n<p>it.unibo.alchemist.loader.shapes<\/p>\n"
                }]
              },
              "launch": {
                "ownKey": "launch",
                "childrenPages": {
                  "singlerunfxui": {
                    "ownKey": "singlerunfxui",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/singlerunfxui",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/singlerunfxui"
                      },
                      "description": "",
                      "title": "SingleRunFXUI",
                      "content": "<p>Executes simulations locally with a JavaFX UI.<\/p>name\n<p>Launcher name.<\/p>\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\n"
                    }]
                  },
                  "igniteserverlauncher": {
                    "ownKey": "igniteserverlauncher",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/igniteserverlauncher",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/igniteserverlauncher"
                      },
                      "description": "",
                      "title": "IgniteServerLauncher",
                      "content": "<p>Launches a service waiting for simulations to be sent over the network.<\/p>name\n<p>Launcher name.<\/p>\nvalidate\n<p>Given the  currentOptions , decides whether or not this  Launcher  is executable.<\/p>\nlaunch\n<p>Actually gets the job done by performing the requested operations.<\/p>\n"
                    }]
                  },
                  "singlerunswingui": {
                    "ownKey": "singlerunswingui",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/singlerunswingui",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/singlerunswingui"
                      },
                      "description": "",
                      "title": "SingleRunSwingUI",
                      "content": "<p>Launches a Swing GUI meant to be used for a single simulation run.<\/p>name\n<p>Launcher name.<\/p>\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\n"
                    }]
                  },
                  "headlesssimulationlauncher": {
                    "ownKey": "headlesssimulationlauncher",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/headlesssimulationlauncher",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/headlesssimulationlauncher"
                      },
                      "description": "",
                      "title": "HeadlessSimulationLauncher",
                      "content": "<p>Executes simulations locally in a headless environment.<\/p>name\n<p>Launcher name.<\/p>\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\n"
                    }]
                  },
                  "priority": {
                    "ownKey": "priority",
                    "childrenPages": {
                      "normal": {
                        "ownKey": "normal",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/launch/priority/normal",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/priority/normal"
                          },
                          "description": "",
                          "title": "Normal",
                          "content": "<p>Default priority, to be returned when the requested options fit the expected configuration.<\/p>\n"
                        }]
                      },
                      "high": {
                        "ownKey": "high",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/launch/priority/high",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/priority/high"
                          },
                          "description": "",
                          "title": "High",
                          "content": "<p>The loader overrides the behaviour of the loaders provided by default, for the same options.\nIt must specify a  reason .<\/p>reason\n<p><init><\/p>\n<p>The loader overrides the behaviour of the loaders provided by default, for the same options.\nIt must specify a  reason .<\/p>\n"
                        }]
                      },
                      "fallback": {
                        "ownKey": "fallback",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/launch/priority/fallback",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/priority/fallback"
                          },
                          "description": "",
                          "title": "Fallback",
                          "content": "<p>A low priority, indicating that the  Launcher  may run, but it will ignore some options,\nand other launchers will be preferred. It must emit a  warning .<\/p>warning\n<p><init><\/p>\n<p>A low priority, indicating that the  Launcher  may run, but it will ignore some options,\nand other launchers will be preferred. It must emit a  warning .<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/priority",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/priority"
                      },
                      "description": "",
                      "title": "Priority",
                      "content": "<p>Defines the likelihood that the configuration is compatible with a  Launcher .<\/p>compareTo\n<p>toString<\/p>\n"
                    }]
                  },
                  "abstractlauncher": {
                    "ownKey": "abstractlauncher",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/abstractlauncher",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/abstractlauncher"
                      },
                      "description": "",
                      "title": "AbstractLauncher",
                      "content": "<p>Provides utility functions for  Launcher  implementors.<\/p><init>\n<p>Provides utility functions for  Launcher  implementors.<\/p>\nincompatibleWith\n<p>Creates a  Validation.Invalid  expliciting what is the option this  Launcher  is incompatible with.<\/p>\nrequires\n<p>Creates a  Validation.Invalid  expliciting which option is required to run this  Launcher .<\/p>\ntoString\n\n"
                    }]
                  },
                  "validation": {
                    "ownKey": "validation",
                    "childrenPages": {
                      "invalid": {
                        "ownKey": "invalid",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/launch/validation/invalid",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/validation/invalid"
                          },
                          "description": "",
                          "title": "Invalid",
                          "content": "<p>The  Launcher  can't run and provides a  reason .<\/p>reason\n<p><init><\/p>\n<p>The  Launcher  can't run and provides a  reason .<\/p>\n"
                        }]
                      },
                      "ok": {
                        "ownKey": "ok",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/launch/validation/ok",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/validation/ok"
                          },
                          "description": "",
                          "title": "OK",
                          "content": "<p>The  Launcher  can run with some  priority .<\/p>priority\n<p><init><\/p>\n<p>The  Launcher  can run with some  priority .<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/validation",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/validation"
                      },
                      "description": "",
                      "title": "Validation",
                      "content": "<p>Result of the validation of a launcher.<\/p>\n"
                    }]
                  },
                  "simulationlauncher": {
                    "ownKey": "simulationlauncher",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/simulationlauncher",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/simulationlauncher"
                      },
                      "description": "",
                      "title": "SimulationLauncher",
                      "content": "<p>A launcher stub for simulation execution.\nTakes care of creating a  Loader ,\nand provides support functions for generating simulations and computing the possible parameters configurations.<\/p><init>\n<p>A launcher stub for simulation execution.\nTakes care of creating a  Loader ,\nand provides support functions for generating simulations and computing the possible parameters configurations.<\/p>\nvalidate\n<p>Given the  currentOptions , decides whether or not this  Launcher  is executable.<\/p>\nlaunch\n<p>Actually gets the job done by performing the requested operations.<\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\ncartesianProductOf\n\nprepareSimulation\n\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\n"
                    }]
                  },
                  "distributedexecution": {
                    "ownKey": "distributedexecution",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/distributedexecution",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/distributedexecution"
                      },
                      "description": "",
                      "title": "DistributedExecution",
                      "content": "<p>Launches a simulation set on a cluster of Alchemist nodes running in server mode.<\/p>name\n<p>Launcher name.<\/p>\nadditionalValidation\n<p>Allows subclasses to perform further checks before getting executed. Defaults to simply return  Validation.OK <\/p>\nlaunch\n<p>Launches a simulation using the provided  loader  and option  parameters .<\/p>\n"
                    }]
                  },
                  "launcher": {
                    "ownKey": "launcher",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/launch/launcher",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch/launcher"
                      },
                      "description": "",
                      "title": "Launcher",
                      "content": "<p>An entity with a  name  that can take responsibility for performing an Alchemist run, given the current\n AlchemistExecutionOptions .<\/p>name\n<p>Launcher name.<\/p>\nvalidate\n<p>Given the  currentOptions , decides whether or not this  Launcher  is executable.<\/p>\ninvoke\n<p>Actual execution. Implementors are <b>not<\/b> supposed to override this behaviour, although they can.\nThe default implementation performs validation, and if successful calls  launch .\nOtherwise, throws an <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html\">IllegalStateException<\/a>.<\/p>\nlaunch\n<p>Actually gets the job done by performing the requested operations.<\/p>\nLauncher\n<p>An entity with a  name  that can take responsibility for performing an Alchemist run, given the current\n AlchemistExecutionOptions .<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/launch",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/launch"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.launch",
                  "content": "<p>SingleRunFXUI<\/p>\n<p>Executes simulations locally with a JavaFX UI.<\/p>\nDistributedExecution\n<p>Launches a simulation set on a cluster of Alchemist nodes running in server mode.<\/p>\nIgniteServerLauncher\n<p>Launches a service waiting for simulations to be sent over the network.<\/p>\nSingleRunSwingUI\n<p>Launches a Swing GUI meant to be used for a single simulation run.<\/p>\nAbstractLauncher\n<p>Provides utility functions for  Launcher  implementors.<\/p>\nHeadlessSimulationLauncher\n<p>Executes simulations locally in a headless environment.<\/p>\nLauncher\n<p>An entity with a  name  that can take responsibility for performing an Alchemist run, given the current\n AlchemistExecutionOptions .<\/p>\nValidation\n<p>Result of the validation of a launcher.<\/p>\nPriority\n<p>Defines the likelihood that the configuration is compatible with a  Launcher .<\/p>\nSimulationLauncher\n<p>A launcher stub for simulation execution.\nTakes care of creating a  Loader ,\nand provides support functions for generating simulations and computing the possible parameters configurations.<\/p>\n"
                }]
              },
              "wormhole": {
                "ownKey": "wormhole",
                "childrenPages": {"implementation": {
                  "ownKey": "implementation",
                  "childrenPages": {
                    "leafletmapwormhole": {
                      "ownKey": "leafletmapwormhole",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/wormhole/implementation/leafletmapwormhole",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/wormhole/implementation/leafletmapwormhole"
                        },
                        "description": "",
                        "title": "LeafletMapWormhole",
                        "content": "<p>The wormhole used for managing a  CustomLeafletMapView .<\/p><init>\n<p>The wormhole used for managing a  CustomLeafletMapView .<\/p>\ngetEnvPoint\n\ngetViewPoint\n\nrotateAroundPoint\n\nsetEnvPosition\n\nsetViewPosition\n\noptimalZoom\n\nsetZoom\n\nzoomOnPoint\n\n"
                      }]
                    },
                    "adapter": {
                      "ownKey": "adapter",
                      "childrenPages": {"nodeviewport": {
                        "ownKey": "nodeviewport",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/wormhole/implementation/adapter/nodeviewport",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/wormhole/implementation/adapter/nodeviewport"
                          },
                          "description": "",
                          "title": "NodeViewPort",
                          "content": "<p>Adapter class that adapts the JavaFX Node class to a generic ViewPort for usage in <code> it.unibo.alchemist.boundary.wormhole.interfaces.Wormhole2D <\/code>.<\/p><init>\n<p>Default constructor.<\/p>\nsetNode\n<p>Setter method for the node to be adapted.<\/p>\nhashCode\n<p>.<\/p>\ngetHeight\n<p>Getter method for the height of the adapted view..<\/p>\nequals\n<p>.<\/p>\ngetNode\n<p>Getter method for the node to be adapted.<\/p>\ngetWidth\n<p>Getter method for the width of the adapted view..<\/p>\n"
                        }]
                      }},
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/wormhole/implementation/adapter",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/wormhole/implementation/adapter"
                        },
                        "description": "",
                        "title": "it.unibo.alchemist.wormhole.implementation.adapter",
                        "content": "<p>NodeViewPort<\/p>\n<p>Adapter class that adapts the JavaFX Node class to a generic ViewPort for usage in <code> it.unibo.alchemist.boundary.wormhole.interfaces.Wormhole2D <\/code>.<\/p>\n"
                      }]
                    },
                    "wormholefx": {
                      "ownKey": "wormholefx",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/wormhole/implementation/wormholefx",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/wormhole/implementation/wormholefx"
                        },
                        "description": "",
                        "title": "WormholeFX",
                        "content": "<p>An implementation of  AbstractWormhole2D  for JavaFX.<\/p><init>\n<p>An implementation of  AbstractWormhole2D  for JavaFX.<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/wormhole/implementation",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/wormhole/implementation"
                    },
                    "description": "",
                    "title": "it.unibo.alchemist.wormhole.implementation",
                    "content": "<p>LeafletMapWormhole<\/p>\n<p>The wormhole used for managing a  CustomLeafletMapView .<\/p>\nWormholeFX\n<p>An implementation of  AbstractWormhole2D  for JavaFX.<\/p>\nit.unibo.alchemist.wormhole.implementation.adapter\n<p>toLatLong<\/p>\n<p>Converts  this  to <a href=\"#\">LatLong<\/a>.<\/p>\ntoGeoPosition\n<p>Converts <a href=\"#\">this<\/a> to  GeoPosition .<\/p>\n"
                  }]
                }}
              },
              "alchemistexecutionoptions": {
                "ownKey": "alchemistexecutionoptions",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/alchemistexecutionoptions",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/alchemistexecutionoptions"
                  },
                  "description": "",
                  "title": "AlchemistExecutionOptions",
                  "content": "<p>Alchemist options provided by the command line.<\/p>isEmpty\n<p>returns true if all options are set to their default value.<\/p>\nconfiguration\n<p>null if no simulation file is specified (default), file path otherwise<\/p>\nheadless\n<p>true if forced, false otherwise (default)<\/p>\nvariables\n<p>selected batch variables. Defaults to <a href=\"#\">emptyList<\/a><\/p>\nbatch\n<p>whether batch mode is selected.<\/p>\nexport\n<p>the path to the file root of the data to export, or null if unspecified (export disabled).<\/p>\ndistributed\n<p>the path to the file with the load distribution configuration, or null if the run is local<\/p>\ngraphics\n<p>the path to the effects file, or null if unspecified<\/p>\nfxui\n<p>whether the JavaFX UI takes priority over the default Swing UI<\/p>\nhelp\n<p>true if print help function is selected<\/p>\ninterval\n<p>sampling time, defaults to  defaultInterval <\/p>\nserver\n<p>if launched as Alchemist grid node server, the path to the configuration file. Null otherwise.<\/p>\nparallelism\n<p>parallel threads used for running locally. Defaults to  defaultParallelism <\/p>\nendTime\n<p>final simulation time. Defaults to  defaultEndTime <\/p>\n<init>\n<p>Alchemist options provided by the command line.<\/p>\nAlchemistExecutionOptions\n<p>Alchemist options provided by the command line.<\/p>\n"
                }]
              },
              "expressions": {
                "ownKey": "expressions",
                "childrenPages": {
                  "interfaces": {
                    "ownKey": "interfaces",
                    "childrenPages": {
                      "itreenode": {
                        "ownKey": "itreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/interfaces/itreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/interfaces/itreenode"
                          },
                          "description": "",
                          "title": "ITreeNode",
                          "content": "<p>Represents an interface for node of the Tree class.<\/p>toHashString\n<p>Similar to toString(), but returns a HashString.<\/p>\ngetLeftChild\n<p>getRightChild<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n<p>getData<\/p>\n<p>getNumberOfChildren<\/p>\n"
                        }]
                      },
                      "itree": {
                        "ownKey": "itree",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/interfaces/itree",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/interfaces/itree"
                          },
                          "description": "",
                          "title": "ITree",
                          "content": "<p>Represents a Tree of Objects(Node) of generic type T. The Tree is represented as a single rootElement which points to a List> of children. There is no restriction on the number of children that a particular node may have. This Tree provides a method to serialize the Tree into a List by doing a pre-order traversal.<\/p>evaluation\n<p>This evaluates the expression. If the matches map contains values which are not instanced, and the expression value cannot consequently be computed, 0d is returned.<\/p>\ngetRoot\n<p>Return the root Node of the tree.<\/p>\ntoHashString\n<p>Similar to toString(), but returns a HashString.<\/p>\nassignVarValue\n<p>This method substitutes variables present in matches map with their values. It must involve only node of Typ=Var. The method must also recognize the values type stored in the map (they can be Const or Num).<\/p>\n"
                        }]
                      },
                      "iexpression": {
                        "ownKey": "iexpression",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/interfaces/iexpression",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/interfaces/iexpression"
                          },
                          "description": "",
                          "title": "IExpression",
                          "content": "<p>getRootNodeType<\/p>\n<p>syntacticMatch<\/p>\n<p>Runs a syntactic match against the e.<\/p>\ngetAST\n<p>getRootNode<\/p>\n<p>getRightChildren<\/p>\n<p>getLeftChildren<\/p>\n<p>updateMatchedVar<\/p>\n<p>calculate<\/p>\n<p>mayMatch<\/p>\n<p>This match method test whether or not two expressions might match. It can be used to evaluate dependencies in a general fashion, it does not check if all the relations are satisfied (e.g. if applying the comparators) but makes a sort of \"type checking\". If you want to compare two templates, this is the way to go.<\/p>\ngetRootNodeData\n<p>matches<\/p>\n<p>Tries to match this expression with expr. The matching rules are: (i) a variable matches everything; (ii) a constant value matches an identical constant value; (iii) a number matches an identical number or an operator, (iv) operators match everything but constants, (v) comparators match numbers and operators (verifying the values); (vi) expr type can't be comparator; (vii) add and rem operators work only with lists.<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/expressions/interfaces",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/interfaces"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.expressions.interfaces",
                      "content": "<p>ITree<\/p>\n<p>Represents a Tree of Objects(Node) of generic type T. The Tree is represented as a single rootElement which points to a List> of children. There is no restriction on the number of children that a particular node may have. This Tree provides a method to serialize the Tree into a List by doing a pre-order traversal.<\/p>\nIExpression\n<p>ITreeNode<\/p>\n<p>Represents an interface for node of the Tree class.<\/p>\n"
                    }]
                  },
                  "parser": {
                    "ownKey": "parser",
                    "childrenPages": {
                      "expconstants": {
                        "ownKey": "expconstants",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/parser/expconstants",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/expconstants"
                          },
                          "description": "",
                          "title": "ExpConstants",
                          "content": "<p>Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()<\/p>EOF\n<p>End of File.<\/p>\nRETURN\n<p>RegularExpression Id.<\/p>\nMIN\n<p>RegularExpression Id.<\/p>\nMAX\n<p>RegularExpression Id.<\/p>\nADD\n<p>RegularExpression Id.<\/p>\nDEL\n<p>RegularExpression Id.<\/p>\nDEF\n<p>RegularExpression Id.<\/p>\nCOMP\n<p>RegularExpression Id.<\/p>\nLISTCOMP\n<p>RegularExpression Id.<\/p>\nUNARYLISTCOMP\n<p>RegularExpression Id.<\/p>\nNUM\n<p>RegularExpression Id.<\/p>\nVAR\n<p>RegularExpression Id.<\/p>\nLIT\n<p>RegularExpression Id.<\/p>\nDEFAULT\n<p>Lexical state.<\/p>\ntokenImage\n<p>Literal token values.<\/p>\n"
                        }]
                      },
                      "parseexception": {
                        "ownKey": "parseexception",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/parser/parseexception",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/parseexception"
                          },
                          "description": "",
                          "title": "ParseException",
                          "content": "<p>This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.<\/p>currentToken\n<p>This is the last token that has been consumed successfully. If this object has been created due to a parse error, the token followng this token will (therefore) be the first error token.<\/p>\nexpectedTokenSequences\n<p>Each entry in this array is an array of integers. Each array of integers represents a sequence of tokens (by their ordinal values) that is expected at this point of the parse.<\/p>\ntokenImage\n<p>This is a reference to the \"tokenImage\" array of the generated parser within which the parse error occurred. This array is defined in the generated ...Constants interface.<\/p>\neol\n<p>The end of line string for this machine.<\/p>\n<init>\n<p>This constructor is used by the method \"generateParseException\" in the generated parser. Calling this constructor generates a new object of this type with the fields \"currentToken\", \"expectedTokenSequences\", and \"tokenImage\" set.<\/p>\n<init>\n<p>The following constructors are for use by you for whatever purpose you can think of. Constructing the exception in this manner makes the exception behave in the normal way - i.e., as documented in the class \"Throwable\". The fields \"errorToken\", \"expectedTokenSequences\", and \"tokenImage\" do not contain relevant information. The JavaCC generated code does not use these constructors.<\/p>\n<init>\n<p>Constructor with message.<\/p>\n"
                        }]
                      },
                      "tokenmgrerror": {
                        "ownKey": "tokenmgrerror",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/parser/tokenmgrerror",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/tokenmgrerror"
                          },
                          "description": "",
                          "title": "TokenMgrError",
                          "content": "<p>Token Manager Error.<\/p>message\n<p>You can also modify the body of this method to customize your error messages. For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like : \"Internal Error : Please file a bug report .... \" from this method for such cases in the release version of your parser.<\/p>\n<init>\n<p>No arg constructor.<\/p>\n<init>\n<p>Constructor with message and reason.<\/p>\n<init>\n<p>Full Constructor.<\/p>\naddEscapes\n<p>Replaces unprintable characters by their escaped (or unicode escaped) equivalents in the given string<\/p>\nLexicalError\n<p>Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error. Parameters : EOFSeen : indicates if EOF caused the lexical error curLexState : lexical state in which this error occurred errorLine : line number when the error occurred errorColumn : column number when the error occurred errorAfter : prefix that was seen before this error occurred curchar : the offending character Note: You can customize the lexical error message by modifying this method.<\/p>\n"
                        }]
                      },
                      "exp": {
                        "ownKey": "exp",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/parser/exp",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/exp"
                          },
                          "description": "",
                          "title": "Exp",
                          "content": "<p>jj_nt<\/p>\n<p>Next token.<\/p>\ntoken\n<p>Current token.<\/p>\ntoken_source\n<p>Generated Token Manager.<\/p>\n<init>\n<p>Constructor with generated Token Manager.<\/p>\n<init>\n<p>Constructor with InputStream.<\/p>\n<init>\n<p>Constructor with InputStream and supplied encoding<\/p>\n<init>\n<p>Constructor.<\/p>\ngenerateParseException\n<p>Generate ParseException.<\/p>\nListExpr\n\nMaxExpr\n\nTimesExpr\n\ngetToken\n<p>Get the specific Token.<\/p>\nNumber\n\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nExpr\n\nunaryListComparator\n\nCost\n\nE\n\nModExpr\n\ndisable_tracing\n<p>Disable tracing.<\/p>\nComparator\n\nlistComparator\n\ngetNextToken\n<p>Get the next Token.<\/p>\nAtomicExpr\n\nInit\n\nenable_tracing\n<p>Enable tracing.<\/p>\nVar\n\nMinExpr\n\n"
                        }]
                      },
                      "simplecharstream": {
                        "ownKey": "simplecharstream",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/parser/simplecharstream",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/simplecharstream"
                          },
                          "description": "",
                          "title": "SimpleCharStream",
                          "content": "<p>An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).<\/p>bufpos\n<p>Position in buffer.<\/p>\nbufline\n<p>bufcolumn<\/p>\n<p>column<\/p>\n<p>line<\/p>\n<p>prevCharIsCR<\/p>\n<p>prevCharIsLF<\/p>\n<p>inputStream<\/p>\n<p>buffer<\/p>\n<p>maxNextCharInd<\/p>\n<p>inBuf<\/p>\n<p>tabSize<\/p>\n<p>staticFlag<\/p>\n<p>Whether parser is static.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\ngetBeginLine\n<p>Get token beginning line number.<\/p>\ngetEndLine\n<p>Get token end line number.<\/p>\nreadChar\n<p>Read a character.<\/p>\nDone\n<p>Reset buffer when finished.<\/p>\nExpandBuff\n\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\nReInit\n<p>Reinitialise.<\/p>\ngetEndColumn\n<p>Get token end column number.<\/p>\nUpdateLineColumn\n\nbackup\n<p>Backup a number of characters.<\/p>\nBeginToken\n<p>Start.<\/p>\ngetLine\n\ngetBeginColumn\n<p>Get token beginning column number.<\/p>\nGetImage\n<p>Get token literal value.<\/p>\nsetTabSize\n\nGetSuffix\n<p>Get the suffix.<\/p>\nFillBuff\n\ngetColumn\n\nadjustBeginLineColumn\n<p>Method to adjust line and column numbers for the start of a token.<\/p>\ngetTabSize\n\n"
                        }]
                      },
                      "exptokenmanager": {
                        "ownKey": "exptokenmanager",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/parser/exptokenmanager",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/exptokenmanager"
                          },
                          "description": "",
                          "title": "ExpTokenManager",
                          "content": "<p>Token Manager. This class was automatically generated by JavaCC, only few manual fixes added.<\/p>debugStream\n<p>Debug output.<\/p>\ninput_stream\n<p>curChar<\/p>\n<p>jjstrLiteralImages<\/p>\n<p>Token literal values.<\/p>\nlexStateNames\n<p>Lexer state names.<\/p>\n<init>\n<p>Constructor.<\/p>\n<init>\n<p>Constructor.<\/p>\ngetNextToken\n<p>Get the next Token.<\/p>\njjFillToken\n\nsetDebugStream\n<p>Set debug output.<\/p>\nReInit\n<p>Reinitialise parser.<\/p>\nReInit\n<p>Reinitialise parser.<\/p>\nSwitchTo\n<p>Switch to specified lex state.<\/p>\n"
                        }]
                      },
                      "token": {
                        "ownKey": "token",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/parser/token",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser/token"
                          },
                          "description": "",
                          "title": "Token",
                          "content": "<p>Describes the input token stream.<\/p>kind\n<p>An integer that describes the kind of this token. This numbering system is determined by JavaCCParser, and a table of these numbers is stored in the file ...Constants.java.<\/p>\nbeginLine\n<p>The line number of the first character of this Token.<\/p>\nbeginColumn\n<p>The column number of the first character of this Token.<\/p>\nendLine\n<p>The line number of the last character of this Token.<\/p>\nendColumn\n<p>The column number of the last character of this Token.<\/p>\nimage\n<p>The string image of the token.<\/p>\nnext\n<p>A reference to the next regular (non-special) token from the input stream. If this is the last token from the input stream, or if the token manager has not read tokens beyond this one, this field is set to null. This is true only if this token is also a regular token. Otherwise, see below for a description of the contents of this field.<\/p>\nspecialToken\n<p>This field is used to access special tokens that occur prior to this token, but after the immediately preceding regular (non-special) token. If there are no such special tokens, this field is set to null. When there are more than one such special token, this field refers to the last of these special tokens, which in turn refers to the next previous special token through its specialToken field, and so on until the first special token (whose specialToken field is null). The next fields of special tokens refer to other special tokens that immediately follow it (without an intervening regular token). If there is no such token, this field is null.<\/p>\n<init>\n<p>No-argument constructor<\/p>\n<init>\n<p>Constructs a new token for the specified Image.<\/p>\n<init>\n<p>Constructs a new token for the specified Image and Kind.<\/p>\ntoString\n<p>Returns the image.<\/p>\ngetValue\n<p>An optional attribute value of the Token. Tokens which are not used as syntactic sugar will often contain meaningful values that will be used later on by the compiler or interpreter. This attribute value is often different from the image. Any subclass of Token that actually wants to return a non-null value can override this method as appropriate.<\/p>\nnewToken\n<p>Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on the value of ofKind. Simply add the cases to the switch for all those special cases. For example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simply add something like : case MyParserConstants.ID : return new IDToken(ofKind, image); to the following switch statement. Then you can cast matchedToken variable to the appropriate type and use sit in your lexical actions.<\/p>\nnewToken\n\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/expressions/parser",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/parser"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.expressions.parser",
                      "content": "<p>TokenMgrError<\/p>\n<p>Token Manager Error.<\/p>\nExp\n<p>SimpleCharStream<\/p>\n<p>An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).<\/p>\nToken\n<p>Describes the input token stream.<\/p>\nExpConstants\n<p>Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()<\/p>\nExpTokenManager\n<p>Token Manager. This class was automatically generated by JavaCC, only few manual fixes added.<\/p>\nParseException\n<p>This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.<\/p>\n"
                    }]
                  },
                  "implementations": {
                    "ownKey": "implementations",
                    "childrenPages": {
                      "operatortreenode": {
                        "ownKey": "operatortreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/operatortreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/operatortreenode"
                          },
                          "description": "",
                          "title": "OperatorTreeNode",
                          "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n<p>getOperator<\/p>\n"
                        }]
                      },
                      "consttreenode": {
                        "ownKey": "consttreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/consttreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/consttreenode"
                          },
                          "description": "",
                          "title": "ConstTreeNode",
                          "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                        }]
                      },
                      "expression": {
                        "ownKey": "expression",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/expression",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/expression"
                          },
                          "description": "",
                          "title": "Expression",
                          "content": "<p><init><\/p>\n<p>This constructor does not do any parsing, and thus is much faster than the other one.<\/p>\n<init>\n\n<init>\n<p>This constructor parses the String into an Expression. Due to the parsing operation, it is slow compared to the other one, and should be used only in the first initialization phase.<\/p>\ngetRootNodeType\n\nsyntacticMatch\n\ntoString\n\ngetAST\n\ngetRootNode\n\ngetRightChildren\n\ngetLeftChildren\n\nupdateMatchedVar\n\ncalculate\n\nmayMatch\n\ngetRootNodeData\n\nmatches\n\n"
                        }]
                      },
                      "ast": {
                        "ownKey": "ast",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/ast",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/ast"
                          },
                          "description": "",
                          "title": "AST",
                          "content": "<p><init><\/p>\n<p>Builds a new AST given its root node.<\/p>\nevaluation\n<p>This evaluates the expression. If the matches map contains values which are not instanced, and the expression value cannot consequently be computed, 0d is returned.<\/p>\ngetRoot\n<p>toHashString<\/p>\n<p>toString<\/p>\n<p>assignVarValue<\/p>\n"
                        }]
                      },
                      "numtreenode": {
                        "ownKey": "numtreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/numtreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/numtreenode"
                          },
                          "description": "",
                          "title": "NumTreeNode",
                          "content": "<p><init><\/p>\n<p><init><\/p>\n<p>This constructor is provided for better compatibility.<\/p>\ntoString\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                        }]
                      },
                      "vartreenode": {
                        "ownKey": "vartreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/vartreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/vartreenode"
                          },
                          "description": "",
                          "title": "VarTreeNode",
                          "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                        }]
                      },
                      "expressionfactory": {
                        "ownKey": "expressionfactory",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/expressionfactory",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/expressionfactory"
                          },
                          "description": "",
                          "title": "ExpressionFactory",
                          "content": "<p>This utility class provides methods to ease the building and usage of <code> IExpression <\/code> without parsing.<\/p>buildComplexGroundExpression\n<p>Given a single literal (either variable or constant), builds the corresponding expression.<\/p>\nbuildExpression\n<p>Given a number, builds a numeric expression.<\/p>\nbuildExpression\n<p>Given a single literal (either variable or constant), builds the corresponding expression.<\/p>\nbuildExpression\n<p>Given a single literal (either variable or constant), builds the corresponding expression.<\/p>\nbuildLiteralNode\n<p>Given a single literal (either variable or constant), builds the corresponding <code> ITreeNode <\/code>.<\/p>\nwrap\n<p>Given a double, creates a NumTreeNode and wraps it into a <code> ListTreeNode <\/code>.<\/p>\nwrap\n<p>Given a HashString, creates the corresponding <code> ITreeNode <\/code> and wraps it into a <code> ListTreeNode <\/code>.<\/p>\nwrap\n<p>Wraps a collection of <code> ITreeNode <\/code> into a new List IExpression.<\/p>\nwrap\n<p>Given a node, wraps it into a <code> ListTreeNode <\/code>.<\/p>\n"
                        }]
                      },
                      "uidnode": {
                        "ownKey": "uidnode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/uidnode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/uidnode"
                          },
                          "description": "",
                          "title": "UIDNode",
                          "content": "<p><init><\/p>\n<p>Builds a new UUID node.<\/p>\ntoHashString\n<p>toString<\/p>\n<p>getValue<\/p>\n"
                        }]
                      },
                      "type": {
                        "ownKey": "type",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/type",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/type"
                          },
                          "description": "",
                          "title": "Type",
                          "content": "<p>CONST<\/p>\n<p>VAR<\/p>\n<p>NUM<\/p>\n<p>OPERATOR<\/p>\n<p>COMPARATOR<\/p>\n<p>LIST<\/p>\n<p>LISTCOMPARATOR<\/p>\n"
                        }]
                      },
                      "comparatortreenode": {
                        "ownKey": "comparatortreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/comparatortreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/comparatortreenode"
                          },
                          "description": "",
                          "title": "ComparatorTreeNode",
                          "content": "<p><init><\/p>\n<p>Builds a ComparatorTreeNode.<\/p>\ntoString\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                        }]
                      },
                      "operator": {
                        "ownKey": "operator",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/operator",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/operator"
                          },
                          "description": "",
                          "title": "Operator",
                          "content": "<p>ADD<\/p>\n<p>DEL<\/p>\n<p>DIV<\/p>\n<p>MAX<\/p>\n<p>MIN<\/p>\n<p>MINUS<\/p>\n<p>MOD<\/p>\n<p>PLUS<\/p>\n<p>TIMES<\/p>\n<p>toString<\/p>\n"
                        }]
                      },
                      "listcomparator": {
                        "ownKey": "listcomparator",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/listcomparator",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/listcomparator"
                          },
                          "description": "",
                          "title": "ListComparator",
                          "content": "<p>EMPTY<\/p>\n<p>HAS<\/p>\n<p>HAS_NOT<\/p>\n<p>NOT_EMPTY<\/p>\n"
                        }]
                      },
                      "listtreenode": {
                        "ownKey": "listtreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/listtreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/listtreenode"
                          },
                          "description": "",
                          "title": "ListTreeNode",
                          "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>iterator<\/p>\n<p>getValue<\/p>\n"
                        }]
                      },
                      "atreenode": {
                        "ownKey": "atreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/atreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/atreenode"
                          },
                          "description": "",
                          "title": "ATreeNode",
                          "content": "<p><init><\/p>\n<p>Builds the internals of a tree node.<\/p>\nhashCode\n<p>toHashString<\/p>\n<p>equals<\/p>\n<p>toString<\/p>\n<p>getLeftChild<\/p>\n<p>getRightChild<\/p>\n<p>getValue<\/p>\n<p>getData<\/p>\n<p>getNumberOfChildren<\/p>\n"
                        }]
                      },
                      "listcomparatortreenode": {
                        "ownKey": "listcomparatortreenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/expressions/implementations/listcomparatortreenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations/listcomparatortreenode"
                          },
                          "description": "",
                          "title": "ListComparatorTreeNode",
                          "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getType<\/p>\n<p>getValue<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/expressions/implementations",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/expressions/implementations"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.expressions.implementations",
                      "content": "<p>ATreeNode<\/p>\n<p>ExpressionFactory<\/p>\n<p>This utility class provides methods to ease the building and usage of <code> IExpression <\/code> without parsing.<\/p>\nExpression\n<p>ComparatorTreeNode<\/p>\n<p>NumTreeNode<\/p>\n<p>ListTreeNode<\/p>\n<p>ListComparator<\/p>\n<p>OperatorTreeNode<\/p>\n<p>Operator<\/p>\n<p>UIDNode<\/p>\n<p>Type<\/p>\n<p>ListComparatorTreeNode<\/p>\n<p>VarTreeNode<\/p>\n<p>AST<\/p>\n<p>ConstTreeNode<\/p>\n"
                    }]
                  }
                }
              },
              "supportedincarnations": {
                "ownKey": "supportedincarnations",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/supportedincarnations",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/supportedincarnations"
                  },
                  "description": "",
                  "title": "SupportedIncarnations",
                  "content": "<p>This enum interfaces the generic components of the graphical interface with the specific incarnation details.<\/p>getAvailableIncarnations\n<p>get<\/p>\n<p>Fetches an incarnation whose name matches the supplied string.<\/p>\n"
                }]
              },
              "exceptions": {
                "ownKey": "exceptions",
                "childrenPages": {
                  "uncomparabledistancesexception": {
                    "ownKey": "uncomparabledistancesexception",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/exceptions/uncomparabledistancesexception",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/exceptions/uncomparabledistancesexception"
                      },
                      "description": "",
                      "title": "UncomparableDistancesException",
                      "content": "<p>An exception meant to be thrown when trying to compare incompatible distances.<\/p>message\n<p><init><\/p>\n<p>Builds the exception given two positions claimed to be not compatible.<\/p>\n<init>\n<p>Builds the exception given two positions claimed to be not compatible.<\/p>\n"
                    }]
                  },
                  "biochemistryparseexception": {
                    "ownKey": "biochemistryparseexception",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/exceptions/biochemistryparseexception",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/exceptions/biochemistryparseexception"
                      },
                      "description": "",
                      "title": "BiochemistryParseException",
                      "content": "<p>Represents an exception thrown when parse errors are encountered.<\/p><init>\n<p>Construct the exception with the given message.<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/exceptions",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/exceptions"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.exceptions",
                  "content": "<p>BiochemistryParseException<\/p>\n<p>Represents an exception thrown when parse errors are encountered.<\/p>\nUncomparableDistancesException\n<p>An exception meant to be thrown when trying to compare incompatible distances.<\/p>\n"
                }]
              },
              "classpathscanner": {
                "ownKey": "classpathscanner",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/classpathscanner",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/classpathscanner"
                  },
                  "description": "",
                  "title": "ClassPathScanner",
                  "content": "<p>An utility class providing support for loading arbitrary subclasses available in the classpath.<\/p>subTypesOf\n<p>This function loads all subtypes of the provided Java class that can be discovered on the current classpath.<\/p><p>This function cannot use <code>reified<\/code> and <code>inline<\/code> (as it should have) due to Java being unaware of the required\ntransformation to use them.<\/p>\nsubTypesOf\n<p>resourcesMatching<\/p>\n<p>This function returns a list of all the resources in a certain (optional) package matching a regular expression.<\/p><p>This function cannot use <code>reified<\/code> and <code>inline<\/code> (as it should have) due to Java being unaware of the required\ntransformation to use them.<\/p>\nresourcesMatchingAsStream\n"
                }]
              },
              "core": {
                "ownKey": "core",
                "childrenPages": {
                  "interfaces": {
                    "ownKey": "interfaces",
                    "childrenPages": {
                      "scheduler": {
                        "ownKey": "scheduler",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/core/interfaces/scheduler",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/scheduler"
                          },
                          "description": "",
                          "title": "Scheduler",
                          "content": "<p>The type which describes the concentration of a molecule This interface is meant to be implemented by the data structure(s) which must manage the reactions.<\/p>updateReaction\n<p>Notifies the structure that the reaction r has changed. The whole structure will be rearranged to ensure consistency.<\/p>\ngetNext\n<p>Allows to access the next reaction to be executed.<\/p>\naddReaction\n<p>Adds a reaction to the data structure.<\/p>\nremoveReaction\n<p>Removes a reaction from the structure. If the reaction is not present, nothing is done and an Exception is thrown.<\/p>\n"
                        }]
                      },
                      "simulation": {
                        "ownKey": "simulation",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/core/interfaces/simulation",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/simulation"
                          },
                          "description": "",
                          "title": "Simulation",
                          "content": "<p>This interface forces simulations to be independent threads, and make them controllable from an external console.<\/p>getError\n<p>nodeAdded<\/p>\n<p>This method must get called in case a node is added to the environment during the simulation and after its neighborhood has been computed (or can be consistently computed by the simulated environment). This method provides dependency computation and is responsible of correctly scheduling the Node's new reactions.<\/p>\nterminate\n<p>Sends a terminate command to the simulation. There is no guarantee on when this command will be actually processed.<\/p>\naddOutputMonitor\n<p>Adds an <code> OutputMonitor <\/code> to this simulation.<\/p>\nplay\n<p>Sends a play command to the simulation. There is no guarantee on when this command will be actually processed.<\/p>\ngetStep\n<p>Allows to access the current simulation step.<\/p>\ngoToStep\n<p>Executes a certain number of steps, then pauses it.<\/p>\ngetFinalTime\n<p>Allows to at which time this simulation will end.<\/p>\ngetStatus\n<p>Allows to access the current status.<\/p>\ngoToTime\n<p>Executes the simulation until the target time is reached, then pauses it.<\/p>\nschedule\n<p>Schedules a runnable to be executed by the Simulation thread, useful for synchronization purposes (e.g. make sure that the environment is not being changed while the requested operation is being executed). An exception thrown by the passed runnable will make the simulation terminate.<\/p>\npause\n<p>Sends a pause command to the simulation. There is no guarantee on when this command will be actually processed.<\/p>\ngetTime\n<p>Allows to know which is the current simulation time.<\/p>\nnodeMoved\n<p>This method must get called in case a node is moved in the environment during the simulation and after its neighborhood has been computed (or can be consistently computed by the simulated environment). This method provides dependency computation and is responsible of correctly scheduling the Node's reactions.<\/p>\ngetFinalStep\n<p>neighborRemoved<\/p>\n<p>This method must get called in case a a communication link connecting two nodes gets broken during the simulation. This method provides dependency and scheduling times re-computation for all the reactions interested by such change.<\/p>\ngetEnvironment\n<p>Allows to access the current environment.<\/p>\nnodeRemoved\n<p>This method must get called in case a node is removed from the environment during the simulation and after its neighborhood has been computed (or can be consistently computed by the simulated environment). This method provides dependency computation and is responsible of correctly removing the Node's reactions from the scheduler.<\/p>\nwaitFor\n<p>Suspends the caller until the simulation reaches the selected <code> Status <\/code> or the timeout ends. Please note that waiting for a status does not mean that every <code> OutputMonitor <\/code> will already be notified of the update.<\/p>\nneighborAdded\n<p>This method must get called in case a a communication link connecting two nodes gets created during the simulation. This method provides dependency and scheduling times re-computation for all the reactions interested by such change.<\/p>\nremoveOutputMonitor\n<p>Removes an <code> OutputMonitor <\/code> to this simulation. If the <code> OutputMonitor <\/code> was not among those already added, this method does nothing.<\/p>\n"
                        }]
                      },
                      "dependencygraph": {
                        "ownKey": "dependencygraph",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/core/interfaces/dependencygraph",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/dependencygraph"
                          },
                          "description": "",
                          "title": "DependencyGraph",
                          "content": "<p>This interface allows to separate the usage of a dependency graph from its implementation.<\/p>globalInputContextReactions\n<p>addNeighbor<\/p>\n<p>Given two nodes, the graph assumes they are now neighbors and calculates the neighborhood dependencies between them.<\/p>\ncreateDependencies\n<p>This method creates the dependencies when a new reaction is added to the environment. Please be careful when building the environment and populating the existing reactions map: this method assumes that all the dependencies among the existing reactions are correct and up to date.<\/p>\nremoveDependencies\n<p>This method removes all the dependencies (both in and out dependencies) for a given reaction handler. This method is meant to be used in order to keep the dependencies clean when removing a reaction.<\/p>\noutboundDependencies\n<p>Returns the set of reactions that may be influenced by the provided reaction.<\/p>\nremoveNeighbor\n<p>Given two nodes, the engine assumes they are no longer neighbors and deletes the neighborhood dependencies between them.<\/p>\n"
                        }]
                      },
                      "status": {
                        "ownKey": "status",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/core/interfaces/status",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/status"
                          },
                          "description": "",
                          "title": "Status",
                          "content": "<p>This enum represents the possible states in which a Simulation could be.<\/p>INIT\n<p>READY<\/p>\n<p>PAUSED<\/p>\n<p>RUNNING<\/p>\n<p>TERMINATED<\/p>\n<p>isReachableFrom<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/core/interfaces",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.core.interfaces",
                      "content": "<p>Scheduler<\/p>\n<p>The type which describes the concentration of a molecule This interface is meant to be implemented by the data structure(s) which must manage the reactions.<\/p>\nStatus\n<p>This enum represents the possible states in which a Simulation could be.<\/p>\nSimulation\n<p>This interface forces simulations to be independent threads, and make them controllable from an external console.<\/p>\nDependencyGraph\n<p>This interface allows to separate the usage of a dependency graph from its implementation.<\/p>\n"
                    }]
                  },
                  "implementations": {
                    "ownKey": "implementations",
                    "childrenPages": {
                      "jgraphtdependencygraph": {
                        "ownKey": "jgraphtdependencygraph",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/core/implementations/jgraphtdependencygraph",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations/jgraphtdependencygraph"
                          },
                          "description": "",
                          "title": "JGraphTDependencyGraph",
                          "content": "<p>This class offers an implementation of a dependency graph, namely a\ndata structure which can address in an efficient way the problem of\nfinding those reactions affected by the execution of another\nreaction. This class relies heavily on the ReactionHandler\ninterface.<\/p><init>\n<p>This class offers an implementation of a dependency graph, namely a\ndata structure which can address in an efficient way the problem of\nfinding those reactions affected by the execution of another\nreaction. This class relies heavily on the ReactionHandler\ninterface.<\/p>\ncreateDependencies\n\nremoveDependencies\n\naddNeighbor\n\nremoveNeighbor\n\noutboundDependencies\n\ntoString\n\nglobalInputContextReactions\n\n"
                        }]
                      },
                      "engine": {
                        "ownKey": "engine",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/core/implementations/engine",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations/engine"
                          },
                          "description": "",
                          "title": "Engine",
                          "content": "<p>This class implements a simulation. It offers a wide number of static factories to ease the creation process.<\/p><init>\n<p>Builds a simulation for a given environment. By default it uses a DependencyGraph and an IndexedPriorityQueue internally. If you want to use your own implementations of <code> DependencyGraph <\/code> and <code> Scheduler <\/code> interfaces, don't use this constructor.<\/p>\n<init>\n<p>Builds a simulation for a given environment. By default it uses a DependencyGraph and an IndexedPriorityQueue internally. If you want to use your own implementations of <code> DependencyGraph <\/code> and <code> Scheduler <\/code> interfaces, don't use this constructor.<\/p>\n<init>\n<p>Builds a simulation for a given environment. By default it uses a DependencyGraph and an IndexedPriorityQueue internally. If you want to use your own implementations of <code> DependencyGraph <\/code> and <code> Scheduler <\/code> interfaces, don't use this constructor.<\/p>\ngetError\n\nnodeAdded\n\nterminate\n\naddOutputMonitor\n\nplay\n\ngetStep\n\ngoToStep\n\ngetFinalTime\n\nrun\n\ngetStatus\n\ngoToTime\n\nschedule\n\npause\n\ntoString\n\ngetTime\n\nnodeMoved\n\ngetFinalStep\n\nneighborRemoved\n\ngetEnvironment\n\nnodeRemoved\n\nwaitFor\n\nneighborAdded\n\nremoveOutputMonitor\n\ngetDependencyGraph\n\n"
                        }]
                      },
                      "arrayindexedpriorityqueue": {
                        "ownKey": "arrayindexedpriorityqueue",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/core/implementations/arrayindexedpriorityqueue",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations/arrayindexedpriorityqueue"
                          },
                          "description": "",
                          "title": "ArrayIndexedPriorityQueue",
                          "content": "<p>This class implements the indexed priority queue through an Array.<\/p><init>\n<p>This class implements the indexed priority queue through an Array.<\/p>\nupdateReaction\n\ntoString\n\ngetNext\n\naddReaction\n\nremoveReaction\n\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/core/implementations",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/implementations"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.core.implementations",
                      "content": "<p>JGraphTDependencyGraph<\/p>\n<p>This class offers an implementation of a dependency graph, namely a\ndata structure which can address in an efficient way the problem of\nfinding those reactions affected by the execution of another\nreaction. This class relies heavily on the ReactionHandler\ninterface.<\/p>\nEngine\n<p>This class implements a simulation. It offers a wide number of static factories to ease the creation process.<\/p>\nArrayIndexedPriorityQueue\n<p>This class implements the indexed priority queue through an Array.<\/p>\n"
                    }]
                  }
                }
              },
              "input": {
                "ownKey": "input",
                "childrenPages": {
                  "keybinds": {
                    "ownKey": "keybinds",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/input/keybinds",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/input/keybinds"
                      },
                      "description": "",
                      "title": "Keybinds",
                      "content": "<p>Reads and writes a configuration of key bindings to a JSON file.<\/p>Keybinds\n<p>Reads and writes a configuration of key bindings to a JSON file.<\/p>\n"
                    }]
                  },
                  "keybindsserializer": {
                    "ownKey": "keybindsserializer",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/input/keybindsserializer",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/input/keybindsserializer"
                      },
                      "description": "",
                      "title": "KeybindsSerializer",
                      "content": "<p>Serializer for keybinds that serializes  ActionFromKey \nby using the enum values' names instead of  ActionFromKey.toString .<\/p><init>\n<p>Serializer for keybinds that serializes  ActionFromKey \nby using the enum values' names instead of  ActionFromKey.toString .<\/p>\nserialize\n<p>{@inheritDoc}.<\/p>\n"
                    }]
                  },
                  "actionfromkey": {
                    "ownKey": "actionfromkey",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/input/actionfromkey",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/input/actionfromkey"
                      },
                      "description": "",
                      "title": "ActionFromKey",
                      "content": "<p>Actions which can be bound to a key on the keyboard.<\/p>MODIFIER_CONTROL\n<p>MODIFIER_SHIFT<\/p>\n<p>PAN_NORTH<\/p>\n<p>PAN_SOUTH<\/p>\n<p>PAN_EAST<\/p>\n<p>PAN_WEST<\/p>\n<p>DELETE<\/p>\n<p>MOVE<\/p>\n<p>EDIT<\/p>\n<p>PLAY_AND_PAUSE<\/p>\n<p>ONE_STEP<\/p>\n<p>toString<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/input",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/input"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.input",
                  "content": "<p>ActionFromKey<\/p>\n<p>Actions which can be bound to a key on the keyboard.<\/p>\nKeybindsSerializer\n<p>Serializer for keybinds that serializes  ActionFromKey \nby using the enum values' names instead of  ActionFromKey.toString .<\/p>\nKeybinds\n<p>Reads and writes a configuration of key bindings to a JSON file.<\/p>\n"
                }]
              },
              "grid": {
                "ownKey": "grid",
                "childrenPages": {
                  "cluster": {
                    "ownKey": "cluster",
                    "childrenPages": {
                      "cluster": {
                        "ownKey": "cluster",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/cluster/cluster",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster/cluster"
                          },
                          "description": "",
                          "title": "Cluster",
                          "content": "<p>The entity that represent the joined cluster.<\/p>getWorkersSet\n<p>close<\/p>\n<p>Leave the cluster.<\/p>\n"
                        }]
                      },
                      "clusterimpl": {
                        "ownKey": "clusterimpl",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/cluster/clusterimpl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster/clusterimpl"
                          },
                          "description": "",
                          "title": "ClusterImpl",
                          "content": "<p>An implementation of <code> Cluster <\/code> uses Apache Ignite.<\/p><init>\n\ngetWorkersSet\n\nclose\n\n"
                        }]
                      },
                      "workerset": {
                        "ownKey": "workerset",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/cluster/workerset",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster/workerset"
                          },
                          "description": "",
                          "title": "WorkerSet",
                          "content": "<p>Set of remote nodes that can run simulations.<\/p>distributeSimulations\n<p>Distribute and execute the simulation set on set's workers.<\/p>\n"
                        }]
                      },
                      "workersetimpl": {
                        "ownKey": "workersetimpl",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/cluster/workersetimpl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster/workersetimpl"
                          },
                          "description": "",
                          "title": "WorkerSetImpl",
                          "content": "<p>Implementation of <code> WorkerSet <\/code> which uses Apache Ignite.<\/p><init>\n\ndistributeSimulations\n\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/grid/cluster",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/cluster"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.grid.cluster",
                      "content": "<p>WorkerSetImpl<\/p>\n<p>Implementation of <code> WorkerSet <\/code> which uses Apache Ignite.<\/p>\nCluster\n<p>The entity that represent the joined cluster.<\/p>\nWorkerSet\n<p>Set of remote nodes that can run simulations.<\/p>\nClusterImpl\n<p>An implementation of <code> Cluster <\/code> uses Apache Ignite.<\/p>\n"
                    }]
                  },
                  "util": {
                    "ownKey": "util",
                    "childrenPages": {"workingdirectory": {
                      "ownKey": "workingdirectory",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/util/workingdirectory",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/util/workingdirectory"
                        },
                        "description": "",
                        "title": "WorkingDirectory",
                        "content": "<p>Class that manage a temp local working directory.<\/p><init>\n<p>Create new local temp working directory.<\/p>\ngetDirectoryUrl\n\ngetFileContent\n<p>Get folder's file content.<\/p>\nwriteFiles\n<p>Write multiple files inside the directory.<\/p>\nclose\n\ngetFileAbsolutePath\n\n"
                      }]
                    }},
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/grid/util",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/util"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.grid.util",
                      "content": "<p>WorkingDirectory<\/p>\n<p>Class that manage a temp local working directory.<\/p>\n"
                    }]
                  },
                  "simulation": {
                    "ownKey": "simulation",
                    "childrenPages": {
                      "simulationset": {
                        "ownKey": "simulationset",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/simulation/simulationset",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/simulationset"
                          },
                          "description": "",
                          "title": "SimulationSet",
                          "content": "<p>Set of configs for remote simulations creation.<\/p>getSimulationConfigs\n<p>getGeneralSimulationConfig<\/p>\n<p>computeComplexity<\/p>\n"
                        }]
                      },
                      "complexity": {
                        "ownKey": "complexity",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/simulation/complexity",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/complexity"
                          },
                          "description": "",
                          "title": "Complexity",
                          "content": "<p>An entity which represents a simulation's complexity.<\/p>getRamUsage\n<p>getCpuUsage<\/p>\n"
                        }]
                      },
                      "remoteresult": {
                        "ownKey": "remoteresult",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/simulation/remoteresult",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/remoteresult"
                          },
                          "description": "",
                          "title": "RemoteResult",
                          "content": "<p>Result of <code> RemoteSimulation <\/code>.<\/p>saveLocally\n<p>Save simulation's result in a local file.<\/p>\n"
                        }]
                      },
                      "simulationsetimpl": {
                        "ownKey": "simulationsetimpl",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/simulation/simulationsetimpl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/simulationsetimpl"
                          },
                          "description": "",
                          "title": "SimulationSetImpl",
                          "content": "<p><code> SimulationSet <\/code> implementation.<\/p><init>\n\ngetSimulationConfigs\n\ngetGeneralSimulationConfig\n\ncomputeComplexity\n\n"
                        }]
                      },
                      "remoteresultimpl": {
                        "ownKey": "remoteresultimpl",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/simulation/remoteresultimpl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/remoteresultimpl"
                          },
                          "description": "",
                          "title": "RemoteResultImpl",
                          "content": "<p><code> RemoteResult <\/code> implementation.<\/p><init>\n\nsaveLocally\n\nhashCode\n\nequals\n\n"
                        }]
                      },
                      "remotesimulation": {
                        "ownKey": "remotesimulation",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/simulation/remotesimulation",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/remotesimulation"
                          },
                          "description": "",
                          "title": "RemoteSimulation",
                          "content": "<p>Alchemist simulation that will be executed in remote cluster's nodes.<\/p>\n"
                        }]
                      },
                      "complexityimpl": {
                        "ownKey": "complexityimpl",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/simulation/complexityimpl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/complexityimpl"
                          },
                          "description": "",
                          "title": "ComplexityImpl",
                          "content": "<p><code> Complexity <\/code> implementation.<\/p><init>\n\ngetRamUsage\n\ngetCpuUsage\n\n"
                        }]
                      },
                      "remotesimulationimpl": {
                        "ownKey": "remotesimulationimpl",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/simulation/remotesimulationimpl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation/remotesimulationimpl"
                          },
                          "description": "",
                          "title": "RemoteSimulationImpl",
                          "content": "<p><code> RemoteSimulation <\/code> implementation for Apache Ignite.<\/p><init>\n\ncall\n\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/grid/simulation",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/simulation"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.grid.simulation",
                      "content": "<p>RemoteSimulationImpl<\/p>\n<p><code> RemoteSimulation <\/code> implementation for Apache Ignite.<\/p>\nRemoteResultImpl\n<p><code> RemoteResult <\/code> implementation.<\/p>\nSimulationSetImpl\n<p><code> SimulationSet <\/code> implementation.<\/p>\nComplexityImpl\n<p><code> Complexity <\/code> implementation.<\/p>\nSimulationSet\n<p>Set of configs for remote simulations creation.<\/p>\nRemoteSimulation\n<p>Alchemist simulation that will be executed in remote cluster's nodes.<\/p>\nComplexity\n<p>An entity which represents a simulation's complexity.<\/p>\nRemoteResult\n<p>Result of <code> RemoteSimulation <\/code>.<\/p>\n"
                    }]
                  },
                  "config": {
                    "ownKey": "config",
                    "childrenPages": {
                      "localgeneralsimulationconfig": {
                        "ownKey": "localgeneralsimulationconfig",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/config/localgeneralsimulationconfig",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/localgeneralsimulationconfig"
                          },
                          "description": "",
                          "title": "LocalGeneralSimulationConfig",
                          "content": "<p>Local <code> GeneralSimulationConfig <\/code> that contains all information in local memory.<\/p><init>\n\n<init>\n\ngetDependencies\n\n"
                        }]
                      },
                      "generalsimulationconfig": {
                        "ownKey": "generalsimulationconfig",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/config/generalsimulationconfig",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/generalsimulationconfig"
                          },
                          "description": "",
                          "title": "GeneralSimulationConfig",
                          "content": "<p>Simulation's configs valid for more than one simulation.<\/p>getEndStep\n<p>getLoader<\/p>\n<p>getDependencies<\/p>\n<p>getEndTime<\/p>\n"
                        }]
                      },
                      "lightinfogeneralsimulationconfig": {
                        "ownKey": "lightinfogeneralsimulationconfig",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/config/lightinfogeneralsimulationconfig",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/lightinfogeneralsimulationconfig"
                          },
                          "description": "",
                          "title": "LightInfoGeneralSimulationConfig",
                          "content": "<p>Abstract simulation config that contains small serializable informations.<\/p><init>\n\n<init>\n\n<init>\n\ngetEndStep\n\ngetLoader\n\ngetDependencies\n\ngetEndTime\n\n"
                        }]
                      },
                      "remotegeneralsimulationconfig": {
                        "ownKey": "remotegeneralsimulationconfig",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/config/remotegeneralsimulationconfig",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/remotegeneralsimulationconfig"
                          },
                          "description": "",
                          "title": "RemoteGeneralSimulationConfig",
                          "content": "<p>Remote <code> GeneralSimulationConfig <\/code> that stores big informations in Ignite's cache.<\/p><init>\n\ngetDependencies\n\nclose\n\n"
                        }]
                      },
                      "simulationconfigimpl": {
                        "ownKey": "simulationconfigimpl",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/config/simulationconfigimpl",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/simulationconfigimpl"
                          },
                          "description": "",
                          "title": "SimulationConfigImpl",
                          "content": "<p><code> SimulationConfig <\/code> implementation.<\/p><init>\n\nhashCode\n\ngetVariables\n\nequals\n\ntoString\n\n"
                        }]
                      },
                      "simulationconfig": {
                        "ownKey": "simulationconfig",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/grid/config/simulationconfig",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config/simulationconfig"
                          },
                          "description": "",
                          "title": "SimulationConfig",
                          "content": "<p>Simulation's configs for only one simulation.<\/p>getVariables\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/grid/config",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/config"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.grid.config",
                      "content": "<p>SimulationConfigImpl<\/p>\n<p><code> SimulationConfig <\/code> implementation.<\/p>\nRemoteGeneralSimulationConfig\n<p>Remote <code> GeneralSimulationConfig <\/code> that stores big informations in Ignite's cache.<\/p>\nLightInfoGeneralSimulationConfig\n<p>Abstract simulation config that contains small serializable informations.<\/p>\nGeneralSimulationConfig\n<p>Simulation's configs valid for more than one simulation.<\/p>\nLocalGeneralSimulationConfig\n<p>Local <code> GeneralSimulationConfig <\/code> that contains all information in local memory.<\/p>\nSimulationConfig\n<p>Simulation's configs for only one simulation.<\/p>\n"
                    }]
                  },
                  "exceptions": {
                    "ownKey": "exceptions",
                    "childrenPages": {"remotesimulationexception": {
                      "ownKey": "remotesimulationexception",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/grid/exceptions/remotesimulationexception",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/exceptions/remotesimulationexception"
                        },
                        "description": "",
                        "title": "RemoteSimulationException",
                        "content": "<p><init><\/p>\n<p><init><\/p>\n"
                      }]
                    }},
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/grid/exceptions",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/grid/exceptions"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.grid.exceptions",
                      "content": "<p>RemoteSimulationException<\/p>\n"
                    }]
                  }
                }
              },
              "utils": {
                "ownKey": "utils",
                "childrenPages": {"maputils": {
                  "ownKey": "maputils",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc",
                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                      "fileName": "it/unibo/alchemist/utils/maputils",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/utils/maputils"
                    },
                    "description": "",
                    "title": "MapUtils",
                    "content": "<p>getDistance<\/p>\n<p>Returns the distance in meters.<\/p>\ninitialBearing\n<p>getDestinationLocation<\/p>\n<p>getDestinationLocation<\/p>\n<p>toLatLng<\/p>\n<p>Converts <code> GeoPosition <\/code> to LatLng.<\/p>\ntoLatLong\n<p>Converts LatLng to <code> LatLongPosition <\/code>.<\/p>\n"
                  }]
                }},
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/utils",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/utils"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.utils",
                  "content": "<p>MapUtils<\/p>\n"
                }]
              },
              "biochemistrydsl": {
                "ownKey": "biochemistrydsl",
                "childrenPages": {
                  "biochemistrydslparser": {
                    "ownKey": "biochemistrydslparser",
                    "childrenPages": {
                      "junctioncontext": {
                        "ownKey": "junctioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctioncontext"
                          },
                          "description": "",
                          "title": "JunctionContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>junctionRight<\/p>\n<p>junctionLeft<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "customconditioncontext": {
                        "ownKey": "customconditioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customconditioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customconditioncontext"
                          },
                          "description": "",
                          "title": "CustomConditionContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>javaConstructor<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "junctionreactionjunctionconditioncontext": {
                        "ownKey": "junctionreactionjunctionconditioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionjunctionconditioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionjunctionconditioncontext"
                          },
                          "description": "",
                          "title": "JunctionReactionJunctionConditionContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>junction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "decimalcontext": {
                        "ownKey": "decimalcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/decimalcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/decimalcontext"
                          },
                          "description": "",
                          "title": "DecimalContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>POSDOUBLE<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "argcontext": {
                        "ownKey": "argcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/argcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/argcontext"
                          },
                          "description": "",
                          "title": "ArgContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>LITERAL<\/p>\n<p>decimal<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionleftincellcontextcontext": {
                        "ownKey": "biochemicalreactionleftincellcontextcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftincellcontextcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftincellcontextcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionLeftInCellContextContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "createjunctioncontext": {
                        "ownKey": "createjunctioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctioncontext"
                          },
                          "description": "",
                          "title": "CreateJunctionContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>createJunctionLeft<\/p>\n<p>createJunctionRight<\/p>\n<p>customReactionType<\/p>\n<p>customConditions<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biomoleculecontext": {
                        "ownKey": "biomoleculecontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biomoleculecontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biomoleculecontext"
                          },
                          "description": "",
                          "title": "BiomoleculeContext",
                          "content": "<p>name<\/p>\n<p><init><\/p>\n<p>exitRule<\/p>\n<p>concentration<\/p>\n<p>accept<\/p>\n<p>LITERAL<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "customreactiontypecontext": {
                        "ownKey": "customreactiontypecontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customreactiontypecontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customreactiontypecontext"
                          },
                          "description": "",
                          "title": "CustomReactionTypeContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>javaConstructor<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "createjunctionjunctioncontext": {
                        "ownKey": "createjunctionjunctioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionjunctioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionjunctioncontext"
                          },
                          "description": "",
                          "title": "CreateJunctionJunctionContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>junction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "arglistcontext": {
                        "ownKey": "arglistcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/arglistcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/arglistcontext"
                          },
                          "description": "",
                          "title": "ArgListContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>arg<\/p>\n<p>arg<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "junctionreactionleftcontext": {
                        "ownKey": "junctionreactionleftcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionleftcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionleftcontext"
                          },
                          "description": "",
                          "title": "JunctionReactionLeftContext",
                          "content": "<p><init><\/p>\n<p>junctionReactionJunctionCondition<\/p>\n<p>junctionReactionJunctionCondition<\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionrightinenvcontextcontext": {
                        "ownKey": "biochemicalreactionrightinenvcontextcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightinenvcontextcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightinenvcontextcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionRightInEnvContextContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionrightincellcontextcontext": {
                        "ownKey": "biochemicalreactionrightincellcontextcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightincellcontextcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightincellcontextcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionRightInCellContextContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "junctionleftcontext": {
                        "ownKey": "junctionleftcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionleftcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionleftcontext"
                          },
                          "description": "",
                          "title": "JunctionLeftContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactioncontext": {
                        "ownKey": "biochemicalreactioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactioncontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biochemicalReactionLeft<\/p>\n<p>accept<\/p>\n<p>customReactionType<\/p>\n<p>biochemicalReactionRight<\/p>\n<p>customConditions<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "concentrationcontext": {
                        "ownKey": "concentrationcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/concentrationcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/concentrationcontext"
                          },
                          "description": "",
                          "title": "ConcentrationContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>POSDOUBLE<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "reactioncontext": {
                        "ownKey": "reactioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/reactioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/reactioncontext"
                          },
                          "description": "",
                          "title": "ReactionContext",
                          "content": "<p><init><\/p>\n<p>junctionReaction<\/p>\n<p>exitRule<\/p>\n<p>EOF<\/p>\n<p>accept<\/p>\n<p>createJunction<\/p>\n<p>biochemicalReaction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "createjunctionrightcontext": {
                        "ownKey": "createjunctionrightcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionrightcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionrightcontext"
                          },
                          "description": "",
                          "title": "CreateJunctionRightContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>createJunctionJunction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "junctionreactioncontext": {
                        "ownKey": "junctionreactioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactioncontext"
                          },
                          "description": "",
                          "title": "JunctionReactionContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>junctionReactionLeft<\/p>\n<p>customReactionType<\/p>\n<p>junctionReactionRight<\/p>\n<p>customConditions<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "createjunctionleftcontext": {
                        "ownKey": "createjunctionleftcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionleftcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/createjunctionleftcontext"
                          },
                          "description": "",
                          "title": "CreateJunctionLeftContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionLeftInCellContext<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>biochemicalReactionLeftInNeighborContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "javaclasscontext": {
                        "ownKey": "javaclasscontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/javaclasscontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/javaclasscontext"
                          },
                          "description": "",
                          "title": "JavaClassContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>LITERAL<\/p>\n<p>LITERAL<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionrightelemcontext": {
                        "ownKey": "biochemicalreactionrightelemcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightelemcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightelemcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionRightElemContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>javaConstructor<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "javaconstructorcontext": {
                        "ownKey": "javaconstructorcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/javaconstructorcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/javaconstructorcontext"
                          },
                          "description": "",
                          "title": "JavaConstructorContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>argList<\/p>\n<p>javaClass<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionrightcontextcontext": {
                        "ownKey": "biochemicalreactionrightcontextcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightcontextcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightcontextcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionRightContextContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biochemicalReactionRightInNeighborContext<\/p>\n<p>biochemicalReactionRightInEnvContext<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightInCellContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionleftinenvcontextcontext": {
                        "ownKey": "biochemicalreactionleftinenvcontextcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftinenvcontextcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftinenvcontextcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionLeftInEnvContextContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionrightcontext": {
                        "ownKey": "biochemicalreactionrightcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionRightContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "junctionreactionrightcontext": {
                        "ownKey": "junctionreactionrightcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionrightcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionrightcontext"
                          },
                          "description": "",
                          "title": "JunctionReactionRightContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>enterRule<\/p>\n<p>junctionReactionJunction<\/p>\n<p>junctionReactionJunction<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "junctionreactionjunctioncontext": {
                        "ownKey": "junctionreactionjunctioncontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionjunctioncontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionreactionjunctioncontext"
                          },
                          "description": "",
                          "title": "JunctionReactionJunctionContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>junction<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionrightinneighborcontextcontext": {
                        "ownKey": "biochemicalreactionrightinneighborcontextcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightinneighborcontextcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionrightinneighborcontextcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionRightInNeighborContextContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionleftcontextcontext": {
                        "ownKey": "biochemicalreactionleftcontextcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftcontextcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftcontextcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionLeftContextContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biochemicalReactionLeftInEnvContext<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionLeftInCellContext<\/p>\n<p>biochemicalReactionLeftInNeighborContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "junctionrightcontext": {
                        "ownKey": "junctionrightcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionrightcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/junctionrightcontext"
                          },
                          "description": "",
                          "title": "JunctionRightContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionleftinneighborcontextcontext": {
                        "ownKey": "biochemicalreactionleftinneighborcontextcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftinneighborcontextcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftinneighborcontextcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionLeftInNeighborContextContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>biomolecule<\/p>\n<p>biomolecule<\/p>\n<p>accept<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "biochemicalreactionleftcontext": {
                        "ownKey": "biochemicalreactionleftcontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftcontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/biochemicalreactionleftcontext"
                          },
                          "description": "",
                          "title": "BiochemicalReactionLeftContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      },
                      "customconditionscontext": {
                        "ownKey": "customconditionscontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customconditionscontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser/customconditionscontext"
                          },
                          "description": "",
                          "title": "CustomConditionsContext",
                          "content": "<p><init><\/p>\n<p>exitRule<\/p>\n<p>accept<\/p>\n<p>customCondition<\/p>\n<p>customCondition<\/p>\n<p>enterRule<\/p>\n<p>getRuleIndex<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslparser",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslparser"
                      },
                      "description": "",
                      "title": "BiochemistrydslParser",
                      "content": "<p>_decisionToDFA<\/p>\n<p>_sharedContextCache<\/p>\n<p>T__0<\/p>\n<p>T__1<\/p>\n<p>T__2<\/p>\n<p>T__3<\/p>\n<p>T__4<\/p>\n<p>T__5<\/p>\n<p>T__6<\/p>\n<p>T__7<\/p>\n<p>T__8<\/p>\n<p>T__9<\/p>\n<p>T__10<\/p>\n<p>T__11<\/p>\n<p>T__12<\/p>\n<p>T__13<\/p>\n<p>T__14<\/p>\n<p>T__15<\/p>\n<p>T__16<\/p>\n<p>T__17<\/p>\n<p>POSDOUBLE<\/p>\n<p>LITERAL<\/p>\n<p>WS<\/p>\n<p>ErrorCharacter<\/p>\n<p>RULE_reaction<\/p>\n<p>RULE_biochemicalReaction<\/p>\n<p>RULE_createJunction<\/p>\n<p>RULE_junctionReaction<\/p>\n<p>RULE_javaConstructor<\/p>\n<p>RULE_javaClass<\/p>\n<p>RULE_argList<\/p>\n<p>RULE_arg<\/p>\n<p>RULE_createJunctionLeft<\/p>\n<p>RULE_createJunctionRight<\/p>\n<p>RULE_createJunctionJunction<\/p>\n<p>RULE_junctionReactionLeft<\/p>\n<p>RULE_junctionReactionRight<\/p>\n<p>RULE_junctionReactionJunctionCondition<\/p>\n<p>RULE_junctionReactionJunction<\/p>\n<p>RULE_biochemicalReactionLeft<\/p>\n<p>RULE_biochemicalReactionRight<\/p>\n<p>RULE_customConditions<\/p>\n<p>RULE_customReactionType<\/p>\n<p>RULE_biochemicalReactionLeftContext<\/p>\n<p>RULE_biochemicalReactionLeftInCellContext<\/p>\n<p>RULE_biochemicalReactionLeftInEnvContext<\/p>\n<p>RULE_biochemicalReactionLeftInNeighborContext<\/p>\n<p>RULE_biochemicalReactionRightContext<\/p>\n<p>RULE_biochemicalReactionRightInCellContext<\/p>\n<p>RULE_biochemicalReactionRightInEnvContext<\/p>\n<p>RULE_biochemicalReactionRightInNeighborContext<\/p>\n<p>RULE_biochemicalReactionRightElem<\/p>\n<p>RULE_customCondition<\/p>\n<p>RULE_junction<\/p>\n<p>RULE_junctionLeft<\/p>\n<p>RULE_junctionRight<\/p>\n<p>RULE_biomolecule<\/p>\n<p>RULE_concentration<\/p>\n<p>RULE_decimal<\/p>\n<p>ruleNames<\/p>\n<p>VOCABULARY<\/p>\n<p>tokenNames<\/p>\n<p>_serializedATN<\/p>\n<p>_ATN<\/p>\n<p><init><\/p>\n<p>junctionReaction<\/p>\n<p>junctionLeft<\/p>\n<p>customReactionType<\/p>\n<p>getTokenNames<\/p>\n<p>biochemicalReactionRightInCellContext<\/p>\n<p>createJunctionJunction<\/p>\n<p>biochemicalReactionLeftInEnvContext<\/p>\n<p>junctionRight<\/p>\n<p>argList<\/p>\n<p>javaClass<\/p>\n<p>junction<\/p>\n<p>biomolecule<\/p>\n<p>biochemicalReactionLeftInCellContext<\/p>\n<p>junctionReactionRight<\/p>\n<p>biochemicalReactionRight<\/p>\n<p>javaConstructor<\/p>\n<p>junctionReactionLeft<\/p>\n<p>biochemicalReactionLeftInNeighborContext<\/p>\n<p>biochemicalReactionRightInNeighborContext<\/p>\n<p>getATN<\/p>\n<p>arg<\/p>\n<p>biochemicalReactionRightContext<\/p>\n<p>getSerializedATN<\/p>\n<p>createJunction<\/p>\n<p>biochemicalReactionRightInEnvContext<\/p>\n<p>concentration<\/p>\n<p>createJunctionLeft<\/p>\n<p>biochemicalReactionLeftContext<\/p>\n<p>getGrammarFileName<\/p>\n<p>biochemicalReaction<\/p>\n<p>customConditions<\/p>\n<p>junctionReactionJunctionCondition<\/p>\n<p>biochemicalReactionLeft<\/p>\n<p>reaction<\/p>\n<p>createJunctionRight<\/p>\n<p>getVocabulary<\/p>\n<p>biochemicalReactionRightElem<\/p>\n<p>decimal<\/p>\n<p>customCondition<\/p>\n<p>getRuleNames<\/p>\n<p>junctionReactionJunction<\/p>\n"
                    }]
                  },
                  "biochemistrydslvisitor": {
                    "ownKey": "biochemistrydslvisitor",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslvisitor",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslvisitor"
                      },
                      "description": "",
                      "title": "BiochemistrydslVisitor",
                      "content": "<p>This interface defines a complete generic visitor for a parse tree produced by <code> BiochemistrydslParser <\/code>.<\/p>visitBiochemicalReactionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>.<\/p>\nvisitBiochemicalReactionRightContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>.<\/p>\nvisitJunctionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>.<\/p>\nvisitCreateJunctionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>.<\/p>\nvisitBiochemicalReactionLeftContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>.<\/p>\nvisitConcentration\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>.<\/p>\nvisitJavaConstructor\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>.<\/p>\nvisitCreateJunctionJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>.<\/p>\nvisitBiochemicalReactionRightInEnvContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>.<\/p>\nvisitCustomConditions\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>.<\/p>\nvisitArg\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#arg <\/code>.<\/p>\nvisitBiochemicalReactionLeftInEnvContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>.<\/p>\nvisitBiochemicalReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>.<\/p>\nvisitDecimal\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>.<\/p>\nvisitJunctionReactionJunctionCondition\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>.<\/p>\nvisitBiochemicalReactionLeftInNeighborContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>.<\/p>\nvisitJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junction <\/code>.<\/p>\nvisitJunctionReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>.<\/p>\nvisitBiochemicalReactionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>.<\/p>\nvisitArgList\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#argList <\/code>.<\/p>\nvisitBiochemicalReactionRightInCellContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>.<\/p>\nvisitCreateJunctionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>.<\/p>\nvisitBiochemicalReactionRightElem\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>.<\/p>\nvisitJunctionReactionJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>.<\/p>\nvisitJunctionReactionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>.<\/p>\nvisitBiochemicalReactionRightInNeighborContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>.<\/p>\nvisitCustomReactionType\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>.<\/p>\nvisitJavaClass\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>.<\/p>\nvisitCustomCondition\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>.<\/p>\nvisitReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>.<\/p>\nvisitCreateJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>.<\/p>\nvisitJunctionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>.<\/p>\nvisitBiochemicalReactionLeftInCellContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>.<\/p>\nvisitJunctionReactionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>.<\/p>\nvisitBiomolecule\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>.<\/p>\n"
                    }]
                  },
                  "biochemistrydsllexer": {
                    "ownKey": "biochemistrydsllexer",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydsllexer",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydsllexer"
                      },
                      "description": "",
                      "title": "BiochemistrydslLexer",
                      "content": "<p>_decisionToDFA<\/p>\n<p>_sharedContextCache<\/p>\n<p>T__0<\/p>\n<p>T__1<\/p>\n<p>T__2<\/p>\n<p>T__3<\/p>\n<p>T__4<\/p>\n<p>T__5<\/p>\n<p>T__6<\/p>\n<p>T__7<\/p>\n<p>T__8<\/p>\n<p>T__9<\/p>\n<p>T__10<\/p>\n<p>T__11<\/p>\n<p>T__12<\/p>\n<p>T__13<\/p>\n<p>T__14<\/p>\n<p>T__15<\/p>\n<p>T__16<\/p>\n<p>T__17<\/p>\n<p>POSDOUBLE<\/p>\n<p>LITERAL<\/p>\n<p>WS<\/p>\n<p>ErrorCharacter<\/p>\n<p>channelNames<\/p>\n<p>modeNames<\/p>\n<p>ruleNames<\/p>\n<p>VOCABULARY<\/p>\n<p>tokenNames<\/p>\n<p>_serializedATN<\/p>\n<p>_ATN<\/p>\n<p><init><\/p>\n<p>getModeNames<\/p>\n<p>getChannelNames<\/p>\n<p>getATN<\/p>\n<p>getTokenNames<\/p>\n<p>getSerializedATN<\/p>\n<p>getGrammarFileName<\/p>\n<p>getRuleNames<\/p>\n<p>getVocabulary<\/p>\n"
                    }]
                  },
                  "biochemistrydslbasevisitor": {
                    "ownKey": "biochemistrydslbasevisitor",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslbasevisitor",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslbasevisitor"
                      },
                      "description": "",
                      "title": "BiochemistrydslBaseVisitor",
                      "content": "<p>This class provides an empty implementation of <code> BiochemistrydslVisitor <\/code>, which can be extended to create a visitor which only needs to handle a subset of the available methods.<\/p><init>\n<p>This class provides an empty implementation of <code> BiochemistrydslVisitor <\/code>, which can be extended to create a visitor which only needs to handle a subset of the available methods.<\/p>\nvisitBiochemicalReactionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCreateJunctionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionLeftContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitConcentration\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJavaConstructor\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCreateJunctionJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightInEnvContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCustomConditions\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitArg\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#arg <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionLeftInEnvContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitDecimal\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReactionJunctionCondition\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionLeftInNeighborContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitArgList\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#argList <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightInCellContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCreateJunctionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightElem\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReactionJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReactionRight\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionRightInNeighborContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCustomReactionType\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJavaClass\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCustomCondition\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitReaction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitCreateJunction\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiochemicalReactionLeftInCellContext\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitJunctionReactionLeft\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\nvisitBiomolecule\n<p>Visit a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>. <\/p><p>The default implementation returns the result of calling #visitChildren on <code>ctx<\/code>.<\/p>\n"
                    }]
                  },
                  "biochemistrydslbaselistener": {
                    "ownKey": "biochemistrydslbaselistener",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydslbaselistener",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydslbaselistener"
                      },
                      "description": "",
                      "title": "BiochemistrydslBaseListener",
                      "content": "<p>This class provides an empty implementation of <code> BiochemistrydslListener <\/code>, which can be extended to create a listener which only needs to handle a subset of the available methods.<\/p><init>\n<p>This class provides an empty implementation of <code> BiochemistrydslListener <\/code>, which can be extended to create a listener which only needs to handle a subset of the available methods.<\/p>\nexitJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightInNeighborContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJavaClass\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCustomReactionType\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCreateJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReactionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJavaClass\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeftInEnvContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCustomConditions\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterArgList\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#argList <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightInNeighborContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReactionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCreateJunctionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightElem\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nvisitErrorNode\n<p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeftInCellContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCreateJunctionJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightInEnvContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterArg\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#arg <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReactionJunctionCondition\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReactionJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterEveryRule\n<p>The default implementation does nothing.<\/p>\nexitEveryRule\n<p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeftInCellContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCreateJunctionJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJavaConstructor\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReactionJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightElem\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJavaConstructor\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightInCellContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeftInNeighborContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionRightContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCreateJunctionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReactionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCreateJunctionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCustomConditions\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitArg\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#arg <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCreateJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nvisitTerminal\n<p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightInEnvContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeftContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitCustomCondition\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCreateJunctionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterConcentration\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitArgList\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#argList <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiomolecule\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeftInEnvContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitConcentration\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterDecimal\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReactionJunctionCondition\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightInCellContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionLeftInNeighborContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitBiochemicalReactionLeftContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCustomCondition\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiochemicalReactionRightContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitDecimal\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterBiomolecule\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterJunctionReactionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nexitJunctionReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>. <\/p><p>The default implementation does nothing.<\/p>\nenterCustomReactionType\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>. <\/p><p>The default implementation does nothing.<\/p>\n"
                    }]
                  },
                  "biochemistrydsllistener": {
                    "ownKey": "biochemistrydsllistener",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/biochemistrydsl/biochemistrydsllistener",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl/biochemistrydsllistener"
                      },
                      "description": "",
                      "title": "BiochemistrydslListener",
                      "content": "<p>This interface defines a complete listener for a parse tree produced by <code> BiochemistrydslParser <\/code>.<\/p>exitJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junction <\/code>.<\/p>\nexitBiochemicalReactionRightInNeighborContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>.<\/p>\nexitJunctionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>.<\/p>\nexitJavaClass\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>.<\/p>\nexitCustomReactionType\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>.<\/p>\nenterCreateJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>.<\/p>\nexitJunctionReactionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>.<\/p>\nenterJavaClass\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#javaClass <\/code>.<\/p>\nenterBiochemicalReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>.<\/p>\nenterBiochemicalReactionLeftInEnvContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>.<\/p>\nenterCustomConditions\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>.<\/p>\nexitBiochemicalReactionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>.<\/p>\nenterJunctionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionLeft <\/code>.<\/p>\nenterArgList\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#argList <\/code>.<\/p>\nenterBiochemicalReactionRightInNeighborContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInNeighborContext <\/code>.<\/p>\nexitJunctionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>.<\/p>\nexitJunctionReactionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>.<\/p>\nenterCreateJunctionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>.<\/p>\nenterBiochemicalReactionRightElem\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>.<\/p>\nenterBiochemicalReactionLeftInCellContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>.<\/p>\nexitCreateJunctionJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>.<\/p>\nexitBiochemicalReactionRightInEnvContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>.<\/p>\nenterArg\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#arg <\/code>.<\/p>\nexitJunctionReactionJunctionCondition\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>.<\/p>\nexitJunctionReactionJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>.<\/p>\nexitBiochemicalReactionLeftInCellContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInCellContext <\/code>.<\/p>\nenterCreateJunctionJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionJunction <\/code>.<\/p>\nexitJavaConstructor\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>.<\/p>\nenterBiochemicalReactionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRight <\/code>.<\/p>\nenterReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>.<\/p>\nenterJunctionReactionJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunction <\/code>.<\/p>\nexitBiochemicalReactionRightElem\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightElem <\/code>.<\/p>\nenterJunctionReaction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>.<\/p>\nenterJavaConstructor\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#javaConstructor <\/code>.<\/p>\nexitBiochemicalReactionRightInCellContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>.<\/p>\nexitBiochemicalReactionLeftInNeighborContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>.<\/p>\nexitBiochemicalReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReaction <\/code>.<\/p>\nexitBiochemicalReactionRightContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>.<\/p>\nexitCreateJunctionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>.<\/p>\nenterJunctionReactionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionRight <\/code>.<\/p>\nexitCreateJunctionRight\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunctionRight <\/code>.<\/p>\nexitCustomConditions\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customConditions <\/code>.<\/p>\nexitArg\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#arg <\/code>.<\/p>\nexitCreateJunction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#createJunction <\/code>.<\/p>\nenterBiochemicalReactionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>.<\/p>\nenterBiochemicalReactionRightInEnvContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInEnvContext <\/code>.<\/p>\nenterBiochemicalReactionLeftContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>.<\/p>\nexitCustomCondition\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>.<\/p>\nenterCreateJunctionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#createJunctionLeft <\/code>.<\/p>\nenterJunctionRight\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionRight <\/code>.<\/p>\nenterConcentration\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>.<\/p>\nexitArgList\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#argList <\/code>.<\/p>\nexitBiomolecule\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>.<\/p>\nexitBiochemicalReactionLeftInEnvContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInEnvContext <\/code>.<\/p>\nenterJunction\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junction <\/code>.<\/p>\nexitBiochemicalReactionLeft\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeft <\/code>.<\/p>\nexitConcentration\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#concentration <\/code>.<\/p>\nenterDecimal\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>.<\/p>\nenterJunctionReactionJunctionCondition\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionJunctionCondition <\/code>.<\/p>\nenterBiochemicalReactionRightInCellContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightInCellContext <\/code>.<\/p>\nenterBiochemicalReactionLeftInNeighborContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftInNeighborContext <\/code>.<\/p>\nexitBiochemicalReactionLeftContext\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionLeftContext <\/code>.<\/p>\nenterCustomCondition\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customCondition <\/code>.<\/p>\nenterBiochemicalReactionRightContext\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biochemicalReactionRightContext <\/code>.<\/p>\nexitDecimal\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#decimal <\/code>.<\/p>\nexitReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#reaction <\/code>.<\/p>\nenterBiomolecule\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#biomolecule <\/code>.<\/p>\nenterJunctionReactionLeft\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#junctionReactionLeft <\/code>.<\/p>\nexitJunctionReaction\n<p>Exit a parse tree produced by <code> BiochemistrydslParser#junctionReaction <\/code>.<\/p>\nenterCustomReactionType\n<p>Enter a parse tree produced by <code> BiochemistrydslParser#customReactionType <\/code>.<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/biochemistrydsl",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/biochemistrydsl"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.biochemistrydsl",
                  "content": "<p>BiochemistrydslVisitor<\/p>\n<p>This interface defines a complete generic visitor for a parse tree produced by <code> BiochemistrydslParser <\/code>.<\/p>\nBiochemistrydslBaseVisitor\n<p>This class provides an empty implementation of <code> BiochemistrydslVisitor <\/code>, which can be extended to create a visitor which only needs to handle a subset of the available methods.<\/p>\nBiochemistrydslBaseListener\n<p>This class provides an empty implementation of <code> BiochemistrydslListener <\/code>, which can be extended to create a listener which only needs to handle a subset of the available methods.<\/p>\nBiochemistrydslListener\n<p>This interface defines a complete listener for a parse tree produced by <code> BiochemistrydslParser <\/code>.<\/p>\nBiochemistrydslLexer\n<p>BiochemistrydslParser<\/p>\n"
                }]
              },
              "model": {
                "ownKey": "model",
                "childrenPages": {
                  "cognitiveagents": {
                    "ownKey": "cognitiveagents",
                    "childrenPages": {
                      "cognitivemodel": {
                        "ownKey": "cognitivemodel",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/cognitiveagents/cognitivemodel",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/cognitivemodel"
                          },
                          "description": "",
                          "title": "CognitiveModel",
                          "content": "<p>Theoretical model to describe the cognitive processes underlying in an agent.<\/p>dangerBelief\n<p>Value representing the current belief of the situation dangerousness.<\/p>\nfear\n<p>Value representing the level of fear.<\/p>\nescapeIntention\n<p>Value representing the intention to escape. Opposed to  remainIntention .<\/p>\nremainIntention\n<p>Value representing the intention to remain. Opposed to  escapeIntention <\/p>\nupdate\n<p>Update the current intensity of the aforementioned feelings considering a  frequency .<\/p>\n"
                        }]
                      },
                      "impact": {
                        "ownKey": "impact",
                        "childrenPages": {
                          "cognitive": {
                            "ownKey": "cognitive",
                            "childrenPages": {
                              "desireevacuate": {
                                "ownKey": "desireevacuate",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/desireevacuate",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/desireevacuate"
                                  },
                                  "description": "",
                                  "title": "DesireEvacuate",
                                  "content": "<p>The desire to evacuate.<\/p><init>\n<p>The desire to evacuate.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                                }]
                              },
                              "abstractcognitivecharacteristic": {
                                "ownKey": "abstractcognitivecharacteristic",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/abstractcognitivecharacteristic",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/abstractcognitivecharacteristic"
                                  },
                                  "description": "",
                                  "title": "AbstractCognitiveCharacteristic",
                                  "content": "<p>The generic implementation of a cognitive characteristic.<\/p>currentLevel\n<p>The current level of this characteristic.<\/p>\n<init>\n<p>The generic implementation of a cognitive characteristic.<\/p>\nlevel\n<p>The current intensity of this characteristic.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\nAbstractCognitiveCharacteristic\n<p>The generic implementation of a cognitive characteristic.<\/p>\n"
                                }]
                              },
                              "utils": {
                                "ownKey": "utils",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/utils",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/utils"
                                  },
                                  "description": "",
                                  "title": "it.unibo.alchemist.model.cognitiveagents.impact.cognitive.utils",
                                  "content": "<p>logistic<\/p>\n<p>https://en.wikipedia.org/wiki/Logistic_function<\/p>\nadvancedLogistic\n"
                                }]
                              },
                              "mentalcognitivecharacteristic": {
                                "ownKey": "mentalcognitivecharacteristic",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/mentalcognitivecharacteristic",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/mentalcognitivecharacteristic"
                                  },
                                  "description": "",
                                  "title": "MentalCognitiveCharacteristic",
                                  "content": "<p>A cognitive characteristic which has a mental response.<\/p><init>\n<p>A cognitive characteristic which has a mental response.<\/p>\nupdate\n<p>Update the current intensity of this characteristic.<\/p>\n"
                                }]
                              },
                              "intentionwalkrandomly": {
                                "ownKey": "intentionwalkrandomly",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/intentionwalkrandomly",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/intentionwalkrandomly"
                                  },
                                  "description": "",
                                  "title": "IntentionWalkRandomly",
                                  "content": "<p>The intention not to evacuate.<\/p><init>\n<p>The intention not to evacuate.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                                }]
                              },
                              "intentionevacuate": {
                                "ownKey": "intentionevacuate",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/intentionevacuate",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/intentionevacuate"
                                  },
                                  "description": "",
                                  "title": "IntentionEvacuate",
                                  "content": "<p>The intention to evacuate of .<\/p><init>\n<p>The intention to evacuate of .<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                                }]
                              },
                              "desirewalkrandomly": {
                                "ownKey": "desirewalkrandomly",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/desirewalkrandomly",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/desirewalkrandomly"
                                  },
                                  "description": "",
                                  "title": "DesireWalkRandomly",
                                  "content": "<p>The desire not to evacuate.<\/p><init>\n<p>The desire not to evacuate.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                                }]
                              },
                              "cognitivespec": {
                                "ownKey": "cognitivespec",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/cognitivespec",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/cognitivespec"
                                  },
                                  "description": "",
                                  "title": "CognitiveSpec",
                                  "content": "<p>A specification of the parameters regarding cognitive characteristics to load from a config file.<\/p>sensingOmega\n<p>affectiveBiasingOmega<\/p>\n<p>persistingOmega<\/p>\n<p>amplifyingFeelingOmega<\/p>\n<p>inhibitingFeelingOmega<\/p>\n<p>amplifyingEvacuationOmega<\/p>\n<p>inhibitingWalkRandOmega<\/p>\n<p>amplifyingIntentionOmega<\/p>\n<p>inhibitingIntentionOmega<\/p>\n<p>mentalEta<\/p>\n<p>bodyEta<\/p>\n<p>logisticSigma<\/p>\n<p>logisticTau<\/p>\n<p>advancedLogisticSigma<\/p>\n<p>advancedLogisticTau<\/p>\n"
                                }]
                              },
                              "bodycognitivecharacteristic": {
                                "ownKey": "bodycognitivecharacteristic",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/bodycognitivecharacteristic",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/bodycognitivecharacteristic"
                                  },
                                  "description": "",
                                  "title": "BodyCognitiveCharacteristic",
                                  "content": "<p>A cognitive characteristic which has a body response.<\/p><init>\n<p>A cognitive characteristic which has a body response.<\/p>\nupdate\n<p>Update the current intensity of this characteristic.<\/p>\n"
                                }]
                              },
                              "beliefdanger": {
                                "ownKey": "beliefdanger",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/beliefdanger",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/beliefdanger"
                                  },
                                  "description": "",
                                  "title": "BeliefDanger",
                                  "content": "<p>The perception of the situation dangerousness.\nThe name belief derives from the <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">IMPACT model<\/a>.<\/p><init>\n<p>The perception of the situation dangerousness.\nThe name belief derives from the <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">IMPACT model<\/a>.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                                }]
                              },
                              "cognitivecharacteristic": {
                                "ownKey": "cognitivecharacteristic",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/cognitivecharacteristic",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/cognitivecharacteristic"
                                  },
                                  "description": "",
                                  "title": "CognitiveCharacteristic",
                                  "content": "<p>A characteristic which depends on the other agents in the environment.<\/p>level\n<p>The current intensity of this characteristic.<\/p>\nupdate\n<p>Update the current intensity of this characteristic.<\/p>\n"
                                }]
                              },
                              "fear": {
                                "ownKey": "fear",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive/fear",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive/fear"
                                  },
                                  "description": "",
                                  "title": "Fear",
                                  "content": "<p>The fear emotion.<\/p><init>\n<p>The fear emotion.<\/p>\ncombinationFunction\n<p>Algorithm which decides how the parameters involved\nin the evolution of this characteristic must be combined together.\nIt can be either a max, min, summation or any other type of function.<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/cognitive",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/cognitive"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.cognitiveagents.impact.cognitive",
                              "content": "<p>AbstractCognitiveCharacteristic<\/p>\n<p>The generic implementation of a cognitive characteristic.<\/p>\nBeliefDanger\n<p>The perception of the situation dangerousness.\nThe name belief derives from the <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">IMPACT model<\/a>.<\/p>\nBodyCognitiveCharacteristic\n<p>A cognitive characteristic which has a body response.<\/p>\nCognitiveCharacteristic\n<p>A characteristic which depends on the other agents in the environment.<\/p>\nCognitiveSpec\n<p>A specification of the parameters regarding cognitive characteristics to load from a config file.<\/p>\nDesireEvacuate\n<p>The desire to evacuate.<\/p>\nDesireWalkRandomly\n<p>The desire not to evacuate.<\/p>\nFear\n<p>The fear emotion.<\/p>\nIntentionEvacuate\n<p>The intention to evacuate of .<\/p>\nIntentionWalkRandomly\n<p>The intention not to evacuate.<\/p>\nMentalCognitiveCharacteristic\n<p>A cognitive characteristic which has a mental response.<\/p>\nit.unibo.alchemist.model.cognitiveagents.impact.cognitive.utils\n"
                            }]
                          },
                          "individual": {
                            "ownKey": "individual",
                            "childrenPages": {
                              "gender": {
                                "ownKey": "gender",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/gender",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/gender"
                                  },
                                  "description": "",
                                  "title": "Gender",
                                  "content": "<p>An enum representing the different genders.<\/p>MALE\n<p>FEMALE<\/p>\n<p>Gender<\/p>\n<p>An enum representing the different genders.<\/p>\n"
                                }]
                              },
                              "speedspec": {
                                "ownKey": "speedspec",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/speedspec",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/speedspec"
                                  },
                                  "description": "",
                                  "title": "SpeedSpec",
                                  "content": "<p>A specification of the parameters regarding speeds to load from a config file.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n<p>default<\/p>\n<p>variance<\/p>\n"
                                }]
                              },
                              "compliance": {
                                "ownKey": "compliance",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/compliance",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/compliance"
                                  },
                                  "description": "",
                                  "title": "Compliance",
                                  "content": "<p>The level of compliance of an agent considering its gender and its age.<\/p>level\n<p>The calculated level of compliance.<\/p>\n<init>\n<p>The level of compliance of an agent considering its gender and its age.<\/p>\n"
                                }]
                              },
                              "helpattitude": {
                                "ownKey": "helpattitude",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitude",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitude"
                                  },
                                  "description": "",
                                  "title": "HelpAttitude",
                                  "content": "<p>The attitude of an agent towards helping another agent.<\/p><init>\n<p>The attitude of an agent towards helping another agent.<\/p>\nlevel\n<p>The logic used to calculate the probability of helping.<\/p>\n"
                                }]
                              },
                              "helpattitudespec": {
                                "ownKey": "helpattitudespec",
                                "childrenPages": {
                                  "elderlymale": {
                                    "ownKey": "elderlymale",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec/elderlymale",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec/elderlymale"
                                      },
                                      "description": "",
                                      "title": "ElderlyMale",
                                      "content": "<p>Elderly males attitudes.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                    }]
                                  },
                                  "adultfemale": {
                                    "ownKey": "adultfemale",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec/adultfemale",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec/adultfemale"
                                      },
                                      "description": "",
                                      "title": "AdultFemale",
                                      "content": "<p>Adult females attitudes.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                    }]
                                  },
                                  "adultmale": {
                                    "ownKey": "adultmale",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec/adultmale",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec/adultmale"
                                      },
                                      "description": "",
                                      "title": "AdultMale",
                                      "content": "<p>Adult males attitudes.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                    }]
                                  },
                                  "elderlyfemale": {
                                    "ownKey": "elderlyfemale",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec/elderlyfemale",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec/elderlyfemale"
                                      },
                                      "description": "",
                                      "title": "ElderlyFemale",
                                      "content": "<p>Elderly females attitudes.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                    }]
                                  }
                                },
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/helpattitudespec"
                                  },
                                  "description": "",
                                  "title": "HelpAttitudeSpec",
                                  "content": "<p>A specification of the parameters regarding help attitudes to load from a config file.<\/p>\n"
                                }]
                              },
                              "characteristic": {
                                "ownKey": "characteristic",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/characteristic",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/characteristic"
                                  },
                                  "description": "",
                                  "title": "Characteristic",
                                  "content": "<p>Any characteristic associated to a pedestrian.<\/p>\n"
                                }]
                              },
                              "speed": {
                                "ownKey": "speed",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/speed",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/speed"
                                  },
                                  "description": "",
                                  "title": "Speed",
                                  "content": "<p>The speed of an agent considering its age, gender and a random factor.<\/p>walking\n<p>The walking speed of the agent.<\/p>\nrunning\n<p>The running speed of the agent.<\/p>\n<init>\n<p>The speed of an agent considering its age, gender and a random factor.<\/p>\nSpeed\n<p>The speed of an agent considering its age, gender and a random factor.<\/p>\n"
                                }]
                              },
                              "compliancespec": {
                                "ownKey": "compliancespec",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/compliancespec",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/compliancespec"
                                  },
                                  "description": "",
                                  "title": "ComplianceSpec",
                                  "content": "<p>A specification of the parameters regarding compliance to load from a config file.<\/p>childMale\n<p>adultMale<\/p>\n<p>elderlyMale<\/p>\n<p>childFemale<\/p>\n<p>adultFemale<\/p>\n<p>elderlyFemale<\/p>\n"
                                }]
                              },
                              "age": {
                                "ownKey": "age",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual/age",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual/age"
                                  },
                                  "description": "",
                                  "title": "Age",
                                  "content": "<p>An enum representing the different periods of life.<\/p>CHILD\n<p>ADULT<\/p>\n<p>ELDERLY<\/p>\n<p>Age<\/p>\n<p>An enum representing the different periods of life.<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/individual",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/individual"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.cognitiveagents.impact.individual",
                              "content": "<p>Age<\/p>\n<p>An enum representing the different periods of life.<\/p>\nCharacteristic\n<p>Any characteristic associated to a pedestrian.<\/p>\nCompliance\n<p>The level of compliance of an agent considering its gender and its age.<\/p>\nComplianceSpec\n<p>A specification of the parameters regarding compliance to load from a config file.<\/p>\nGender\n<p>An enum representing the different genders.<\/p>\nHelpAttitude\n<p>The attitude of an agent towards helping another agent.<\/p>\nHelpAttitudeSpec\n<p>A specification of the parameters regarding help attitudes to load from a config file.<\/p>\nSpeed\n<p>The speed of an agent considering its age, gender and a random factor.<\/p>\nSpeedSpec\n<p>A specification of the parameters regarding speeds to load from a config file.<\/p>\n"
                            }]
                          },
                          "impactmodel": {
                            "ownKey": "impactmodel",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/cognitiveagents/impact/impactmodel",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact/impactmodel"
                              },
                              "description": "",
                              "title": "ImpactModel",
                              "content": "<p>Agent-based evacuation model with social contagion mechanisms.\nMore information can be found <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">here<\/a>.<\/p><init>\n<p>Agent-based evacuation model with social contagion mechanisms.\nMore information can be found <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">here<\/a>.<\/p>\ndangerBelief\n<p>Value representing the current belief of the situation dangerousness.<\/p>\nfear\n<p>Value representing the level of fear.<\/p>\nremainIntention\n<p>Value representing the intention to remain. Opposed to  escapeIntention <\/p>\nescapeIntention\n<p>Value representing the intention to escape. Opposed to  remainIntention .<\/p>\nupdate\n<p>Update the current intensity of the aforementioned feelings considering a  frequency .<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/cognitiveagents/impact",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/impact"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.cognitiveagents.impact",
                          "content": "<p>ImpactModel<\/p>\n<p>Agent-based evacuation model with social contagion mechanisms.\nMore information can be found <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">here<\/a>.<\/p>\nit.unibo.alchemist.model.cognitiveagents.impact.cognitive\n<p>it.unibo.alchemist.model.cognitiveagents.impact.individual<\/p>\n<p>PARAMETERS_FILE<\/p>\n<p>Path to the file containing characteristics parameters.<\/p>\n"
                        }]
                      },
                      "cognitiveagent": {
                        "ownKey": "cognitiveagent",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/cognitiveagents/cognitiveagent",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents/cognitiveagent"
                          },
                          "description": "",
                          "title": "CognitiveAgent",
                          "content": "<p>An entity capable of having emotions and relations.<\/p>cognitive\n<p>The cognitive model this agent adheres to.<\/p>\nwantsToEscape\n<p>Whether or not this pedestrian intends to escape.<\/p>\ninfluencialPeople\n<p>A list of all the cognitive agents who exert an influence on this cognitive agent.<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/cognitiveagents",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/cognitiveagents"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.model.cognitiveagents",
                      "content": "<p>CognitiveAgent<\/p>\n<p>An entity capable of having emotions and relations.<\/p>\nCognitiveModel\n<p>Theoretical model to describe the cognitive processes underlying in an agent.<\/p>\nit.unibo.alchemist.model.cognitiveagents.impact\n"
                    }]
                  },
                  "interfaces": {
                    "ownKey": "interfaces",
                    "childrenPages": {
                      "linkingrule": {
                        "ownKey": "linkingrule",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/linkingrule",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/linkingrule"
                          },
                          "description": "",
                          "title": "LinkingRule",
                          "content": "<p>An interface that represent an auto-linking logic for nodes within an environment.<\/p>computeNeighborhood\n<p>Produces a new neighborhood for specified node considering its position.<\/p>\nisLocallyConsistent\n<p>Some rules may require to be evaluated against multiple nodes until the situations gets consistent. For instance, a rule that connects the closest 10 nodes must be evaluated multiple times to get to the correct result (this is because a change in one neighbor may require a disconnection from another node to maintain exactly 10 connections). Most rules do not need such machinery (e.g., connecting to nodes within some statically defined range).<\/p>\n"
                        }]
                      },
                      "pedestriangroup2d": {
                        "ownKey": "pedestriangroup2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/pedestriangroup2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/pedestriangroup2d"
                          },
                          "description": "",
                          "title": "PedestrianGroup2D",
                          "content": "<p>A  PedestrianGroup  featuring bidimensional pedestrians.<\/p>\n"
                        }]
                      },
                      "environments": {
                        "ownKey": "environments",
                        "childrenPages": {
                          "euclideanphysics2denvironmentwithobstacles": {
                            "ownKey": "euclideanphysics2denvironmentwithobstacles",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/euclideanphysics2denvironmentwithobstacles",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclideanphysics2denvironmentwithobstacles"
                              },
                              "description": "",
                              "title": "EuclideanPhysics2DEnvironmentWithObstacles",
                              "content": "<p>An  Euclidean2DEnvironmentWithObstacles  supporting physics.<\/p>\n"
                            }]
                          },
                          "physicsenvironmentwithgraph": {
                            "ownKey": "physicsenvironmentwithgraph",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/physicsenvironmentwithgraph",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/physicsenvironmentwithgraph"
                              },
                              "description": "",
                              "title": "PhysicsEnvironmentWithGraph",
                              "content": "<p>An  EnvironmentWithGraph  supporting physics.<\/p>\n"
                            }]
                          },
                          "environmentwithgraph": {
                            "ownKey": "environmentwithgraph",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/environmentwithgraph",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/environmentwithgraph"
                              },
                              "description": "",
                              "title": "EnvironmentWithGraph",
                              "content": "<p>An  EnvironmentWithObstacles  providing a  NavigationGraph . This is a graph whose nodes are  ConvexGeometricShape s\nrepresenting areas of the environment traversable by agents (namely, walkable areas), whereas edges represent\nconnections between these areas. For instance, in an indoor environment, nodes should represent rooms and corridors,\nwhereas edges should represent doors and passages. This data structure is also known as\n<a href=\"https://en.wikipedia.org/wiki/Navigation_mesh\">navigation mesh<\/a>.<\/p>graph\n<p>The navigation graph.<\/p>\n"
                            }]
                          },
                          "physicsenvironment": {
                            "ownKey": "physicsenvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/physicsenvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/physicsenvironment"
                              },
                              "description": "",
                              "title": "PhysicsEnvironment",
                              "content": "<p>An environment supporting physics and nodes shapes.\nNote: due to the high number of parameters it's highly recommended not to use this interface directly,\nbut to create an apposite interface extending this one instead.<\/p>shapeFactory\n<p>A factory of shapes compatible with this environment.<\/p>\ngetHeading\n<p>Gets the heading of a node as a direction vector.<\/p>\nsetHeading\n<p>Sets the heading of a node.<\/p>\ngetShape\n<p>Gets the shape of a node relatively to its position and heading in the environment.<\/p>\ngetNodesWithin\n<p>Gets all nodes whose shape.intersect is true for the given shape.<\/p>\nfarthestPositionReachable\n<p>Computes the farthest position reachable by a  node  towards a  desiredPosition , avoiding node overlapping.\nIf no node is located in between,  desiredPosition  is returned. Otherwise, the first position where the node\ncollides with someone else is returned. For collision purposes, hitboxes are used: each node is given a circular\nhitbox of radius equal to its shape's radius (shapeless nodes can't cause overlapping). The client can specify\na different radius for the hitbox of the moving node.<\/p>\n"
                            }]
                          },
                          "euclidean2denvironment": {
                            "ownKey": "euclidean2denvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/euclidean2denvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclidean2denvironment"
                              },
                              "description": "",
                              "title": "Euclidean2DEnvironment",
                              "content": "<p>A bidimensional euclidean space with any concentration type  T .<\/p>origin\n<p>Create a position corresponding to the origin of this environment.<\/p>\nmakePosition\n<p>Creates a new  Euclidean2DPosition .<\/p>\nmakePosition\n<p>Creates a new  Euclidean2DPosition .<\/p>\nEuclidean2DEnvironment\n<p>A bidimensional euclidean space with any concentration type  T .<\/p>\n"
                            }]
                          },
                          "euclidean2denvironmentwithobstacles": {
                            "ownKey": "euclidean2denvironmentwithobstacles",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/euclidean2denvironmentwithobstacles",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclidean2denvironmentwithobstacles"
                              },
                              "description": "",
                              "title": "Euclidean2DEnvironmentWithObstacles",
                              "content": "<p>An  Environment2DWithObstacles  using  Euclidean2DPosition s.<\/p>\n"
                            }]
                          },
                          "euclidean2denvironmentwithgraph": {
                            "ownKey": "euclidean2denvironmentwithgraph",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/euclidean2denvironmentwithgraph",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclidean2denvironmentwithgraph"
                              },
                              "description": "",
                              "title": "Euclidean2DEnvironmentWithGraph",
                              "content": "<p>An euclidean bidimensional  EnvironmentWithGraph .<\/p>\n"
                            }]
                          },
                          "euclideanphysics2denvironmentwithgraph": {
                            "ownKey": "euclideanphysics2denvironmentwithgraph",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/euclideanphysics2denvironmentwithgraph",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/euclideanphysics2denvironmentwithgraph"
                              },
                              "description": "",
                              "title": "EuclideanPhysics2DEnvironmentWithGraph",
                              "content": "<p>An  Euclidean2DEnvironmentWithGraph  supporting physics.<\/p>\n"
                            }]
                          },
                          "environment2dwithobstacles": {
                            "ownKey": "environment2dwithobstacles",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/environment2dwithobstacles",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/environment2dwithobstacles"
                              },
                              "description": "",
                              "title": "Environment2DWithObstacles",
                              "content": "<p>A bidimensional  EnvironmentWithObstacles .<\/p>getObstaclesInRange\n<p>Given a point and a range, retrieves all the obstacles within.<\/p>\ngetObstaclesInRange\n<p>Given a point and a range, retrieves all the obstacles within.<\/p>\nhasMobileObstacles\n"
                            }]
                          },
                          "physics2denvironment": {
                            "ownKey": "physics2denvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/environments/physics2denvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments/physics2denvironment"
                              },
                              "description": "",
                              "title": "Physics2DEnvironment",
                              "content": "<p>A  PhysicsEnvironment  using  Euclidean2DPosition s.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/environments",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environments"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.interfaces.environments",
                          "content": "<p>Environment2DWithObstacles<\/p>\n<p>A bidimensional  EnvironmentWithObstacles .<\/p>\nEnvironmentWithGraph\n<p>An  EnvironmentWithObstacles  providing a  NavigationGraph . This is a graph whose nodes are  ConvexGeometricShape s\nrepresenting areas of the environment traversable by agents (namely, walkable areas), whereas edges represent\nconnections between these areas. For instance, in an indoor environment, nodes should represent rooms and corridors,\nwhereas edges should represent doors and passages. This data structure is also known as\n<a href=\"https://en.wikipedia.org/wiki/Navigation_mesh\">navigation mesh<\/a>.<\/p>\nEuclidean2DEnvironment\n<p>A bidimensional euclidean space with any concentration type  T .<\/p>\nEuclidean2DEnvironmentWithGraph\n<p>An euclidean bidimensional  EnvironmentWithGraph .<\/p>\nEuclidean2DEnvironmentWithObstacles\n<p>An  Environment2DWithObstacles  using  Euclidean2DPosition s.<\/p>\nEuclideanPhysics2DEnvironmentWithGraph\n<p>An  Euclidean2DEnvironmentWithGraph  supporting physics.<\/p>\nEuclideanPhysics2DEnvironmentWithObstacles\n<p>An  Euclidean2DEnvironmentWithObstacles  supporting physics.<\/p>\nPhysics2DEnvironment\n<p>A  PhysicsEnvironment  using  Euclidean2DPosition s.<\/p>\nPhysicsEnvironment\n<p>An environment supporting physics and nodes shapes.\nNote: due to the high number of parameters it's highly recommended not to use this interface directly,\nbut to create an apposite interface extending this one instead.<\/p>\nPhysicsEnvironmentWithGraph\n<p>An  EnvironmentWithGraph  supporting physics.<\/p>\n"
                        }]
                      },
                      "position2d": {
                        "ownKey": "position2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/position2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/position2d"
                          },
                          "description": "",
                          "title": "Position2D",
                          "content": "<p>A bidimensional position.<\/p>x\n<p>y<\/p>\n<p>getCoordinate<\/p>\n<p>Allows to access the value of a coordinate.<\/p>\n"
                        }]
                      },
                      "physicalsteeringstrategy": {
                        "ownKey": "physicalsteeringstrategy",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/physicalsteeringstrategy",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/physicalsteeringstrategy"
                          },
                          "description": "",
                          "title": "PhysicalSteeringStrategy",
                          "content": "<p>Defines how physical forces and steering actions (which may be seen as intentional forces) are combined to compute\nthe overall next position reached by a physical  node . The combination of steering actions is delegated to a\n nonPhysicalStrategy . The resulting intentional force is then combined with the physical ones to determine the\nnext position reached by  node .<\/p>node\n<p>The node to be moved.<\/p>\nnonPhysicalStrategy\n<p>The combination of intentional forces (= steering actions) and  computeTarget  are delegated to this strategy.<\/p>\ncomputeNextPosition\n<p>Computes the next relative position reached by the node, given the overall intentional force.<\/p>\ncomputeNextPosition\n<p>Computes the next relative position reached by the node, taking into account both the intentional and the\nphysical forces acting on  node  (intentional forces =  actions ).<\/p>\ncomputeTarget\n<p>Delegated to  nonPhysicalStrategy .<\/p>\n"
                        }]
                      },
                      "heterogeneouspedestrian": {
                        "ownKey": "heterogeneouspedestrian",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/heterogeneouspedestrian",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/heterogeneouspedestrian"
                          },
                          "description": "",
                          "title": "HeterogeneousPedestrian",
                          "content": "<p>A pedestrian with individual characteristics.<\/p>age\n<p>The age of this pedestrian.<\/p>\ngender\n<p>The gender of this pedestrian.<\/p>\ncompliance\n<p>Value between 0 and 1 representing the attitude towards conforming to social rules of this pedestrian.<\/p>\nprobabilityOfHelping\n<p>Value between 0 and 1 representing the probability this pedestrian will help another pedestrian in difficulty.<\/p>\n"
                        }]
                      },
                      "orientingagent": {
                        "ownKey": "orientingagent",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/orientingagent",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/orientingagent"
                          },
                          "description": "",
                          "title": "OrientingAgent",
                          "content": "<p>An agent capable of orienting itself inside an environment.<\/p>knowledgeDegree\n<p>The knowledge degree of the agent concerning the environment. This is a Double value in <a href=\"#\">0,1<\/a> describing the\npercentage of environment the agent is familiar with prior to the start of the simulation (thus it does not\ntake into account the knowledge the pedestrian will gain during it, namely the  volatileMemory ).<\/p>\ncognitiveMap\n<p>The cognitive map of the agent. It's a graph composed of landmarks (elements of the environment easy to\nremember due to their uniqueness) and spatial relations between them. It's modeled as a  NavigationGraph .<\/p>\nvolatileMemory\n<p>The volatile memory of the agent: it models the ability to remember areas of the environment already visited\nsince the start of the simulation. Each area is paired with the number of visits. Areas are assumed to be\nrepresented as  ConvexGeometricShape s, as in  NavigationGraph s.<\/p>\nregisterVisit\n<p>Registers a visit to the provided  area  in the agent's  volatileMemory .<\/p>\n"
                        }]
                      },
                      "context": {
                        "ownKey": "context",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/context",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/context"
                          },
                          "description": "",
                          "title": "Context",
                          "content": "<p>This enum describes the possible contexts for a given <code> Action <\/code> or <code> Condition <\/code>. A context represents the elements which are read for a <code> Condition <\/code> and the elements that may be subject of modifications for an <code> Action <\/code>. Choosing the right <code> Context <\/code> is crucial: if it's too restricted the simulation will be invalid, if it's too wide it WILL impact dramatically on performances. Contexts are used internally to better determine dependencies among reactions. See <a href=\"http://apice.unibo.it/xwiki/bin/view/Publications/PianiniMASS11\"> this paper<\/a> for further information about the usage of contexts.<\/p>GLOBAL\n<p>LOCAL<\/p>\n<p>NEIGHBORHOOD<\/p>\n<p>getWider<\/p>\n"
                        }]
                      },
                      "action": {
                        "ownKey": "action",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/action",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/action"
                          },
                          "description": "",
                          "title": "Action",
                          "content": "<p>cloneAction<\/p>\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetOutboundDependencies\n<p>execute<\/p>\n<p>Effectively executes this action.<\/p>\ngetContext\n"
                        }]
                      },
                      "mapenvironment": {
                        "ownKey": "mapenvironment",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/mapenvironment",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/mapenvironment"
                          },
                          "description": "",
                          "title": "MapEnvironment",
                          "content": "<p>DEFAULT_VEHICLE<\/p>\n<p>The default vehicle.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path. It uses the fastest path as metric.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path.<\/p>\ncomputeRoute\n<p>This method relies on the map data, and computes a route towards some absolute coordinate solving a TSP problem. It's up to the specific <code> Action <\/code> calling this method to effectively move nodes along the path.<\/p>\n"
                        }]
                      },
                      "obstacle": {
                        "ownKey": "obstacle",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/obstacle",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/obstacle"
                          },
                          "description": "",
                          "title": "Obstacle",
                          "content": "<p>A generic obstacle in a vector space.<\/p>id\n<p>The id for this obstacle.<\/p>\nnext\n<p>Given a vector (starting point and end point) representing a requested\nmove, this method computes a new end point, representing a cut version of\nthe initial vector, modified in such a way that the end point is outside\nthe obstacle.<\/p>\nnearestIntersection\n<p>Given a vector (represented as a starting point and an end point), computes\nthe intersection point between the vector and the obstacle nearest to the\nvector's starting point.<\/p>\n"
                        }]
                      },
                      "environmentwithobstacles": {
                        "ownKey": "environmentwithobstacles",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/environmentwithobstacles",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environmentwithobstacles"
                          },
                          "description": "",
                          "title": "EnvironmentWithObstacles",
                          "content": "<p>An environment with  Obstacle s.<\/p>obstacles\n<p>A list of all the obstacles in this environment.<\/p>\naddObstacle\n<p>Adds an obstacle to this environment.<\/p>\nremoveObstacle\n<p>Removes an obstacle from this environment.<\/p>\nintersectsObstacle\n<p>Checks whether there is at least an obstacle intersecting the line connecting  start  and  end .<\/p>\nnext\n<p>This method must calculate the ABSOLUTE next allowed position given the\ncurrent position and the position in which the node wants to move. For\nexample, if your node is in position <a href=\"#\">2,3<\/a>, wants to move to <a href=\"#\">3,4<\/a> but\nthe next allowed position (because, e.g., of physical obstacles) is\n<a href=\"#\">2.5,3.5<\/a>, the result must be a Position containing coordinates\n<a href=\"#\">2.5,3.5<\/a>.<\/p>\n"
                        }]
                      },
                      "group": {
                        "ownKey": "group",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/group",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/group"
                          },
                          "description": "",
                          "title": "Group",
                          "content": "<p>A group of nodes.<\/p>members\n<p>The list of pedestrians belonging to this group.<\/p>\ncontains\n<p>Whether a node belongs to this group or not.<\/p>\naddMember\n<p>Add a node in this group if not already part of it.<\/p>\nremoveMember\n<p>Remove a node from this group.<\/p>\n"
                        }]
                      },
                      "visiblenode": {
                        "ownKey": "visiblenode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/visiblenode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/visiblenode"
                          },
                          "description": "",
                          "title": "VisibleNode",
                          "content": "<p>Represents a node seen by the  it.unibo.alchemist.model.implementations.actions.CameraSee  action.<\/p>node\n<p>The node seen.<\/p>\nposition\n<p>The position of the node.<\/p>\n"
                        }]
                      },
                      "environmentnode": {
                        "ownKey": "environmentnode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/environmentnode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environmentnode"
                          },
                          "description": "",
                          "title": "EnvironmentNode",
                          "content": ""
                        }]
                      },
                      "physicalpedestrian2d": {
                        "ownKey": "physicalpedestrian2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/physicalpedestrian2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/physicalpedestrian2d"
                          },
                          "description": "",
                          "title": "PhysicalPedestrian2D",
                          "content": "<p>A  PhysicalPedestrian  in an euclidean bidimensional space. This pedestrian has a circular  comfortArea  of radius\nequal to its shape radius plus a  comfortRay .\nThis is derived from <a href=\"https://bit.ly/3e3C7Tb\">the work of Pelechano et al<\/a>.<\/p>comfortRay\n<p>The comfort ray of this pedestrian, this is added to the radius of its shape to obtain the  comfortArea .<\/p>\ncomfortArea\n<p>The comfort area of this pedestrian, it's a circle of radius shape.radius +  comfortRay .<\/p>\nrepulsionForce\n<p>Computes the repulsion force caused by a node that entered the  comfortArea . This is derived from the work\nof <a href=\"https://bit.ly/3e3C7Tb\">Pelechano et al<\/a>.<\/p>\n"
                        }]
                      },
                      "dependency": {
                        "ownKey": "dependency",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/dependency",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/dependency"
                          },
                          "description": "",
                          "title": "Dependency",
                          "content": "<p>This interface represents a token that may generate a dependency between two reactions. Some special built-in tokens are EVERYTHING, EVERY_MOLECULE, MOVEMENT, and NEIGHBORHOOD_CHANGE. Molecules are dependencies as well.<\/p>EVERYTHING\n<p>Declares a dependency towards any other reaction in the reachable scope.<\/p>\nEVERY_MOLECULE\n<p>Declares a dependency towards any modified molecule in the reachable scope.<\/p>\nMOVEMENT\n<p>Declares a dependency on movement of nodes in the reachable scope.<\/p>\nmakesDependent\n<p>Determines whether the provided dependency depends on this dependency. The default behavior calls <code> #dependsOn(Dependency) <\/code>, and provides a bidirectional dependency.<\/p>\ndependsOn\n<p>Determines whether this dependency depends on the provided dependency. The default behavior requires equality.<\/p>\n"
                        }]
                      },
                      "navigationstrategy2d": {
                        "ownKey": "navigationstrategy2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/navigationstrategy2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/navigationstrategy2d"
                          },
                          "description": "",
                          "title": "NavigationStrategy2D",
                          "content": "<p>A  NavigationStrategy  in a bidimensional euclidean space.<\/p>\n"
                        }]
                      },
                      "timedistribution": {
                        "ownKey": "timedistribution",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/timedistribution",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/timedistribution"
                          },
                          "description": "",
                          "title": "TimeDistribution",
                          "content": "<p>This interface represents a temporal distribution for any event.<\/p>update\n<p>Updates the internal status.<\/p>\ngetNextOccurence\n<p>clone<\/p>\n<p>getRate<\/p>\n"
                        }]
                      },
                      "node": {
                        "ownKey": "node",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/node",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/node"
                          },
                          "description": "",
                          "title": "Node",
                          "content": "<p>contains<\/p>\n<p>Tests whether a node contains a <code> Molecule <\/code>.<\/p>\ngetChemicalSpecies\n<p>This method is usefult to know how many different chemical species may be contained in this node.<\/p>\nsetConcentration\n<p>Sets the concentration of mol to c.<\/p>\ngetId\n<p>addReaction<\/p>\n<p>Adds a reaction to this node.<\/p>\ncloneNode\n<p>Creates a new Node which is a clone of the current Node. The new Node will have all the current Node's properties, such as reactions and molecules, but it will also have a different ID.<\/p>\nremoveConcentration\n<p>getReactions<\/p>\n<p>This method allows to access all the reaction of the node.<\/p>\ngetConcentration\n<p>Calculates the concentration of a molecule.<\/p>\ngetContents\n<p>removeReaction<\/p>\n<p>Removes a reaction from this node.<\/p>\n"
                        }]
                      },
                      "condition": {
                        "ownKey": "condition",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/condition",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/condition"
                          },
                          "description": "",
                          "title": "Condition",
                          "content": "<p>cloneCondition<\/p>\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetNode\n<p>getPropensityContribution<\/p>\n<p>This method is a support for the propensity calculation inside the Reactions. It allows this condition to influence the rate calculation in some way. It's up to the reaction to decide whether to use or not this information, and how.<\/p>\ngetInboundDependencies\n<p>isValid<\/p>\n<p>getContext<\/p>\n<p>reactionReady<\/p>\n<p>This method is called by the <code> it.unibo.alchemist.core.interfaces.Simulation <\/code> once the <code> Reaction <\/code> whose this <code> Condition <\/code> belongs to is the next one to be executed, and all its conditions passed (namely, the next operation will be the reaction execution). It can be used to perform sanity checks, as well as for registering the status of the simulated world for future comparisons. Defaults to an empty implementation.<\/p>\n"
                        }]
                      },
                      "route": {
                        "ownKey": "route",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/route",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/route"
                          },
                          "description": "",
                          "title": "Route",
                          "content": "<p>length<\/p>\n<p>stream<\/p>\n<p>getPoint<\/p>\n<p>size<\/p>\n<p>getPoints<\/p>\n"
                        }]
                      },
                      "circulardeformablecell": {
                        "ownKey": "circulardeformablecell",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/circulardeformablecell",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/circulardeformablecell"
                          },
                          "description": "",
                          "title": "CircularDeformableCell",
                          "content": "<p>Implements a circular deformable cell.<\/p>getMaxRadius\n<p>getMaxDiameter<\/p>\n"
                        }]
                      },
                      "ilsaaction": {
                        "ownKey": "ilsaaction",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/ilsaaction",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/ilsaaction"
                          },
                          "description": "",
                          "title": "ILsaAction",
                          "content": "<p>cloneAction<\/p>\n<p>getOutboundDependencies<\/p>\n<p>setExecutionContext<\/p>\n<p>Sets the context in which this action will execute.<\/p>\n"
                        }]
                      },
                      "ilsamolecule": {
                        "ownKey": "ilsamolecule",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/ilsamolecule",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/ilsamolecule"
                          },
                          "description": "",
                          "title": "ILsaMolecule",
                          "content": "<p>moreGenericOf<\/p>\n<p>hasDuplicateVariables<\/p>\n<p>isIstance<\/p>\n<p>toHashString<\/p>\n<p>isIdenticalTo<\/p>\n<p>size<\/p>\n<p>allocateVar<\/p>\n<p>argsNumber<\/p>\n<p>getArg<\/p>\n<p>generalize<\/p>\n<p>matches<\/p>\n<p>matches<\/p>\n"
                        }]
                      },
                      "molecule": {
                        "ownKey": "molecule",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/molecule",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/molecule"
                          },
                          "description": "",
                          "title": "Molecule",
                          "content": "<p>Interface for a molecule.<\/p>getName\n"
                        }]
                      },
                      "neighborhood": {
                        "ownKey": "neighborhood",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/neighborhood",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/neighborhood"
                          },
                          "description": "",
                          "title": "Neighborhood",
                          "content": "<p>The type which describes the concentration of a molecule Interface for a neighborhood. When implementing it in a real class, please remember to correctly implement also the equals method inherited from Object.<\/p>contains\n<p>Verifies if a node is contained inside a neighborhood.<\/p>\ngetCenter\n<p>Allows to access the central node.<\/p>\nisEmpty\n<p>getNeighbors<\/p>\n<p>Allows to directly access every node in the neighborhood. A change of this List will be reflected in the neighborhood.<\/p>\nremove\n<p>add<\/p>\n<p>getNeighborByNumber<\/p>\n<p>Returns the num-th neighbor.<\/p>\nsize\n"
                        }]
                      },
                      "position": {
                        "ownKey": "position",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/position",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/position"
                          },
                          "description": "",
                          "title": "Position",
                          "content": "<p>An interface to represent a generic coordinates system.<\/p>coordinates\n<p>Allows to get the position as a Number array.<\/p>\ndimensions\n<p>boundingBox<\/p>\n<p>Given a range, produces N coordinates, representing the N opposite\nvertices of the hypercube having the current coordinate as center and\ncircumscribing the N-sphere defined by the range. In the case of two\ndimensional coordinates, it must return the opposite vertices of the\nsquare circumscribing the circle with center in this position and radius\nrange.<\/p>\ngetCoordinate\n<p>Allows to access the value of a coordinate.<\/p>\ndistanceTo\n<p>Computes the distance between this position and another compatible\nposition.<\/p>\nplus\n<p>Considers both positions as vectors, and sums them.<\/p>\nminus\n<p>Considers both positions as vectors, and returns the difference between this position and the passed one.<\/p>\n"
                        }]
                      },
                      "cellnode": {
                        "ownKey": "cellnode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/cellnode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/cellnode"
                          },
                          "description": "",
                          "title": "CellNode",
                          "content": "<p>getJunctionsCount<\/p>\n<p>removeJunction<\/p>\n<p>Remove a junction from this node.<\/p>\ngetNeighborsLinkWithJunction\n<p>Returns a set of ICellNode which are linked with the current node by a junction of the type j.<\/p>\ncontainsJunction\n<p>Return true if a junction is present in the current node, false otherwise. Note: a junction is considered present if the method junction.equals(j) return true.<\/p>\nsetPolarization\n<p>set the polarization versor, e.g. a versor indicating the direction in which the cell will move the next time.<\/p>\ngetJunctions\n<p>getPolarizationVersor<\/p>\n<p>getAllNodesLinkWithJunction<\/p>\n<p>addJunction<\/p>\n<p>Add a junction to the current node.<\/p>\naddPolarization\n<p>add v to the polarization versor inside the cell; useful for considering the combination of various stimuli in a cell.<\/p>\n"
                        }]
                      },
                      "navigationaction2d": {
                        "ownKey": "navigationaction2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/navigationaction2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/navigationaction2d"
                          },
                          "description": "",
                          "title": "NavigationAction2D",
                          "content": "<p>A  NavigationAction  in a bidimensional euclidean space.<\/p>\n"
                        }]
                      },
                      "navigationstrategy": {
                        "ownKey": "navigationstrategy",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/navigationstrategy",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/navigationstrategy"
                          },
                          "description": "",
                          "title": "NavigationStrategy",
                          "content": "<p>Defines what a pedestrian should do when in a new room (= environment's area), this is designed to be used jointly\nwith a  NavigationAction : the latter defines how to properly move the pedestrian, while delegating the decision on\nwhere to move it to a  NavigationStrategy .<\/p>action\n<p>The  NavigationAction  used to navigate the environment.<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\ninUnexpectedNewRoom\n<p>This is called in place of  inNewRoom  when the pedestrian ends up in an unexpected room while moving.\nBy default, unexpected rooms are treated just like expected ones.<\/p>\n"
                        }]
                      },
                      "objectwithgps": {
                        "ownKey": "objectwithgps",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/objectwithgps",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/objectwithgps"
                          },
                          "description": "",
                          "title": "ObjectWithGPS",
                          "content": "<p>setTrace<\/p>\n"
                        }]
                      },
                      "geoposition": {
                        "ownKey": "geoposition",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/geoposition",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geoposition"
                          },
                          "description": "",
                          "title": "GeoPosition",
                          "content": "<p>Represents a specific point on the Earth's surface.<\/p>getLatitude\n<p>minus<\/p>\n<p>Subtracts the provided <code> GeoPosition <\/code> from this <code> GeoPosition <\/code>.<\/p>\ngetLongitude\n<p>getCoordinate<\/p>\n<p>plus<\/p>\n<p>Adds two <code> GeoPosition <\/code>.<\/p>\ntoLatLong\n<p>Converts  this  to <a href=\"#\">LatLong<\/a>.<\/p>\n"
                        }]
                      },
                      "euclideanenvironment": {
                        "ownKey": "euclideanenvironment",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/euclideanenvironment",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/euclideanenvironment"
                          },
                          "description": "",
                          "title": "EuclideanEnvironment",
                          "content": "<p>An Euclidean space, where  Position s  P  are valid  Vector s,\nsupporting any concentration type  T .<\/p>origin\n<p>Create a position corresponding to the origin of this environment.<\/p>\nmoveNode\n<p>This method moves a  node  in the environment toward some  direction . If\nnode move is unsupported, it does nothing.\nSubclasses may override this method if they want to change the way a node\nmoves towards some direction. The current implementation internally calls\n{@link #moveNodeToPosition(Node, Position2D)}, as such, overriding that\nmethod may suffice.<\/p>\nmakePosition\n<p>Creates a  Position  compatible with this environment given its  coordinates .<\/p>\n"
                        }]
                      },
                      "gpspoint": {
                        "ownKey": "gpspoint",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/gpspoint",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/gpspoint"
                          },
                          "description": "",
                          "title": "GPSPoint",
                          "content": "<p>addTime<\/p>\n<p>subtractTime<\/p>\n<p>getTime<\/p>\n"
                        }]
                      },
                      "navigationaction": {
                        "ownKey": "navigationaction",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/navigationaction",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/navigationaction"
                          },
                          "description": "",
                          "title": "NavigationAction",
                          "content": "<p>A  SteeringAction  allowing a pedestrian to navigate an environment consciously (e.g. without getting stuck in\nU-shaped obstacles). Names are inspired to indoor environments, but this interface works for outdoor ones as well.<\/p>pedestrian\n<p>The pedestrian to move.<\/p>\nenvironment\n<p>The environment the  pedestrian  is into.<\/p>\npedestrianPosition\n<p>The position of the  pedestrian  in the  environment .<\/p>\ncurrentRoom\n<p>The room (= environment's area) the  pedestrian  is into.<\/p>\ndoorsInSight\n<p>crossDoor<\/p>\n<p>Moves the pedestrian across the provided  door , which must be among  doorsInSight .<\/p>\nmoveToFinal\n<p>Moves the pedestrian to the given final  destination , which must be inside  currentRoom .<\/p>\nstop\n<p>Stops moving the pedestrian.<\/p>\n"
                        }]
                      },
                      "pedestriangroup": {
                        "ownKey": "pedestriangroup",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/pedestriangroup",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/pedestriangroup"
                          },
                          "description": "",
                          "title": "PedestrianGroup",
                          "content": "<p>A  Group  of  Pedestrian s.<\/p>\n"
                        }]
                      },
                      "layer": {
                        "ownKey": "layer",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/layer",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/layer"
                          },
                          "description": "",
                          "title": "Layer",
                          "content": "<p>Interface for static layer, containing a substance or a molecule with a spatial distribution.<\/p>getValue\n"
                        }]
                      },
                      "steeringaction": {
                        "ownKey": "steeringaction",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/steeringaction",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/steeringaction"
                          },
                          "description": "",
                          "title": "SteeringAction",
                          "content": "<p>Action whose purpose is moving a node inside the environment it is in.<\/p>nextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\n"
                        }]
                      },
                      "vehicle": {
                        "ownKey": "vehicle",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/vehicle",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/vehicle"
                          },
                          "description": "",
                          "title": "Vehicle",
                          "content": "<p>BIKE<\/p>\n<p>CAR<\/p>\n<p>FOOT<\/p>\n<p>HIKE<\/p>\n<p>MOUNTAN_BIKE<\/p>\n<p>MOTORCYCLE<\/p>\n<p>RACING_BIKE<\/p>\n<p>WHEELCHAIR<\/p>\n<p>getEncoder<\/p>\n"
                        }]
                      },
                      "steeringstrategy": {
                        "ownKey": "steeringstrategy",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/steeringstrategy",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/steeringstrategy"
                          },
                          "description": "",
                          "title": "SteeringStrategy",
                          "content": "<p>Strategy interface describing how the next points of the steering actions\nare combined to calculate the next position to move on.<\/p>computeNextPosition\n<p>Computes the next position starting from the steering actions the pedestrian obey to,\nin relative coordinates with respect to its current position.<\/p>\ncomputeTarget\n<p>Computes the target to reach starting from the steering actions the pedestrian obey to,\nin absolute coordinates.<\/p>\n"
                        }]
                      },
                      "steeringactionwithtarget": {
                        "ownKey": "steeringactionwithtarget",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/steeringactionwithtarget",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/steeringactionwithtarget"
                          },
                          "description": "",
                          "title": "SteeringActionWithTarget",
                          "content": "<p>A  SteeringAction  with a defined target.<\/p>target\n<p>The position the owner of this action moves towards, in absolute coordinates.<\/p>\ntargetDistanceTo\n<p>Computes the distance between this action's target and the given  node .<\/p>\n"
                        }]
                      },
                      "cognitivepedestrian": {
                        "ownKey": "cognitivepedestrian",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/cognitivepedestrian",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/cognitivepedestrian"
                          },
                          "description": "",
                          "title": "CognitivePedestrian",
                          "content": "<p>A heterogeneous pedestrian with cognitive capabilities.<\/p>\n"
                        }]
                      },
                      "physicalpedestrian": {
                        "ownKey": "physicalpedestrian",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/physicalpedestrian",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/physicalpedestrian"
                          },
                          "description": "",
                          "title": "PhysicalPedestrian",
                          "content": "<p>A pedestrian capable of interacting physically with others.  PhysicalPedestrian s have a  comfortArea : when\nanother node enters such area, this pedestrian is subject to a repulsion force. This is derived from\n<a href=\"https://bit.ly/3e3C7Tb\">the work of Pelechano et al<\/a>. Note that  PhysicalPedestrian s don't actively push each\nother, pushing behavior emerges from the interaction of pedestrians with different comfort areas (see the article\nlinked above).<\/p>comfortArea\n<p>The comfort area of this pedestrian.<\/p>\nrepulsionForce\n<p>Computes the repulsion force caused by a node that entered the  comfortArea .<\/p>\nphysicalForces\n"
                        }]
                      },
                      "orientingpedestrian": {
                        "ownKey": "orientingpedestrian",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/orientingpedestrian",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/orientingpedestrian"
                          },
                          "description": "",
                          "title": "OrientingPedestrian",
                          "content": "<p>A pedestrian capable of orienting itself.<\/p>\n"
                        }]
                      },
                      "groupsteeringaction": {
                        "ownKey": "groupsteeringaction",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/groupsteeringaction",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/groupsteeringaction"
                          },
                          "description": "",
                          "title": "GroupSteeringAction",
                          "content": "<p>A  SteeringAction  related to a group of pedestrians.<\/p>group\n<p>The list of pedestrians influencing this action.<\/p>\n"
                        }]
                      },
                      "timedroute": {
                        "ownKey": "timedroute",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/timedroute",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/timedroute"
                          },
                          "description": "",
                          "title": "TimedRoute",
                          "content": "<p>Route with total trip time to cross it.<\/p>getTripTime\n"
                        }]
                      },
                      "benchmarkableenvironment": {
                        "ownKey": "benchmarkableenvironment",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/benchmarkableenvironment",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/benchmarkableenvironment"
                          },
                          "description": "",
                          "title": "BenchmarkableEnvironment",
                          "content": "<p>An environment which provides a mean to get infos about its performances.<\/p>enableBenchmark\n<p>Call this method to tell this environment that it should record its performances. Please note that some environments might ignore this message if this method is not called before starting using the environment itself.<\/p>\ngetBenchmarkResult\n"
                        }]
                      },
                      "reaction": {
                        "ownKey": "reaction",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/reaction",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/reaction"
                          },
                          "description": "",
                          "title": "Reaction",
                          "content": "<p>initializationComplete<\/p>\n<p>This method is called when the environment has completed its initialization. Can be used by this reaction to compute its next execution time - in case such computation requires an inspection of the environment.<\/p>\ngetOutputContext\n<p>cloneOnNewNode<\/p>\n<p>This method allows to clone this reaction on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetOutboundDependencies\n<p>getConditions<\/p>\n<p>getTau<\/p>\n<p>execute<\/p>\n<p>Executes the reactions.<\/p>\nupdate\n<p>Updates the scheduling of this reaction.<\/p>\ncanExecute\n<p>getNode<\/p>\n<p>getTimeDistribution<\/p>\n<p>getInputContext<\/p>\n<p>setConditions<\/p>\n<p>Sets the <code> Condition <\/code>s list. Some implementations may not allow to change it at runtime.<\/p>\ngetActions\n<p>getInboundDependencies<\/p>\n<p>getRate<\/p>\n<p>Returns the speed of this <code> Reaction <\/code>. It is an average number, and can potentially change during the simulation, depending on the implementation.<\/p>\nsetActions\n<p>Sets the <code> Action <\/code>s list. Some implementations may not allow to change it at runtime.<\/p>\n"
                        }]
                      },
                      "ilsacondition": {
                        "ownKey": "ilsacondition",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/ilsacondition",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/ilsacondition"
                          },
                          "description": "",
                          "title": "ILsaCondition",
                          "content": "<p>cloneCondition<\/p>\n<p>getNode<\/p>\n<p>filter<\/p>\n<p>When this method is called, the condition must filter the current matches and allowed nodes.<\/p>\n"
                        }]
                      },
                      "groupwithleader": {
                        "ownKey": "groupwithleader",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/groupwithleader",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/groupwithleader"
                          },
                          "description": "",
                          "title": "GroupWithLeader",
                          "content": "<p>A group with a special member acting as a leader.<\/p>leader\n<p>The leader of the group.<\/p>\n"
                        }]
                      },
                      "concentration": {
                        "ownKey": "concentration",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/concentration",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/concentration"
                          },
                          "description": "",
                          "title": "Concentration",
                          "content": "<p>This interface is a wrapper for concentrations.<\/p>getContent\n<p>Allows to access the content of the concentration.<\/p>\n"
                        }]
                      },
                      "orientingagent2d": {
                        "ownKey": "orientingagent2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/orientingagent2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/orientingagent2d"
                          },
                          "description": "",
                          "title": "OrientingAgent2D",
                          "content": "<p>An agent capable of orienting itself inside an Euclidean environment.<\/p>\n"
                        }]
                      },
                      "movestrategies": {
                        "ownKey": "movestrategies",
                        "childrenPages": {
                          "speedselectionstrategy": {
                            "ownKey": "speedselectionstrategy",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/movestrategies/speedselectionstrategy",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/movestrategies/speedselectionstrategy"
                              },
                              "description": "",
                              "title": "SpeedSelectionStrategy",
                              "content": "<p>Given the current target <code> Position <\/code>, this strategy interface computes the current <code> it.unibo.alchemist.model.interfaces.Node <\/code>'s speed.<\/p>getNodeMovementLength\n"
                            }]
                          },
                          "targetselectionstrategy": {
                            "ownKey": "targetselectionstrategy",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/movestrategies/targetselectionstrategy",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/movestrategies/targetselectionstrategy"
                              },
                              "description": "",
                              "title": "TargetSelectionStrategy",
                              "content": "<p>This interface models a strategy for selecting positions where to move.<\/p>getTarget\n"
                            }]
                          },
                          "routingstrategy": {
                            "ownKey": "routingstrategy",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/movestrategies/routingstrategy",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/movestrategies/routingstrategy"
                              },
                              "description": "",
                              "title": "RoutingStrategy",
                              "content": "<p>Strategy interface describing how the routing between two points happens.<\/p>computeRoute\n<p>Computes a route between two positions.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/movestrategies",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/movestrategies"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.interfaces.movestrategies",
                          "content": "<p>SpeedSelectionStrategy<\/p>\n<p>Given the current target <code> Position <\/code>, this strategy interface computes the current <code> it.unibo.alchemist.model.interfaces.Node <\/code>'s speed.<\/p>\nTargetSelectionStrategy\n<p>This interface models a strategy for selecting positions where to move.<\/p>\nRoutingStrategy\n<p>Strategy interface describing how the routing between two points happens.<\/p>\n"
                        }]
                      },
                      "orientingpedestrian2d": {
                        "ownKey": "orientingpedestrian2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/orientingpedestrian2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/orientingpedestrian2d"
                          },
                          "description": "",
                          "title": "OrientingPedestrian2D",
                          "content": "<p>An  OrientingPedestrian  in an euclidean bidimensional space.<\/p>\n"
                        }]
                      },
                      "environmentsupportingdeformablecells": {
                        "ownKey": "environmentsupportingdeformablecells",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/environmentsupportingdeformablecells",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environmentsupportingdeformablecells"
                          },
                          "description": "",
                          "title": "EnvironmentSupportingDeformableCells",
                          "content": "<p><code> Environment <\/code> supporting deformable cells.<\/p>getMaxDiameterAmongCircularDeformableCells\n"
                        }]
                      },
                      "cellwithcirculararea": {
                        "ownKey": "cellwithcirculararea",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/cellwithcirculararea",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/cellwithcirculararea"
                          },
                          "description": "",
                          "title": "CellWithCircularArea",
                          "content": "<p>Implements a cell with a defined volume.<\/p>getDiameter\n<p>getRadius<\/p>\n"
                        }]
                      },
                      "obstacle2d": {
                        "ownKey": "obstacle2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/obstacle2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/obstacle2d"
                          },
                          "description": "",
                          "title": "Obstacle2D",
                          "content": "<p>An <code> Obstacle <\/code> in a bidimensional space.<\/p>\n"
                        }]
                      },
                      "environment": {
                        "ownKey": "environment",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/environment",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environment"
                          },
                          "description": "",
                          "title": "Environment",
                          "content": "<p>Interface for an environment. Every environment must implement this specification.<\/p>addLayer\n<p>Add a <code> Layer <\/code> to the <code> Environment <\/code>.<\/p>\ngetLayers\n<p>Return all the Layers in this <code> Environment <\/code>.<\/p>\ngetNodeCount\n<p>setSimulation<\/p>\n<p>getSize<\/p>\n<p>This method returns the size of the environment as an array of length <code> #getDimensions() <\/code>. This method must return distance measured with the same unit used by the positions. No non-euclidean distance metrics are allowed.<\/p>\ngetDistanceBetweenNodes\n<p>Measures the distance between two nodes in the environment.<\/p>\ngetNodesWithinRange\n<p>Given a node (center) this method returns a list of all the surroundings nodes within the given range. Note that this method (depending on the implementation) might be not optimized and it's consequently <b>much<\/b> better to use <code> Environment#getNeighborhood(Node) <\/code> and filter the neighborhood if you are sure that all the nodes within the range are connected to the center.<\/p>\ngetNodesWithinRange\n<p>Given a <code> Position <\/code>(center) this method returns a list of all the surroundings nodes within the given range. Note that this method (depending on the implementation) might be not optimized.<\/p>\nmoveNodeToPosition\n<p>This method moves a node in the environment to some position. If node move is unsupported, it does nothing.<\/p>\ngetLinkingRule\n<p>setIncarnation<\/p>\n<p>removeNode<\/p>\n<p>This method allows to remove a node. If node removal is unsupported, it does nothing.<\/p>\nsetLinkingRule\n<p>getOffset<\/p>\n<p>This method allows to know which are the smallest coordinates represented.<\/p>\ngetIncarnation\n<p>getNeighborhood<\/p>\n<p>Given a node, this method returns its neighborhood.<\/p>\ngetSimulation\n<p>isTerminated<\/p>\n<p>getNodeByID<\/p>\n<p>Allows to access a node known its id. Depending on the implementation, this method may or not be optimized (namely, id could run in constant or linear time with the number of nodes).<\/p>\ngetPosition\n<p>Calculates the position of a node.<\/p>\ngetDimensions\n<p>The number of dimensions of this environment.<\/p>\ngetNodes\n<p>All the nodes that exist in current environment.<\/p>\naddTerminator\n<p>getSizeInDistanceUnits<\/p>\n<p>This method returns the size of the environment as an array of length <code> #getDimensions() <\/code>. This method must return distance measured with the same unit used for measuring distances. It may or may not return the same result of <code> #getSize() <\/code><\/p>\ngetLayer\n<p>Get the layer associate to the given molecule. If no Layer is associated with the given molecule, return an empty optional.<\/p>\nmakePosition\n<p>addNode<\/p>\n<p>This method allows to add a new node to this environment. The environment is responsible to call the right method of the simulation in order to ensure that the reaction is properly scheduled.<\/p>\n"
                        }]
                      },
                      "nodes": {
                        "ownKey": "nodes",
                        "childrenPages": {"nodewithshape": {
                          "ownKey": "nodewithshape",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/interfaces/nodes/nodewithshape",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/nodes/nodewithshape"
                            },
                            "description": "",
                            "title": "NodeWithShape",
                            "content": "<p>A node with a  shape .<\/p>shape\n<p>The shape of the node.<\/p>\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/nodes",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/nodes"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.interfaces.nodes",
                          "content": "<p>NodeWithShape<\/p>\n<p>A node with a  shape .<\/p>\n"
                        }]
                      },
                      "gpstrace": {
                        "ownKey": "gpstrace",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/gpstrace",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/gpstrace"
                          },
                          "description": "",
                          "title": "GPSTrace",
                          "content": "<p>getFinalPosition<\/p>\n<p>getPreviousPosition<\/p>\n<p>interpolate<\/p>\n<p>getInitialPosition<\/p>\n<p>startAt<\/p>\n<p>getStartTime<\/p>\n<p>getFinalTime<\/p>\n<p>getNextPosition<\/p>\n"
                        }]
                      },
                      "ilsanode": {
                        "ownKey": "ilsanode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/ilsanode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/ilsanode"
                          },
                          "description": "",
                          "title": "ILsaNode",
                          "content": "<p>Interface for an LSA Node. Avoids the crappy casts.<\/p>setConcentration\n<p>Adds an instance of ILsaMolecule in the node's LsaSpace.<\/p>\nremoveConcentration\n<p>Deletes an ILsaMolecule from the Node LsaSpace Warning: the method removes only the first matched ILsaMolecule.<\/p>\ngetConcentration\n<p>getLsaSpace<\/p>\n"
                        }]
                      },
                      "pedestrian2d": {
                        "ownKey": "pedestrian2d",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/pedestrian2d",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/pedestrian2d"
                          },
                          "description": "",
                          "title": "Pedestrian2D",
                          "content": "<p>A bidimensional pedestrian.<\/p>environment\n<p>Access to the  environment .<\/p>\nshape\n<p>The shape of any pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  Euclidean2DShape s.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nPedestrian2D\n<p>A bidimensional pedestrian.<\/p>\n"
                        }]
                      },
                      "geometry": {
                        "ownKey": "geometry",
                        "childrenPages": {
                          "euclidean2d": {
                            "ownKey": "euclidean2d",
                            "childrenPages": {
                              "line2d": {
                                "ownKey": "line2d",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/line2d",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/line2d"
                                  },
                                  "description": "",
                                  "title": "Line2D",
                                  "content": "<p>Defines a straight line in a cartesian plane.<\/p>isHorizontal\n<p>Indicates if the line is aligned to the x-axis.<\/p>\nisVertical\n<p>Indicates if the line is aligned to the y-axis.<\/p>\nslope\n<p>The slope of the line, if  isVertical  this is undefined (= Double.NaN).<\/p>\nyIntercept\n<p>The y-coordinate of the y-intercept (= the point where the line intersects the y-axis). If  isVertical  there's\nno y-intercept and this is Double.NaN. The slope-intercept representation (y = mx + b) uses this intercept.<\/p>\nxIntercept\n<p>The x-coordinate of the x-intercept (= the point where the line intersects the x-axis). If  isHorizontal \nthere's no x-intercept and this is Double.NaN.<\/p>\ncontains\n<p>Checks if the  point  belongs to this line.<\/p>\nfindPoint\n<p>Finds the point belonging to the line with the given  x -coordinate. Throws an <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/UnsupportedOperationException.html\">UnsupportedOperationException<\/a>\nif the line  isVertical .<\/p>\nisParallelTo\n<p>Checks if two lines are parallel.<\/p>\nintersect\n<p>Intersects two lines.<\/p>\nintersectCircle\n<p>Intersects a line and a circle.<\/p>\n"
                                }]
                              },
                              "euclidean2dshapefactory": {
                                "ownKey": "euclidean2dshapefactory",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dshapefactory",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dshapefactory"
                                  },
                                  "description": "",
                                  "title": "Euclidean2DShapeFactory",
                                  "content": "<p>Defines a factory of  GeometricShape  for a bidimensional euclidean space.<\/p>circle\n<p>A circle extends in the first and second axis by its diameter.<\/p>\nrectangle\n<p>A rectangle extends in the first and second axis by its width and height.<\/p>\ncircleSector\n<p>A circle sector is the portion of a disk enclosed by two radii and an arc\nand it extends in the first and second axis by its radius and angle.<\/p>\n"
                                }]
                              },
                              "intersection2d": {
                                "ownKey": "intersection2d",
                                "childrenPages": {
                                  "infinitepoints": {
                                    "ownKey": "infinitepoints",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/infinitepoints",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/infinitepoints"
                                      },
                                      "description": "",
                                      "title": "InfinitePoints",
                                      "content": "<p>Objects intersect in infinite points (e.g. overlapping segments).<\/p>\n"
                                    }]
                                  },
                                  "multiplepoints": {
                                    "ownKey": "multiplepoints",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/multiplepoints",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/multiplepoints"
                                      },
                                      "description": "",
                                      "title": "MultiplePoints",
                                      "content": "<p>Objects intersect in a discrete number of  points .<\/p>asList\n<p>List of intersection points (in case of infinite points this is empty).<\/p>\npoints\n<p><init><\/p>\n<p>Objects intersect in a discrete number of  points .<\/p>\n"
                                    }]
                                  },
                                  "none": {
                                    "ownKey": "none",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/none",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/none"
                                      },
                                      "description": "",
                                      "title": "None",
                                      "content": "<p>Objects do not intersect.<\/p>\n"
                                    }]
                                  },
                                  "singlepoint": {
                                    "ownKey": "singlepoint",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/singlepoint",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d/singlepoint"
                                      },
                                      "description": "",
                                      "title": "SinglePoint",
                                      "content": "<p>Objects intersect in a single  point .<\/p>asList\n<p>List of intersection points (in case of infinite points this is empty).<\/p>\npoint\n<p><init><\/p>\n<p>Objects intersect in a single  point .<\/p>\n"
                                    }]
                                  }
                                },
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/intersection2d"
                                  },
                                  "description": "",
                                  "title": "Intersection2D",
                                  "content": "<p>Describes the result an intersection operation in an euclidean 2D space.\nType  V  must extend  Vector2D .\nThe requirement is not explicitly enforced to allow the class to work covariantly.<\/p>asList\n<p>List of intersection points (in case of infinite points this is empty).<\/p>\nIntersection2D\n<p>Describes the result an intersection operation in an euclidean 2D space.\nType  V  must extend  Vector2D .\nThe requirement is not explicitly enforced to allow the class to work covariantly.<\/p>\n"
                                }]
                              },
                              "navigator": {
                                "ownKey": "navigator",
                                "childrenPages": {"extendableconvexpolygon": {
                                  "ownKey": "extendableconvexpolygon",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/navigator/extendableconvexpolygon",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/navigator/extendableconvexpolygon"
                                    },
                                    "description": "",
                                    "title": "ExtendableConvexPolygon",
                                    "content": "<p>A sophisticated  MutableConvexPolygon .<\/p>advanceEdge\n<p>Advances an edge in its normal direction.<\/p>\nextend\n<p>Extends the polygon in each direction: each edge is given a chance to advance.<\/p>\n"
                                  }]
                                }},
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/navigator",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/navigator"
                                  },
                                  "description": "",
                                  "title": "it.unibo.alchemist.model.interfaces.geometry.euclidean2d.navigator",
                                  "content": "<p>ExtendableConvexPolygon<\/p>\n<p>A sophisticated  MutableConvexPolygon .<\/p>\n"
                                }]
                              },
                              "segment2d": {
                                "ownKey": "segment2d",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/segment2d",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/segment2d"
                                  },
                                  "description": "",
                                  "title": "Segment2D",
                                  "content": "<p>Defines a line segment in a cartesian plane, endpoints are included.<\/p>first\n<p>The first endpoint of the segment.<\/p>\nsecond\n<p>The second endpoint of the segment.<\/p>\nlength\n<p>The length of the segment.<\/p>\nisDegenerate\n<p>Indicates if the two endpoints coincide (= segment has zero length).<\/p>\nisHorizontal\n<p>Indicates if the segment is aligned to the x-axis, this is true if  isDegenerate .<\/p>\nisVertical\n<p>Indicates if the segment is aligned to the y-axis, this is true if  isDegenerate .<\/p>\nmidPoint\n<p>The medium point of the segment.<\/p>\ntoVector\n<p>The vector representing the movement from  first  to  second .<\/p>\ntoLine\n<p>copyWith<\/p>\n<p>Creates a copy of this Segment2D using the specified  first  and  second  points.<\/p>\ncontains\n<p>Checks if the segment contains a  point .<\/p>\nclosestPointTo\n<p>Finds the point of the segment which is closest to the provided  point .<\/p>\ndistanceTo\n<p>Computes the shortest distance between the segment and the given  point .<\/p>\ndistanceTo\n<p>Computes the shortest distance between two segments (= the shortest distance between any two of their points).<\/p>\nisParallelTo\n<p>Checks if two segments are parallel. Throws an <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/UnsupportedOperationException.html\">UnsupportedOperationException<\/a> if any of the two segment\n isDegenerate .<\/p>\nisCollinearWith\n<p>Checks if  first ,  second  and  point  lie on a single line.<\/p>\nisCollinearWith\n<p>Checks if two segments lie on a single line.<\/p>\noverlapsWith\n<p>Checks if two segments overlap (= are collinear and share one or more points).<\/p>\nintersect\n<p>Intersects two segments.<\/p>\nintersectCircle\n<p>Intersects a segment and a circle.<\/p>\nshrunk\n<p>isInRectangle<\/p>\n<p>Checks if this segment is inside a rectangular region described by an  origin ,  width  and\n height  (must be positive).<\/p>\ntoRange\n<p>Maps the segment a ClosedRange, this is done by extracting either the X coordinates or\nthe Y coordinates of the two endpoints of the segment.  getXCoords  indicates which pair\nof coordinates should be extracted (defaults to  isHorizontal ).\nThis can be useful e.g. to represent portions of axis-aligned segments without creating\nnew ones.<\/p>\n"
                                }]
                              },
                              "euclidean2dconvexshape": {
                                "ownKey": "euclidean2dconvexshape",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dconvexshape",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dconvexshape"
                                  },
                                  "description": "",
                                  "title": "Euclidean2DConvexShape",
                                  "content": "<p>A convex euclidean shape in a bidimensional environment.<\/p>\n"
                                }]
                              },
                              "euclidean2dshape": {
                                "ownKey": "euclidean2dshape",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dshape",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dshape"
                                  },
                                  "description": "",
                                  "title": "Euclidean2DShape",
                                  "content": "<p>Defines an euclidean shape in a bidimensional space.<\/p>\n"
                                }]
                              },
                              "graph": {
                                "ownKey": "graph",
                                "childrenPages": {
                                  "euclidean2dpassage": {
                                    "ownKey": "euclidean2dpassage",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/euclidean2dpassage",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/euclidean2dpassage"
                                      },
                                      "description": "",
                                      "title": "Euclidean2DPassage",
                                      "content": "<p>Defines a passage between two  ConvexPolygon s in an euclidean bidimensional space. The passage is oriented, which\nmeans it connects  tail  to  head , but the opposite is not necessarily true.  tail  and  head  can be non-adjacent\n(there can be some distance between them), this introduces navigation issues as agents may not know which direction\nto follow when crossing a passage.  passageShapeOnTail  is a  Segment2D  representing the shape of the passage on\n tail 's boundary (e.g. in indoor environments, the segment should represent the shape of the door between two\nrooms).  passageShapeOnTail  must be determined so as to guarantee that  head  is reachable by throwing a ray from\nany point of the segment in its normal direction. This solves navigation issues as it provides agents with a\ndirection to follow when crossing  Euclidean2DPassage s (namely, the normal direction to  passageShapeOnTail ).<\/p>tail\n<p>head<\/p>\n<p>passageShapeOnTail<\/p>\n<p><init><\/p>\n<p>Defines a passage between two  ConvexPolygon s in an euclidean bidimensional space. The passage is oriented, which\nmeans it connects  tail  to  head , but the opposite is not necessarily true.  tail  and  head  can be non-adjacent\n(there can be some distance between them), this introduces navigation issues as agents may not know which direction\nto follow when crossing a passage.  passageShapeOnTail  is a  Segment2D  representing the shape of the passage on\n tail 's boundary (e.g. in indoor environments, the segment should represent the shape of the door between two\nrooms).  passageShapeOnTail  must be determined so as to guarantee that  head  is reachable by throwing a ray from\nany point of the segment in its normal direction. This solves navigation issues as it provides agents with a\ndirection to follow when crossing  Euclidean2DPassage s (namely, the normal direction to  passageShapeOnTail ).<\/p>\ncrossingPointOnTail\n<p>Provided the  position  of an agent that may want to cross this passage, this method computes the point\nbelonging to  passageShapeOnTail  which is more convenient to cross. Note that the agent must be inside  tail .<\/p>\ncrossingPointOnHead\n<p>Provided the  crossingPointOnTail  that an agent has reached (or will reach), this method computes the point\nbelonging to the boundary of  head  that the agent should point towards to cross the passage (i.e. the first\npoint belonging to  head 's boundary that is encountered by throwing a ray from  crossingPointOnTail  along\n passageShapeOnTail 's normal direction).\nNote that the returned point may not be formally contained in  head  depending on the definition of insideness\nused by  ConvexPolygon.contains , prefer using  ConvexPolygon.containsBoundaryIncluded .<\/p>\ncrossingPoints\n<p>Provided the  position  of an agent that may want to cross this passage, this method returns a pair containing\nboth  crossingPointOnTail  and  crossingPointOnHead .<\/p>\n"
                                    }]
                                  },
                                  "euclidean2dnavigationgraph": {
                                    "ownKey": "euclidean2dnavigationgraph",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/euclidean2dnavigationgraph",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/euclidean2dnavigationgraph"
                                      },
                                      "description": "",
                                      "title": "Euclidean2DNavigationGraph",
                                      "content": "<p>A  NavigationGraph  in an euclidean bidimensional space. Nodes are  ConvexPolygon s and edges are\n Euclidean2DPassage s. Using  Euclidean2DPassage s as edges leads to some overhead (as these store the nodes they\nconnect, when this information is already stored in the navigation graph), but allows to have duplicate edges in\nopposite directions, which means a node n1 can be connected to another node n2 through a passage whose shape is\nequal to the one of the passage connecting n2 to n1. The two passages would not result equal because their tail\nand head would be swapped. On the contrary, if edges were plain segments, the graph would not have allowed to have\ntwo edges so that e1.equal(e2).<\/p>\n"
                                    }]
                                  },
                                  "navigationgraph": {
                                    "ownKey": "navigationgraph",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/navigationgraph",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph/navigationgraph"
                                      },
                                      "description": "",
                                      "title": "NavigationGraph",
                                      "content": "<p>A graph used for navigation purposes. Nodes are  ConvexGeometricShape s, usually representing portions of an\nenvironment which are traversable by agents (the advantage of such representation is that agents can freely\nwalk around within a convex area, as it is guaranteed that no obstacle will be found).\nNote that implementations of this graph must guarantee predictable ordering for the collections they maintain,\nas reproducibility is a key feature of Alchemist.\nBe also aware that, by contract, the <a href=\"#\">org.jgrapht.Graph<\/a> interface does not allow duplicated edges (see\n<a href=\"#\">org.jgrapht.Graph.addEdge<\/a>).<\/p>nodeContaining\n"
                                    }]
                                  }
                                },
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/graph"
                                  },
                                  "description": "",
                                  "title": "it.unibo.alchemist.model.interfaces.geometry.euclidean2d.graph",
                                  "content": "<p>Euclidean2DPassage<\/p>\n<p>Defines a passage between two  ConvexPolygon s in an euclidean bidimensional space. The passage is oriented, which\nmeans it connects  tail  to  head , but the opposite is not necessarily true.  tail  and  head  can be non-adjacent\n(there can be some distance between them), this introduces navigation issues as agents may not know which direction\nto follow when crossing a passage.  passageShapeOnTail  is a  Segment2D  representing the shape of the passage on\n tail 's boundary (e.g. in indoor environments, the segment should represent the shape of the door between two\nrooms).  passageShapeOnTail  must be determined so as to guarantee that  head  is reachable by throwing a ray from\nany point of the segment in its normal direction. This solves navigation issues as it provides agents with a\ndirection to follow when crossing  Euclidean2DPassage s (namely, the normal direction to  passageShapeOnTail ).<\/p>\nNavigationGraph\n<p>A graph used for navigation purposes. Nodes are  ConvexGeometricShape s, usually representing portions of an\nenvironment which are traversable by agents (the advantage of such representation is that agents can freely\nwalk around within a convex area, as it is guaranteed that no obstacle will be found).\nNote that implementations of this graph must guarantee predictable ordering for the collections they maintain,\nas reproducibility is a key feature of Alchemist.\nBe also aware that, by contract, the <a href=\"#\">org.jgrapht.Graph<\/a> interface does not allow duplicated edges (see\n<a href=\"#\">org.jgrapht.Graph.addEdge<\/a>).<\/p>\nEuclidean2DNavigationGraph\n<p>A  NavigationGraph  in an euclidean bidimensional space. Nodes are  ConvexPolygon s and edges are\n Euclidean2DPassage s. Using  Euclidean2DPassage s as edges leads to some overhead (as these store the nodes they\nconnect, when this information is already stored in the navigation graph), but allows to have duplicate edges in\nopposite directions, which means a node n1 can be connected to another node n2 through a passage whose shape is\nequal to the one of the passage connecting n2 to n1. The two passages would not result equal because their tail\nand head would be swapped. On the contrary, if edges were plain segments, the graph would not have allowed to have\ntwo edges so that e1.equal(e2).<\/p>\nEuclidean2DNavigationGraph\n<p>A  NavigationGraph  in an euclidean bidimensional space. Nodes are  ConvexPolygon s and edges are\n Euclidean2DPassage s. Using  Euclidean2DPassage s as edges leads to some overhead (as these store the nodes they\nconnect, when this information is already stored in the navigation graph), but allows to have duplicate edges in\nopposite directions, which means a node n1 can be connected to another node n2 through a passage whose shape is\nequal to the one of the passage connecting n2 to n1. The two passages would not result equal because their tail\nand head would be swapped. On the contrary, if edges were plain segments, the graph would not have allowed to have\ntwo edges so that e1.equal(e2).<\/p>\n"
                                }]
                              },
                              "mutableconvexpolygon": {
                                "ownKey": "mutableconvexpolygon",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/mutableconvexpolygon",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/mutableconvexpolygon"
                                  },
                                  "description": "",
                                  "title": "MutableConvexPolygon",
                                  "content": "<p>A mutable  ConvexPolygon .<\/p>addVertex\n<p>Adds a vertex to the polygon.<\/p>\nremoveVertex\n<p>Removes a vertex from the polygon.<\/p>\nmoveVertex\n<p>Moves a vertex of the polygon to a new absolute position.<\/p>\nreplaceEdge\n<p>Replaces an edge of the polygon.<\/p>\n"
                                }]
                              },
                              "euclidean2dtransformation": {
                                "ownKey": "euclidean2dtransformation",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dtransformation",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/euclidean2dtransformation"
                                  },
                                  "description": "",
                                  "title": "Euclidean2DTransformation",
                                  "content": "<p>Defines the possible transformations for a  it.unibo.alchemist.model.interfaces.geometry.GeometricShape  in a\nbidimensional euclidean space.<\/p>rotate\n<p>Counter clockwise rotation.<\/p>\nrotate\n<p>Rotates toward the specified direction.<\/p>\norigin\n<p>Changes origin.<\/p>\n"
                                }]
                              },
                              "convexpolygon": {
                                "ownKey": "convexpolygon",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d/convexpolygon",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d/convexpolygon"
                                  },
                                  "description": "",
                                  "title": "ConvexPolygon",
                                  "content": "<p>A simple polygon (i.e. not self-intersecting and without holes) in which no\nline segment between two points on the boundary ever goes outside the polygon.<\/p>vertices\n<p>edges<\/p>\n<p>getEdge<\/p>\n<p>Depending on the implementation, this may be faster than  edges .get( index ).<\/p>\ncontains\n<p>Checks if the polygon contains a vector (= a point). The definition of insideness\nmay vary depending on the implementation, this may affect the outcome for points\nlying on the polygon's boundary. For accurate operations see  containsBoundaryIncluded \nand  containsBoundaryExcluded .<\/p>\ncontains\n<p>Checks if the polygon contains a polygonal <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a> (i.e. without curved\nsegments). A polygonal shape is contained in a polygon if all of its points are\ncontained in (or lie on the boundary of) the latter.<\/p>\nliesOnBoundary\n<p>Checks if a vector (= a point) lies on the polygon's boundary.<\/p>\ncontainsBoundaryIncluded\n<p>Checks if a vector (= a point) is contained in the polygon or lies on its boundary.<\/p>\ncontainsBoundaryExcluded\n<p>Checks if a vector (= a point) is contained in the polygon, boundary excluded.<\/p>\nintersects\n<p>Checks if a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a> intersects the polygon, adjacent shapes are not\nconsidered to be intersecting.<\/p>\nintersects\n<p>Checks if a segment intersects with the polygon, segments lying on the polygon's\nboundary are not considered to be intersecting.<\/p>\nisAdjacentTo\n<p>A polygon is adjacent to another if any of its points lies on the boundary of the other.<\/p>\nclosestEdgeTo\n<p>Finds the edge of the polygon closest to the provided  segment , i.e. the first one\nthat would collide (= intersect) with the segment in case the polygon extended on\neach side.<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/geometry/euclidean2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/euclidean2d"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.interfaces.geometry.euclidean2d",
                              "content": "<p>ConvexPolygon<\/p>\n<p>A simple polygon (i.e. not self-intersecting and without holes) in which no\nline segment between two points on the boundary ever goes outside the polygon.<\/p>\nEuclidean2DConvexShape\n<p>A convex euclidean shape in a bidimensional environment.<\/p>\nEuclidean2DShape\n<p>Defines an euclidean shape in a bidimensional space.<\/p>\nEuclidean2DShapeFactory\n<p>Defines a factory of  GeometricShape  for a bidimensional euclidean space.<\/p>\nEuclidean2DTransformation\n<p>Defines the possible transformations for a  it.unibo.alchemist.model.interfaces.geometry.GeometricShape  in a\nbidimensional euclidean space.<\/p>\nIntersection2D\n<p>Describes the result an intersection operation in an euclidean 2D space.\nType  V  must extend  Vector2D .\nThe requirement is not explicitly enforced to allow the class to work covariantly.<\/p>\nLine2D\n<p>Defines a straight line in a cartesian plane.<\/p>\nMutableConvexPolygon\n<p>A mutable  ConvexPolygon .<\/p>\nSegment2D\n<p>Defines a line segment in a cartesian plane, endpoints are included.<\/p>\nit.unibo.alchemist.model.interfaces.geometry.euclidean2d.graph\n<p>it.unibo.alchemist.model.interfaces.geometry.euclidean2d.navigator<\/p>\n<p>Euclidean2DConvexShape<\/p>\n<p>A convex euclidean shape in a bidimensional environment.<\/p>\nEuclidean2DShape\n<p>Defines an euclidean shape in a bidimensional space.<\/p>\n"
                            }]
                          },
                          "vector2d": {
                            "ownKey": "vector2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/geometry/vector2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/vector2d"
                              },
                              "description": "",
                              "title": "Vector2D",
                              "content": "<p>Bidimensional vector with  x  and  y  coordinates.<\/p>x\n<p>x coordinate.<\/p>\ny\n<p>y coordinate.<\/p>\nasAngle\n<p>Computes the angle with atan2(y, x).<\/p>\ndot\n<p>Dot product between bidimensional vectors.<\/p>\nisInRectangle\n<p>Checks whether the given point is inside a rectangular region described by an  origin \npoint and  width  and  height  values (only positive).<\/p>\nnewFrom\n<p>Creates a new Vector2D with the same type of the current one with different  x  and  y .<\/p>\nminus\n<p>Allows subtraction with a <a href=\"#\">Pair<\/a>.<\/p>\nnormalized\n<p>Normalizes the vector.<\/p>\nplus\n<p>Allows summaction with a <a href=\"#\">Pair<\/a>.<\/p>\nsurroundingPointAt\n<p>Computes a point which is at a certain  distance  and  angle  (in radians) from this one.<\/p>\nsurroundingPointAt\n<p>Computes a point which is at a certain  distance  and angle (expressed as a  versor  centered in this node)\nfrom this one.<\/p>\nsurrounding\n<p>Creates a list of  count  points equally spaced in the circle of given  radius  with center in this vector.<\/p>\nVector2D\n<p>Bidimensional vector with  x  and  y  coordinates.<\/p>\n"
                            }]
                          },
                          "convexgeometricshape": {
                            "ownKey": "convexgeometricshape",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/geometry/convexgeometricshape",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/convexgeometricshape"
                              },
                              "description": "",
                              "title": "ConvexGeometricShape",
                              "content": "<p>A convex  GeometricShape .<\/p><p>This interface models a property instead of an object, this may be\nunusual but consider it as a contract: interfaces are often said to\nbe contracts the implementor has to comply, the contract defined by\nthis interface implies convexity.<\/p>\n"
                            }]
                          },
                          "geometrictransformation": {
                            "ownKey": "geometrictransformation",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/geometry/geometrictransformation",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/geometrictransformation"
                              },
                              "description": "",
                              "title": "GeometricTransformation",
                              "content": "<p>Defines a generic transformation of a generic shape.\nThe operations allowed depend on the space the shape belongs to.\nThis interface is meant to be extended.<\/p>origin\n<p>Performs an absolute translation to the provided position.<\/p>\n"
                            }]
                          },
                          "influencesphere": {
                            "ownKey": "influencesphere",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/geometry/influencesphere",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/influencesphere"
                              },
                              "description": "",
                              "title": "InfluenceSphere",
                              "content": "<p>Area inside which nodes exert an influence on each other.<\/p>influentialNodes\n<p>The list of nodes relevant for this sphere of influence.<\/p>\n"
                            }]
                          },
                          "geometricshape": {
                            "ownKey": "geometricshape",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/geometry/geometricshape",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/geometricshape"
                              },
                              "description": "",
                              "title": "GeometricShape",
                              "content": "<p>Models a generic shape.<\/p>diameter\n<p>The largest distance between any pair of vertices.<\/p>\nradius\n<p>Half the  diameter .<\/p>\ncentroid\n<p>The geometric center.<\/p>\nintersects\n<p>A shape intersects another if any of its points is contained in the other one.<\/p>\ncontains\n<p>Check if the shape contains a vector.<\/p>\ntransformed\n<p>Transforms the shape.<\/p>\n"
                            }]
                          },
                          "geometricshapefactory": {
                            "ownKey": "geometricshapefactory",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/geometry/geometricshapefactory",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/geometricshapefactory"
                              },
                              "description": "",
                              "title": "GeometricShapeFactory",
                              "content": "<p>Generic factory for  GeometricShape .<\/p>adimensional\n<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.<\/p>\nrequireCompatible\n<p>Requires that the given shape is compatible with the ones provided by this factory,\notherwise throws an exception.<\/p>\nGeometricShapeFactory\n<p>Generic factory for  GeometricShape .<\/p>\n"
                            }]
                          },
                          "vector": {
                            "ownKey": "vector",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/interfaces/geometry/vector",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry/vector"
                              },
                              "description": "",
                              "title": "Vector",
                              "content": "<p>A generic vector in a multidimensional space.<\/p>dimensions\n<p>The dimensions of the space this vector belongs to.<\/p>\ncoordinates\n<p>Coordinates for a Cartesian space.\nImplementors must guarantee that internal state is not exposed.<\/p>\nmagnitude\n<p>Finds the magnitude of a vector.<\/p>\nget\n<p>The coordinate of this vector in the specified dimension relatively to the basis\nits space is described with.<\/p>\nplus\n<p>Support for sum.\nNote: the dimensions must coincide.<\/p>\nminus\n<p>Support for subtraction.\nNote: the dimensions must coincide.<\/p>\ntimes\n<p>Multiplication by a Double.<\/p>\ndiv\n<p>Division by a Double.<\/p>\ndot\n<p>Computes the dot product between two vectors.<\/p>\nangleBetween\n<p>Computes the angle in radians between two vectors.<\/p>\ndistanceTo\n<p>Computes the distance between two vectors, interpreted as points in an Euclidean\nspace. Throws <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html\">IllegalArgumentException<\/a> if vectors have different dimensions.<\/p>\nresized\n<p>normalized<\/p>\n<p>coerceAtMost<\/p>\n<p>coerceAtLeast<\/p>\n<p>coerceIn<\/p>\n<p>Performs a coercion at least and at most.<\/p>\nnormal\n<p>Find the normal of a vector.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/geometry",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geometry"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.interfaces.geometry",
                          "content": "<p>ConvexGeometricShape<\/p>\n<p>A convex  GeometricShape .<\/p><p>This interface models a property instead of an object, this may be\nunusual but consider it as a contract: interfaces are often said to\nbe contracts the implementor has to comply, the contract defined by\nthis interface implies convexity.<\/p>\nGeometricShapeFactory\n<p>Generic factory for  GeometricShape .<\/p>\nInfluenceSphere\n<p>Area inside which nodes exert an influence on each other.<\/p>\nGeometricShape\n<p>Models a generic shape.<\/p>\nGeometricTransformation\n<p>Defines a generic transformation of a generic shape.\nThe operations allowed depend on the space the shape belongs to.\nThis interface is meant to be extended.<\/p>\nVector\n<p>A generic vector in a multidimensional space.<\/p>\nVector2D\n<p>Bidimensional vector with  x  and  y  coordinates.<\/p>\nit.unibo.alchemist.model.interfaces.geometry.euclidean2d\n"
                        }]
                      },
                      "pedestrian": {
                        "ownKey": "pedestrian",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/pedestrian",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/pedestrian"
                          },
                          "description": "",
                          "title": "Pedestrian",
                          "content": "<p>A plain pedestrian.<\/p>membershipGroup\n<p>The group this pedestrian belongs to.<\/p>\nspeed\n<p>The speed at which the pedestrian is moving.<\/p>\n"
                        }]
                      },
                      "time": {
                        "ownKey": "time",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/time",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/time"
                          },
                          "description": "",
                          "title": "Time",
                          "content": "<p>Interface for time representation.<\/p>ZERO\n<p>Initial time.<\/p>\nINFINITY\n<p>Indefinitely future time.<\/p>\ntoDouble\n<p>Allows to get a double representation of this <code> Time <\/code>.<\/p>\ntimes\n<p>Allows to multiply this <code> Time <\/code> for a constant.<\/p>\nisInfinite\n<p>Verifies if the <code> Time <\/code> is set at infinite, namely if the event will never happen.<\/p>\nminus\n<p>Allows to subtract a <code> Time <\/code> to this <code> Time <\/code>.<\/p>\nplus\n<p>Allows to add a <code> Time <\/code> to this <code> Time <\/code>.<\/p>\nplus\n<p>Plus operator for  Time  and Double.<\/p>\nminus\n<p>Minus operator for  Time  and Double.<\/p>\n"
                        }]
                      },
                      "incarnation": {
                        "ownKey": "incarnation",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/incarnation",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/incarnation"
                          },
                          "description": "",
                          "title": "Incarnation",
                          "content": "<p>createNode<\/p>\n<p>createCondition<\/p>\n<p>createTimeDistribution<\/p>\n<p>createReaction<\/p>\n<p>createConcentration<\/p>\n<p>Creates a new concentration object of a specific concrete type.<\/p>\ncreateAction\n<p>createMolecule<\/p>\n<p>Parses a <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/String.html\">String<\/a><\/code>, and provides a <code> Molecule <\/code>.<\/p>\ngetProperty\n<p>Given an <code> Node <\/code>, an <code> Molecule <\/code> and a property expressed as a <code><a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/String.html\">String<\/a><\/code>, returns a numeric value. If a numeric value is not deducible, Double.NaN is returned.<\/p>\n"
                        }]
                      },
                      "physicalnode": {
                        "ownKey": "physicalnode",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/interfaces/physicalnode",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/physicalnode"
                          },
                          "description": "",
                          "title": "PhysicalNode",
                          "content": "<p>A  NodeWithShape  capable of interacting physically with others (e.g. bumping into each other). Each physical node\nis responsible for the computation of the physical forces to which it is subject.<\/p>physicalForces\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/interfaces",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.model.interfaces",
                      "content": "<p>CognitivePedestrian<\/p>\n<p>A heterogeneous pedestrian with cognitive capabilities.<\/p>\nGroup\n<p>A group of nodes.<\/p>\nGroupSteeringAction\n<p>A  SteeringAction  related to a group of pedestrians.<\/p>\nGroupWithLeader\n<p>A group with a special member acting as a leader.<\/p>\nHeterogeneousPedestrian\n<p>A pedestrian with individual characteristics.<\/p>\nNavigationAction\n<p>A  SteeringAction  allowing a pedestrian to navigate an environment consciously (e.g. without getting stuck in\nU-shaped obstacles). Names are inspired to indoor environments, but this interface works for outdoor ones as well.<\/p>\nNavigationAction2D\n<p>A  NavigationAction  in a bidimensional euclidean space.<\/p>\nNavigationStrategy\n<p>Defines what a pedestrian should do when in a new room (= environment's area), this is designed to be used jointly\nwith a  NavigationAction : the latter defines how to properly move the pedestrian, while delegating the decision on\nwhere to move it to a  NavigationStrategy .<\/p>\nNavigationStrategy2D\n<p>A  NavigationStrategy  in a bidimensional euclidean space.<\/p>\nOrientingAgent\n<p>An agent capable of orienting itself inside an environment.<\/p>\nOrientingAgent2D\n<p>An agent capable of orienting itself inside an Euclidean environment.<\/p>\nOrientingPedestrian\n<p>A pedestrian capable of orienting itself.<\/p>\nOrientingPedestrian2D\n<p>An  OrientingPedestrian  in an euclidean bidimensional space.<\/p>\nPedestrian\n<p>A plain pedestrian.<\/p>\nPedestrian2D\n<p>A bidimensional pedestrian.<\/p>\nPedestrianGroup\n<p>A  Group  of  Pedestrian s.<\/p>\nPedestrianGroup2D\n<p>A  PedestrianGroup  featuring bidimensional pedestrians.<\/p>\nSteeringAction\n<p>Action whose purpose is moving a node inside the environment it is in.<\/p>\nSteeringActionWithTarget\n<p>A  SteeringAction  with a defined target.<\/p>\nSteeringStrategy\n<p>Strategy interface describing how the next points of the steering actions\nare combined to calculate the next position to move on.<\/p>\nEnvironmentWithObstacles\n<p>An environment with  Obstacle s.<\/p>\nEuclideanEnvironment\n<p>An Euclidean space, where  Position s  P  are valid  Vector s,\nsupporting any concentration type  T .<\/p>\nObstacle\n<p>A generic obstacle in a vector space.<\/p>\nPosition\n<p>An interface to represent a generic coordinates system.<\/p>\nPosition2D\n<p>A bidimensional position.<\/p>\nPhysicalNode\n<p>A  NodeWithShape  capable of interacting physically with others (e.g. bumping into each other). Each physical node\nis responsible for the computation of the physical forces to which it is subject.<\/p>\nPhysicalPedestrian\n<p>A pedestrian capable of interacting physically with others.  PhysicalPedestrian s have a  comfortArea : when\nanother node enters such area, this pedestrian is subject to a repulsion force. This is derived from\n<a href=\"https://bit.ly/3e3C7Tb\">the work of Pelechano et al<\/a>. Note that  PhysicalPedestrian s don't actively push each\nother, pushing behavior emerges from the interaction of pedestrians with different comfort areas (see the article\nlinked above).<\/p>\nPhysicalPedestrian2D\n<p>A  PhysicalPedestrian  in an euclidean bidimensional space. This pedestrian has a circular  comfortArea  of radius\nequal to its shape radius plus a  comfortRay .\nThis is derived from <a href=\"https://bit.ly/3e3C7Tb\">the work of Pelechano et al<\/a>.<\/p>\nPhysicalSteeringStrategy\n<p>Defines how physical forces and steering actions (which may be seen as intentional forces) are combined to compute\nthe overall next position reached by a physical  node . The combination of steering actions is delegated to a\n nonPhysicalStrategy . The resulting intentional force is then combined with the physical ones to determine the\nnext position reached by  node .<\/p>\nVisibleNode\n<p>Represents a node seen by the  it.unibo.alchemist.model.implementations.actions.CameraSee  action.<\/p>\nObstacle2D\n<p>An <code> Obstacle <\/code> in a bidimensional space.<\/p>\nRoute\n<p>CellNode<\/p>\n<p>EnvironmentNode<\/p>\n<p>EnvironmentSupportingDeformableCells<\/p>\n<p><code> Environment <\/code> supporting deformable cells.<\/p>\nCircularDeformableCell\n<p>Implements a circular deformable cell.<\/p>\nCellWithCircularArea\n<p>Implements a cell with a defined volume.<\/p>\nILsaCondition\n<p>ILsaNode<\/p>\n<p>Interface for an LSA Node. Avoids the crappy casts.<\/p>\nILsaMolecule\n<p>ILsaAction<\/p>\n<p>Condition<\/p>\n<p>Molecule<\/p>\n<p>Interface for a molecule.<\/p>\nGeoPosition\n<p>Represents a specific point on the Earth's surface.<\/p>\nContext\n<p>This enum describes the possible contexts for a given <code> Action <\/code> or <code> Condition <\/code>. A context represents the elements which are read for a <code> Condition <\/code> and the elements that may be subject of modifications for an <code> Action <\/code>. Choosing the right <code> Context <\/code> is crucial: if it's too restricted the simulation will be invalid, if it's too wide it WILL impact dramatically on performances. Contexts are used internally to better determine dependencies among reactions. See <a href=\"http://apice.unibo.it/xwiki/bin/view/Publications/PianiniMASS11\"> this paper<\/a> for further information about the usage of contexts.<\/p>\nTimeDistribution\n<p>This interface represents a temporal distribution for any event.<\/p>\nLayer\n<p>Interface for static layer, containing a substance or a molecule with a spatial distribution.<\/p>\nNode\n<p>LinkingRule<\/p>\n<p>An interface that represent an auto-linking logic for nodes within an environment.<\/p>\nReaction\n<p>Action<\/p>\n<p>Environment<\/p>\n<p>Interface for an environment. Every environment must implement this specification.<\/p>\nTime\n<p>Interface for time representation.<\/p>\nDependency\n<p>This interface represents a token that may generate a dependency between two reactions. Some special built-in tokens are EVERYTHING, EVERY_MOLECULE, MOVEMENT, and NEIGHBORHOOD_CHANGE. Molecules are dependencies as well.<\/p>\nNeighborhood\n<p>The type which describes the concentration of a molecule Interface for a neighborhood. When implementing it in a real class, please remember to correctly implement also the equals method inherited from Object.<\/p>\nBenchmarkableEnvironment\n<p>An environment which provides a mean to get infos about its performances.<\/p>\nIncarnation\n<p>Concentration<\/p>\n<p>This interface is a wrapper for concentrations.<\/p>\nGPSTrace\n<p>TimedRoute<\/p>\n<p>Route with total trip time to cross it.<\/p>\nMapEnvironment\n<p>ObjectWithGPS<\/p>\n<p>GPSPoint<\/p>\n<p>Vehicle<\/p>\n<p>it.unibo.alchemist.model.interfaces.environments<\/p>\n<p>it.unibo.alchemist.model.interfaces.geometry<\/p>\n<p>it.unibo.alchemist.model.interfaces.nodes<\/p>\n<p>it.unibo.alchemist.model.interfaces.movestrategies<\/p>\n<p>NavigationAction2D<\/p>\n<p>A  NavigationAction  in a bidimensional euclidean space.<\/p>\nNavigationStrategy2D\n<p>A  NavigationStrategy  in a bidimensional euclidean space.<\/p>\nOrientingAgent2D\n<p>An agent capable of orienting itself inside an Euclidean environment.<\/p>\nOrientingPedestrian2D\n<p>An  OrientingPedestrian  in an euclidean bidimensional space.<\/p>\n"
                    }]
                  },
                  "biochemistryincarnation": {
                    "ownKey": "biochemistryincarnation",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/biochemistryincarnation",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/biochemistryincarnation"
                      },
                      "description": "",
                      "title": "BiochemistryIncarnation",
                      "content": "<p><init><\/p>\n<p>createNode<\/p>\n<p>createCondition<\/p>\n<p>createTimeDistribution<\/p>\n<p>toString<\/p>\n<p>createReaction<\/p>\n<p>createConcentration<\/p>\n<p>createAction<\/p>\n<p>createMolecule<\/p>\n<p>getProperty<\/p>\n"
                    }]
                  },
                  "protelisincarnation": {
                    "ownKey": "protelisincarnation",
                    "childrenPages": {
                      "protectedexecutionenvironment": {
                        "ownKey": "protectedexecutionenvironment",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/protelisincarnation/protectedexecutionenvironment",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/protelisincarnation/protectedexecutionenvironment"
                          },
                          "description": "",
                          "title": "ProtectedExecutionEnvironment",
                          "content": "<p>An ExecutionEnvironment that can read and shadow the content of a <code> Node <\/code>, but cannot modify it. This is used to prevent badly written properties to interact with the simulation flow.<\/p><init>\n\nsetup\n\nput\n\nhas\n\nremove\n\nkeySet\n\nget\n\nget\n\ncommit\n\n"
                        }]
                      },
                      "dummycontext": {
                        "ownKey": "dummycontext",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/protelisincarnation/dummycontext",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/protelisincarnation/dummycontext"
                          },
                          "description": "",
                          "title": "DummyContext",
                          "content": "<p>An org.protelis.vm.ExecutionContext that operates over a node, but does not modify it.<\/p>getCurrentTime\n<p>instance<\/p>\n<p>nextRandomDouble<\/p>\n<p>getDeviceUID<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/protelisincarnation",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/protelisincarnation"
                      },
                      "description": "",
                      "title": "ProtelisIncarnation",
                      "content": "<p>VALUE_TOKEN<\/p>\n<p>The name that can be used in a property to refer to the extracted value.<\/p>\n<init>\n\ncreateNode\n\ntoString\n\ncreateReaction\n\ncreateAction\n\ncreateMolecule\n\ngetProperty\n\ncreateCondition\n\ncreateTimeDistribution\n\ncreateConcentration\n\n"
                    }]
                  },
                  "smartcam": {
                    "ownKey": "smartcam",
                    "childrenPages": {"visiblenodeimpl": {
                      "ownKey": "visiblenodeimpl",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc",
                          "baseUrl": "https://alchemistsimulator.github.io/latest",
                          "fileName": "it/unibo/alchemist/model/smartcam/visiblenodeimpl",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/smartcam/visiblenodeimpl"
                        },
                        "description": "",
                        "title": "VisibleNodeImpl",
                        "content": "<p>Basic implementation of  VisibleNode .<\/p>node\n<p>The node seen.<\/p>\nposition\n<p>The position of the node.<\/p>\n<init>\n<p>Basic implementation of  VisibleNode .<\/p>\nequals\n\nhashCode\n\ntoString\n\n"
                      }]
                    }},
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/smartcam",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/smartcam"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.model.smartcam",
                      "content": "<p>VisibleNodeImpl<\/p>\n<p>Basic implementation of  VisibleNode .<\/p>\n"
                    }]
                  },
                  "math": {
                    "ownKey": "math",
                    "childrenPages": {
                      "realdistributionutil": {
                        "ownKey": "realdistributionutil",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/math/realdistributionutil",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/math/realdistributionutil"
                          },
                          "description": "",
                          "title": "RealDistributionUtil",
                          "content": "<p>Utility to translate statistics names into a RealDistribution.<\/p>makeRealDistribution\n"
                        }]
                      },
                      "lazymutable": {
                        "ownKey": "lazymutable",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/math/lazymutable",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/math/lazymutable"
                          },
                          "description": "",
                          "title": "LazyMutable",
                          "content": "<p>A delegate allowing to lazily initialise a non-null mutable variable (= var).<\/p><init>\n<p>A delegate allowing to lazily initialise a non-null mutable variable (= var).<\/p>\ngetValue\n\nsetValue\n\n"
                        }]
                      },
                      "bidimensionalgaussian": {
                        "ownKey": "bidimensionalgaussian",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/math/bidimensionalgaussian",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/math/bidimensionalgaussian"
                          },
                          "description": "",
                          "title": "BidimensionalGaussian",
                          "content": "<p>A 2D gaussian function.<\/p><init>\n<p>A 2D gaussian function.<\/p>\nvalue\n\nintegral\n<p>The integral of the function.<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/math",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/math"
                      },
                      "description": "",
                      "title": "it.unibo.alchemist.model.math",
                      "content": "<p>LazyMutable<\/p>\n<p>A delegate allowing to lazily initialise a non-null mutable variable (= var).<\/p>\nBidimensionalGaussian\n<p>A 2D gaussian function.<\/p>\nRealDistributionUtil\n<p>Utility to translate statistics names into a RealDistribution.<\/p>\nlazyMutable\n<p>Creates an instance of  LazyMutable  with the given  initializer .<\/p>\n"
                    }]
                  },
                  "implementations": {
                    "ownKey": "implementations",
                    "childrenPages": {
                      "neighborhoods": {
                        "ownKey": "neighborhoods",
                        "childrenPages": {
                          "neighborhoods": {
                            "ownKey": "neighborhoods",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/neighborhoods/neighborhoods",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/neighborhoods/neighborhoods"
                              },
                              "description": "",
                              "title": "Neighborhoods",
                              "content": "<p>Contains utility functions for neighborhoods.<\/p>Neighborhoods\n<p>Contains utility functions for neighborhoods.<\/p>\n"
                            }]
                          },
                          "simpleneighborhood": {
                            "ownKey": "simpleneighborhood",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/neighborhoods/simpleneighborhood",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/neighborhoods/simpleneighborhood"
                              },
                              "description": "",
                              "title": "SimpleNeighborhood",
                              "content": "<p>A basic implementation of the  Neighborhood  interface.<\/p>clone\n<p>contains<\/p>\n<p>getCenter<\/p>\n<p>getNeighborByNumber<\/p>\n<p>getNeighbors<\/p>\n<p>isEmpty<\/p>\n<p>iterator<\/p>\n<p>size<\/p>\n<p>toString<\/p>\n<p>equals<\/p>\n<p>hashCode<\/p>\n<p>add<\/p>\n<p>remove<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/neighborhoods",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/neighborhoods"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.neighborhoods",
                          "content": "<p>Neighborhoods<\/p>\n<p>Contains utility functions for neighborhoods.<\/p>\nSimpleNeighborhood\n<p>A basic implementation of the  Neighborhood  interface.<\/p>\n"
                        }]
                      },
                      "concentrations": {
                        "ownKey": "concentrations",
                        "childrenPages": {
                          "lsaconcentration": {
                            "ownKey": "lsaconcentration",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/concentrations/lsaconcentration",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/concentrations/lsaconcentration"
                              },
                              "description": "",
                              "title": "LsaConcentration",
                              "content": "<p>This class acts as a fake concentration. It is required in order to enforce compatibility with the basic Alchemist model<\/p><init>\n<p>This class acts as a fake concentration. It is required in order to enforce compatibility with the basic Alchemist model<\/p>\ngetContent\n\n"
                            }]
                          },
                          "local": {
                            "ownKey": "local",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/concentrations/local",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/concentrations/local"
                              },
                              "description": "",
                              "title": "Local",
                              "content": "<p><init><\/p>\n<p><init><\/p>\n<p>Builds a new concentration.<\/p>\nhashCode\n<p>getContent<\/p>\n<p>equals<\/p>\n<p>toString<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/concentrations",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/concentrations"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.concentrations",
                          "content": "<p>Local<\/p>\n<p>LsaConcentration<\/p>\n<p>This class acts as a fake concentration. It is required in order to enforce compatibility with the basic Alchemist model<\/p>\n"
                        }]
                      },
                      "environments": {
                        "ownKey": "environments",
                        "childrenPages": {
                          "osmenvironment": {
                            "ownKey": "osmenvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/osmenvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/osmenvironment"
                              },
                              "description": "",
                              "title": "OSMEnvironment",
                              "content": "<p>This class serves as template for more specific implementations of environments using a map. It encloses the navigation logic, but leaves the subclasses to decide how to provide map data (e.g. loading from disk or rely on online services). The data is then stored in-memory for performance reasons.<\/p>DEFAULT_ALGORITHM\n<p>The default routing algorithm.<\/p>\nDEFAULT_APPROXIMATION\n<p>The default value for approximating the positions comparison.<\/p>\nDEFAULT_ON_STREETS\n<p>The default value for the force nodes on streets option.<\/p>\nDEFAULT_FORCE_STREETS\n<p>The default value for the discard of nodes too far from streets option.<\/p>\n<init>\n<p>Builds a new <code> OSMEnvironment <\/code>, with nodes forced on streets.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\ngetMinLongitude\n\nenableBenchmark\n\ngetMaxLongitude\n\ngetSizeInDistanceUnits\n\ncomputeActualInsertionPosition\n\nnodeShouldBeAdded\n<p>There is a single case in which nodes are discarded: if there are no traces for this node and nodes are required to lay on streets, but the navigation engine can not resolve any such position.<\/p>\ngetMaxLatitude\n\ngetBenchmarkResult\n\nmakePosition\n\ngetMinLatitude\n\ncomputeRoute\n\ncomputeRoute\n\ncomputeRoute\n\ncomputeRoute\n\ncomputeRoute\n\n"
                            }]
                          },
                          "imageenvironment": {
                            "ownKey": "imageenvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/imageenvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/imageenvironment"
                              },
                              "description": "",
                              "title": "ImageEnvironment",
                              "content": "<p>This environment loads an image from the file system, and marks as obstacles all the pixels of a given color.<\/p>DEFAULT_COLOR\n<p>Default color to be parsed as obstacle.<\/p>\nDEFAULT_ZOOM\n<p>Default zoom level.<\/p>\nDEFAULT_DELTA_X\n<p>Default X starting position.<\/p>\nDEFAULT_DELTA_Y\n<p>Default Y starting position.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\nfindMarkedRegions\n<p>Finds all the regions marked with a given color.<\/p>\n"
                            }]
                          },
                          "limitedcontinuos2d": {
                            "ownKey": "limitedcontinuos2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/limitedcontinuos2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/limitedcontinuos2d"
                              },
                              "description": "",
                              "title": "LimitedContinuos2D",
                              "content": "<p>This class represents a 2D continuous environment with spatial limitations. Those limitations will prevent nodes to move in positions which are not allowed.<\/p><init>\n<p>This class represents a 2D continuous environment with spatial limitations. Those limitations will prevent nodes to move in positions which are not allowed.<\/p>\nmoveNodeToPosition\n<p>Subclasses may override this method if they want to change the way a node moves towards some absolute position.<\/p>\nnext\n<p>This method must calculate the ABSOLUTE next allowed position given the current position and the position in which the node wants to move. For example, if your node is in position [2,3], wants to move to [3,4] but the next allowed position (because, e.g., of physical obstacles) is [2.5,3.5], the result must be a Position containing coordinates [2.5,3.5].<\/p>\nnodeShouldBeAdded\n<p>Allows subclasses to determine whether or not a <code> Node <\/code> should actually get added to this environment.<\/p>\nisAllowed\n<p>Checks whether a position is allowed to be occupied by a node in this environment.<\/p>\n"
                            }]
                          },
                          "abstract2denvironment": {
                            "ownKey": "abstract2denvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/abstract2denvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/abstract2denvironment"
                              },
                              "description": "",
                              "title": "Abstract2DEnvironment",
                              "content": "<p>Models a bidimensional environment.<\/p><init>\n\nnodeAdded\n<p>Subclasses may want to override this method to hook to the node addition event. Overriders should call the super implementation, as it ensures the environment bounds are updated considering the newly included object.<\/p>\ngetOffset\n\nincludeObject\n<p>Allows to extend the size of the environment by adding some object.<\/p>\nincludeObject\n<p>Updates the environment size to include the provided position.<\/p>\ngetSize\n\nmoveNodeToPosition\n<p>Subclasses may override this method if they want to change the way a node moves towards some absolute position.<\/p>\ncomputeActualInsertionPosition\n<p>Subclasses can override this method if they will to modify the actual position a node gets inserted in (e.g. to restrict the areas in which a node can be)<\/p>\ngetDimensions\n\n"
                            }]
                          },
                          "continuous2denvironment": {
                            "ownKey": "continuous2denvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/continuous2denvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/continuous2denvironment"
                              },
                              "description": "",
                              "title": "Continuous2DEnvironment",
                              "content": "<p>Implementation of  Physics2DEnvironment .<\/p>shapeFactory\n<p>A factory of shapes compatible with this environment.<\/p>\n<init>\n<p>Implementation of  Physics2DEnvironment .<\/p>\ngetNodesWithin\n<p>Gets all nodes whose shape.intersect is true for the given shape.<\/p>\ngetHeading\n<p>Gets the heading of a node as a direction vector.<\/p>\nsetHeading\n<p>Sets the heading of a node.<\/p>\ngetShape\n<p>Gets the shape of a node relatively to its position and heading in the environment.<\/p>\nnodeAdded\n<p>Keeps track of the largest diameter of the shapes. Throws an <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/IllegalStateException.html\">IllegalStateException<\/a> if the  node  can't fit\nthe  position  (see canFit).<\/p>\nnodeRemoved\n<p>{@inheritDoc}.<\/p>\nmoveNodeToPosition\n<p>Moves the  node  to the  farthestPositionReachable  towards the desired  newpos . If the node is shapeless,\nit is simply moved to  newpos .<\/p>\nnodeShouldBeAdded\n<p>A node should be added only if it doesn't collide with already existing nodes and fits in the environment's\nlimits.<\/p>\nmakePosition\n<p>Creates an euclidean position from the given coordinates.<\/p>\nfarthestPositionReachable\n<p> node .canFit must be true for the returned position. For a better understanding of how to compute collision\npoints with circular hitboxes see <a href=\"https://bit.ly/3f00NvJ\">this discussion<\/a>.<\/p>\n"
                            }]
                          },
                          "abstractenvironment": {
                            "ownKey": "abstractenvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/abstractenvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/abstractenvironment"
                              },
                              "description": "",
                              "title": "AbstractEnvironment",
                              "content": "<p>Very generic and basic implementation for an environment. Basically, only manages an internal set of nodes and their position.<\/p><init>\n\nnodeAdded\n<p>This method gets called once a node has been added, and its neighborhood has been computed and memorized.<\/p>\ngetLayers\n\ngetNodeCount\n\nupdateNeighborhood\n<p>After a node movement, recomputes the neighborhood, also notifying the running simulation about the modifications. This allows movement actions to be defined as LOCAL (they should be normally considered GLOBAL).<\/p>\nifEngineAvailable\n<p>If this environment is attached to a simulation engine, executes consumer.<\/p>\ngetLinkingRule\n\nremoveNode\n\ngetIncarnation\n\ngetNeighborhood\n\ntoString\n<p>Not used internally. Override as you please.<\/p>\nisTerminated\n\naddTerminator\n\ngetSizeInDistanceUnits\n<p>Override this method if units measuring distance do not match with units used for coordinates. For instance, if your space is non-Euclidean, or if you are using polar coordinates. A notable example is using geographical latitude-longitude as y-x coordinates and meters as distance measure.<\/p>\ngetLayer\n\nsetPosition\n<p>Adds or changes a position entry in the position map.<\/p>\nnodeRemoved\n<p>This method gets called once a node has been removed.<\/p>\naddLayer\n\nsetSimulation\n\ngetDistanceBetweenNodes\n\ngetNodesWithinRange\n\ngetNodesWithinRange\n\nsetIncarnation\n\nsetLinkingRule\n\niterator\n\ngetSimulation\n\nforEach\n\ncomputeActualInsertionPosition\n<p>Allows subclasses to tune the actual position of a node, applying spatial constrains at node addition.<\/p>\nnodeShouldBeAdded\n<p>Allows subclasses to determine whether or not a <code> Node <\/code> should actually get added to this environment.<\/p>\nspliterator\n\ngetNodeByID\n\ngetPosition\n<p>This method should not get overridden in general. However, if your<\/p>\ngetNodes\n\naddNode\n\n"
                            }]
                          },
                          "biorect2denvironmentnooverlap": {
                            "ownKey": "biorect2denvironmentnooverlap",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/biorect2denvironmentnooverlap",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/biorect2denvironmentnooverlap"
                              },
                              "description": "",
                              "title": "BioRect2DEnvironmentNoOverlap",
                              "content": "<p>Implements a limited environment supporting cells with a defined shape, avoiding any overlapping among them.<\/p><init>\n<p>Returns an infinite <code> BioRect2DEnvironment <\/code>.<\/p>\n<init>\n<p>Returns a limited rectangular <code> BioRect2DEnvironment <\/code>.<\/p>\nnodeAdded\n\nnodeRemoved\n\nmoveNodeToPosition\n\nnodeShouldBeAdded\n\ngetMaxDiameterAmongCircularDeformableCells\n\n"
                            }]
                          },
                          "biorect2denvironment": {
                            "ownKey": "biorect2denvironment",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/biorect2denvironment",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/biorect2denvironment"
                              },
                              "description": "",
                              "title": "BioRect2DEnvironment",
                              "content": "<p><init><\/p>\n<p>Builds a BioRect2DEnvironment with given bounds.<\/p>\n<init>\n<p>Builds a BioRect2DEnvironment with infinite bounds.<\/p>\nmoveNode\n\nnext\n\nisAllowed\n\n"
                            }]
                          },
                          "museumhall": {
                            "ownKey": "museumhall",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/museumhall",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/museumhall"
                              },
                              "description": "",
                              "title": "MuseumHall",
                              "content": "<p><init><\/p>\n<p>nextAllowed<\/p>\n<p>Given the old position of a node and the requested one, this method computes the nearest allowed point. Static method.<\/p>\ntoString\n<p>moveNode<\/p>\n<p>next<\/p>\n<p>Given the old position of a node and the requested one, this method computes the nearest allowed point.<\/p>\nisAllowed\n"
                            }]
                          },
                          "imageenvironmentwithgraph": {
                            "ownKey": "imageenvironmentwithgraph",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/imageenvironmentwithgraph",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/imageenvironmentwithgraph"
                              },
                              "description": "",
                              "title": "ImageEnvironmentWithGraph",
                              "content": "<p>An  ImageEnvironment  providing an  Euclidean2DNavigationGraph .\nThe NaviGator algorithm is used to produce such graph (see  generateNavigationGraph ).\nThe positions where to plant initial seeds should be specified directly in the image,\nmarking each area of the environment with one or more pixels of a given color (defaults\nto blue).<\/p>graph\n<p><init><\/p>\n<p>An  ImageEnvironment  providing an  Euclidean2DNavigationGraph .\nThe NaviGator algorithm is used to produce such graph (see  generateNavigationGraph ).\nThe positions where to plant initial seeds should be specified directly in the image,\nmarking each area of the environment with one or more pixels of a given color (defaults\nto blue).<\/p>\n"
                            }]
                          },
                          "infinitehalls": {
                            "ownKey": "infinitehalls",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/infinitehalls",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/infinitehalls"
                              },
                              "description": "",
                              "title": "InfiniteHalls",
                              "content": "<p><init><\/p>\n<p>Default builder. Builds halls of size 10 with open doors.<\/p>\n<init>\n\n<init>\n\n<init>\n\nisDoorsOpen\n\ngetHallSize\n\ngetCi\n\ngetSi\n\nsetDoorsOpen\n\nallowed\n<p>Checks whether a position is allowed or not.<\/p>\ngetCf\n\nnext\n\ngetSf\n\nisAllowed\n\ngetEx\n\n"
                            }]
                          },
                          "continuous2dobstacles": {
                            "ownKey": "continuous2dobstacles",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/environments/continuous2dobstacles",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/continuous2dobstacles"
                              },
                              "description": "",
                              "title": "Continuous2DObstacles",
                              "content": "<p>obstacles<\/p>\n<p><init><\/p>\n<p>removeObstacle<\/p>\n<p>hasMobileObstacles<\/p>\n<p>Subclasses dealing with mobile obstacles may change this.<\/p>\naddObstacle\n<p>next<\/p>\n<p>next<\/p>\n<p>intersectsObstacle<\/p>\n<p>isAllowed<\/p>\n<p>getObstaclesInRange<\/p>\n<p>getObstaclesInRange<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/environments",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.environments",
                          "content": "<p>Continuous2DEnvironment<\/p>\n<p>Implementation of  Physics2DEnvironment .<\/p>\nImageEnvironmentWithGraph\n<p>An  ImageEnvironment  providing an  Euclidean2DNavigationGraph .\nThe NaviGator algorithm is used to produce such graph (see  generateNavigationGraph ).\nThe positions where to plant initial seeds should be specified directly in the image,\nmarking each area of the environment with one or more pixels of a given color (defaults\nto blue).<\/p>\nImageEnvironment\n<p>This environment loads an image from the file system, and marks as obstacles all the pixels of a given color.<\/p>\nInfiniteHalls\n<p>LimitedContinuos2D<\/p>\n<p>This class represents a 2D continuous environment with spatial limitations. Those limitations will prevent nodes to move in positions which are not allowed.<\/p>\nContinuous2DObstacles\n<p>MuseumHall<\/p>\n<p>Abstract2DEnvironment<\/p>\n<p>Models a bidimensional environment.<\/p>\nAbstractEnvironment\n<p>Very generic and basic implementation for an environment. Basically, only manages an internal set of nodes and their position.<\/p>\nBioRect2DEnvironmentNoOverlap\n<p>Implements a limited environment supporting cells with a defined shape, avoiding any overlapping among them.<\/p>\nBioRect2DEnvironment\n<p>OSMEnvironment<\/p>\n<p>This class serves as template for more specific implementations of environments using a map. It encloses the navigation logic, but leaves the subclasses to decide how to provide map data (e.g. loading from disk or rely on online services). The data is then stored in-memory for performance reasons.<\/p>\n"
                        }]
                      },
                      "obstacles": {
                        "ownKey": "obstacles",
                        "childrenPages": {"rectobstacle2d": {
                          "ownKey": "rectobstacle2d",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/obstacles/rectobstacle2d",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/obstacles/rectobstacle2d"
                            },
                            "description": "",
                            "title": "RectObstacle2D",
                            "content": "<p>This class implements a rectangular obstacle, whose sides are parallel to the cartesian axis.<\/p>id\n<p><init><\/p>\n<p>Builds a new RectObstacle2D, given a point, the width and the height.<\/p>\ncontains\n<p>nearestIntersection<\/p>\n<p>getMinX<\/p>\n<p>next<\/p>\n<p>getMaxX<\/p>\n<p>toString<\/p>\n<p>getMinY<\/p>\n<p>getMaxY<\/p>\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/obstacles",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/obstacles"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.obstacles",
                          "content": "<p>RectObstacle2D<\/p>\n<p>This class implements a rectangular obstacle, whose sides are parallel to the cartesian axis.<\/p>\n"
                        }]
                      },
                      "molecules": {
                        "ownKey": "molecules",
                        "childrenPages": {
                          "junction": {
                            "ownKey": "junction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/molecules/junction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/junction"
                              },
                              "description": "",
                              "title": "Junction",
                              "content": "<p>Represents a junction between two cells.<\/p><init>\n<p>Build a junction.<\/p>\n<init>\n<p>Builds a junction from another junction.<\/p>\nreverse\n<p>Return the reversed junction of the current junction. E.g. junction A-B return junction B-A<\/p>\ngetMoleculesInCurrentNode\n\ngetMoleculesInNeighborNode\n\ndependsOn\n\n"
                            }]
                          },
                          "simplemolecule": {
                            "ownKey": "simplemolecule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/molecules/simplemolecule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/simplemolecule"
                              },
                              "description": "",
                              "title": "SimpleMolecule",
                              "content": "<p>Simple implementation of Molecule.<\/p><init>\n\nhashCode\n\nequals\n\ngetName\n\ntoString\n\n"
                            }]
                          },
                          "lsamolecule": {
                            "ownKey": "lsamolecule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/molecules/lsamolecule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/lsamolecule"
                              },
                              "description": "",
                              "title": "LsaMolecule",
                              "content": "<p>This class realizes an LsaMolecule, where arguments are of type Expression.<\/p>SYN_D\n<p>Synthetic property representing the distance.<\/p>\nSYN_MOL_ID\n<p>Synthetic property representing an LSA ID.<\/p>\nSYN_NEIGH\n<p>Synthetic property representing the current neighborhood.<\/p>\nSYN_NODE_ID\n<p>Synthetic property representing the local node id.<\/p>\nSYN_O\n<p>Synthetic property representing the orientation.<\/p>\nSYN_RAND\n<p>Synthetic property representing a random value.<\/p>\nSYN_ROUTE\n<p>Synthetic property representing the distance. If the environment does not support route computation, it falls back to SYN_D.<\/p>\nSYN_SELECTED\n<p>Synthetic property representing the current selected neighbor (\"+\" conditions on the left).<\/p>\nSYN_T\n<p>Synthetic property representing the current simulation time.<\/p>\n<init>\n<p>Empty molecule, no arguments.<\/p>\n<init>\n<p>Builds a new LsaMolecule by interpreting a list of IExpressions. Dramatically faster than parsing, slower than copy.<\/p>\n<init>\n<p>Very fast constructor, produces a copy of an LsaMolecule. Use whenever possible.<\/p>\n<init>\n<p>Builds a LsaMolecule by parsing the passed String. Slow, use only if strictly needed.<\/p>\n<init>\n<p>Builds a LsaMolecule by parsing the passed String. Slow, use only if strictly needed.<\/p>\nmoreGenericOf\n\nhashCode\n\nequals\n\ntoString\n\ncompareTo\n\nhasDuplicateVariables\n\nisIstance\n\ndependsOn\n\ngetArgList\n\ntoHashString\n\niterator\n\nisIdenticalTo\n\nsize\n\nforEach\n\nallocateVar\n\nargsNumber\n\ngetArg\n\nspliterator\n\ngeneralize\n\nmatches\n\nmatches\n\n"
                            }]
                          },
                          "biomolecule": {
                            "ownKey": "biomolecule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/molecules/biomolecule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/biomolecule"
                              },
                              "description": "",
                              "title": "Biomolecule",
                              "content": "<p><init><\/p>\n<p>Create a new biomolecule.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/molecules",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.molecules",
                          "content": "<p>SimpleMolecule<\/p>\n<p>Simple implementation of Molecule.<\/p>\nJunction\n<p>Represents a junction between two cells.<\/p>\nBiomolecule\n<p>LsaMolecule<\/p>\n<p>This class realizes an LsaMolecule, where arguments are of type Expression.<\/p>\n"
                        }]
                      },
                      "terminators": {
                        "ownKey": "terminators",
                        "childrenPages": {
                          "aftertime": {
                            "ownKey": "aftertime",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/terminators/aftertime",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/terminators/aftertime"
                              },
                              "description": "",
                              "title": "AfterTime",
                              "content": "<p>endTime<\/p>\n<p>the end time.<\/p>\n<init>\n\ntest\n<p>Tries to access the simulation time from the  environment .\nIf the simulation is unaccessible, throws an exception.\nOtherwise, reads the current time, and flips to true once it got past the provided  endTime .<\/p>\n"
                            }]
                          },
                          "stableforsteps": {
                            "ownKey": "stableforsteps",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/terminators/stableforsteps",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/terminators/stableforsteps"
                              },
                              "description": "",
                              "title": "StableForSteps",
                              "content": "<p>A Predicate that  tests  if an environment's\nnodes (meaning their position and concentration) have\nremained unchanged for a certain amount of steps.<\/p><p>The check isn't performed on every  step \nof a  simulation ,\ninstead an interval that determines how many steps are\nto be skipped between each check is specified.\nFor  test  to return true, an environment must remain unchanged for\n<code>checkInterval * equalIntervals<\/code> steps. This result might not be\nentirely consistent, since the check isn't performed every step so\nas not to cause performance issues. Therefore it might happen that\nsome changes occur in the environment but are reverted before the\nnext check is performed.<\/p><p> test  should be called at every step of the simulation in order\nto avoid missing checks.<\/p><init>\n<p>Creates a new  StableForSteps  with the given values.<\/p>\ntest\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/terminators",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/terminators"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.terminators",
                          "content": "<p>AfterTime<\/p>\n<p>StableForSteps<\/p>\n<p>A Predicate that  tests  if an environment's\nnodes (meaning their position and concentration) have\nremained unchanged for a certain amount of steps.<\/p><p>The check isn't performed on every  step \nof a  simulation ,\ninstead an interval that determines how many steps are\nto be skipped between each check is specified.\nFor  test  to return true, an environment must remain unchanged for\n<code>checkInterval * equalIntervals<\/code> steps. This result might not be\nentirely consistent, since the check isn't performed every step so\nas not to cause performance issues. Therefore it might happen that\nsome changes occur in the environment but are reverted before the\nnext check is performed.<\/p><p> test  should be called at every step of the simulation in order\nto avoid missing checks.<\/p>\n"
                        }]
                      },
                      "groups": {
                        "ownKey": "groups",
                        "childrenPages": {
                          "alone": {
                            "ownKey": "alone",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/groups/alone",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/alone"
                              },
                              "description": "",
                              "title": "Alone",
                              "content": "<p>Group representing a pedestrian alone.<\/p>members\n<p>The list of pedestrians belonging to this group.<\/p>\n<init>\n<p>Group representing a pedestrian alone.<\/p>\naddMember\n<p>Add a node in this group if not already part of it.<\/p>\nremoveMember\n<p>Remove a node from this group.<\/p>\n"
                            }]
                          },
                          "groupfactory": {
                            "ownKey": "groupfactory",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/groups/groupfactory",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/groupfactory"
                              },
                              "description": "",
                              "title": "GroupFactory",
                              "content": "<p>Utility for shorter loading of groups within the Yaml files.<\/p>family\n<p>friends<\/p>\n"
                            }]
                          },
                          "family": {
                            "ownKey": "family",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/groups/family",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/family"
                              },
                              "description": "",
                              "title": "Family",
                              "content": "<p>A  Family  is modeled as a group of pedestrians with a leader.<\/p>leader\n<p>The leader of the group.<\/p>\n<init>\n<p>A  Family  is modeled as a group of pedestrians with a leader.<\/p>\n"
                            }]
                          },
                          "friends": {
                            "ownKey": "friends",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/groups/friends",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/friends"
                              },
                              "description": "",
                              "title": "Friends",
                              "content": "<p>A generic, leaderless group of pedestrians.<\/p><init>\n<p>A generic, leaderless group of pedestrians.<\/p>\n"
                            }]
                          },
                          "genericgroup": {
                            "ownKey": "genericgroup",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/groups/genericgroup",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups/genericgroup"
                              },
                              "description": "",
                              "title": "GenericGroup",
                              "content": "<p>Basic implementation of a group.<\/p>members\n<p>The list of pedestrians belonging to this group.<\/p>\n<init>\n<p>Basic implementation of a group.<\/p>\naddMember\n<p>Add a node in this group if not already part of it.<\/p>\nremoveMember\n<p>Remove a node from this group.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/groups",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/groups"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.groups",
                          "content": "<p>Alone<\/p>\n<p>Group representing a pedestrian alone.<\/p>\nFamily\n<p>A  Family  is modeled as a group of pedestrians with a leader.<\/p>\nFriends\n<p>A generic, leaderless group of pedestrians.<\/p>\nGenericGroup\n<p>Basic implementation of a group.<\/p>\nGroupFactory\n<p>Utility for shorter loading of groups within the Yaml files.<\/p>\n"
                        }]
                      },
                      "positions": {
                        "ownKey": "positions",
                        "childrenPages": {
                          "euclidean2dposition": {
                            "ownKey": "euclidean2dposition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/positions/euclidean2dposition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/euclidean2dposition"
                              },
                              "description": "",
                              "title": "Euclidean2DPosition",
                              "content": "<p>y<\/p>\n<p>x<\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p>newFrom<\/p>\n<p>normal<\/p>\n<p>unsafeConstructor<\/p>\n"
                            }]
                          },
                          "abstractposition": {
                            "ownKey": "abstractposition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/positions/abstractposition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/abstractposition"
                              },
                              "description": "",
                              "title": "AbstractPosition",
                              "content": "<p>N-dimensional position.<\/p>coordinates\n<p>dimensions<\/p>\n<p><init><\/p>\n<p>div<\/p>\n<p>Division by a number.<\/p>\nhashCode\n<p>equals<\/p>\n<p>toString<\/p>\n<p>Prints the coordinates.<\/p>\nminus\n<p>Same as <code> #minus(double[]) <\/code>, with the internal representation of other.<\/p>\nminus\n<p>times<\/p>\n<p>Multiplication by a number.<\/p>\ngetCoordinate\n<p>plus<\/p>\n<p>Same as <code> #plus(double[]) <\/code>, with the internal representation of other.<\/p>\nplus\n<p>unsafeConstructor<\/p>\n<p>Calls an internal constructor of subclasses that provides a way to instance a new position given its coordinates.<\/p>\nboundingBox\n<p>distanceTo<\/p>\n"
                            }]
                          },
                          "gpspointimpl": {
                            "ownKey": "gpspointimpl",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/positions/gpspointimpl",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/gpspointimpl"
                              },
                              "description": "",
                              "title": "GPSPointImpl",
                              "content": "<p>y<\/p>\n<p>x<\/p>\n<p>coordinates<\/p>\n<p>dimensions<\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p>hashCode<\/p>\n<p>addTime<\/p>\n<p>equals<\/p>\n<p>toString<\/p>\n<p>compareTo<\/p>\n<p>subtractTime<\/p>\n<p>getLatitude<\/p>\n<p>minus<\/p>\n<p>minus<\/p>\n<p>getTime<\/p>\n<p>getLongitude<\/p>\n<p>getCoordinate<\/p>\n<p>plus<\/p>\n<p>plus<\/p>\n<p>boundingBox<\/p>\n<p>distanceTo<\/p>\n"
                            }]
                          },
                          "latlongposition": {
                            "ownKey": "latlongposition",
                            "childrenPages": {"distanceformula": {
                              "ownKey": "distanceformula",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/positions/latlongposition/distanceformula",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/latlongposition/distanceformula"
                                },
                                "description": "",
                                "title": "DistanceFormula",
                                "content": "<p>Possible methods to compute the distance between two latitude-longitude points.<\/p>EQUIRECTANGULAR\n<p>HAVERSINE<\/p>\n<p>SPHERICAL_COSINES<\/p>\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/positions/latlongposition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/latlongposition"
                              },
                              "description": "",
                              "title": "LatLongPosition",
                              "content": "<p>Unmodifiable state version of LatLng, also implementing the <code> GeoPosition <\/code> interface.<\/p>y\n<p>x<\/p>\n<p>coordinates<\/p>\n<p>dimensions<\/p>\n<p>DEFAULT_DISTANCE_FORMULA<\/p>\n<p>The default distance formula.<\/p>\nEARTH_MEAN_RADIUS_METERS\n<p>Mean Earth radius in meters.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\nhashCode\n\nequals\n\ntoString\n\ngetLatitude\n\nminus\n\nminus\n\ngetLongitude\n\ngetCoordinate\n\nplus\n\nplus\n\nboundingBox\n\ndistanceTo\n\ndistance\n<p>Distance between two points.<\/p>\ndistance\n<p>Distance between two points with arbitrary LengthUnit.<\/p>\ndistanceInRadians\n<p> This \"distance\" function is mostly for internal use. Most users will simply rely upon <code> #distance(LatLng, LatLng, LengthUnit, DistanceFormula) <\/code> <\/p> <p> Yields the internal angle for an arc between two points on the surface of a sphere in radians. This angle is in the plane of the great circle connecting the two points measured from an axis through one of the points and the center of the Earth. Multiply this value by the sphere's radius to get the length of the arc. <\/p>\n"
                            }]
                          },
                          "abstracteuclideanposition": {
                            "ownKey": "abstracteuclideanposition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/positions/abstracteuclideanposition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions/abstracteuclideanposition"
                              },
                              "description": "",
                              "title": "AbstractEuclideanPosition",
                              "content": "<p>N-dimensional Euclidean position.<\/p><init>\n\nget\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/positions",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/positions"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.positions",
                          "content": "<p>Euclidean2DPosition<\/p>\n<p>AbstractEuclideanPosition<\/p>\n<p>N-dimensional Euclidean position.<\/p>\nAbstractPosition\n<p>N-dimensional position.<\/p>\nGPSPointImpl\n<p>LatLongPosition<\/p>\n<p>Unmodifiable state version of LatLng, also implementing the <code> GeoPosition <\/code> interface.<\/p>\n"
                        }]
                      },
                      "movestrategies": {
                        "ownKey": "movestrategies",
                        "childrenPages": {
                          "routing": {
                            "ownKey": "routing",
                            "childrenPages": {
                              "onstreets": {
                                "ownKey": "onstreets",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/routing/onstreets",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/routing/onstreets"
                                  },
                                  "description": "",
                                  "title": "OnStreets",
                                  "content": "<p>This strategy computes a route along streets allowed for a selected <code> Vehicle <\/code> connecting the starting and ending point.<\/p><init>\n\ncomputeRoute\n\n"
                                }]
                              },
                              "ignorestreets": {
                                "ownKey": "ignorestreets",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/routing/ignorestreets",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/routing/ignorestreets"
                                  },
                                  "description": "",
                                  "title": "IgnoreStreets",
                                  "content": "<p>This strategy ignores any information about the map, and connects the starting and ending point with a straight line using <code> PolygonalChain <\/code>.<\/p><init>\n<p>This strategy ignores any information about the map, and connects the starting and ending point with a straight line using <code> PolygonalChain <\/code>.<\/p>\ncomputeRoute\n\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/movestrategies/routing",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/routing"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.implementations.movestrategies.routing",
                              "content": "<p>IgnoreStreets<\/p>\n<p>This strategy ignores any information about the map, and connects the starting and ending point with a straight line using <code> PolygonalChain <\/code>.<\/p>\nOnStreets\n<p>This strategy computes a route along streets allowed for a selected <code> Vehicle <\/code> connecting the starting and ending point.<\/p>\n"
                            }]
                          },
                          "randomtarget": {
                            "ownKey": "randomtarget",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/movestrategies/randomtarget",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/randomtarget"
                              },
                              "description": "",
                              "title": "RandomTarget",
                              "content": "<p>Selects a target based on a random direction extracted from directionRng,\nand a random distance extracted from distanceDistribution.\n getCurrentPosition  should return the current position of the object to move.\n T  is the type of the concentration of the node.<\/p><init>\n<p>Handy constructor for Alchemist where the object to move is a  node  in the  env .<\/p>\n<init>\n<p>Selects a target based on a random direction extracted from directionRng,\nand a random distance extracted from distanceDistribution.\n getCurrentPosition  should return the current position of the object to move.\n T  is the type of the concentration of the node.<\/p>\nchooseTarget\n<p>The target selection strategy.\nReturns the new target to reach.<\/p>\n"
                            }]
                          },
                          "changetargetoncollision": {
                            "ownKey": "changetargetoncollision",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/movestrategies/changetargetoncollision",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/changetargetoncollision"
                              },
                              "description": "",
                              "title": "ChangeTargetOnCollision",
                              "content": "<p>Base class for  TargetSelectionStrategy  offering automatic target change\non collision and utilities for initialization.\n getCurrentPosition  should return the current position of the object to move.\n P  is the position type to use.<\/p>getCurrentPosition\n<p>Returns the current position of the object to move.<\/p>\n<init>\n<p>Base class for  TargetSelectionStrategy  offering automatic target change\non collision and utilities for initialization.\n getCurrentPosition  should return the current position of the object to move.\n P  is the position type to use.<\/p>\ngetTarget\n\ninitializePositions\n<p>Utility to initialize lazyinit variables dependent on the environment.\nIt is guaranteed to be called before  shouldChangeTarget  and  chooseTarget .<\/p>\nshouldChangeTarget\n<p>Returns a boolean indicating whether it is time to change the target or not.\nBy default if it hasn't moved (assuming it's because of an obstacle)\nor or it has reached the previous, then choose another one.<\/p>\nchooseTarget\n<p>The target selection strategy.\nReturns the new target to reach.<\/p>\n"
                            }]
                          },
                          "abstractstrategywithgps": {
                            "ownKey": "abstractstrategywithgps",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/movestrategies/abstractstrategywithgps",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/abstractstrategywithgps"
                              },
                              "description": "",
                              "title": "AbstractStrategyWithGPS",
                              "content": "<p>basic move strategy that use a <code> GPSTrace <\/code>.<\/p><init>\n<p>basic move strategy that use a <code> GPSTrace <\/code>.<\/p>\ngetTrace\n\nsetTrace\n\n"
                            }]
                          },
                          "speed": {
                            "ownKey": "speed",
                            "childrenPages": {
                              "straightlinetracedependantspeed": {
                                "ownKey": "straightlinetracedependantspeed",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/straightlinetracedependantspeed",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/straightlinetracedependantspeed"
                                  },
                                  "description": "",
                                  "title": "StraightLineTraceDependantSpeed",
                                  "content": "<p>This <code> TraceDependantSpeed <\/code> uses the distance between coordinates for estimating the distance.<\/p><init>\n\ncomputeDistance\n\n"
                                }]
                              },
                              "constantspeed": {
                                "ownKey": "constantspeed",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/constantspeed",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/constantspeed"
                                  },
                                  "description": "",
                                  "title": "ConstantSpeed",
                                  "content": "<p>This strategy makes the node move at an average constant speed, which is influenced by the <code> it.unibo.alchemist.model.interfaces.TimeDistribution <\/code> of the <code> Reaction <\/code> hosting this <code> it.unibo.alchemist.model.interfaces.Action <\/code>. This action tries to normalize on the <code> Reaction <\/code> rate, but if the <code> it.unibo.alchemist.model.interfaces.TimeDistribution <\/code> has a high variance, the movements on the map will inherit this tract.<\/p><init>\n\ngetNodeMovementLength\n\n"
                                }]
                              },
                              "interactwithothers": {
                                "ownKey": "interactwithothers",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/interactwithothers",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/interactwithothers"
                                  },
                                  "description": "",
                                  "title": "InteractWithOthers",
                                  "content": "<p>This strategy slows down nodes depending on how many \"interacting\" nodes are found in the surroundings. It is an attempt at modeling crowding slow-downs.<\/p><init>\n\ngetNodeMovementLength\n\n"
                                }]
                              },
                              "constantspace": {
                                "ownKey": "constantspace",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/constantspace",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/constantspace"
                                  },
                                  "description": "",
                                  "title": "ConstantSpace",
                                  "content": "<p>This strategy makes the node move every time of a fixed amount of space.<\/p><init>\n\ngetNodeMovementLength\n\n"
                                }]
                              },
                              "globallyconstantspeed": {
                                "ownKey": "globallyconstantspeed",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/globallyconstantspeed",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/globallyconstantspeed"
                                  },
                                  "description": "",
                                  "title": "GloballyConstantSpeed",
                                  "content": "<p>Similar to  ConstantSpeed  but takes in consideration the time distribution's rate instead of the reaction's rate.<\/p><init>\n<p>Similar to  ConstantSpeed  but takes in consideration the time distribution's rate instead of the reaction's rate.<\/p>\ngetNodeMovementLength\n\n"
                                }]
                              },
                              "tracedependantspeed": {
                                "ownKey": "tracedependantspeed",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/tracedependantspeed",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/tracedependantspeed"
                                  },
                                  "description": "",
                                  "title": "TraceDependantSpeed",
                                  "content": "<p>This strategy dynamically tries to move the node adjusting its speed to synchronize the reaction rate and the traces data.<\/p><init>\n\ngetNodeMovementLength\n\ncomputeDistance\n\n"
                                }]
                              },
                              "routingtracedependantspeed": {
                                "ownKey": "routingtracedependantspeed",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed/routingtracedependantspeed",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed/routingtracedependantspeed"
                                  },
                                  "description": "",
                                  "title": "RoutingTraceDependantSpeed",
                                  "content": "<p>This <code> TraceDependantSpeed <\/code> strategy computes the remaining distance by relying on maps data for a selected <code> Vehicle <\/code>.<\/p><init>\n\ncomputeDistance\n\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/movestrategies/speed",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/speed"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.implementations.movestrategies.speed",
                              "content": "<p>GloballyConstantSpeed<\/p>\n<p>Similar to  ConstantSpeed  but takes in consideration the time distribution's rate instead of the reaction's rate.<\/p>\nInteractWithOthers\n<p>This strategy slows down nodes depending on how many \"interacting\" nodes are found in the surroundings. It is an attempt at modeling crowding slow-downs.<\/p>\nConstantSpace\n<p>This strategy makes the node move every time of a fixed amount of space.<\/p>\nConstantSpeed\n<p>This strategy makes the node move at an average constant speed, which is influenced by the <code> it.unibo.alchemist.model.interfaces.TimeDistribution <\/code> of the <code> Reaction <\/code> hosting this <code> it.unibo.alchemist.model.interfaces.Action <\/code>. This action tries to normalize on the <code> Reaction <\/code> rate, but if the <code> it.unibo.alchemist.model.interfaces.TimeDistribution <\/code> has a high variance, the movements on the map will inherit this tract.<\/p>\nStraightLineTraceDependantSpeed\n<p>This <code> TraceDependantSpeed <\/code> uses the distance between coordinates for estimating the distance.<\/p>\nTraceDependantSpeed\n<p>This strategy dynamically tries to move the node adjusting its speed to synchronize the reaction rate and the traces data.<\/p>\nRoutingTraceDependantSpeed\n<p>This <code> TraceDependantSpeed <\/code> strategy computes the remaining distance by relying on maps data for a selected <code> Vehicle <\/code>.<\/p>\n"
                            }]
                          },
                          "target": {
                            "ownKey": "target",
                            "childrenPages": {
                              "followtarget": {
                                "ownKey": "followtarget",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/target/followtarget",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/target/followtarget"
                                  },
                                  "description": "",
                                  "title": "FollowTarget",
                                  "content": "<p>This strategy reads the value of a \"target\" molecule and tries to interpret it as a coordinate.<\/p><init>\n\ngetTarget\n\ncreatePosition\n\ngetCurrentPosition\n\n"
                                }]
                              },
                              "followtrace": {
                                "ownKey": "followtrace",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/target/followtrace",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/target/followtrace"
                                  },
                                  "description": "",
                                  "title": "FollowTrace",
                                  "content": "<p>This strategy follows a <code> Route <\/code>.<\/p><init>\n\ngetTarget\n\n"
                                }]
                              },
                              "followtargetonmap": {
                                "ownKey": "followtargetonmap",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/movestrategies/target/followtargetonmap",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/target/followtargetonmap"
                                  },
                                  "description": "",
                                  "title": "FollowTargetOnMap",
                                  "content": "<p>This strategy reads the value of a \"target\" molecule and tries to interpret it as a coordinate.<\/p><init>\n\ncreatePosition\n\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/movestrategies/target",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies/target"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.implementations.movestrategies.target",
                              "content": "<p>FollowTarget<\/p>\n<p>This strategy reads the value of a \"target\" molecule and tries to interpret it as a coordinate.<\/p>\nFollowTrace\n<p>This strategy follows a <code> Route <\/code>.<\/p>\nFollowTargetOnMap\n<p>This strategy reads the value of a \"target\" molecule and tries to interpret it as a coordinate.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/movestrategies",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/movestrategies"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.movestrategies",
                          "content": "<p>RandomTarget<\/p>\n<p>Selects a target based on a random direction extracted from directionRng,\nand a random distance extracted from distanceDistribution.\n getCurrentPosition  should return the current position of the object to move.\n T  is the type of the concentration of the node.<\/p>\nChangeTargetOnCollision\n<p>Base class for  TargetSelectionStrategy  offering automatic target change\non collision and utilities for initialization.\n getCurrentPosition  should return the current position of the object to move.\n P  is the position type to use.<\/p>\nAbstractStrategyWithGPS\n<p>basic move strategy that use a <code> GPSTrace <\/code>.<\/p>\nit.unibo.alchemist.model.implementations.movestrategies.speed\n<p>it.unibo.alchemist.model.implementations.movestrategies.target<\/p>\n<p>it.unibo.alchemist.model.implementations.movestrategies.routing<\/p>\n"
                        }]
                      },
                      "routes": {
                        "ownKey": "routes",
                        "childrenPages": {
                          "gpstraceimpl": {
                            "ownKey": "gpstraceimpl",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/routes/gpstraceimpl",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/routes/gpstraceimpl"
                              },
                              "description": "",
                              "title": "GPSTraceImpl",
                              "content": "<p><init><\/p>\n<p><init><\/p>\n<p>getFinalPosition<\/p>\n<p>getPreviousPosition<\/p>\n<p>getTripTime<\/p>\n<p>interpolate<\/p>\n<p>getInitialPosition<\/p>\n<p>startAt<\/p>\n<p>getStartTime<\/p>\n<p>getFinalTime<\/p>\n<p>getNextPosition<\/p>\n"
                            }]
                          },
                          "polygonalchain": {
                            "ownKey": "polygonalchain",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/routes/polygonalchain",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/routes/polygonalchain"
                              },
                              "description": "",
                              "title": "PolygonalChain",
                              "content": "<p>Abstract route implementation.<\/p><init>\n\n<init>\n\nhashCode\n\nlength\n\nstream\n\ngetPoint\n\nequals\n\niterator\n\ntoString\n<p>Prints the class name and the list of positions.<\/p>\nsize\n\ngetPoints\n\ncomputeDistance\n\n"
                            }]
                          },
                          "graphhopperroute": {
                            "ownKey": "graphhopperroute",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/routes/graphhopperroute",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/routes/graphhopperroute"
                              },
                              "description": "",
                              "title": "GraphHopperRoute",
                              "content": "<p><init><\/p>\n<p>length<\/p>\n<p>stream<\/p>\n<p>getPoint<\/p>\n<p>iterator<\/p>\n<p>size<\/p>\n<p>getPoints<\/p>\n<p>getTripTime<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/routes",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/routes"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.routes",
                          "content": "<p>PolygonalChain<\/p>\n<p>Abstract route implementation.<\/p>\nGraphHopperRoute\n<p>GPSTraceImpl<\/p>\n"
                        }]
                      },
                      "times": {
                        "ownKey": "times",
                        "childrenPages": {"doubletime": {
                          "ownKey": "doubletime",
                          "ownPages": [{
                            "reference": {
                              "path": "kotlindoc",
                              "baseUrl": "https://alchemistsimulator.github.io/latest",
                              "fileName": "it/unibo/alchemist/model/implementations/times/doubletime",
                              "extension": "html",
                              "usePrettyUrl": true,
                              "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/times/doubletime"
                            },
                            "description": "",
                            "title": "DoubleTime",
                            "content": "<p>This class is meant to provide a reasonably fast time implementation. Should be suitable for most usages, but it inherits the problem of the loss of precision of double numbers when comparing big numbers with low numbers. It could become a real problem with long simulations.<\/p><init>\n<p>Default empty constructor, builds a DoubleTime with value 0.<\/p>\n<init>\n<p>Builds a new DoubleTime starting from the specified value.<\/p>\ntoDouble\n\nhashCode\n\nequals\n\ntimes\n\ntoString\n\ncompareTo\n\nisInfinite\n\nminus\n\nplus\n\n"
                          }]
                        }},
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/times",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/times"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.times",
                          "content": "<p>DoubleTime<\/p>\n<p>This class is meant to provide a reasonably fast time implementation. Should be suitable for most usages, but it inherits the problem of the loss of precision of double numbers when comparing big numbers with low numbers. It could become a real problem with long simulations.<\/p>\n"
                        }]
                      },
                      "nodes": {
                        "ownKey": "nodes",
                        "childrenPages": {
                          "abstractnode": {
                            "ownKey": "abstractnode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/abstractnode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/abstractnode"
                              },
                              "description": "",
                              "title": "AbstractNode",
                              "content": "<p>This class realizes an abstract node. You may extend it to realize your own nodes.<\/p><init>\n\ncontains\n<p>Tests whether a node contains a <code> Molecule <\/code>.<\/p>\nhashCode\n\ngetChemicalSpecies\n<p>This method is usefult to know how many different chemical species may be contained in this node.<\/p>\nequals\n\nsetConcentration\n<p>Sets the concentration of mol to c.<\/p>\ntoString\n\ngetId\n\ncompareTo\n\ncreateT\n\naddReaction\n\ncloneNode\n<p>Default implementation fails: override correctly calling the constructor.<\/p>\nremoveConcentration\n\ngetReactions\n\ngetConcentration\n<p>Calculates the concentration of a molecule.<\/p>\niterator\n\ngetContents\n\nforEach\n\nspliterator\n\nremoveReaction\n\n"
                            }]
                          },
                          "abstractcognitivepedestrian": {
                            "ownKey": "abstractcognitivepedestrian",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/abstractcognitivepedestrian",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/abstractcognitivepedestrian"
                              },
                              "description": "",
                              "title": "AbstractCognitivePedestrian",
                              "content": "<p>Implementation of a cognitive pedestrian.<\/p>cognitive\n<p>The cognitive model this agent adheres to.<\/p>\ndanger\n<pre><code>    the molecule associated to danger in the environment.<\/code><\/pre>\n<init>\n<p>Implementation of a cognitive pedestrian.<\/p>\nspeed\n<p>The speed at which the pedestrian is moving.<\/p>\ninfluencialPeople\n<p>A list of all the cognitive agents who exert an influence on this cognitive agent.<\/p>\n"
                            }]
                          },
                          "heterogeneouspedestrian2d": {
                            "ownKey": "heterogeneouspedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/heterogeneouspedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/heterogeneouspedestrian2d"
                              },
                              "description": "",
                              "title": "HeterogeneousPedestrian2D",
                              "content": "<p>Implementation of a heterogeneous pedestrian in the Euclidean world.<\/p>shape\n<p>The shape of any pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  Euclidean2DShape s.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n\n<init>\n\n<init>\n<p>Implementation of a heterogeneous pedestrian in the Euclidean world.<\/p>\n"
                            }]
                          },
                          "doublenode": {
                            "ownKey": "doublenode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/doublenode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/doublenode"
                              },
                              "description": "",
                              "title": "DoubleNode",
                              "content": "<p><init><\/p>\n<p>Builds a new DoubleNode.<\/p>\ncreateT\n"
                            }]
                          },
                          "cellnodeimpl": {
                            "ownKey": "cellnodeimpl",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/cellnodeimpl",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/cellnodeimpl"
                              },
                              "description": "",
                              "title": "CellNodeImpl",
                              "content": "<p><init><\/p>\n<p>create a new cell node.<\/p>\n<init>\n\ncontains\n\ngetJunctionsCount\n\nremoveJunction\n\nsetConcentration\n\ngetNeighborsLinkWithJunction\n\ncontainsJunction\n\ngetDiameter\n\nsetPolarization\n\ngetJunctions\n\ngetPolarizationVersor\n\ntoString\n\ngetAllNodesLinkWithJunction\n\naddJunction\n\ngetRadius\n\naddPolarization\n\n"
                            }]
                          },
                          "circlenode": {
                            "ownKey": "circlenode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/circlenode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/circlenode"
                              },
                              "description": "",
                              "title": "CircleNode",
                              "content": "<p>A  it.unibo.alchemist.model.interfaces.Node  with a circle shape meant to be added to a\n it.unibo.alchemist.model.interfaces.environments.PhysicsEnvironment .<\/p>shape\n<p>{@inheritDoc}.<\/p>\n<init>\n<p>A  it.unibo.alchemist.model.interfaces.Node  with a circle shape meant to be added to a\n it.unibo.alchemist.model.interfaces.environments.PhysicsEnvironment .<\/p>\ncreateT\n<p>Returns null because T is unknown.<\/p>\n"
                            }]
                          },
                          "environmentnodeimpl": {
                            "ownKey": "environmentnodeimpl",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/environmentnodeimpl",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/environmentnodeimpl"
                              },
                              "description": "",
                              "title": "EnvironmentNodeImpl",
                              "content": "<p><init><\/p>\n<p>Create a new environment node.<\/p>\nsetConcentration\n"
                            }]
                          },
                          "intnode": {
                            "ownKey": "intnode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/intnode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/intnode"
                              },
                              "description": "",
                              "title": "IntNode",
                              "content": "<p>An integer node.<\/p><init>\n<p>An integer node.<\/p>\ncreateT\n\n"
                            }]
                          },
                          "cognitiveorientingphysicalpedestrian2d": {
                            "ownKey": "cognitiveorientingphysicalpedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/cognitiveorientingphysicalpedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/cognitiveorientingphysicalpedestrian2d"
                              },
                              "description": "",
                              "title": "CognitiveOrientingPhysicalPedestrian2D",
                              "content": "<p>A cognitive  OrientingPedestrian2D  capable of physical interactions.\nTODO(rename it into something like \"SmartPedestrian2D\"?)<\/p>cognitiveMap\n<p>The cognitive map of the agent. It's a graph composed of landmarks (elements of the environment easy to\nremember due to their uniqueness) and spatial relations between them. It's modeled as a  NavigationGraph .<\/p>\nvolatileMemory\n<p>The volatile memory of the agent: it models the ability to remember areas of the environment already visited\nsince the start of the simulation. Each area is paired with the number of visits. Areas are assumed to be\nrepresented as  ConvexGeometricShape s, as in  NavigationGraph s.<\/p>\nknowledgeDegree\n<p>The knowledge degree of the agent concerning the environment. This is a Double value in <a href=\"#\">0,1<\/a> describing the\npercentage of environment the agent is familiar with prior to the start of the simulation (thus it does not\ntake into account the knowledge the pedestrian will gain during it, namely the  volatileMemory ).<\/p>\n<init>\n<p>A cognitive  OrientingPedestrian2D  capable of physical interactions.\nTODO(rename it into something like \"SmartPedestrian2D\"?)<\/p>\n"
                            }]
                          },
                          "integernode": {
                            "ownKey": "integernode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/integernode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/integernode"
                              },
                              "description": "",
                              "title": "IntegerNode",
                              "content": "<p><init><\/p>\n<p>Create a new integer node.<\/p>\ncreateT\n"
                            }]
                          },
                          "abstractorientingpedestrian": {
                            "ownKey": "abstractorientingpedestrian",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/abstractorientingpedestrian",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/abstractorientingpedestrian"
                              },
                              "description": "",
                              "title": "AbstractOrientingPedestrian",
                              "content": "<p>An abstract  OrientingPedestrian , contains an algorithm for the generation of a pseudo-random  cognitiveMap . The\ncreation of landmarks is left to subclasses via factory method (see  createLandmarkIn ).<\/p>volatileMemory\n<p>The volatile memory of the agent: it models the ability to remember areas of the environment already visited\nsince the start of the simulation. Each area is paired with the number of visits. Areas are assumed to be\nrepresented as  ConvexGeometricShape s, as in  NavigationGraph s.<\/p>\ncognitiveMap\n<p>The cognitive map of the pedestrian. This is generated from the  environment 's graph as follows: we randomly\nselect a % of environment's areas equal to the knowledge degree of the pedestrian, we then create a landmark\nin each of them. Those landmarks will be the nodes of the cognitive map. Concerning the connections between\nthem, we produce a graph in which each generated landmark is connected to any other landmark reachable from it,\nwith an edge whose weight depends on the number of areas that need to be traversed. Finally, the cognitive map\nis a minimum spanning tree of the described full connected graph.\nNote that edges are plain <a href=\"#\">DefaultEdge<\/a>s, which means no extra info regarding the connection between landmarks\nis stored in the cognitive map. If two landmarks are connected, the pedestrian knows there's a path between them\n(this may be simple or not, i.e. representable as a single segment, but the pedestrian doesn't know it). If two\nlandmarks are not connected, the pedestrian doesn't have info regarding any path between them, which may\nanyway exist.<\/p>\nknowledgeDegree\n<p>The knowledge degree of the agent concerning the environment. This is a Double value in <a href=\"#\">0,1<\/a> describing the\npercentage of environment the agent is familiar with prior to the start of the simulation (thus it does not\ntake into account the knowledge the pedestrian will gain during it, namely the  volatileMemory ).<\/p>\nrandomGenerator\n<p>The random generator to use in order to preserve reproducibility.<\/p>\n<init>\n<p>An abstract  OrientingPedestrian , contains an algorithm for the generation of a pseudo-random  cognitiveMap . The\ncreation of landmarks is left to subclasses via factory method (see  createLandmarkIn ).<\/p>\ncreateLandmarkIn\n<p>Creates a landmark entirely contained in the given area. If such area contains one or more destinations, the\nreturned landmark must contain at least one of them.<\/p>\n"
                            }]
                          },
                          "protelisnode": {
                            "ownKey": "protelisnode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/protelisnode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/protelisnode"
                              },
                              "description": "",
                              "title": "ProtelisNode",
                              "content": "<p><init><\/p>\n<p>Builds a new <code> ProtelisNode <\/code>.<\/p>\ngetNetworkManager\n<p>getNetworkManagers<\/p>\n<p>commit<\/p>\n<p>cloneNode<\/p>\n<p>has<\/p>\n<p>get<\/p>\n<p>get<\/p>\n<p>setup<\/p>\n<p>putField<\/p>\n<p>Writes a Map representation of the Field on the environment.<\/p>\nput\n<p>toString<\/p>\n<p>remove<\/p>\n<p>createT<\/p>\n<p>addNetworkManger<\/p>\n<p>Adds a new <code> AlchemistNetworkManager <\/code>.<\/p>\nkeySet\n"
                            }]
                          },
                          "homogeneousorientingpedestrian2d": {
                            "ownKey": "homogeneousorientingpedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/homogeneousorientingpedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/homogeneousorientingpedestrian2d"
                              },
                              "description": "",
                              "title": "HomogeneousOrientingPedestrian2D",
                              "content": "<p>A homogeneous  OrientingPedestrian  in the Euclidean world. Landmarks are represented as  Ellipse s, which can\nmodel the human error concerning both the exact position of a landmark and the angles formed by the connections\nbetween them. This class accepts an environment whose graph contains  ConvexPolygon al nodes.<\/p>shape\n<p>The shape of any pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  Euclidean2DShape s.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n<p>A homogeneous  OrientingPedestrian  in the Euclidean world. Landmarks are represented as  Ellipse s, which can\nmodel the human error concerning both the exact position of a landmark and the angles formed by the connections\nbetween them. This class accepts an environment whose graph contains  ConvexPolygon al nodes.<\/p>\ncreateLandmarkIn\n<p>Creates a landmark entirely contained in the given area. If such area contains one or more destinations, the\nreturned landmark must contain at least one of them.<\/p>\n"
                            }]
                          },
                          "circulardeformablecellimpl": {
                            "ownKey": "circulardeformablecellimpl",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/circulardeformablecellimpl",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/circulardeformablecellimpl"
                              },
                              "description": "",
                              "title": "CircularDeformableCellImpl",
                              "content": "<p>Implementation of a circular deformable cell.<\/p><init>\n<p>Create a circular deformable cell of maxDiam = maxDiameter and minDiam = deformability * maxDiam.<\/p>\ngetMaxRadius\n\ngetMaxDiameter\n\n"
                            }]
                          },
                          "homogeneousphysicalpedestrian2d": {
                            "ownKey": "homogeneousphysicalpedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/homogeneousphysicalpedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/homogeneousphysicalpedestrian2d"
                              },
                              "description": "",
                              "title": "HomogeneousPhysicalPedestrian2D",
                              "content": "<p>A homogeneous pedestrian capable of physical interactions, modeled as a  PhysicalPedestrian2D .  comfortRay  is\nstatically defined to be equal to its  shape  radius.<\/p>comfortRay\n<p>The comfort ray of this pedestrian, this is added to the radius of its shape to obtain the  comfortArea .<\/p>\n<init>\n<p>A homogeneous pedestrian capable of physical interactions, modeled as a  PhysicalPedestrian2D .  comfortRay  is\nstatically defined to be equal to its  shape  radius.<\/p>\n"
                            }]
                          },
                          "lsanode": {
                            "ownKey": "lsanode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/lsanode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/lsanode"
                              },
                              "description": "",
                              "title": "LsaNode",
                              "content": "<p>This class realizes a node with LSA concentration.<\/p><init>\n\ncontains\n\ngetChemicalSpecies\n\nsetConcentration\n\nsetConcentration\n\ntoString\n\ncreateT\n\nremoveConcentration\n\ngetConcentration\n\ngetLsaSpace\n\ngetContents\n\n"
                            }]
                          },
                          "homogeneousorientingphysicalpedestrian2d": {
                            "ownKey": "homogeneousorientingphysicalpedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/homogeneousorientingphysicalpedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/homogeneousorientingphysicalpedestrian2d"
                              },
                              "description": "",
                              "title": "HomogeneousOrientingPhysicalPedestrian2D",
                              "content": "<p>A homogeneous  OrientingPedestrian2D  capable of physical interactions.<\/p>cognitiveMap\n<p>The cognitive map of the agent. It's a graph composed of landmarks (elements of the environment easy to\nremember due to their uniqueness) and spatial relations between them. It's modeled as a  NavigationGraph .<\/p>\nvolatileMemory\n<p>The volatile memory of the agent: it models the ability to remember areas of the environment already visited\nsince the start of the simulation. Each area is paired with the number of visits. Areas are assumed to be\nrepresented as  ConvexGeometricShape s, as in  NavigationGraph s.<\/p>\nknowledgeDegree\n<p>The knowledge degree of the agent concerning the environment. This is a Double value in <a href=\"#\">0,1<\/a> describing the\npercentage of environment the agent is familiar with prior to the start of the simulation (thus it does not\ntake into account the knowledge the pedestrian will gain during it, namely the  volatileMemory ).<\/p>\n<init>\n<p>A homogeneous  OrientingPedestrian2D  capable of physical interactions.<\/p>\n"
                            }]
                          },
                          "homogeneouspedestrian2d": {
                            "ownKey": "homogeneouspedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/homogeneouspedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/homogeneouspedestrian2d"
                              },
                              "description": "",
                              "title": "HomogeneousPedestrian2D",
                              "content": "<p>Implementation of a homogeneous pedestrian in the Euclidean world.<\/p>shape\n<p>The shape of the node.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n<p>Implementation of a homogeneous pedestrian in the Euclidean world.<\/p>\n"
                            }]
                          },
                          "cognitiveorientingpedestrian2d": {
                            "ownKey": "cognitiveorientingpedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/cognitiveorientingpedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/cognitiveorientingpedestrian2d"
                              },
                              "description": "",
                              "title": "CognitiveOrientingPedestrian2D",
                              "content": "<p>A cognitive  OrientingPedestrian  in the Euclidean world.<\/p><init>\n<p>Allows to specify age and gender with a string.<\/p>\n<init>\n<p>Allows to specify age with an int and gender with a string.<\/p>\n<init>\n<p>A cognitive  OrientingPedestrian  in the Euclidean world.<\/p>\nspeed\n\n"
                            }]
                          },
                          "abstractheterogeneouspedestrian": {
                            "ownKey": "abstractheterogeneouspedestrian",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/abstractheterogeneouspedestrian",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/abstractheterogeneouspedestrian"
                              },
                              "description": "",
                              "title": "AbstractHeterogeneousPedestrian",
                              "content": "<p>Implementation of a heterogeneous pedestrian.<\/p>compliance\n<p>Value between 0 and 1 representing the attitude towards conforming to social rules of this pedestrian.<\/p>\nwalkingSpeed\n<p>The speed at which the pedestrian moves if it's walking.<\/p>\nrunningSpeed\n<p>The speed at which the pedestrian moves if it's running.<\/p>\nage\n<pre><code>    the age of this pedestrian.<\/code><\/pre>\ngender\n<pre><code>    the gender of this pedestrian<\/code><\/pre>\n<init>\n<p>Implementation of a heterogeneous pedestrian.<\/p>\nprobabilityOfHelping\n<p>Value between 0 and 1 representing the probability this pedestrian will help another pedestrian in difficulty.<\/p>\n"
                            }]
                          },
                          "abstracthomogeneouspedestrian": {
                            "ownKey": "abstracthomogeneouspedestrian",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/abstracthomogeneouspedestrian",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/abstracthomogeneouspedestrian"
                              },
                              "description": "",
                              "title": "AbstractHomogeneousPedestrian",
                              "content": "<p>Implementation of a basic pedestrian.<\/p>membershipGroup\n<p>The group this pedestrian belongs to.<\/p>\nwalkingSpeed\n<p>The speed at which the pedestrian moves if it's walking.<\/p>\nrunningSpeed\n<p>The speed at which the pedestrian moves if it's running.<\/p>\nsenses\n<p>The list of influence spheres belonging to this pedestrian.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n<p>Implementation of a basic pedestrian.<\/p>\ncreateT\n\nspeed\n<p>The speed at which the pedestrian is moving.<\/p>\n"
                            }]
                          },
                          "cognitivepedestrian2d": {
                            "ownKey": "cognitivepedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/cognitivepedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/cognitivepedestrian2d"
                              },
                              "description": "",
                              "title": "CognitivePedestrian2D",
                              "content": "<p>Implementation of a cognitive pedestrian in the Euclidean world.<\/p>shape\n<p>The shape of any pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  Euclidean2DShape s.<\/p>\nfieldOfView\n<p>The field of view of a pedestrian in the Euclidean world.\nImplementors should override this property to prevent the continuous creation of new  FieldOfView2D s.<\/p>\nenvironment\n<pre><code>    the environment inside which this pedestrian moves.<\/code><\/pre>\n<init>\n\n<init>\n\n<init>\n<p>Implementation of a cognitive pedestrian in the Euclidean world.<\/p>\n"
                            }]
                          },
                          "cognitivephysicalpedestrian2d": {
                            "ownKey": "cognitivephysicalpedestrian2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/nodes/cognitivephysicalpedestrian2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes/cognitivephysicalpedestrian2d"
                              },
                              "description": "",
                              "title": "CognitivePhysicalPedestrian2D",
                              "content": "<p>A cognitive pedestrian capable of physical interactions, modeled as a  PhysicalPedestrian2D .  comfortRay  changes\ndynamically depending on whether the pedestrian wants to evacuate or not.<\/p>comfortRay\n<p>TODO(maybe introduce some randomness? To model differences in people)<\/p>\n<init>\n<p>A cognitive pedestrian capable of physical interactions, modeled as a  PhysicalPedestrian2D .  comfortRay  changes\ndynamically depending on whether the pedestrian wants to evacuate or not.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/nodes",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/nodes"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.nodes",
                          "content": "<p>AbstractCognitivePedestrian<\/p>\n<p>Implementation of a cognitive pedestrian.<\/p>\nAbstractHeterogeneousPedestrian\n<p>Implementation of a heterogeneous pedestrian.<\/p>\nAbstractHomogeneousPedestrian\n<p>Implementation of a basic pedestrian.<\/p>\nAbstractOrientingPedestrian\n<p>An abstract  OrientingPedestrian , contains an algorithm for the generation of a pseudo-random  cognitiveMap . The\ncreation of landmarks is left to subclasses via factory method (see  createLandmarkIn ).<\/p>\nCognitiveOrientingPedestrian2D\n<p>A cognitive  OrientingPedestrian  in the Euclidean world.<\/p>\nCognitivePedestrian2D\n<p>Implementation of a cognitive pedestrian in the Euclidean world.<\/p>\nHeterogeneousPedestrian2D\n<p>Implementation of a heterogeneous pedestrian in the Euclidean world.<\/p>\nHomogeneousOrientingPedestrian2D\n<p>A homogeneous  OrientingPedestrian  in the Euclidean world. Landmarks are represented as  Ellipse s, which can\nmodel the human error concerning both the exact position of a landmark and the angles formed by the connections\nbetween them. This class accepts an environment whose graph contains  ConvexPolygon al nodes.<\/p>\nHomogeneousPedestrian2D\n<p>Implementation of a homogeneous pedestrian in the Euclidean world.<\/p>\nCircleNode\n<p>A  it.unibo.alchemist.model.interfaces.Node  with a circle shape meant to be added to a\n it.unibo.alchemist.model.interfaces.environments.PhysicsEnvironment .<\/p>\nIntNode\n<p>An integer node.<\/p>\nCognitiveOrientingPhysicalPedestrian2D\n<p>A cognitive  OrientingPedestrian2D  capable of physical interactions.\nTODO(rename it into something like \"SmartPedestrian2D\"?)<\/p>\nCognitivePhysicalPedestrian2D\n<p>A cognitive pedestrian capable of physical interactions, modeled as a  PhysicalPedestrian2D .  comfortRay  changes\ndynamically depending on whether the pedestrian wants to evacuate or not.<\/p>\nHomogeneousOrientingPhysicalPedestrian2D\n<p>A homogeneous  OrientingPedestrian2D  capable of physical interactions.<\/p>\nHomogeneousPhysicalPedestrian2D\n<p>A homogeneous pedestrian capable of physical interactions, modeled as a  PhysicalPedestrian2D .  comfortRay  is\nstatically defined to be equal to its  shape  radius.<\/p>\nAbstractNode\n<p>This class realizes an abstract node. You may extend it to realize your own nodes.<\/p>\nCircularDeformableCellImpl\n<p>Implementation of a circular deformable cell.<\/p>\nIntegerNode\n<p>CellNodeImpl<\/p>\n<p>EnvironmentNodeImpl<\/p>\n<p>DoubleNode<\/p>\n<p>ProtelisNode<\/p>\n<p>LsaNode<\/p>\n<p>This class realizes a node with LSA concentration.<\/p>\n"
                        }]
                      },
                      "layers": {
                        "ownKey": "layers",
                        "childrenPages": {
                          "biomolgradientlayer": {
                            "ownKey": "biomolgradientlayer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/layers/biomolgradientlayer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/biomolgradientlayer"
                              },
                              "description": "",
                              "title": "BiomolGradientLayer",
                              "content": "<p>A <code> Layer <\/code> representing a linear distribution in space of a molecule.<\/p><init>\n<p>Initialize a gradient layer which grows in concentration proportionally in space.<\/p>\n<init>\n<p>Initialize a gradient layer which grows in concentration proportionally in space.<\/p>\ngetSteep\n\ngetParameters\n\ntoString\n\ngetValue\n\n"
                            }]
                          },
                          "bidimensionalgaussianlayer": {
                            "ownKey": "bidimensionalgaussianlayer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/layers/bidimensionalgaussianlayer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/bidimensionalgaussianlayer"
                              },
                              "description": "",
                              "title": "BidimensionalGaussianLayer",
                              "content": "<p>A  Layer  based on a  2D gaussian function  and an optional baseline value.<\/p>function\n<p>The function on which the layer is based.<\/p>\ncenterX\n<p>x coord of the layer's center.<\/p>\ncenterY\n<p>y coord of the layer's center.<\/p>\n<init>\n<p>A  Layer  based on a  2D gaussian function  and an optional baseline value.<\/p>\ngetValue\n\n"
                            }]
                          },
                          "uniformlayer": {
                            "ownKey": "uniformlayer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/layers/uniformlayer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/uniformlayer"
                              },
                              "description": "",
                              "title": "UniformLayer",
                              "content": "<p>a Layer where the concentration is the same at every point in space.<\/p><init>\n\ngetValue\n\n"
                            }]
                          },
                          "steplayer": {
                            "ownKey": "steplayer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/layers/steplayer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/steplayer"
                              },
                              "description": "",
                              "title": "StepLayer",
                              "content": "<p>Implements a <code> Layer <\/code> with a discontinue spatial distribution: the plane is divided in two parts, both with a constant concentration but with a different in value.<\/p><init>\n<p>Initialize a <code> StepLayer <\/code>.<\/p>\n<init>\n<p>Initialize a <code> StepLayer <\/code> where concentration is at its maximum value in first quadrant (for positive values of x and y).<\/p>\ngetValue\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/layers",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.layers",
                          "content": "<p>BidimensionalGaussianLayer<\/p>\n<p>A  Layer  based on a  2D gaussian function  and an optional baseline value.<\/p>\nUniformLayer\n<p>a Layer where the concentration is the same at every point in space.<\/p>\nStepLayer\n<p>Implements a <code> Layer <\/code> with a discontinue spatial distribution: the plane is divided in two parts, both with a constant concentration but with a different in value.<\/p>\nBiomolGradientLayer\n<p>A <code> Layer <\/code> representing a linear distribution in space of a molecule.<\/p>\n"
                        }]
                      },
                      "timedistributions": {
                        "ownKey": "timedistributions",
                        "childrenPages": {
                          "weibulldistributedweibulltime": {
                            "ownKey": "weibulldistributedweibulltime",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/weibulldistributedweibulltime",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/weibulldistributedweibulltime"
                              },
                              "description": "",
                              "title": "WeibullDistributedWeibullTime",
                              "content": "<p>Weibull distributed events, with different (Weibull distributed) mean.<\/p><init>\n\n<init>\n\n<init>\n\n"
                            }]
                          },
                          "weibulltime": {
                            "ownKey": "weibulltime",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/weibulltime",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/weibulltime"
                              },
                              "description": "",
                              "title": "WeibullTime",
                              "content": "<p>Weibull distributed events.<\/p><init>\n\n<init>\n\n<init>\n\nupdateStatus\n\nclone\n\ngetDeviation\n\ngetMean\n\ngetRate\n\ngenSample\n\nweibullFromMean\n<p>Generates a WeibullDistribution given its mean and standard deviation.<\/p>\n"
                            }]
                          },
                          "sapereexponentialtime": {
                            "ownKey": "sapereexponentialtime",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/sapereexponentialtime",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/sapereexponentialtime"
                              },
                              "description": "",
                              "title": "SAPEREExponentialTime",
                              "content": "<p>Allows for a Markovian event whose lambda is computed dynamically using a rate equation.<\/p><init>\n\n<init>\n\nsetMatches\n\ngetRateEquation\n\nisStatic\n\ngetRate\n\n"
                            }]
                          },
                          "diraccomb": {
                            "ownKey": "diraccomb",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/diraccomb",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/diraccomb"
                              },
                              "description": "",
                              "title": "DiracComb",
                              "content": "<p>A DiracComb is a sequence of events that happen every fixed time interval.<\/p><init>\n\n<init>\n\nupdateStatus\n\nclone\n\ntoString\n\ngetRate\n\n"
                            }]
                          },
                          "abstractdistribution": {
                            "ownKey": "abstractdistribution",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/abstractdistribution",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/abstractdistribution"
                              },
                              "description": "",
                              "title": "AbstractDistribution",
                              "content": "<p>This class provides, through a template method pattern, an utility that ensures that the distribution does not trigger events before its initial scheduling time.<\/p><init>\n\nupdate\n\ngetNextOccurence\n\nupdateStatus\n<p>Implement this method to update the distribution's internal status.<\/p>\nclone\n\nsetNextOccurrence\n<p>Allows subclasses to set the next putative time. Use with care.<\/p>\n"
                            }]
                          },
                          "anyrealdistribution": {
                            "ownKey": "anyrealdistribution",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/anyrealdistribution",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/anyrealdistribution"
                              },
                              "description": "",
                              "title": "AnyRealDistribution",
                              "content": "<p>This class is able to use any distribution provided by Apache Math 3 as a subclass of RealDistribution, blocking the execution if <code> it.unibo.alchemist.model.interfaces.Condition#getPropensityContribution() <\/code> returns zero for any condition.<\/p><init>\n\n<init>\n\n<init>\n\n<init>\n\nupdateStatus\n<p>This method can be overridden to implment further controls. Subclasses should still call super.updateStatus, though. Implement this method to update the distribution's internal status.<\/p>\nclone\n\ngetDistribution\n\ngetRate\n\n"
                            }]
                          },
                          "trigger": {
                            "ownKey": "trigger",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/trigger",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/trigger"
                              },
                              "description": "",
                              "title": "Trigger",
                              "content": "<p><init><\/p>\n<p>updateStatus<\/p>\n<p>clone<\/p>\n<p>getRate<\/p>\n"
                            }]
                          },
                          "moleculecontrolledtimedistribution": {
                            "ownKey": "moleculecontrolledtimedistribution",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/moleculecontrolledtimedistribution",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/moleculecontrolledtimedistribution"
                              },
                              "description": "",
                              "title": "MoleculeControlledTimeDistribution",
                              "content": "<p>A special TimeDistribution that schedules the reaction after  start ,\naccording to the value of a  molecule  which contains the delta time.\nIf a  property  is specified, the value to be interpreted as time delta is read from the incarnation.\nOtherwise, the  node  is accessed directly for reading the value.<\/p><p>It's possible to associate an  errorDistribution  to this time distribution, whose samples will be used\nto shift the time samples.<\/p><p>There are some conditions to be satisfied:<\/p><ul><li> molecule  must be modified exclusively by the reaction being scheduled<\/li><li> molecule  must exist in the node. If it does not and the environment returns null, it is assumed to be zero<\/li><li> molecule  must have a positive or zero value associated.<\/li><li> molecule 's concentration must have a type which is understandable as a positive number\n(Number,  Time , or a parse-able String).<\/li><li>the  errorDistribution 's samples plus the value of the  molecule  concentration (or property value)\n<b>must<\/b> always be greater than zero. It is thus recommended to use an  errorDistribution  whose\nsupport lower bound is zero or greater<\/li><\/ul>node\n<p>molecule<\/p>\n<p>property<\/p>\n<p>start<\/p>\n<p>errorDistribution<\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p>A special TimeDistribution that schedules the reaction after  start ,\naccording to the value of a  molecule  which contains the delta time.\nIf a  property  is specified, the value to be interpreted as time delta is read from the incarnation.\nOtherwise, the  node  is accessed directly for reading the value.<\/p><p>It's possible to associate an  errorDistribution  to this time distribution, whose samples will be used\nto shift the time samples.<\/p><p>There are some conditions to be satisfied:<\/p><ul><li> molecule  must be modified exclusively by the reaction being scheduled<\/li><li> molecule  must exist in the node. If it does not and the environment returns null, it is assumed to be zero<\/li><li> molecule  must have a positive or zero value associated.<\/li><li> molecule 's concentration must have a type which is understandable as a positive number\n(Number,  Time , or a parse-able String).<\/li><li>the  errorDistribution 's samples plus the value of the  molecule  concentration (or property value)\n<b>must<\/b> always be greater than zero. It is thus recommended to use an  errorDistribution  whose\nsupport lower bound is zero or greater<\/li><\/ul>\nupdateStatus\n<p>clone<\/p>\n"
                            }]
                          },
                          "exponentialtime": {
                            "ownKey": "exponentialtime",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/exponentialtime",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/exponentialtime"
                              },
                              "description": "",
                              "title": "ExponentialTime",
                              "content": "<p>Markovian events.<\/p><init>\n\n<init>\n\nupdateStatus\n\nclone\n<p>Must be overridden by subclasses returning the correct instance.<\/p>\ngenTime\n\ngetRate\n\n"
                            }]
                          },
                          "saperetimedistribution": {
                            "ownKey": "saperetimedistribution",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/saperetimedistribution",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/saperetimedistribution"
                              },
                              "description": "",
                              "title": "SAPERETimeDistribution",
                              "content": "<p>Interface for TimeDistribution that need matches.<\/p>getRateEquation\n<p>isStatic<\/p>\n<p>setMatches<\/p>\n"
                            }]
                          },
                          "randomdiraccomb": {
                            "ownKey": "randomdiraccomb",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/timedistributions/randomdiraccomb",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/randomdiraccomb"
                              },
                              "description": "",
                              "title": "RandomDiracComb",
                              "content": "<p>A <code> DiracComb <\/code> whose rate is determined (uniformly) randomly within the provided bounds.<\/p><init>\n\n<init>\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/timedistributions",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.timedistributions",
                          "content": "<p>MoleculeControlledTimeDistribution<\/p>\n<p>A special TimeDistribution that schedules the reaction after  start ,\naccording to the value of a  molecule  which contains the delta time.\nIf a  property  is specified, the value to be interpreted as time delta is read from the incarnation.\nOtherwise, the  node  is accessed directly for reading the value.<\/p><p>It's possible to associate an  errorDistribution  to this time distribution, whose samples will be used\nto shift the time samples.<\/p><p>There are some conditions to be satisfied:<\/p><ul><li> molecule  must be modified exclusively by the reaction being scheduled<\/li><li> molecule  must exist in the node. If it does not and the environment returns null, it is assumed to be zero<\/li><li> molecule  must have a positive or zero value associated.<\/li><li> molecule 's concentration must have a type which is understandable as a positive number\n(Number,  Time , or a parse-able String).<\/li><li>the  errorDistribution 's samples plus the value of the  molecule  concentration (or property value)\n<b>must<\/b> always be greater than zero. It is thus recommended to use an  errorDistribution  whose\nsupport lower bound is zero or greater<\/li><\/ul>\nWeibullDistributedWeibullTime\n<p>Weibull distributed events, with different (Weibull distributed) mean.<\/p>\nAbstractDistribution\n<p>This class provides, through a template method pattern, an utility that ensures that the distribution does not trigger events before its initial scheduling time.<\/p>\nRandomDiracComb\n<p>A <code> DiracComb <\/code> whose rate is determined (uniformly) randomly within the provided bounds.<\/p>\nAnyRealDistribution\n<p>This class is able to use any distribution provided by Apache Math 3 as a subclass of RealDistribution, blocking the execution if <code> it.unibo.alchemist.model.interfaces.Condition#getPropensityContribution() <\/code> returns zero for any condition.<\/p>\nWeibullTime\n<p>Weibull distributed events.<\/p>\nExponentialTime\n<p>Markovian events.<\/p>\nTrigger\n<p>DiracComb<\/p>\n<p>A DiracComb is a sequence of events that happen every fixed time interval.<\/p>\nSAPEREExponentialTime\n<p>Allows for a Markovian event whose lambda is computed dynamically using a rate equation.<\/p>\nSAPERETimeDistribution\n<p>Interface for TimeDistribution that need matches.<\/p>\n"
                        }]
                      },
                      "geometry": {
                        "ownKey": "geometry",
                        "childrenPages": {
                          "euclidean2d": {
                            "ownKey": "euclidean2d",
                            "childrenPages": {
                              "segment2dimpl": {
                                "ownKey": "segment2dimpl",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/segment2dimpl",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/segment2dimpl"
                                  },
                                  "description": "",
                                  "title": "Segment2DImpl",
                                  "content": "<p>Implementation of a  Segment2D .<\/p>first\n<p>The first endpoint of the segment.<\/p>\nsecond\n<p>The second endpoint of the segment.<\/p>\n<init>\n<p>Implementation of a  Segment2D .<\/p>\ncopyWith\n<p>Creates a copy of this Segment2D using the specified  first  and  second  points.<\/p>\n"
                                }]
                              },
                              "slopeinterceptline2d": {
                                "ownKey": "slopeinterceptline2d",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/slopeinterceptline2d",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/slopeinterceptline2d"
                                  },
                                  "description": "",
                                  "title": "SlopeInterceptLine2D",
                                  "content": "<p>A  Line2D  represented in the slope-intercept form: y =  slope  * x +  yIntercept . Doubles are only compared with\n<a href=\"#\">MathUtils.fuzzyEquals<\/a>.<\/p>isHorizontal\n<p>Indicates if the line is aligned to the x-axis.<\/p>\nisVertical\n<p>Indicates if the line is aligned to the y-axis.<\/p>\nslope\n<p>The slope of the line, if  isVertical  this is undefined (= Double.NaN).<\/p>\nyIntercept\n<p>The y-coordinate of the y-intercept (= the point where the line intersects the y-axis). If  isVertical  there's\nno y-intercept and this is Double.NaN. The slope-intercept representation (y = mx + b) uses this intercept.<\/p>\nxIntercept\n<p>The x-coordinate of the x-intercept (= the point where the line intersects the x-axis). If  isHorizontal \nthere's no x-intercept and this is Double.NaN.<\/p>\n<init>\n<p>Creates a non-vertical line given its  slope  and  yIntercept .<\/p>\n<init>\n<p>Creates a vertical line given its  xIntercept .<\/p>\ncontains\n<p>Checks if the  point  belongs to this line.<\/p>\nfindY\n<p>Solves the line equation for the given  x . Throws an <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/UnsupportedOperationException.html\">UnsupportedOperationException<\/a> if the line  isVertical .<\/p>\nfindPoint\n<p>Finds the point belonging to the line with the given  x -coordinate. Throws an <a href=\"https://docs.oracle.com/javase/6/docs/api/java/lang/UnsupportedOperationException.html\">UnsupportedOperationException<\/a>\nif the line  isVertical .<\/p>\nisParallelTo\n<p>Checks if two lines are parallel.<\/p>\ncoincidesWith\n<p>Checks if two lines coincide.<\/p>\nintersect\n<p>Intersects two lines.<\/p>\nintersectCircle\n<p>Intersects a line and a circle. Radius must be positive.\nIntersection is performed by plugging the line equation in the circle equation and solving the resulting\nquadratic equation.\nCircle equation: (x -  center .x)^2 + (y -  center .y)^2 = r^2.\nLine equation: y =  slope  * x +  yIntercept  unless  isVertical , x =  xIntercept  otherwise.<\/p>\nequals\n<p>Checks if  other  is a  Line2D  and if it  coincidesWith  this one.<\/p>\nhashCode\n<p>Uses  slope ,  yIntercept  and  xIntercept .<\/p>\nSlopeInterceptLine2D\n<p>A  Line2D  represented in the slope-intercept form: y =  slope  * x +  yIntercept . Doubles are only compared with\n<a href=\"#\">MathUtils.fuzzyEquals<\/a>.<\/p>\n"
                                }]
                              },
                              "awtshapeextension": {
                                "ownKey": "awtshapeextension",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/awtshapeextension",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/awtshapeextension"
                                  },
                                  "description": "",
                                  "title": "AwtShapeExtension",
                                  "content": "<p>Collection of extensions to Java AWT meant to simplify its usage as geometric engine.<\/p>vertices\n<p>Obtains the vertices of a polygonal shape. Any curved segment connecting\ntwo points will be considered as a straight line between them.<\/p>\n"
                                }]
                              },
                              "navigator": {
                                "ownKey": "navigator",
                                "childrenPages": {"extendableconvexpolygoninenvironment": {
                                  "ownKey": "extendableconvexpolygoninenvironment",
                                  "ownPages": [{
                                    "reference": {
                                      "path": "kotlindoc",
                                      "baseUrl": "https://alchemistsimulator.github.io/latest",
                                      "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/navigator/extendableconvexpolygoninenvironment",
                                      "extension": "html",
                                      "usePrettyUrl": true,
                                      "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/navigator/extendableconvexpolygoninenvironment"
                                    },
                                    "description": "",
                                    "title": "ExtendableConvexPolygonInEnvironment",
                                    "content": "<p>An  ExtendableConvexPolygon  located inside an environment with obstacles.\nObstacles, as well as the environment's boundaries, are taken into account when the polygon is\nextended (i.e. the polygon is prevented from intersecting an obstacle or growing beyond such\nboundaries).\nA rectangular region is assumed, its origin, width and height are to be specified. Both\n<a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>s and  ConvexPolygon s can be specified as obstacles (see awtObstacles\nand  polygonalObstacles ).\nThis class is explicitly designed for the algorithm contained in  generateNavigationGraph .\nTODO(improve the quality of this class)<\/p>polygonalObstacles\n<p>Obstacles represented as  ConvexPolygon s, are assumed to be mutable but limited to the extension\n(i.e. they can only grow, not shrink). This is the behavior of seeds used by  generateNavigationGraph ,\nmaking this assumption allows to cache useful data such as whether an edge can still advance or\nan obstacle has already been encountered. This is a var but is assumed to be set only once before\nstarting to extend this polygon.<\/p>\n<init>\n<p>An  ExtendableConvexPolygon  located inside an environment with obstacles.\nObstacles, as well as the environment's boundaries, are taken into account when the polygon is\nextended (i.e. the polygon is prevented from intersecting an obstacle or growing beyond such\nboundaries).\nA rectangular region is assumed, its origin, width and height are to be specified. Both\n<a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>s and  ConvexPolygon s can be specified as obstacles (see awtObstacles\nand  polygonalObstacles ).\nThis class is explicitly designed for the algorithm contained in  generateNavigationGraph .\nTODO(improve the quality of this class)<\/p>\naddVertex\n<p>Adds a vertex to the polygon.<\/p>\nremoveVertex\n<p>Removes a vertex from the polygon.<\/p>\nmoveVertex\n<p>Moves a vertex of the polygon to a new absolute position.<\/p>\nreplaceEdge\n<p>Replaces an edge of the polygon.<\/p>\nadvanceEdge\n<p>Advances an edge in its normal direction of a quantity equal to  step , if  extend  has\nmodified the growth direction of the edge so as to follow an oblique obstacle (advanced case),\nthe modified growth direction is used.\nThe polygon is prevented from growing out of the environment's boundaries, but not from\nintersecting obstacles.<\/p>\nextend\n<p>Extends the polygon in each direction of a quantity equal to  step .\nThe advancement of an edge is blocked if an obstacle is intersected, unless in a\nparticular case called advanced case. Such case shows up when a single vertex of\nthe polygon intruded an obstacle, but no vertex from the obstacle intruded the polygon.\nPlus, the intruded side of the obstacle should be oblique (or better, its slope should\nbe different from the one of the advancing edge).\nWhen this happens, we can do a simple operation in order to keep growing and allow a\nhigher coverage of the walkable area. We increment the order of the polygon (by adding\na vertex) and adjust the direction of growth in order for the new edge to follow the\nside of the obstacle.<\/p>\nequals\n\nhashCode\n\n"
                                  }]
                                }},
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/navigator",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/navigator"
                                  },
                                  "description": "",
                                  "title": "it.unibo.alchemist.model.implementations.geometry.euclidean2d.navigator",
                                  "content": "<p>ExtendableConvexPolygonInEnvironment<\/p>\n<p>An  ExtendableConvexPolygon  located inside an environment with obstacles.\nObstacles, as well as the environment's boundaries, are taken into account when the polygon is\nextended (i.e. the polygon is prevented from intersecting an obstacle or growing beyond such\nboundaries).\nA rectangular region is assumed, its origin, width and height are to be specified. Both\n<a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>s and  ConvexPolygon s can be specified as obstacles (see awtObstacles\nand  polygonalObstacles ).\nThis class is explicitly designed for the algorithm contained in  generateNavigationGraph .\nTODO(improve the quality of this class)<\/p>\ngenerateNavigationGraph\n<p>TODO(improve the quality of this algorithm)\nNaviGator (Navigation Graphs Generator) is an algorithm capable of generating an\n Euclidean2DNavigationGraph  of a given environment with obstacles. The nodes of\nthe produced graph are convex polygons representing the areas of the environment\ntraversable by agents (namely, walkable areas), whereas edges represent connections\nbetween them.<\/p><p>NaviGator works with rectangular-shaped bidimensional environments with euclidean\ngeometry and double precision coordinates. Note that this algorithm:<\/p><ul><li>does not guarantee the coverage of 100% of the walkable area.<\/li><li>is only capable to deal with convex polygonal obstacles (concave ones can be\ndecomposed into convex meshes, whereas for curves bounding boxes can be used).<\/li><li>is only capable to detect axis-aligned crossings.<\/li><li>can take a significant amount of time to generate a navigation graph.<\/li><\/ul><p>Here's a brief description of how the algorithm operates:\nFirstly, a certain number of seeds is planted in the environment. Each seed is a\nsquare-shaped region of unitary side that will grow maintaining a convex shape.\nSecondly, planted seeds are extended until possible (i.e. until they are in contact\nwith an obstacle or another seed on each side). Finally, crossings are found between\nthe grown seeds.<\/p>\n"
                                }]
                              },
                              "ellipse": {
                                "ownKey": "ellipse",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/ellipse",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/ellipse"
                                  },
                                  "description": "",
                                  "title": "Ellipse",
                                  "content": "<p>Adapter of <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Ellipse2D.html\">java.awt.geom.Ellipse2D<\/a> to  Euclidean2DConvexShape .<\/p>centroid\n<p>The geometric center.<\/p>\ndiameter\n<p>The largest distance between any pair of vertices.<\/p>\n<init>\n<p>Adapter of <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Ellipse2D.html\">java.awt.geom.Ellipse2D<\/a> to  Euclidean2DConvexShape .<\/p>\nintersects\n<p>A shape intersects another if any of its points is contained in the other one.<\/p>\ncontains\n<p>Check if the shape contains a vector.<\/p>\ntransformed\n<p>Transforms the shape.<\/p>\nasAwtShape\n\n"
                                }]
                              },
                              "influencesphere2d": {
                                "ownKey": "influencesphere2d",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/influencesphere2d",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/influencesphere2d"
                                  },
                                  "description": "",
                                  "title": "InfluenceSphere2D",
                                  "content": "<p>A sphere of influence in the Euclidean world.<\/p><init>\n<p>A sphere of influence in the Euclidean world.<\/p>\ninfluentialNodes\n<p>The list of nodes relevant for this sphere of influence.<\/p>\n"
                                }]
                              },
                              "awtmutableconvexpolygon": {
                                "ownKey": "awtmutableconvexpolygon",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/awtmutableconvexpolygon",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/awtmutableconvexpolygon"
                                  },
                                  "description": "",
                                  "title": "AwtMutableConvexPolygon",
                                  "content": "<p> MutableConvexPolygon  partly delegated to AwtEuclidean2DShape and java.awt.geom.\nEach modification operation on this object has a time complexity of O(n), where n is\nthe number of vertices/edges.\nCollinear points are allowed.<\/p>diameter\n<p>The largest distance between any pair of vertices.<\/p>\ncentroid\n<p>The geometric center.<\/p>\n<init>\n<p> MutableConvexPolygon  partly delegated to AwtEuclidean2DShape and java.awt.geom.\nEach modification operation on this object has a time complexity of O(n), where n is\nthe number of vertices/edges.\nCollinear points are allowed.<\/p>\nvertices\n\ngetEdge\n\nedges\n\naddVertex\n<p>Adds a vertex to the polygon.<\/p>\nremoveVertex\n<p>Removes a vertex from the polygon.<\/p>\nmoveVertex\n<p>Moves a vertex of the polygon to a new absolute position.<\/p>\nreplaceEdge\n<p>Replaces an edge of the polygon.<\/p>\ncontains\n<p>Delegated to AwtEuclidean2DShape (adopts the definition of insideness used by\n<a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>s).<\/p>\nintersects\n<p>Delegated to <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Area.html\">java.awt.geom.Area<\/a>, this is accurate and does not consider adjacent\nshapes to be intersecting.<\/p>\nintersects\n<p>Delegated to AwtEuclidean2DShape unless  other  is  AwtShapeCompatible , in which case\n intersects  is used so as to guarantee maximum accuracy.<\/p>\ntransformed\n<p>Transforms the shape.<\/p>\nasAwtShape\n\nequals\n\nhashCode\n\n"
                                }]
                              },
                              "fieldofview2d": {
                                "ownKey": "fieldofview2d",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/fieldofview2d",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/fieldofview2d"
                                  },
                                  "description": "",
                                  "title": "FieldOfView2D",
                                  "content": "<p>A sphere of influence representing the sight of a node in the Euclidean world.<\/p><init>\n<p>A sphere of influence representing the sight of a node in the Euclidean world.<\/p>\n"
                                }]
                              },
                              "abstractconvexpolygon": {
                                "ownKey": "abstractconvexpolygon",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/abstractconvexpolygon",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/abstractconvexpolygon"
                                  },
                                  "description": "",
                                  "title": "AbstractConvexPolygon",
                                  "content": "<p>An abstract  ConvexPolygon  providing a convexity test.<\/p><init>\n<p>An abstract  ConvexPolygon  providing a convexity test.<\/p>\nliesOnBoundary\n<p>Checks if a vector (= a point) lies on the polygon's boundary.<\/p>\ncontainsBoundaryIncluded\n<p>Checks if a vector (= a point) is contained in the polygon or lies on its boundary.<\/p>\ncontainsBoundaryExcluded\n<p>Checks if a vector (= a point) is contained in the polygon, boundary excluded.<\/p>\ncontains\n<p>Checks if the polygon contains a polygonal <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a> (i.e. without curved\nsegments). A polygonal shape is contained in a polygon if all of its points are\ncontained in (or lie on the boundary of) the latter.<\/p>\nisAdjacentTo\n<p>A polygon is adjacent to another if any of its points lies on the boundary of the other.<\/p>\nintersects\n<p>Checks if a segment intersects with the polygon, segments lying on the polygon's\nboundary are not considered to be intersecting.<\/p>\nclosestEdgeTo\n<p>Finds the edge of the polygon closest to the provided  segment , i.e. the first one\nthat would collide (= intersect) with the segment in case the polygon extended on\neach side.<\/p>\ntoString\n\ncircularPrevious\n<p>Finds the previous index with the respect to the given  index , restarting from the end if necessary.<\/p>\ncircularNext\n<p>Finds the next index with respect to the given  index , restarting from the beginning if necessary.<\/p>\nisConvex\n<p>Checks if the polygon is convex (see  ConvexPolygon ).\nIn order to be convex, a polygon must first be simple (not self-intersecting).\nAscertained that the polygon is simple, a rather easy convexity test consists\nin checking that every edge turns in the same direction (either left or right)\nwith respect to the previous one. If they all turn in the same direction, then\nthe polygon is convex. That is the definition of convexity of a polygon's boundary\nin this context.<\/p>\nisConvex\n<p>Checks if the polygon is convex, assuming that every edge apart from the specified\nones does not cause self-intersection.<\/p>\n"
                                }]
                              },
                              "graph": {
                                "ownKey": "graph",
                                "childrenPages": {
                                  "basenavigationgraph": {
                                    "ownKey": "basenavigationgraph",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/basenavigationgraph",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/basenavigationgraph"
                                      },
                                      "description": "",
                                      "title": "BaseNavigationGraph",
                                      "content": "<p>An implementation of  NavigationGraph , deriving from <a href=\"#\">AbstractBaseGraph<\/a>.\nThe user can specify the <a href=\"#\">GraphType<\/a> so as to obtain a custom graph (e.g. weighted or not,\ndirected or undirected, etc). <a href=\"#\">AbstractBaseGraph<\/a> guarantees deterministic ordering for\nthe collection it maintains, as stated in its api documentation.\nNote that vertices and edges are used as keys inside <a href=\"#\">AbstractBaseGraph<\/a>, so when choosing\ntheir types, you must follow these rules:<\/p><ul><li>You must follow the contract defined in java.lang.Object for both equals and hashCode.<\/li><li>In particular, if you override either equals or hashCode, you must override them both.<\/li><li>Your implementation for hashCode must produce a value which does not change over the\nlifetime of the object.\nFurther information available <a href=\"https://jgrapht.org/guide/VertexAndEdgeTypes\">here<\/a>.<\/li><\/ul><init>\n\n<init>\n<p>An implementation of  NavigationGraph , deriving from <a href=\"#\">AbstractBaseGraph<\/a>.\nThe user can specify the <a href=\"#\">GraphType<\/a> so as to obtain a custom graph (e.g. weighted or not,\ndirected or undirected, etc). <a href=\"#\">AbstractBaseGraph<\/a> guarantees deterministic ordering for\nthe collection it maintains, as stated in its api documentation.\nNote that vertices and edges are used as keys inside <a href=\"#\">AbstractBaseGraph<\/a>, so when choosing\ntheir types, you must follow these rules:<\/p><ul><li>You must follow the contract defined in java.lang.Object for both equals and hashCode.<\/li><li>In particular, if you override either equals or hashCode, you must override them both.<\/li><li>Your implementation for hashCode must produce a value which does not change over the\nlifetime of the object.\nFurther information available <a href=\"https://jgrapht.org/guide/VertexAndEdgeTypes\">here<\/a>.<\/li><\/ul>\n"
                                    }]
                                  },
                                  "directedeuclidean2dnavigationgraph": {
                                    "ownKey": "directedeuclidean2dnavigationgraph",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/directedeuclidean2dnavigationgraph",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/directedeuclidean2dnavigationgraph"
                                      },
                                      "description": "",
                                      "title": "DirectedEuclidean2DNavigationGraph",
                                      "content": "<p>A directed  Euclidean2DNavigationGraph .<\/p>\n"
                                    }]
                                  },
                                  "undirectednavigationgraph": {
                                    "ownKey": "undirectednavigationgraph",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/undirectednavigationgraph",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/undirectednavigationgraph"
                                      },
                                      "description": "",
                                      "title": "UndirectedNavigationGraph",
                                      "content": "<p>An undirected unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p><init>\n<p>An undirected unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p>\n"
                                    }]
                                  },
                                  "directednavigationgraph": {
                                    "ownKey": "directednavigationgraph",
                                    "ownPages": [{
                                      "reference": {
                                        "path": "kotlindoc",
                                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                                        "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/directednavigationgraph",
                                        "extension": "html",
                                        "usePrettyUrl": true,
                                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph/directednavigationgraph"
                                      },
                                      "description": "",
                                      "title": "DirectedNavigationGraph",
                                      "content": "<p>A directed unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p><init>\n<p>A directed unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p>\n"
                                    }]
                                  }
                                },
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d/graph"
                                  },
                                  "description": "",
                                  "title": "it.unibo.alchemist.model.implementations.geometry.euclidean2d.graph",
                                  "content": "<p>BaseNavigationGraph<\/p>\n<p>An implementation of  NavigationGraph , deriving from <a href=\"#\">AbstractBaseGraph<\/a>.\nThe user can specify the <a href=\"#\">GraphType<\/a> so as to obtain a custom graph (e.g. weighted or not,\ndirected or undirected, etc). <a href=\"#\">AbstractBaseGraph<\/a> guarantees deterministic ordering for\nthe collection it maintains, as stated in its api documentation.\nNote that vertices and edges are used as keys inside <a href=\"#\">AbstractBaseGraph<\/a>, so when choosing\ntheir types, you must follow these rules:<\/p><ul><li>You must follow the contract defined in java.lang.Object for both equals and hashCode.<\/li><li>In particular, if you override either equals or hashCode, you must override them both.<\/li><li>Your implementation for hashCode must produce a value which does not change over the\nlifetime of the object.\nFurther information available <a href=\"https://jgrapht.org/guide/VertexAndEdgeTypes\">here<\/a>.<\/li><\/ul>\nDirectedNavigationGraph\n<p>A directed unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p>\nUndirectedNavigationGraph\n<p>An undirected unweighted  NavigationGraph , allowing multiple edges between the\nsame pair of vertices and without self-loops (i.e. edges connecting a node to\nitself).<\/p>\nDirectedEuclidean2DNavigationGraph\n<p>A directed  Euclidean2DNavigationGraph .<\/p>\nDirectedEuclidean2DNavigationGraph\n<p>A directed  Euclidean2DNavigationGraph .<\/p>\npathExists\n<p>Checks whether a path exists between  source  and  sink .\n<a href=\"#\">DijkstraShortestPath<\/a> is used instead of <a href=\"#\">org.jgrapht.alg.connectivity.ConnectivityInspector.pathExists<\/a>,\nbecause, in case of directed graph, the latter checks whether the given vertices lay in the same weakly\nconnected component, which is not the desired behavior.\nAs unweighted graphs have a default edge weight of 1.0, shortest path algorithms can always be applied\nmeaningfully.<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/geometry/euclidean2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/euclidean2d"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.implementations.geometry.euclidean2d",
                              "content": "<p>AbstractConvexPolygon<\/p>\n<p>An abstract  ConvexPolygon  providing a convexity test.<\/p>\nAwtMutableConvexPolygon\n<p> MutableConvexPolygon  partly delegated to AwtEuclidean2DShape and java.awt.geom.\nEach modification operation on this object has a time complexity of O(n), where n is\nthe number of vertices/edges.\nCollinear points are allowed.<\/p>\nAwtShapeExtension\n<p>Collection of extensions to Java AWT meant to simplify its usage as geometric engine.<\/p>\nEllipse\n<p>Adapter of <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/geom/Ellipse2D.html\">java.awt.geom.Ellipse2D<\/a> to  Euclidean2DConvexShape .<\/p>\nFieldOfView2D\n<p>A sphere of influence representing the sight of a node in the Euclidean world.<\/p>\nInfluenceSphere2D\n<p>A sphere of influence in the Euclidean world.<\/p>\nSegment2DImpl\n<p>Implementation of a  Segment2D .<\/p>\nSlopeInterceptLine2D\n<p>A  Line2D  represented in the slope-intercept form: y =  slope  * x +  yIntercept . Doubles are only compared with\n<a href=\"#\">MathUtils.fuzzyEquals<\/a>.<\/p>\nit.unibo.alchemist.model.implementations.geometry.euclidean2d.graph\n<p>it.unibo.alchemist.model.implementations.geometry.euclidean2d.navigator<\/p>\n"
                            }]
                          },
                          "adimensionalshape": {
                            "ownKey": "adimensionalshape",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/geometry/adimensionalshape",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/adimensionalshape"
                              },
                              "description": "",
                              "title": "AdimensionalShape",
                              "content": "<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.\nIt also ignores any transformation.<\/p>diameter\n<p>The largest distance between any pair of vertices.<\/p>\ncentroid\n<p>The geometric center.<\/p>\n<init>\n<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.\nIt also ignores any transformation.<\/p>\nintersects\n<p>A shape intersects another if any of its points is contained in the other one.<\/p>\ncontains\n<p>Check if the shape contains a vector.<\/p>\ntransformed\n<p>Any transformation is ignored.<\/p>\n"
                            }]
                          },
                          "awtshapecompatible": {
                            "ownKey": "awtshapecompatible",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/geometry/awtshapecompatible",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/awtshapecompatible"
                              },
                              "description": "",
                              "title": "AwtShapeCompatible",
                              "content": "<p>Anything which can be represented as a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>.<\/p>asAwtShape\n"
                            }]
                          },
                          "abstractshapefactory": {
                            "ownKey": "abstractshapefactory",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/geometry/abstractshapefactory",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry/abstractshapefactory"
                              },
                              "description": "",
                              "title": "AbstractShapeFactory",
                              "content": "<p>Base class for  GeometricTransformation  providing a standard implementation for\n GeometricShapeFactory.adimensional .<\/p>origin\n<p>The default origin for the shapes.<\/p>\n<init>\n<p>Base class for  GeometricTransformation  providing a standard implementation for\n GeometricShapeFactory.adimensional .<\/p>\nadimensional\n<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/geometry",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/geometry"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.geometry",
                          "content": "<p>AbstractShapeFactory<\/p>\n<p>Base class for  GeometricTransformation  providing a standard implementation for\n GeometricShapeFactory.adimensional .<\/p>\nAwtShapeCompatible\n<p>Anything which can be represented as a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html\">java.awt.Shape<\/a>.<\/p>\nAdimensionalShape\n<p>A special shape which does not occupy space and does not intersect with any other, not even with itself.\nIt also ignores any transformation.<\/p>\nit.unibo.alchemist.model.implementations.geometry.euclidean2d\n"
                        }]
                      },
                      "reactions": {
                        "ownKey": "reactions",
                        "childrenPages": {
                          "saperegradient": {
                            "ownKey": "saperegradient",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/saperegradient",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/saperegradient"
                              },
                              "description": "",
                              "title": "SAPEREGradient",
                              "content": "<p>This class provides a fast and stable gradient implementation, inspired on the NBR construct used in Proto.<\/p><init>\n<p>Builds a new SAPERE Gradient.<\/p>\n<init>\n<p>Builds a new SAPERE Gradient. This constructor is slower, and is provided for compatibility with the YAML-based Alchemist loader. It should be avoided when possible, by relying on the other constructor instead.<\/p>\ngetConditions\n\ngetLsaNode\n\nupdateInternalStatus\n\ncanExecute\n\ncloneOnNewNode\n\nexecute\n\ngetActions\n\ngetRate\n\n"
                            }]
                          },
                          "navigationprioritisedsteering": {
                            "ownKey": "navigationprioritisedsteering",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/navigationprioritisedsteering",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/navigationprioritisedsteering"
                              },
                              "description": "",
                              "title": "NavigationPrioritisedSteering",
                              "content": "<p>A  SteeringBehavior  using  SinglePrevalent  steering strategy and accepting a collection of actions\ncontaining a single  NavigationAction2D , which is used as the prevalent one.<\/p><init>\n<p>A  SteeringBehavior  using  SinglePrevalent  steering strategy and accepting a collection of actions\ncontaining a single  NavigationAction2D , which is used as the prevalent one.<\/p>\n"
                            }]
                          },
                          "saperereaction": {
                            "ownKey": "saperereaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/saperereaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/saperereaction"
                              },
                              "description": "",
                              "title": "SAPEREReaction",
                              "content": "<p>This class realizes a reaction with Lsa concentrations.<\/p><init>\n\nsetValidNodes\n\nsetTotalPropensity\n\nsetPropensities\n\ngetSAPEREActions\n\ngetPossibleMatches\n\ngetLsaNode\n\nupdateInternalStatus\n\ngetTotalPropensity\n\ngetPropensities\n\ncloneOnNewNode\n\nexecute\n\ngetEnvironment\n\ngetPossibleRemove\n\ngetValidNodes\n\ngetSAPEREConditions\n\nsetConditions\n\nsetPossibleMatches\n\ngetRate\n\nsetActions\n\ngetRateAsString\n\nsetPossibleRemove\n\n"
                            }]
                          },
                          "steeringbehavior": {
                            "ownKey": "steeringbehavior",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/steeringbehavior",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/steeringbehavior"
                              },
                              "description": "",
                              "title": "SteeringBehavior",
                              "content": "<p>Reaction representing the steering behavior of a pedestrian.<\/p>steerStrategy\n<pre><code>    the strategy used to combine steering actions.<\/code><\/pre>\n<init>\n<p>Reaction representing the steering behavior of a pedestrian.<\/p>\nsteerActions\n<p>The list of steering actions in this reaction.<\/p>\ncloneOnNewNode\n\ngetRate\n\nupdateInternalStatus\n\nexecute\n\n"
                            }]
                          },
                          "abstractreaction": {
                            "ownKey": "abstractreaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/abstractreaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/abstractreaction"
                              },
                              "description": "",
                              "title": "AbstractReaction",
                              "content": "<p>The type which describes the concentration of a molecule This class offers a partial implementation of Reaction. In particular, it allows to write new reaction specifying only which distribution time to adopt<\/p><init>\n<p>Builds a new reaction, starting at time t.<\/p>\ninitializationComplete\n\ngetOutputContext\n\ngetOutboundDependencies\n\ngetConditions\n<p>Override only if you need to implement extremely tricky behaviours. Must be overridden along with <code> #setConditions(List) <\/code>.<\/p>\ngetReactionName\n<p>This method is used to provide a reaction name in toString().<\/p>\ngetTau\n\nsetOutputContext\n<p>Used by subclasses to set their output context.<\/p>\nupdate\n\nupdateInternalStatus\n<p>This method gets called as soon as <code> #update(Time, boolean, Environment) <\/code> is called. It is useful to update the internal status of the reaction.<\/p>\ncanExecute\n<p>The default implementation verifies if all the conditions are valid.<\/p>\ngetNode\n\ngetInboundDependencies\n\naddOutboundDependency\n<p>Allows subclasses to add influenced molecules.<\/p>\nhashCode\n\nequals\n\ntoString\n\ncompareTo\n\nsetInputContext\n<p>Used by subclasses to set their input context.<\/p>\nexecute\n<p>The default execution iterates all the actions in order and executes them. Override to change the behaviour.<\/p>\nmakeClone\n<p>This method provides facility to clone reactions. Given a constructor in form of a <code>Supplier<\/code>, it populates the actions and conditions with cloned version of the ones registered in this reaction.<\/p>\naddInboundDependency\n<p>Allows subclasses to add influencing molecules.<\/p>\ngetTimeDistribution\n\ngetInputContext\n\nsetConditions\n<p>This should get overridden only if very tricky behaviours are implemented, such that the default Alchemist condition addition model is no longer usable. Must be overridden along with <code> #getConditions() <\/code>.<\/p>\ngetActions\n<p>Override only if you need to implement extremely tricky behaviours. Must be overridden along with <code> #setActions(List) <\/code>.<\/p>\nsetActions\n<p>This should get overridden only if very tricky behaviours are implemented, such that the default Alchemist action addition model is no longer usable. Must be overridden along with <code> #getActions() <\/code>.<\/p>\ngetRateAsString\n\n"
                            }]
                          },
                          "blendedsteeringwithphysics": {
                            "ownKey": "blendedsteeringwithphysics",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/blendedsteeringwithphysics",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/blendedsteeringwithphysics"
                              },
                              "description": "",
                              "title": "BlendedSteeringWithPhysics",
                              "content": "<p> BlendedSteering  strategy for physical pedestrians, taking into account physical forces as well.  Sum  strategy\nis used to combine steering actions and physical forces.<\/p>steerStrategy\n<pre><code>    the strategy used to combine steering actions.<\/code><\/pre>\n<init>\n<p> BlendedSteering  strategy for physical pedestrians, taking into account physical forces as well.  Sum  strategy\nis used to combine steering actions and physical forces.<\/p>\n"
                            }]
                          },
                          "navigationprioritisedsteeringwithphysics": {
                            "ownKey": "navigationprioritisedsteeringwithphysics",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/navigationprioritisedsteeringwithphysics",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/navigationprioritisedsteeringwithphysics"
                              },
                              "description": "",
                              "title": "NavigationPrioritisedSteeringWithPhysics",
                              "content": "<p> NavigationPrioritisedSteering  strategy for physical pedestrians, taking into account physical forces as well.\n Sum  strategy is used to combine steering actions and physical forces.<\/p>steerStrategy\n<pre><code>    the strategy used to combine steering actions.<\/code><\/pre>\n<init>\n<p> NavigationPrioritisedSteering  strategy for physical pedestrians, taking into account physical forces as well.\n Sum  strategy is used to combine steering actions and physical forces.<\/p>\n"
                            }]
                          },
                          "blendedsteering": {
                            "ownKey": "blendedsteering",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/blendedsteering",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/blendedsteering"
                              },
                              "description": "",
                              "title": "BlendedSteering",
                              "content": "<p>Steering behavior using  DistanceWeighted  steering strategy (= steering actions are summed with different\nweights depending on the distance to their target).<\/p><init>\n<p>Steering behavior using  DistanceWeighted  steering strategy (= steering actions are summed with different\nweights depending on the distance to their target).<\/p>\n"
                            }]
                          },
                          "cognitivebehavior": {
                            "ownKey": "cognitivebehavior",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/cognitivebehavior",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/cognitivebehavior"
                              },
                              "description": "",
                              "title": "CognitiveBehavior",
                              "content": "<p>Reaction representing the cognitive behavior of a pedestrian.<\/p><init>\n<p>Reaction representing the cognitive behavior of a pedestrian.<\/p>\ncloneOnNewNode\n\ngetRate\n\nupdateInternalStatus\n\n"
                            }]
                          },
                          "chemicalreaction": {
                            "ownKey": "chemicalreaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/chemicalreaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/chemicalreaction"
                              },
                              "description": "",
                              "title": "ChemicalReaction",
                              "content": "<p><init><\/p>\n<p>initializationComplete<\/p>\n<p>updateInternalStatus<\/p>\n<p>Subclasses must call super.updateInternalStatus for the rate to get updated in case of method override.<\/p>\ncloneOnNewNode\n<p>This method allows to clone this reaction on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetRate\n"
                            }]
                          },
                          "prioritysteering": {
                            "ownKey": "prioritysteering",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/prioritysteering",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/prioritysteering"
                              },
                              "description": "",
                              "title": "PrioritySteering",
                              "content": "<p>Steering behavior using  Nearest  steering strategy (= the only action executed is the one with the nearest target).<\/p><init>\n<p>Steering behavior using  Nearest  steering strategy (= the only action executed is the one with the nearest target).<\/p>\n"
                            }]
                          },
                          "biochemicalreaction": {
                            "ownKey": "biochemicalreaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/biochemicalreaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/biochemicalreaction"
                              },
                              "description": "",
                              "title": "BiochemicalReaction",
                              "content": "<p>A biochemical Reaction.<\/p><init>\n\nupdateInternalStatus\n\ncloneOnNewNode\n\nexecute\n\nsetConditions\n\n"
                            }]
                          },
                          "biochemicalreactionbuilder": {
                            "ownKey": "biochemicalreactionbuilder",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/biochemicalreactionbuilder",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/biochemicalreactionbuilder"
                              },
                              "description": "",
                              "title": "BiochemicalReactionBuilder",
                              "content": "<p>This class implements a builder for chemical reactions.<\/p><init>\n<p>Construct a builder for biochemical reactions.<\/p>\nrandomGenerator\n<p>set the random generator to the passed object.<\/p>\ntimeDistribution\n<p>Set the time distribution to the passed object.<\/p>\nprogram\n<p>Set the reaction to the passed program string.<\/p>\nbuild\n<p>Builds the chemical reaction.<\/p>\n"
                            }]
                          },
                          "event": {
                            "ownKey": "event",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/reactions/event",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/event"
                              },
                              "description": "",
                              "title": "Event",
                              "content": "<p>This reaction completely ignores the propensity conditioning of the conditions, and tries to run every time the <code> TimeDistribution <\/code> wants to.<\/p><init>\n\nupdateInternalStatus\n\ncloneOnNewNode\n\ngetRate\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/reactions",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.reactions",
                          "content": "<p>BlendedSteering<\/p>\n<p>Steering behavior using  DistanceWeighted  steering strategy (= steering actions are summed with different\nweights depending on the distance to their target).<\/p>\nCognitiveBehavior\n<p>Reaction representing the cognitive behavior of a pedestrian.<\/p>\nNavigationPrioritisedSteering\n<p>A  SteeringBehavior  using  SinglePrevalent  steering strategy and accepting a collection of actions\ncontaining a single  NavigationAction2D , which is used as the prevalent one.<\/p>\nPrioritySteering\n<p>Steering behavior using  Nearest  steering strategy (= the only action executed is the one with the nearest target).<\/p>\nSteeringBehavior\n<p>Reaction representing the steering behavior of a pedestrian.<\/p>\nBlendedSteeringWithPhysics\n<p> BlendedSteering  strategy for physical pedestrians, taking into account physical forces as well.  Sum  strategy\nis used to combine steering actions and physical forces.<\/p>\nNavigationPrioritisedSteeringWithPhysics\n<p> NavigationPrioritisedSteering  strategy for physical pedestrians, taking into account physical forces as well.\n Sum  strategy is used to combine steering actions and physical forces.<\/p>\nAbstractReaction\n<p>The type which describes the concentration of a molecule This class offers a partial implementation of Reaction. In particular, it allows to write new reaction specifying only which distribution time to adopt<\/p>\nEvent\n<p>This reaction completely ignores the propensity conditioning of the conditions, and tries to run every time the <code> TimeDistribution <\/code> wants to.<\/p>\nChemicalReaction\n<p>BiochemicalReaction<\/p>\n<p>A biochemical Reaction.<\/p>\nBiochemicalReactionBuilder\n<p>This class implements a builder for chemical reactions.<\/p>\nSAPEREGradient\n<p>This class provides a fast and stable gradient implementation, inspired on the NBR construct used in Proto.<\/p>\nSAPEREReaction\n<p>This class realizes a reaction with Lsa concentrations.<\/p>\n"
                        }]
                      },
                      "conditions": {
                        "ownKey": "conditions",
                        "childrenPages": {
                          "junctionpresentincell": {
                            "ownKey": "junctionpresentincell",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/junctionpresentincell",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/junctionpresentincell"
                              },
                              "description": "",
                              "title": "JunctionPresentInCell",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>getNeighborPropensity<\/p>\n<p>toString<\/p>\n<p>getNode<\/p>\n<p>isValid<\/p>\n"
                            }]
                          },
                          "genericmoleculeunderlevel": {
                            "ownKey": "genericmoleculeunderlevel",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/genericmoleculeunderlevel",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/genericmoleculeunderlevel"
                              },
                              "description": "",
                              "title": "GenericMoleculeUnderLevel",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>getPropensityContribution<\/p>\n<p>isValid<\/p>\n"
                            }]
                          },
                          "wanttoescape": {
                            "ownKey": "wanttoescape",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/wanttoescape",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/wanttoescape"
                              },
                              "description": "",
                              "title": "WantToEscape",
                              "content": "<p>The intention of the pedestrian to evacuate or not.<\/p><init>\n<p>The intention of the pedestrian to evacuate or not.<\/p>\ngetContext\n\ngetPropensityContribution\n\nisValid\n\n"
                            }]
                          },
                          "biomolpresentincell": {
                            "ownKey": "biomolpresentincell",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/biomolpresentincell",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/biomolpresentincell"
                              },
                              "description": "",
                              "title": "BiomolPresentInCell",
                              "content": "<p><init><\/p>\n"
                            }]
                          },
                          "nootherreactioncanexecute": {
                            "ownKey": "nootherreactioncanexecute",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/nootherreactioncanexecute",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/nootherreactioncanexecute"
                              },
                              "description": "",
                              "title": "NoOtherReactionCanExecute",
                              "content": "<p>The condition is valid if all the other reactions having at least one condition can not execute.\nThis condition can be used only in a single reaction per node,\nas multiple instances would lead to undecidable situations.<\/p><init>\n<p>The condition is valid if all the other reactions having at least one condition can not execute.\nThis condition can be used only in a single reaction per node,\nas multiple instances would lead to undecidable situations.<\/p>\ncloneCondition\n\ngetContext\n\ngetPropensityContribution\n\nisValid\n\n"
                            }]
                          },
                          "concentrationchanged": {
                            "ownKey": "concentrationchanged",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/concentrationchanged",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/concentrationchanged"
                              },
                              "description": "",
                              "title": "ConcentrationChanged",
                              "content": "<p>A condition that holds true only if the tracked <code> Molecule <\/code> changed its <code> it.unibo.alchemist.model.interfaces.Concentration <\/code>.<\/p><init>\n\ncloneCondition\n\ntoString\n\ngetPropensityContribution\n\nisValid\n\ngetContext\n\n"
                            }]
                          },
                          "neighborhoodpresent": {
                            "ownKey": "neighborhoodpresent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/neighborhoodpresent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/neighborhoodpresent"
                              },
                              "description": "",
                              "title": "NeighborhoodPresent",
                              "content": "<p>A condition is valid if the node has a neighborhood, formally if the node has at least one node connected by a linking rule.<\/p><init>\n<p>Create the condition.<\/p>\ncloneCondition\n\ngetNeighborPropensity\n\ntoString\n\nisValid\n\n"
                            }]
                          },
                          "biomolpresentinneighbor": {
                            "ownKey": "biomolpresentinneighbor",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/biomolpresentinneighbor",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/biomolpresentinneighbor"
                              },
                              "description": "",
                              "title": "BiomolPresentInNeighbor",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>getNeighborPropensity<\/p>\n<p>toString<\/p>\n<p>isValid<\/p>\n"
                            }]
                          },
                          "lsaneighborhoodcondition": {
                            "ownKey": "lsaneighborhoodcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/lsaneighborhoodcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/lsaneighborhoodcondition"
                              },
                              "description": "",
                              "title": "LsaNeighborhoodCondition",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>toString<\/p>\n<p>getContext<\/p>\n<p>getEnvironment<\/p>\n<p>filter<\/p>\n"
                            }]
                          },
                          "biomolpresentinenv": {
                            "ownKey": "biomolpresentinenv",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/biomolpresentinenv",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/biomolpresentinenv"
                              },
                              "description": "",
                              "title": "BiomolPresentInEnv",
                              "content": "<p><init><\/p>\n<p>Initialize condition for extra-cellular environment, implemented as a set of <code> EnvironmentNode <\/code>.<\/p>\ncloneCondition\n<p>getPropensityContribution<\/p>\n<p>getContext<\/p>\n<p>getEnviromentNodesSurrounding<\/p>\n<p>isValid<\/p>\n"
                            }]
                          },
                          "computationalroundcomplete": {
                            "ownKey": "computationalroundcomplete",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/computationalroundcomplete",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/computationalroundcomplete"
                              },
                              "description": "",
                              "title": "ComputationalRoundComplete",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>toString<\/p>\n<p>getNode<\/p>\n<p>getPropensityContribution<\/p>\n<p>isValid<\/p>\n<p>getProgram<\/p>\n<p>getContext<\/p>\n"
                            }]
                          },
                          "abstractcondition": {
                            "ownKey": "abstractcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/abstractcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/abstractcondition"
                              },
                              "description": "",
                              "title": "AbstractCondition",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis. How to override: create a new action of your concrete subtype.<\/p>\ndeclareDependencyOn\n<p>toString<\/p>\n<p>getNode<\/p>\n<p>Override if your <code> Condition <\/code> can return a more specific type of node. The typical way is to cast the call to super.getNode().<\/p>\ngetInboundDependencies\n<p>How to override: if you intend your condition to be potentially changed by any change in the context, return null.<\/p>\n"
                            }]
                          },
                          "moleculehasconcentration": {
                            "ownKey": "moleculehasconcentration",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/moleculehasconcentration",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/moleculehasconcentration"
                              },
                              "description": "",
                              "title": "MoleculeHasConcentration",
                              "content": "<p>A condition that is valid iff a molecule has exactly the desired concentration.<\/p><init>\n\ncloneCondition\n\ntoString\n\ngetPropensityContribution\n\nisValid\n\ngetContext\n\n"
                            }]
                          },
                          "genericmoleculepresent": {
                            "ownKey": "genericmoleculepresent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/genericmoleculepresent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/genericmoleculepresent"
                              },
                              "description": "",
                              "title": "GenericMoleculePresent",
                              "content": "<p>This class implements a condition which checks if a molecule is present or not.<\/p><init>\n<p>Builds a new condition, which checks if the molecule exists or not inside the node n.<\/p>\ncloneCondition\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis. How to override: create a new action of your concrete subtype.<\/p>\ntoString\n\ngetPropensityContribution\n<p>Propensity influence is computed through the binomial coefficient. See Bernardo, Degano, Zavattaro - Formal Methods for Computational Systems Biology for the formulae.<\/p>\ngetContext\n\ngetQuantity\n<p>Allows to access the threshold.<\/p>\ngetMolecule\n<p>Allows to access the molecule.<\/p>\nisValid\n\n"
                            }]
                          },
                          "lsastandardcondition": {
                            "ownKey": "lsastandardcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/lsastandardcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/lsastandardcondition"
                              },
                              "description": "",
                              "title": "LsaStandardCondition",
                              "content": "<p>simple LSA-condition (example: <grad,X,1>). Search an instance of a template in a node. The LSAMolecule matched, if exist, will not be deleted from the node Lsa-space . It can be deleted from the reaction, if necessary.<\/p><init>\n<p>Builds an LsaStandardCondition.<\/p>\ncloneCondition\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis. How to override: create a new action of your concrete subtype.<\/p>\nmakeValid\n<p>Allows to set the validity value for this condition by subclasses. Handle with care.<\/p>\ntoString\n\ngetPropensityContribution\n\ngetContext\n\ngetMolecule\n\nfilter\n<p>When this method is called, the condition must filter the current matches and allowed nodes.<\/p>\nisValid\n\n"
                            }]
                          },
                          "lsaabstractcondition": {
                            "ownKey": "lsaabstractcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/lsaabstractcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/lsaabstractcondition"
                              },
                              "description": "",
                              "title": "LsaAbstractCondition",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>toString<\/p>\n<p>getNode<\/p>\n<p>calculateMatches<\/p>\n<p>createMatches<\/p>\n<p>updateMap<\/p>\n<p>Updates the matches map by adding the mapping between the variables of template and the contents of instance.<\/p>\nincorporateNewMatches\n<p>incorporateNewMatches<\/p>\n<p>This has to be used to incorporate new matches when the they are node-specific and available for multiple nodes.<\/p>\n"
                            }]
                          },
                          "containsmolecule": {
                            "ownKey": "containsmolecule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/containsmolecule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/containsmolecule"
                              },
                              "description": "",
                              "title": "ContainsMolecule",
                              "content": "<p>The condition is valid if the node contains the molecule.<\/p><init>\n<p>The condition is valid if the node contains the molecule.<\/p>\ngetContext\n\ngetPropensityContribution\n\nisValid\n\n"
                            }]
                          },
                          "abstractneighborcondition": {
                            "ownKey": "abstractneighborcondition",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/abstractneighborcondition",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/abstractneighborcondition"
                              },
                              "description": "",
                              "title": "AbstractNeighborCondition",
                              "content": "<p>Represents a condition on a neighbor. Formally this conditions is satisfied if at least one neighbor satisfy the condition.<\/p><init>\n\ncloneCondition\n\ngetNeighborPropensity\n<p>Given a node, which is supposed to be in the neighborhood of the current node, the function computes a double value representing the propensity of the neighbor to be the chosen one for the reaction to be executed. The value returned must be 0 if the neighbor is not eligible for the reaction due to this condition. This value could be used to compute the reaction's propensity, but the main usage is to give a rate to every neighbor and randomly choose one of them.<\/p>\ngetPropensityContribution\n<p>Override if desired behavior differs. Default is returning the sum of the neighbor's propensities<\/p>\ngetContext\n\ngetValidNeighbors\n<p>Searches in the given neighborhood which nodes satisfy the condition, and returns a list of valid neighbors. NOTE, it is NOT guaranteed that this method checks if the passed neighborhood is the actual neighborhood of the node. Make sure the passed neighborhood is up to date for avoid problems.<\/p>\ngetEnvironment\n\n"
                            }]
                          },
                          "envpresent": {
                            "ownKey": "envpresent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/envpresent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/envpresent"
                              },
                              "description": "",
                              "title": "EnvPresent",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>toString<\/p>\n<p>getPropensityContribution<\/p>\n<p>isValid<\/p>\n<p>getContext<\/p>\n"
                            }]
                          },
                          "tensionpresent": {
                            "ownKey": "tensionpresent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/conditions/tensionpresent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions/tensionpresent"
                              },
                              "description": "",
                              "title": "TensionPresent",
                              "content": "<p><init><\/p>\n<p>cloneCondition<\/p>\n<p>getPropensityContribution<\/p>\n<p>isValid<\/p>\n<p>getContext<\/p>\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/conditions",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/conditions"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.conditions",
                          "content": "<p>WantToEscape<\/p>\n<p>The intention of the pedestrian to evacuate or not.<\/p>\nContainsMolecule\n<p>The condition is valid if the node contains the molecule.<\/p>\nNoOtherReactionCanExecute\n<p>The condition is valid if all the other reactions having at least one condition can not execute.\nThis condition can be used only in a single reaction per node,\nas multiple instances would lead to undecidable situations.<\/p>\nMoleculeHasConcentration\n<p>A condition that is valid iff a molecule has exactly the desired concentration.<\/p>\nAbstractCondition\n<p>ConcentrationChanged<\/p>\n<p>A condition that holds true only if the tracked <code> Molecule <\/code> changed its <code> it.unibo.alchemist.model.interfaces.Concentration <\/code>.<\/p>\nEnvPresent\n<p>BiomolPresentInCell<\/p>\n<p>TensionPresent<\/p>\n<p>BiomolPresentInEnv<\/p>\n<p>BiomolPresentInNeighbor<\/p>\n<p>JunctionPresentInCell<\/p>\n<p>AbstractNeighborCondition<\/p>\n<p>Represents a condition on a neighbor. Formally this conditions is satisfied if at least one neighbor satisfy the condition.<\/p>\nNeighborhoodPresent\n<p>A condition is valid if the node has a neighborhood, formally if the node has at least one node connected by a linking rule.<\/p>\nGenericMoleculeUnderLevel\n<p>GenericMoleculePresent<\/p>\n<p>This class implements a condition which checks if a molecule is present or not.<\/p>\nComputationalRoundComplete\n<p>LsaAbstractCondition<\/p>\n<p>LsaNeighborhoodCondition<\/p>\n<p>LsaStandardCondition<\/p>\n<p>simple LSA-condition (example: <grad,X,1>). Search an instance of a template in a node. The LSAMolecule matched, if exist, will not be deleted from the node Lsa-space . It can be deleted from the reaction, if necessary.<\/p>\n"
                        }]
                      },
                      "actions": {
                        "ownKey": "actions",
                        "childrenPages": {
                          "removenode": {
                            "ownKey": "removenode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/removenode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/removenode"
                              },
                              "description": "",
                              "title": "RemoveNode",
                              "content": "<p>Removes the current node from the environment.<\/p><init>\n\ntoString\n\nexecute\n\ngetContext\n\ncloneAction\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetEnvironment\n\n"
                            }]
                          },
                          "abstractaction": {
                            "ownKey": "abstractaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractaction"
                              },
                              "description": "",
                              "title": "AbstractAction",
                              "content": "<p>An abstract class facility with some generic methods implemented.<\/p><init>\n<p>Call this constructor in the subclasses in order to automatically instance the node.<\/p>\nsetConcentration\n<p>Sets the concentration locally.<\/p>\ntoString\n\ngetOutboundDependencies\n<p>How to override: if you intend your action to influence any reaction with compatible context, return null.<\/p>\nnodeContains\n\ndeclareDependencyTo\n<p>Allows to add an Molecule to the set of molecules which are modified by this action. This method must be called in the constructor, and not during the execution.<\/p>\nremoveConcentration\n<p>Deletes a molecule entirely in the local node.<\/p>\ngetConcentration\n\ngetNode\n\n"
                            }]
                          },
                          "cognitiveagentavoidlayer": {
                            "ownKey": "cognitiveagentavoidlayer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentavoidlayer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentavoidlayer"
                              },
                              "description": "",
                              "title": "CognitiveAgentAvoidLayer",
                              "content": "<p>Move the pedestrian towards positions of the environment with a low concentration of the target molecule.<\/p><init>\n<p>Move the pedestrian towards positions of the environment with a low concentration of the target molecule.<\/p>\ncloneAction\n\nnextPosition\n\n"
                            }]
                          },
                          "lsastandardaction": {
                            "ownKey": "lsastandardaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/lsastandardaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsastandardaction"
                              },
                              "description": "",
                              "title": "LsaStandardAction",
                              "content": "<p>This action add LsaMolecule in a single node.<\/p><init>\n<p>Builds a new local action, withouth any RandomGenerator. #RANDOM.<\/p>\n<init>\n<p>Builds a new local action.<\/p>\nsetConcentration\n<p>Executes on the passed node.<\/p>\ncloneAction\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ngetMolecule\n\ntoString\n\nexecute\n<p>Effectively executes this action.<\/p>\ngetContext\n\n"
                            }]
                          },
                          "cognitiveagentseek2d": {
                            "ownKey": "cognitiveagentseek2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentseek2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentseek2d"
                              },
                              "description": "",
                              "title": "CognitiveAgentSeek2D",
                              "content": "<p> CognitiveAgentSeek  behavior in a bidimensional environment, delegated to  CognitiveAgentFollowScalarField \n(this means the pedestrian tries to overtake others on its path,\nin general its movements are more sophisticated than  CognitiveAgentSeek ).<\/p>environment\n<p>The environment the pedestrian is into.<\/p>\n<init>\n\n<init>\n<p> CognitiveAgentSeek  behavior in a bidimensional environment, delegated to  CognitiveAgentFollowScalarField \n(this means the pedestrian tries to overtake others on its path,\nin general its movements are more sophisticated than  CognitiveAgentSeek ).<\/p>\ntarget\n<p>The position the owner of this action moves towards, in absolute coordinates.<\/p>\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\ncloneAction\n\ntargetDistanceTo\n<p>Computes the distance between this action's target and the given  node .<\/p>\n"
                            }]
                          },
                          "abstractlayeraction": {
                            "ownKey": "abstractlayeraction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractlayeraction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractlayeraction"
                              },
                              "description": "",
                              "title": "AbstractLayerAction",
                              "content": "<p>Abstract implementation of an action influenced by the concentration of a given molecule in the environment.<\/p>environment\n<pre><code>    the environment inside which the pedestrian moves.<\/code><\/pre>\npedestrian\n<pre><code>    the owner of this action.<\/code><\/pre>\ntargetMolecule\n<pre><code>    the {@link Molecule} you want to know the concentration in the different positions of the environment.<\/code><\/pre>\n<init>\n<p>Abstract implementation of an action influenced by the concentration of a given molecule in the environment.<\/p>\ncloneAction\n\ncloneAction\n\ngetLayerOrFail\n\ncenter\n\nconcentrationIn\n\n"
                            }]
                          },
                          "saperechemotaxis": {
                            "ownKey": "saperechemotaxis",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/saperechemotaxis",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperechemotaxis"
                              },
                              "description": "",
                              "title": "SAPEREChemotaxis",
                              "content": "<p>This class provides a chemotaxis implementation for SAPERE, namely, an agent able to move a molecule towards a specific node.<\/p><init>\n<p>Builds a new SAPEREChemotaxis.<\/p>\nexecute\n\n"
                            }]
                          },
                          "abstractnavigationaction": {
                            "ownKey": "abstractnavigationaction",
                            "childrenPages": {"navigationstate": {
                              "ownKey": "navigationstate",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/abstractnavigationaction/navigationstate",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractnavigationaction/navigationstate"
                                },
                                "description": "",
                                "title": "NavigationState",
                                "content": "<p>START<\/p>\n<p>NEW_ROOM<\/p>\n<p>MOVING_TO_CROSSING_POINT_1<\/p>\n<p>Moving towards the first crossing point (see  crossDoor ).<\/p>\nMOVING_TO_CROSSING_POINT_2\n<p>Moving towards the second crossing point (see  crossDoor ).<\/p>\nCROSSING_DOOR\n<p>When the second crossing point  isReached  (see  crossDoor ), the pedestrian may still be outside\nany room. In such case it moves towards  expectedNewRoom  centroid until he/she enters a room.<\/p>\nMOVING_TO_FINAL\n<p>Moving to the final destination, which is inside  currentRoom  (this means it can be directly\napproached as no obstacle is placed in between).<\/p>\nARRIVED\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractnavigationaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractnavigationaction"
                              },
                              "description": "",
                              "title": "AbstractNavigationAction",
                              "content": "<p>An abstract  NavigationAction , taking care of properly moving the pedestrian in the\nenvironment while delegating the decision on where to move it to a  NavigationStrategy .<\/p>strategy\n<p>The strategy used to navigate the environment.<\/p>\npedestrianPosition\n<p>The position of the  pedestrian  in the  environment , this is cached and updated\nevery time  update  is called so as to avoid potentially costly re-computations.<\/p>\ncurrentRoom\n<p>The room (= environment's area) the  pedestrian  is into, this is cached and updated\nevery time  update  is called so as to avoid potentially costly re-computations.<\/p>\nminDistance\n<p>Minimum distance to consider a target reached. Using zero (even with fuzzy equals) may lead to some\nboundary cases in which the pedestrian remains blocked due to how the environment manage collisions\nat present. This workaround allows to specify a minimum distance which is dependent on the pedestrian\nshape. In the future, something better could be done.<\/p>\nstate\n<p>previousRoom<\/p>\n<p>Caches the room the pedestrian is into when he/she starts moving. When the pedestrian is crossing a door, it\ncontains the room being left. When in  NavigationState.MOVING_TO_FINAL , it contains the room the pedestrian\nwas (and should be) into. It's used to detect if the pedestrian ended up in an unexpected room while moving.<\/p>\ncrossingPoints\n<p>Defined when crossing a door. See  crossDoor .<\/p>\nexpectedNewRoom\n<p>Defined when crossing a door.<\/p>\nfinalDestination\n<p>Defined in  NavigationState.MOVING_TO_FINAL .<\/p>\ntarget\n<p>The target of a directed edge of the environment's graph.<\/p>\ndesiredPosition\n<p>The position the pedestrian wants to reach.<\/p>\nenvironment\n<p>The environment the  pedestrian  is into.<\/p>\nreaction\n<p>The reaction in which this action is executed.<\/p>\npedestrian\n<p>The owner of this action.<\/p>\n<init>\n<p>An abstract  NavigationAction , taking care of properly moving the pedestrian in the\nenvironment while delegating the decision on where to move it to a  NavigationStrategy .<\/p>\nisReached\n\norFail\n\nupdateCachedVariables\n<p>Updates  pedestrianPosition  and  currentRoom , this can be costly.\nDepending on how  ConvexGeometricShape.contains  manage points on the boundary, the pedestrian could\nbe inside two (adjacent) rooms at once. This can happen in two cases:<\/p><ul><li>when in  NavigationState.MOVING_TO_CROSSING_POINT_1  or  NavigationState.MOVING_TO_FINAL  and the pedestrian\nis moving on  previousRoom 's boundary. In such case  previousRoom  is used.<\/li><li>when crossing a door or in  NavigationState.NEW_ROOM  and  expectedNewRoom  is adjacent to  previousRoom .\nIn such case  expectedNewRoom  is used.\nOtherwise the first room containing  pedestrianPosition  is used.<\/li><\/ul>\nonStart\n\ndoorsInSight\n\ncrossDoor\n<p>Moves the pedestrian across the provided  door , which must be among  doorsInSight .\nSince connected rooms may be non-adjacent, a pair of  crossingPoints  has to be provided:<\/p><ul><li>the first point must belong to the current room's boundary and will be reached first,<\/li><li>the second point must belong to the next room's boundary and will be pursued after\nreaching the former one.  crossingPoints  may coincide if the two rooms are adjacent.<\/li><\/ul>\nmoveToFinal\n<p>Moves the pedestrian to the given final  destination , which must be inside  currentRoom .<\/p>\nmoving\n\nupdate\n<p>Updates the internal state but does not move the pedestrian.<\/p>\n"
                            }]
                          },
                          "cognitiveagentfollowscalarfield": {
                            "ownKey": "cognitiveagentfollowscalarfield",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentfollowscalarfield",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentfollowscalarfield"
                              },
                              "description": "",
                              "title": "CognitiveAgentFollowScalarField",
                              "content": "<p>Moves the pedestrian where the given scalar field is higher.<\/p><init>\n<p>Moves the pedestrian where the given scalar field is higher.<\/p>\nnextPosition\n\ncloneAction\n\n"
                            }]
                          },
                          "physicalstrategies": {
                            "ownKey": "physicalstrategies",
                            "childrenPages": {"sum": {
                              "ownKey": "sum",
                              "ownPages": [{
                                "reference": {
                                  "path": "kotlindoc",
                                  "baseUrl": "https://alchemistsimulator.github.io/latest",
                                  "fileName": "it/unibo/alchemist/model/implementations/actions/physicalstrategies/sum",
                                  "extension": "html",
                                  "usePrettyUrl": true,
                                  "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/physicalstrategies/sum"
                                },
                                "description": "",
                                "title": "Sum",
                                "content": "<p>A  PhysicalSteeringStrategy  performing a simple sum of the overall intentional force and the physical ones.<\/p>node\n<p>The node to be moved.<\/p>\nnonPhysicalStrategy\n<p>The combination of intentional forces (= steering actions) and  computeTarget  are delegated to this strategy.<\/p>\n<init>\n<p>A  PhysicalSteeringStrategy  performing a simple sum of the overall intentional force and the physical ones.<\/p>\ncomputeNextPosition\n<p>Computes the next relative position reached by the node, given the overall intentional force.<\/p>\n"
                              }]
                            }},
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/physicalstrategies",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/physicalstrategies"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.implementations.actions.physicalstrategies",
                              "content": "<p>Sum<\/p>\n<p>A  PhysicalSteeringStrategy  performing a simple sum of the overall intentional force and the physical ones.<\/p>\n"
                            }]
                          },
                          "camerasee": {
                            "ownKey": "camerasee",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/camerasee",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/camerasee"
                              },
                              "description": "",
                              "title": "CameraSee",
                              "content": "<p>Checks nodes in the environment and writes in outputMolecule\nthe list of  it.unibo.alchemist.model.interfaces.VisibleNode ,\ncontaining filterByMolecule.\n distance  and  angle  define the field of view.<\/p>distance\n<p>Distance of the field of view.<\/p>\nangle\n<p>Angle in degrees of the field of view.<\/p>\n<init>\n<p>Checks nodes in the environment and writes in outputMolecule\nthe list of  it.unibo.alchemist.model.interfaces.VisibleNode ,\ncontaining filterByMolecule.\n distance  and  angle  define the field of view.<\/p>\ncloneAction\n\nexecute\n\ngetContext\n\n"
                            }]
                          },
                          "lsachangeargument": {
                            "ownKey": "lsachangeargument",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/lsachangeargument",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsachangeargument"
                              },
                              "description": "",
                              "title": "LsaChangeArgument",
                              "content": "<p><init><\/p>\n<p>Builds a new action that test neighbors which contain in their lsaSpace an lsaMolecule matching {target,Type}. The effect of this Action is to add to the matches map the variable PreferredType (the most present type in neighborhood). The execution has no effect on influenced molecule of reaction.<\/p>\nrandom\n<p>toString<\/p>\n<p>execute<\/p>\n<p>getEnvironment<\/p>\n"
                            }]
                          },
                          "reproducegpstrace": {
                            "ownKey": "reproducegpstrace",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/reproducegpstrace",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/reproducegpstrace"
                              },
                              "description": "",
                              "title": "ReproduceGPSTrace",
                              "content": "<p><init><\/p>\n<p><init><\/p>\n"
                            }]
                          },
                          "cognitiveagentflee": {
                            "ownKey": "cognitiveagentflee",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentflee",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentflee"
                              },
                              "description": "",
                              "title": "CognitiveAgentFlee",
                              "content": "<p>Move the agent away from a target position. It's the opposite of  CognitiveAgentSeek .<\/p><init>\n<p>Move the agent away from a target position. It's the opposite of  CognitiveAgentSeek .<\/p>\ncloneAction\n\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\n"
                            }]
                          },
                          "movetotarget": {
                            "ownKey": "movetotarget",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/movetotarget",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/movetotarget"
                              },
                              "description": "",
                              "title": "MoveToTarget",
                              "content": "<p>Movement towards a target defined as a concentration.<\/p><init>\n\ninterpolatePositions\n\ncloneAction\n\n"
                            }]
                          },
                          "cognitiveagentarrive": {
                            "ownKey": "cognitiveagentarrive",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentarrive",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentarrive"
                              },
                              "description": "",
                              "title": "CognitiveAgentArrive",
                              "content": "<p>Move the agent towards a target position.\nIt is similar to  CognitiveAgentSeek  but attempts to arrive at the target position with a zero velocity.<\/p>maxWalk\n<p>The maximum distance the pedestrian can walk, this is a length.<\/p>\nenv\n<pre><code>    the environment inside which the pedestrian moves.<\/code><\/pre>\ndecelerationRadius\n<pre><code>    the distance from which the pedestrian starts to decelerate.<\/code><\/pre>\narrivalTolerance\n<pre><code>    the distance at which the pedestrian is considered arrived to the target.<\/code><\/pre>\ntarget\n<pre><code>    the position the pedestrian moves towards.<\/code><\/pre>\n<init>\n\n<init>\n<p>Move the agent towards a target position.\nIt is similar to  CognitiveAgentSeek  but attempts to arrive at the target position with a zero velocity.<\/p>\ncloneAction\n\ntargetDistanceTo\n<p>Computes the distance between this action's target and the given  node .<\/p>\n"
                            }]
                          },
                          "targetwalker": {
                            "ownKey": "targetwalker",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/targetwalker",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/targetwalker"
                              },
                              "description": "",
                              "title": "TargetWalker",
                              "content": "<p>DEFAULT_SPEED<\/p>\n<p>Default speed in meters per second.<\/p>\nDEFAULT_RANGE\n<p>Default interaction range.<\/p>\nDEFAULT_INTERACTION\n<p>Default interaction factor.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n"
                            }]
                          },
                          "celltensionpolarization": {
                            "ownKey": "celltensionpolarization",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/celltensionpolarization",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/celltensionpolarization"
                              },
                              "description": "",
                              "title": "CellTensionPolarization",
                              "content": "<p><init><\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n"
                            }]
                          },
                          "cognitiveagentpursue": {
                            "ownKey": "cognitiveagentpursue",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentpursue",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentpursue"
                              },
                              "description": "",
                              "title": "CognitiveAgentPursue",
                              "content": "<p>A  NavigationAction  using  Pursuing  navigation strategy.<\/p><init>\n<p>A  NavigationAction  using  Pursuing  navigation strategy.<\/p>\n"
                            }]
                          },
                          "saperewalker": {
                            "ownKey": "saperewalker",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/saperewalker",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperewalker"
                              },
                              "description": "",
                              "title": "SAPEREWalker",
                              "content": "<p>DEFAULT_INTERACTING_TAG<\/p>\n<p>The default molecule that identifies an interacting object.<\/p>\n<init>\n\n<init>\n\ncloneAction\n\ngetNode\n\nsetExecutionContext\n\n"
                            }]
                          },
                          "cognitiveagentseek": {
                            "ownKey": "cognitiveagentseek",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentseek",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentseek"
                              },
                              "description": "",
                              "title": "CognitiveAgentSeek",
                              "content": "<p>Move the pedestrian towards the target position as fast as possible.<\/p><init>\n\n<init>\n<p>Move the pedestrian towards the target position as fast as possible.<\/p>\ncloneAction\n\ntargetDistanceTo\n<p>Computes the distance between this action's target and the given  node .<\/p>\n"
                            }]
                          },
                          "togglemoleculerandomly": {
                            "ownKey": "togglemoleculerandomly",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/togglemoleculerandomly",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/togglemoleculerandomly"
                              },
                              "description": "",
                              "title": "ToggleMoleculeRandomly",
                              "content": "<p>Treats  molecule  as a probabilistic switch:<\/p><ul><li>if it is present, then with probability odds it's removed from node;<\/li><li>otherwise, with probability odds it is inserted in node with the provided  concentration .<\/li><\/ul><init>\n<p>Treats  molecule  as a probabilistic switch:<\/p><ul><li>if it is present, then with probability odds it's removed from node;<\/li><li>otherwise, with probability odds it is inserted in node with the provided  concentration .<\/li><\/ul>\ncloneAction\n\nexecute\n<p>Rolls the dice and toggles the molecule.<\/p>\nshouldToggle\n<p>Returns true if it is time to toggle the molecule.<\/p>\n"
                            }]
                          },
                          "steeringstrategies": {
                            "ownKey": "steeringstrategies",
                            "childrenPages": {
                              "singleprevalent": {
                                "ownKey": "singleprevalent",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/singleprevalent",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/singleprevalent"
                                  },
                                  "description": "",
                                  "title": "SinglePrevalent",
                                  "content": "<p>A  SteeringStrategy  in which one action is prevalent. Only  NavigationAction s can be prevalent, because\nthey guarantee to navigate the environment consciously (e.g. without getting stuck in obstacles). The\npurpose of this strategy is to linearly combine the potentially contrasting forces to which the pedestrian\nis subject, while maintaining that warranty. Such forces are combined as follows:\nlet f be the prevalent force,<\/p><ul><li>if f leads the pedestrian outside the room (= environment's area) he/she is into, no combination is performed\nand f is used as it is. This because crossing doors can be a thorny issue and we don't want to introduce\ndisturbing forces.<\/li><li>Otherwise, a linear combination is performed: f is assigned unitary weight, all other forces are assigned\nweight w equal to the maximum value in <a href=\"#\">0,1<\/a> so that the resulting force:<\/li><li>forms with f an angle smaller than or equal to the specified toleranceAngle,<\/li><li>doesn't lead the pedestrian outside the current room.\nThe idea is to decrease the intensity of non-prevalent forces until the resulting one enters in some tolerance\nsector defined by both the tolerance angle and the current room's boundary. With a suitable tolerance angle\nthis allows to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory\nwhich takes into account other urges as well.\nFinally, an exponential smoothing with the given alpha is applied to the resulting force in order to decrease\noscillatory movements (this also known as shaking behavior).<\/li><\/ul><init>\n<p>A  SteeringStrategy  in which one action is prevalent. Only  NavigationAction s can be prevalent, because\nthey guarantee to navigate the environment consciously (e.g. without getting stuck in obstacles). The\npurpose of this strategy is to linearly combine the potentially contrasting forces to which the pedestrian\nis subject, while maintaining that warranty. Such forces are combined as follows:\nlet f be the prevalent force,<\/p><ul><li>if f leads the pedestrian outside the room (= environment's area) he/she is into, no combination is performed\nand f is used as it is. This because crossing doors can be a thorny issue and we don't want to introduce\ndisturbing forces.<\/li><li>Otherwise, a linear combination is performed: f is assigned unitary weight, all other forces are assigned\nweight w equal to the maximum value in <a href=\"#\">0,1<\/a> so that the resulting force:<\/li><li>forms with f an angle smaller than or equal to the specified toleranceAngle,<\/li><li>doesn't lead the pedestrian outside the current room.\nThe idea is to decrease the intensity of non-prevalent forces until the resulting one enters in some tolerance\nsector defined by both the tolerance angle and the current room's boundary. With a suitable tolerance angle\nthis allows to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory\nwhich takes into account other urges as well.\nFinally, an exponential smoothing with the given alpha is applied to the resulting force in order to decrease\noscillatory movements (this also known as shaking behavior).<\/li><\/ul>\ncomputeNextPosition\n<p> actions  are partitioned in group steering actions and non-group steering actions. The overall next position\nfor each of these two sets of actions is computed via weighted sum. The resulting vectors are then summed\ntogether (with unitary weight).<\/p>\nSinglePrevalent\n<p>A  SteeringStrategy  in which one action is prevalent. Only  NavigationAction s can be prevalent, because\nthey guarantee to navigate the environment consciously (e.g. without getting stuck in obstacles). The\npurpose of this strategy is to linearly combine the potentially contrasting forces to which the pedestrian\nis subject, while maintaining that warranty. Such forces are combined as follows:\nlet f be the prevalent force,<\/p><ul><li>if f leads the pedestrian outside the room (= environment's area) he/she is into, no combination is performed\nand f is used as it is. This because crossing doors can be a thorny issue and we don't want to introduce\ndisturbing forces.<\/li><li>Otherwise, a linear combination is performed: f is assigned unitary weight, all other forces are assigned\nweight w equal to the maximum value in <a href=\"#\">0,1<\/a> so that the resulting force:<\/li><li>forms with f an angle smaller than or equal to the specified toleranceAngle,<\/li><li>doesn't lead the pedestrian outside the current room.\nThe idea is to decrease the intensity of non-prevalent forces until the resulting one enters in some tolerance\nsector defined by both the tolerance angle and the current room's boundary. With a suitable tolerance angle\nthis allows to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory\nwhich takes into account other urges as well.\nFinally, an exponential smoothing with the given alpha is applied to the resulting force in order to decrease\noscillatory movements (this also known as shaking behavior).<\/li><\/ul>\n"
                                }]
                              },
                              "distanceweighted": {
                                "ownKey": "distanceweighted",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/distanceweighted",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/distanceweighted"
                                  },
                                  "description": "",
                                  "title": "DistanceWeighted",
                                  "content": "<p> Weighted  strategy where the weight of each steering action is the inverse of the pedestrian's distance from the\naction's target (the closer the target, the more important the action). defaultWeight is used for actions without\na target.<\/p><init>\n<p> Weighted  strategy where the weight of each steering action is the inverse of the pedestrian's distance from the\naction's target (the closer the target, the more important the action). defaultWeight is used for actions without\na target.<\/p>\n"
                                }]
                              },
                              "filtered": {
                                "ownKey": "filtered",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/filtered",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/filtered"
                                  },
                                  "description": "",
                                  "title": "Filtered",
                                  "content": "<p> SteeringStrategy  decorator applying a filter to the list of steering actions (see  computeNextPosition ).<\/p><init>\n<p> SteeringStrategy  decorator applying a filter to the list of steering actions (see  computeNextPosition ).<\/p>\ncomputeNextPosition\n<p>Delegated to steerStrategy after filtering the given  actions .<\/p>\n"
                                }]
                              },
                              "exponentialsmoothing": {
                                "ownKey": "exponentialsmoothing",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/exponentialsmoothing",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/exponentialsmoothing"
                                  },
                                  "description": "",
                                  "title": "ExponentialSmoothing",
                                  "content": "<p>Exponential smoothing is a trivial way of smoothing signals.\nLet s(t) be the smoothed signal at time t, given a discrete signal g:\ns(t) = alpha * g(t) + (1 - alpha) * s(t-1)\ns(0) = g(0)<\/p><init>\n<p>Exponential smoothing is a trivial way of smoothing signals.\nLet s(t) be the smoothed signal at time t, given a discrete signal g:\ns(t) = alpha * g(t) + (1 - alpha) * s(t-1)\ns(0) = g(0)<\/p>\napply\n<p>Applies the smoothing to the given force.<\/p>\n"
                                }]
                              },
                              "nearest": {
                                "ownKey": "nearest",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/nearest",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/nearest"
                                  },
                                  "description": "",
                                  "title": "Nearest",
                                  "content": "<p> Filtered  strategy considering only the group steering action and the non-group steering action whose targets are\nnearest to the pedestrian's position. The two actions are combined using  DistanceWeighted  strategy.<\/p><init>\n<p> Filtered  strategy considering only the group steering action and the non-group steering action whose targets are\nnearest to the pedestrian's position. The two actions are combined using  DistanceWeighted  strategy.<\/p>\n"
                                }]
                              },
                              "weighted": {
                                "ownKey": "weighted",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/weighted",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/weighted"
                                  },
                                  "description": "",
                                  "title": "Weighted",
                                  "content": "<p>A  SteeringStrategy  performing a weighted sum of steering actions (see  computeNextPosition ).<\/p><init>\n<p>A  SteeringStrategy  performing a weighted sum of steering actions (see  computeNextPosition ).<\/p>\ncomputeNextPosition\n<p> actions  are partitioned in group steering actions and non-group steering actions. The overall next position\nfor each of these two sets of actions is computed via weighted sum. The resulting vectors are then summed\ntogether (with unitary weight).<\/p>\ncomputeTarget\n<p>If there's no  SteeringActionWithTarget  among the provided  actions , a zero vector is returned. Otherwise,\nthe closest target is picked.<\/p>\n"
                                }]
                              },
                              "typebased": {
                                "ownKey": "typebased",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies/typebased",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies/typebased"
                                  },
                                  "description": "",
                                  "title": "TypeBased",
                                  "content": "<p>A  Weighted  steering strategy assigning weights based on actions' types (each type has its own weight, specified\nby the client).<\/p><init>\n<p>A  Weighted  steering strategy assigning weights based on actions' types (each type has its own weight, specified\nby the client).<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/steeringstrategies",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/steeringstrategies"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.implementations.actions.steeringstrategies",
                              "content": "<p>DistanceWeighted<\/p>\n<p> Weighted  strategy where the weight of each steering action is the inverse of the pedestrian's distance from the\naction's target (the closer the target, the more important the action). defaultWeight is used for actions without\na target.<\/p>\nFiltered\n<p> SteeringStrategy  decorator applying a filter to the list of steering actions (see  computeNextPosition ).<\/p>\nNearest\n<p> Filtered  strategy considering only the group steering action and the non-group steering action whose targets are\nnearest to the pedestrian's position. The two actions are combined using  DistanceWeighted  strategy.<\/p>\nSinglePrevalent\n<p>A  SteeringStrategy  in which one action is prevalent. Only  NavigationAction s can be prevalent, because\nthey guarantee to navigate the environment consciously (e.g. without getting stuck in obstacles). The\npurpose of this strategy is to linearly combine the potentially contrasting forces to which the pedestrian\nis subject, while maintaining that warranty. Such forces are combined as follows:\nlet f be the prevalent force,<\/p><ul><li>if f leads the pedestrian outside the room (= environment's area) he/she is into, no combination is performed\nand f is used as it is. This because crossing doors can be a thorny issue and we don't want to introduce\ndisturbing forces.<\/li><li>Otherwise, a linear combination is performed: f is assigned unitary weight, all other forces are assigned\nweight w equal to the maximum value in <a href=\"#\">0,1<\/a> so that the resulting force:<\/li><li>forms with f an angle smaller than or equal to the specified toleranceAngle,<\/li><li>doesn't lead the pedestrian outside the current room.\nThe idea is to decrease the intensity of non-prevalent forces until the resulting one enters in some tolerance\nsector defined by both the tolerance angle and the current room's boundary. With a suitable tolerance angle\nthis allows to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory\nwhich takes into account other urges as well.\nFinally, an exponential smoothing with the given alpha is applied to the resulting force in order to decrease\noscillatory movements (this also known as shaking behavior).<\/li><\/ul>\nExponentialSmoothing\n<p>Exponential smoothing is a trivial way of smoothing signals.\nLet s(t) be the smoothed signal at time t, given a discrete signal g:\ns(t) = alpha * g(t) + (1 - alpha) * s(t-1)\ns(0) = g(0)<\/p>\nTypeBased\n<p>A  Weighted  steering strategy assigning weights based on actions' types (each type has its own weight, specified\nby the client).<\/p>\nWeighted\n<p>A  SteeringStrategy  performing a weighted sum of steering actions (see  computeNextPosition ).<\/p>\ntargetDistanceTo\n<p>Computes the distance between this action's target and the given  node .<\/p>\npickNearestOrFirst\n<p>Picks the  SteeringActionWithTarget  whose target is nearest to the  pedestrian 's current position, or the first\naction of the list if none of them has a defined target. If the list is empty, null is returned.<\/p>\n"
                            }]
                          },
                          "chemotacticpolarization": {
                            "ownKey": "chemotacticpolarization",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/chemotacticpolarization",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/chemotacticpolarization"
                              },
                              "description": "",
                              "title": "ChemotacticPolarization",
                              "content": "<p><init><\/p>\n<p><init><\/p>\n<p>Initialize a polarization activity regulated by environmental concentration of a molecule.<\/p>\nexecute\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n"
                            }]
                          },
                          "cognitiveagentseparation": {
                            "ownKey": "cognitiveagentseparation",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentseparation",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentseparation"
                              },
                              "description": "",
                              "title": "CognitiveAgentSeparation",
                              "content": "<p>Move the agent away from the pedestrians near to him.<\/p>env\n<pre><code>    the environment inside which the pedestrian moves.<\/code><\/pre>\npedestrian\n<pre><code>    the owner of this action.<\/code><\/pre>\n<init>\n<p>Move the agent away from the pedestrians near to him.<\/p>\ncloneAction\n\nnextPosition\n\ngroup\n<p>The list of pedestrians influencing this action.<\/p>\n"
                            }]
                          },
                          "sapereagent": {
                            "ownKey": "sapereagent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/sapereagent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/sapereagent"
                              },
                              "description": "",
                              "title": "SAPEREAgent",
                              "content": "<p><init><\/p>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent does not modify any molecule (e.g. an agent that just moves a node).<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2 and/or the template passed in m3.<\/p>\ncloneAction\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\ntoString\n\n"
                            }]
                          },
                          "abstractsteeringactionwithtarget": {
                            "ownKey": "abstractsteeringactionwithtarget",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractsteeringactionwithtarget",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractsteeringactionwithtarget"
                              },
                              "description": "",
                              "title": "AbstractSteeringActionWithTarget",
                              "content": "<p>A  SteeringActionWithTarget  in a vector space.<\/p><init>\n\n<init>\n<p>A  SteeringActionWithTarget  in a vector space.<\/p>\ntarget\n<p>The position the owner of this action moves towards, in absolute coordinates.<\/p>\nnextPosition\n\ntargetDistanceTo\n<p>Computes the distance between this action's target and the given  node .<\/p>\n"
                            }]
                          },
                          "camerainjectvisiblenodeclosesttodistance": {
                            "ownKey": "camerainjectvisiblenodeclosesttodistance",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/camerainjectvisiblenodeclosesttodistance",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/camerainjectvisiblenodeclosesttodistance"
                              },
                              "description": "",
                              "title": "CameraInjectVisibleNodeClosestToDistance",
                              "content": "<p>Given a list of  VisibleNode  associated to visionMolecule,\nit finds the closest to a point located at distance from node\nin the direction of node's heading,\nand injects its position in targetMolecule.<\/p><p>If there are no  VisibleNode s, targetMolecule will be removed from node.<\/p><init>\n<p>Given a list of  VisibleNode  associated to visionMolecule,\nit finds the closest to a point located at distance from node\nin the direction of node's heading,\nand injects its position in targetMolecule.<\/p><p>If there are no  VisibleNode s, targetMolecule will be removed from node.<\/p>\ncloneAction\n\nexecute\n\ngetContext\n\n"
                            }]
                          },
                          "saperelocalagent": {
                            "ownKey": "saperelocalagent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/saperelocalagent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperelocalagent"
                              },
                              "description": "",
                              "title": "SAPERELocalAgent",
                              "content": "<p>A SAPERE Agent that does not do actions on neighbors.<\/p><init>\n<p>Creates a new SAPERE Local Agent stub. If you use this constructor, you must be sure that your agent does not modify any molecule (e.g. an agent that just moves a node).<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2 and/or the template passed in m3.<\/p>\ngetContext\n\n"
                            }]
                          },
                          "abstractmovenode": {
                            "ownKey": "abstractmovenode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractmovenode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractmovenode"
                              },
                              "description": "",
                              "title": "AbstractMoveNode",
                              "content": "<p>This action moves a node inside a given environment.<\/p><init>\n<p>Builds a new move node action. By default the movements are relative.<\/p>\n<init>\n\nisAbsolute\n\ngetNodePosition\n<p>Given a node, computes its position.<\/p>\nexecute\n<p>Detects if the move is in absolute or relative coordinates, then calls the correct method on the <code> Environment <\/code>.<\/p>\ngetContext\n\ngetCurrentPosition\n\ngetEnvironment\n\ngetNextPosition\n\n"
                            }]
                          },
                          "addjunctioninneighbor": {
                            "ownKey": "addjunctioninneighbor",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/addjunctioninneighbor",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/addjunctioninneighbor"
                              },
                              "description": "",
                              "title": "AddJunctionInNeighbor",
                              "content": "<p>Represent the action of add a junction between a neighbor and the current node. This action only create the junction reference inside the neighbor, the current node totally ignore that a junction has been created. This is a part of the junction creation process. See <code> AddJunctionInCell <\/code> for the other part of the process<\/p><init>\n\ntoString\n\nexecute\n<p>If no target node is given DO NOTHING. The junction can not be created.<\/p>\nexecute\n<p>Create the junction that links the target node and the node when this action is executed.<\/p>\ncloneAction\n\ngetNode\n\n"
                            }]
                          },
                          "cognitiveagentcohesion": {
                            "ownKey": "cognitiveagentcohesion",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentcohesion",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentcohesion"
                              },
                              "description": "",
                              "title": "CognitiveAgentCohesion",
                              "content": "<p>Move the agent towards the other members of his group.<\/p><init>\n<p>Move the agent towards the other members of his group.<\/p>\ncloneAction\n\nnextPosition\n\ngroup\n<p>The list of pedestrians influencing this action.<\/p>\n"
                            }]
                          },
                          "abstractrandomizableaction": {
                            "ownKey": "abstractrandomizableaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractrandomizableaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractrandomizableaction"
                              },
                              "description": "",
                              "title": "AbstractRandomizableAction",
                              "content": "<p><init><\/p>\n<p>getRandomGenerator<\/p>\n"
                            }]
                          },
                          "cognitiveagentexplore": {
                            "ownKey": "cognitiveagentexplore",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentexplore",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentexplore"
                              },
                              "description": "",
                              "title": "CognitiveAgentExplore",
                              "content": "<p>A  NavigationAction  using  Exploring  navigation strategy.<\/p><init>\n<p>A  NavigationAction  using  Exploring  navigation strategy.<\/p>\n"
                            }]
                          },
                          "abstractconfigurablemovenode": {
                            "ownKey": "abstractconfigurablemovenode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractconfigurablemovenode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractconfigurablemovenode"
                              },
                              "description": "",
                              "title": "AbstractConfigurableMoveNode",
                              "content": "<p>An abstract class that factorizes code for multiple different movements. With three strategies can be defined: the next target to be reached, the routing strategy to adopt, the speed to move at.<\/p><init>\n<p>Builds a new move node action. By default the movements are relative.<\/p>\n<init>\n\ninterpolatePositions\n<p>Given a start position (current), a desired target position (target), and a maximum walkable distance (maxWalk), this method computes the actual position reached by the moving node, in absolute or relative coordinates depending on the value of isAbsolute in the constructor.<\/p>\ngetTargetPoint\n\ngetCurrentRoute\n\nsetTargetPoint\n\ngetNextPosition\n\nresetRoute\n<p>Resets the current route, e.g. because the target has been reached<\/p>\n"
                            }]
                          },
                          "lsaascendinggradientdist": {
                            "ownKey": "lsaascendinggradientdist",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/lsaascendinggradientdist",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsaascendinggradientdist"
                              },
                              "description": "",
                              "title": "LsaAscendingGradientDist",
                              "content": "<p><init><\/p>\n<p>execute<\/p>\n"
                            }]
                          },
                          "headtowardrandomdirection": {
                            "ownKey": "headtowardrandomdirection",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/headtowardrandomdirection",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/headtowardrandomdirection"
                              },
                              "description": "",
                              "title": "HeadTowardRandomDirection",
                              "content": "<p>Changes the heading of node randomly.\nThe environment must support node heading, hence, be a  Physics2DEnvironment .<\/p><init>\n<p>Changes the heading of node randomly.\nThe environment must support node heading, hence, be a  Physics2DEnvironment .<\/p>\ncloneAction\n<p>{@inheritDoc}.<\/p>\nexecute\n<p>Changes the heading of the node randomly.<\/p>\ngetContext\n<p>{@inheritDoc}.<\/p>\n"
                            }]
                          },
                          "lsaabstractaction": {
                            "ownKey": "lsaabstractaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/lsaabstractaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsaabstractaction"
                              },
                              "description": "",
                              "title": "LsaAbstractAction",
                              "content": "<p><init><\/p>\n<p>getMatchAsDouble<\/p>\n<p>Given a variable, allows to access to its associated value as double. Note that this might fail if you try to access a value which is not numeric through this method.<\/p>\ngetMatchAsDouble\n<p>Given a variable, allows to access to its associated value as double. Note that this might fail if you try to access a value which is not numeric through this method.<\/p>\ngetLSAArgumentAsInt\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Double. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ngetLSAArgumentAsInt\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Double. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ngetLSAs\n<p>Accesses an LSA space and retrieves a molecule matching template. It can use the template as-is or instance its variables with the current matches before accessing the space.<\/p>\nsetSyntheticO\n<p>Sets #O to the local node.<\/p>\nsetSyntheticRoute\n<p>Sets #ROUTE.<\/p>\ngetLSAArgumentAsString\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as String. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ngetLSAArgumentAsString\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as String. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ncloneAction\n<p>getNode<\/p>\n<p>addMatch<\/p>\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\naddMatch\n<p>Used to add a new match to the matches map.<\/p>\nsubstitute\n<p>Given an an LSA template, an argument number and some new data, sets the argument in the given position as the passed value.<\/p>\nsubstitute\n<p>Given an an LSA template, an argument number and some new data, sets the argument in the given position as the passed value.<\/p>\nsetExecutionContext\n<p>Sets the context in which this action will execute.<\/p>\nsetSyntheticNeigh\n<p>Sets #NEIGH equal to the passed node list.<\/p>\nallocateVars\n<p>Given an LSA template, allocates all the variables using the current matches. The allocations may or not produce an instance: it does only if all the variable within the LSA have a corresponding entry in the matches map.<\/p>\nallocateVarsAndBuildLSA\n<p>Same of <code> #allocateVars(ILsaMolecule) <\/code>, but also builds an ILsaMolecule.<\/p>\ngetLSAArgumentAsDouble\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Double. Hides some low-level details. If a molecule template is passed, it will be istanced using the current matches.<\/p>\ngetLSAArgumentAsDouble\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Double. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ninjectLocally\n<p>Injects an ILsaMolecule locally.<\/p>\ngetMatchAsString\n<p>Given a variable, allows to access to its associated value as String.<\/p>\ngetMatchAsString\n<p>Given a variable, allows to access to its associated value as String.<\/p>\ntoString\n<p>inject<\/p>\n<p>Injects an LSA in a node.<\/p>\nsetSyntheticD\n<p>Sets #D.<\/p>\ngetMatches\n<p>getNodes<\/p>\n<p>getMatch<\/p>\n<p>Given a variable, allows to access to its associated value.<\/p>\ngetMatch\n<p>Given a variable, allows to access to its associated value.<\/p>\ngetLSAArgumentAsObject\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Integer. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\ngetLSAArgumentAsObject\n<p>This method allows subclasses to access a field of an LSA (supposed to be a computable expression or a number) and have back its VALUE as Object. Hides some low-level details. If a molecule template is passed, it will be instanced using the current matches.<\/p>\n"
                            }]
                          },
                          "cognitiveagentgoalorientedexplore": {
                            "ownKey": "cognitiveagentgoalorientedexplore",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentgoalorientedexplore",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentgoalorientedexplore"
                              },
                              "description": "",
                              "title": "CognitiveAgentGoalOrientedExplore",
                              "content": "<p>A  NavigationAction  using  GoalOrientedExploring  navigation strategy.<\/p><init>\n<p>A  NavigationAction  using  GoalOrientedExploring  navigation strategy.<\/p>\n"
                            }]
                          },
                          "changebiomolconcentrationinenv": {
                            "ownKey": "changebiomolconcentrationinenv",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationinenv",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationinenv"
                              },
                              "description": "",
                              "title": "ChangeBiomolConcentrationInEnv",
                              "content": "<p>Action implementing the changing of the concentration of a given biomolecule in environment.<\/p><init>\n<p>Initialize a new <code> Action <\/code> that change concentration of the given <code> Biomolecule <\/code> of a \"deltaCon\" quantity.<\/p>\n<init>\n<p>Initialize a <code> ChangeBiomolConcentrationInEnv <\/code> with delta = -1.<\/p>\ntoString\n\ngetEnvironmentNodesSurrounding\n\nexecute\n\ngetContext\n\ncloneAction\n\n"
                            }]
                          },
                          "saperewalkerrisegradient": {
                            "ownKey": "saperewalkerrisegradient",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/saperewalkerrisegradient",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperewalkerrisegradient"
                              },
                              "description": "",
                              "title": "SAPEREWalkerRiseGradient",
                              "content": "<p><init><\/p>\n<p><init><\/p>\n"
                            }]
                          },
                          "cognitiveagentcombinesteering": {
                            "ownKey": "cognitiveagentcombinesteering",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentcombinesteering",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentcombinesteering"
                              },
                              "description": "",
                              "title": "CognitiveAgentCombineSteering",
                              "content": "<p>Combination of multiple steering actions.<\/p><init>\n<p>Combination of multiple steering actions.<\/p>\ncloneAction\n\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\n"
                            }]
                          },
                          "lsacountneighborsaction": {
                            "ownKey": "lsacountneighborsaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/lsacountneighborsaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsacountneighborsaction"
                              },
                              "description": "",
                              "title": "LsaCountNeighborsAction",
                              "content": "<p><init><\/p>\n<p>Builds a new action that counts neighbors which contain in their lsaSpace an lsaMolecule matching mol. The effect of this Action is to add to the matches list the variable countVar. The execution has no effect on the set of influenced molecules for the reaction.<\/p>\n<init>\n<p>Builds a new action that counts neighbors which contain in their lsaSpace an lsaMolecule matching mol. The effect of this Action is to add to the matches list the variable countVar. The execution has no effect on the set of influenced molecules for the reaction.<\/p>\ncloneAction\n\nrandom\n\ntoString\n\nexecute\n\ngetEnvironment\n\n"
                            }]
                          },
                          "abstractneighboraction": {
                            "ownKey": "abstractneighboraction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractneighboraction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractneighboraction"
                              },
                              "description": "",
                              "title": "AbstractNeighborAction",
                              "content": "<p>Represents an action on a neighbor.<\/p><init>\n\nexecute\n<p>Execute the action on a random neighbor if the node has a neighborhood. Otherwise do nothing.<\/p>\nexecute\n<p>Execute the action on the given target node. NOTE, it is NOT guaranteed that this method checks if the target node is in the actual neighborhood of the node.<\/p>\ngetContext\n\ncloneAction\n\ngetEnvironment\n\n"
                            }]
                          },
                          "brownianmove": {
                            "ownKey": "brownianmove",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/brownianmove",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/brownianmove"
                              },
                              "description": "",
                              "title": "BrownianMove",
                              "content": "<p>Moves the node randomly.<\/p><init>\n\ncloneAction\n\ngetRadius\n\ngetRandomGenerator\n\ngetNextPosition\n\n"
                            }]
                          },
                          "abstractgroupsteeringaction": {
                            "ownKey": "abstractgroupsteeringaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractgroupsteeringaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractgroupsteeringaction"
                              },
                              "description": "",
                              "title": "AbstractGroupSteeringAction",
                              "content": "<p>An abstract  GroupSteeringAction .<\/p>env\n<p>The environment in which this action executes.<\/p>\n<init>\n<p>An abstract  GroupSteeringAction .<\/p>\ncentroid\n<p>Computes the centroid of the  group  in absolute coordinates.<\/p>\n"
                            }]
                          },
                          "abstractactiononsinglemolecule": {
                            "ownKey": "abstractactiononsinglemolecule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractactiononsinglemolecule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractactiononsinglemolecule"
                              },
                              "description": "",
                              "title": "AbstractActionOnSingleMolecule",
                              "content": "<p>This class offers the basic structures to provide operations with numeric concentrations on a single molecule.<\/p><init>\n<p>Call this constructor in the subclasses in order to automatically instance the node, the molecules and the dependency managing facilities.<\/p>\ngetMolecule\n\n"
                            }]
                          },
                          "setlocalmoleculeconcentration": {
                            "ownKey": "setlocalmoleculeconcentration",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/setlocalmoleculeconcentration",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/setlocalmoleculeconcentration"
                              },
                              "description": "",
                              "title": "SetLocalMoleculeConcentration",
                              "content": "<p><init><\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n"
                            }]
                          },
                          "moveonmapwithgps": {
                            "ownKey": "moveonmapwithgps",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/moveonmapwithgps",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/moveonmapwithgps"
                              },
                              "description": "",
                              "title": "MoveOnMapWithGPS",
                              "content": "<p>basic action that follow a <code> GPSTrace <\/code>.<\/p><init>\n\n<init>\n\ngetTrace\n\ntraceFor\n\n"
                            }]
                          },
                          "cognitiveagentreachknowndestination": {
                            "ownKey": "cognitiveagentreachknowndestination",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentreachknowndestination",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentreachknowndestination"
                              },
                              "description": "",
                              "title": "CognitiveAgentReachKnownDestination",
                              "content": "<p>A  NavigationAction  using  KnownDestinationReaching  navigation strategy.<\/p>strategy\n<p>The strategy used to navigate the environment.<\/p>\n<init>\n<p>A  NavigationAction  using  KnownDestinationReaching  navigation strategy.<\/p>\n"
                            }]
                          },
                          "randompolarization": {
                            "ownKey": "randompolarization",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/randompolarization",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/randompolarization"
                              },
                              "description": "",
                              "title": "RandomPolarization",
                              "content": "<p><init><\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n"
                            }]
                          },
                          "headtowardtarget": {
                            "ownKey": "headtowardtarget",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/headtowardtarget",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/headtowardtarget"
                              },
                              "description": "",
                              "title": "HeadTowardTarget",
                              "content": "<p>Reads the target's absolute coordinates from the target molecule\ncontained in node and sets the node's heading accordingly.<\/p><init>\n<p>Reads the target's absolute coordinates from the target molecule\ncontained in node and sets the node's heading accordingly.<\/p>\ncloneAction\n\nexecute\n<p>Sets the heading of the node according to the target molecule.<\/p>\ngetContext\n\n"
                            }]
                          },
                          "levywalk": {
                            "ownKey": "levywalk",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/levywalk",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/levywalk"
                              },
                              "description": "",
                              "title": "LevyWalk",
                              "content": "<p>Selects a target based on a random direction extracted from <a href=\"#\">rng<\/a>,\nand a random distance extracted from a <a href=\"#\">ParetoDistribution<\/a> of parameters scale and shape.\nMoves toward the targets at a constant  speed  and changes targets on collision.<\/p><init>\n<p>Selects a target based on a random direction extracted from <a href=\"#\">rng<\/a>,\nand a random distance extracted from a <a href=\"#\">ParetoDistribution<\/a> of parameters scale and shape.\nMoves toward the targets at a constant  speed  and changes targets on collision.<\/p>\ncloneAction\n\n"
                            }]
                          },
                          "sapereneighboragent": {
                            "ownKey": "sapereneighboragent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/sapereneighboragent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/sapereneighboragent"
                              },
                              "description": "",
                              "title": "SAPERENeighborAgent",
                              "content": "<p>A SAPERE Agent that modifies something on neighboring nodes.<\/p><init>\n<p>Creates a new SAPERE Neighbor Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2.<\/p>\n<init>\n<p>Creates a new SAPERE Agent stub. If you use this constructor, you must be sure that your agent only modifies molecules matching the template passed as m1 and/or the template passed in m2 and/or the template passed in m3.<\/p>\ngetCurrentPosition\n\ngetNeighborhood\n\ngetPosition\n\ngetContext\n\ngetLocalNeighborhood\n\nallocateAndInject\n\ngetEnvironment\n\nmove\n\n"
                            }]
                          },
                          "cognitiveagentobstacleavoidance": {
                            "ownKey": "cognitiveagentobstacleavoidance",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentobstacleavoidance",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentobstacleavoidance"
                              },
                              "description": "",
                              "title": "CognitiveAgentObstacleAvoidance",
                              "content": "<p>Move the agent avoiding potential obstacles in its path.<\/p>reaction\n<pre><code>    the reaction which executes this action.<\/code><\/pre>\n<init>\n<p>Move the agent avoiding potential obstacles in its path.<\/p>\ncloneAction\n\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\n"
                            }]
                          },
                          "moveforwardandteleport": {
                            "ownKey": "moveforwardandteleport",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/moveforwardandteleport",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/moveforwardandteleport"
                              },
                              "description": "",
                              "title": "MoveForwardAndTeleport",
                              "content": "<p>Moves the node along the x axis up to coordinate <code> #getMaxX() <\/code>, with steps of size <code> #getDeltaX() <\/code>. Once <code> #getMaxX() <\/code> is reached, the nodes gets teleported back to <code> #getMinX() <\/code>. Somewhat, it mimics the movement a node would have in a cylindrical environment.<\/p><init>\n\ngetMinX\n\ncloneAction\n\ngetDeltaX\n\ngetMaxX\n\ngetNextPosition\n\n"
                            }]
                          },
                          "abstractlocalaction": {
                            "ownKey": "abstractlocalaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractlocalaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractlocalaction"
                              },
                              "description": "",
                              "title": "AbstractLocalAction",
                              "content": "<p><init><\/p>\n<p>getContext<\/p>\n"
                            }]
                          },
                          "cognitiveagentfollowlayer": {
                            "ownKey": "cognitiveagentfollowlayer",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentfollowlayer",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentfollowlayer"
                              },
                              "description": "",
                              "title": "CognitiveAgentFollowLayer",
                              "content": "<p>Move the pedestrian towards positions of the environment with a high concentration of the target molecule.<\/p><init>\n<p>Move the pedestrian towards positions of the environment with a high concentration of the target molecule.<\/p>\nnextPosition\n<p>The position the owner of this action moves to when it is executed,\nin relative coordinates with respect to its current position.<\/p>\ncloneAction\n\n"
                            }]
                          },
                          "genericrandomwalker": {
                            "ownKey": "genericrandomwalker",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/genericrandomwalker",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/genericrandomwalker"
                              },
                              "description": "",
                              "title": "GenericRandomWalker",
                              "content": "<p>Chooses random targets in a direction extracted from  randomGenerator \nat a distance extracted from  distanceDistribution .\nMoves the node towards the targets at the given constant  speed . Changes target on collision.<\/p>randomGenerator\n<p>speed<\/p>\n<p>distanceDistribution<\/p>\n<p><init><\/p>\n<p>Chooses random targets in a direction extracted from  randomGenerator \nat a distance extracted from  distanceDistribution .\nMoves the node towards the targets at the given constant  speed . Changes target on collision.<\/p>\ncloneAction\n"
                            }]
                          },
                          "togglemolecule": {
                            "ownKey": "togglemolecule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/togglemolecule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/togglemolecule"
                              },
                              "description": "",
                              "title": "ToggleMolecule",
                              "content": "<p>Treats  molecule  as a switch:<\/p><ul><li>if it is present, then it's removed from node;<\/li><li>otherwise, it is inserted in node with the provided  concentration .<\/li><\/ul>molecule\n<p>concentration<\/p>\n<p><init><\/p>\n<p>Treats  molecule  as a switch:<\/p><ul><li>if it is present, then it's removed from node;<\/li><li>otherwise, it is inserted in node with the provided  concentration .<\/li><\/ul>\ncloneAction\n<p>execute<\/p>\n<p>Toggles concentration.<\/p>\nisOn\n<p>Returns true if it is on, already toggled.<\/p>\ngetContext\n"
                            }]
                          },
                          "addjunctionincell": {
                            "ownKey": "addjunctionincell",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/addjunctionincell",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/addjunctionincell"
                              },
                              "description": "",
                              "title": "AddJunctionInCell",
                              "content": "<p>Represent the action of add a junction between the current node and a neighbor. This action only create the junction reference inside this node, the neighbor totally ignore that a junction has been created. This is a part of the junction creation process. See <code> AddJunctionInNeighbor <\/code> for the other part of the process<\/p><init>\n\ntoString\n\nexecute\n<p>If no target node is given DO NOTHING. The junction can not be created.<\/p>\nexecute\n<p>Create the junction that links the node where this action is executed and the target node.<\/p>\ncloneAction\n\ngetNode\n\n"
                            }]
                          },
                          "moveonmap": {
                            "ownKey": "moveonmap",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/moveonmap",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/moveonmap"
                              },
                              "description": "",
                              "title": "MoveOnMap",
                              "content": "<p><init><\/p>\n<p>interpolatePositions<\/p>\n<p>cloneAction<\/p>\n<p>Fails, can't be cloned.<\/p>\ngetEnvironment\n"
                            }]
                          },
                          "lsaascendingagent": {
                            "ownKey": "lsaascendingagent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/lsaascendingagent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsaascendingagent"
                              },
                              "description": "",
                              "title": "LsaAscendingAgent",
                              "content": "<p><init><\/p>\n<p>computeWalkedTime<\/p>\n<p>execute<\/p>\n"
                            }]
                          },
                          "sendtoneighbor": {
                            "ownKey": "sendtoneighbor",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/sendtoneighbor",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/sendtoneighbor"
                              },
                              "description": "",
                              "title": "SendToNeighbor",
                              "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>getProtelisProgram<\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n"
                            }]
                          },
                          "cognitiveagentfollowroute": {
                            "ownKey": "cognitiveagentfollowroute",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentfollowroute",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentfollowroute"
                              },
                              "description": "",
                              "title": "CognitiveAgentFollowRoute",
                              "content": "<p>A  NavigationAction  using  RouteFollowing  navigation strategy.<\/p><init>\n<p>A  NavigationAction  using  RouteFollowing  navigation strategy.<\/p>\n"
                            }]
                          },
                          "changebiomolconcentrationincell": {
                            "ownKey": "changebiomolconcentrationincell",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationincell",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationincell"
                              },
                              "description": "",
                              "title": "ChangeBiomolConcentrationInCell",
                              "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n"
                            }]
                          },
                          "cognitiveagentwander": {
                            "ownKey": "cognitiveagentwander",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentwander",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentwander"
                              },
                              "description": "",
                              "title": "CognitiveAgentWander",
                              "content": "<p>Give the impression of a random walk through the environment targeting an ever changing pseudo-randomly point\nof a circumference at a given distance and with a given radius from the current pedestrian position.<\/p>randomGenerator\n<pre><code>    the simulation {@link RandomGenerator}.<\/code><\/pre>\noffset\n<pre><code>    the distance from the pedestrian position of the center of the circle.<\/code><\/pre>\nradius\n<pre><code>    the radius of the circle.<\/code><\/pre>\n<init>\n<p>Give the impression of a random walk through the environment targeting an ever changing pseudo-randomly point\nof a circumference at a given distance and with a given radius from the current pedestrian position.<\/p>\nnextPosition\n\ncloneAction\n\ntargetDistanceTo\n<p>Computes the distance between this action's target and the given  node .<\/p>\n"
                            }]
                          },
                          "changebiomolconcentrationinneighbor": {
                            "ownKey": "changebiomolconcentrationinneighbor",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationinneighbor",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/changebiomolconcentrationinneighbor"
                              },
                              "description": "",
                              "title": "ChangeBiomolConcentrationInNeighbor",
                              "content": "<p><init><\/p>\n<p>toString<\/p>\n<p>execute<\/p>\n<p>execute<\/p>\n<p>cloneAction<\/p>\n"
                            }]
                          },
                          "lsaallneighborsaction": {
                            "ownKey": "lsaallneighborsaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/lsaallneighborsaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsaallneighborsaction"
                              },
                              "description": "",
                              "title": "LsaAllNeighborsAction",
                              "content": "<p>The execution involves all neighbours. The molecule can be different from a neighbor to the other, because some special Variable (#D) are specific for each node. This is why N molecules are instanced if there are N neighbours.<\/p><init>\n\n<init>\n\ntoString\n\nexecute\n\n"
                            }]
                          },
                          "cognitiveagentreachdestination": {
                            "ownKey": "cognitiveagentreachdestination",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentreachdestination",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentreachdestination"
                              },
                              "description": "",
                              "title": "CognitiveAgentReachDestination",
                              "content": "<p>A  NavigationAction  using  DestinationReaching  navigation strategy.\nAccepts an array of coordinates representing the destinations and uses inferIsKnown to partition them into\nknown and unknown ones.<\/p>strategy\n<p>The strategy used to navigate the environment.<\/p>\n<init>\n<p>A  NavigationAction  using  DestinationReaching  navigation strategy.\nAccepts an array of coordinates representing the destinations and uses inferIsKnown to partition them into\nknown and unknown ones.<\/p>\n"
                            }]
                          },
                          "cognitiveagentnavigationaction2d": {
                            "ownKey": "cognitiveagentnavigationaction2d",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cognitiveagentnavigationaction2d",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cognitiveagentnavigationaction2d"
                              },
                              "description": "",
                              "title": "CognitiveAgentNavigationAction2D",
                              "content": "<p>Implementation of a  NavigationAction2D . This action accepts an  Euclidean2DEnvironmentWithGraph  whose graph\ncontains  ConvexPolygon al nodes and  Euclidean2DPassage s as edges.<\/p>target\n<p>The target of a directed edge of the environment's graph.<\/p>\nenvironment\n<p>The environment the  pedestrian  is into.<\/p>\n<init>\n<p>Implementation of a  NavigationAction2D . This action accepts an  Euclidean2DEnvironmentWithGraph  whose graph\ncontains  ConvexPolygon al nodes and  Euclidean2DPassage s as edges.<\/p>\ncrossDoor\n<p>Moves the pedestrian across the provided  door , which must be among  doorsInSight .<\/p>\nmoving\n\nnextPosition\n\ncloneAction\n\nCognitiveAgentNavigationAction2D\n<p>Implementation of a  NavigationAction2D . This action accepts an  Euclidean2DEnvironmentWithGraph  whose graph\ncontains  ConvexPolygon al nodes and  Euclidean2DPassage s as edges.<\/p>\n"
                            }]
                          },
                          "cellmove": {
                            "ownKey": "cellmove",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/cellmove",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/cellmove"
                              },
                              "description": "",
                              "title": "CellMove",
                              "content": "<p><init><\/p>\n<p>Initialize an Action that move the cell of a given space delta, which can be expressed in percent of the cell's diameter or in absolute. If the cell has diameter 0, the only way to express delta is absolute. There's no way to decide the direction of the cell by this <code> it.unibo.alchemist.model.interfaces.Action <\/code>. This is inferred by the polarization vector contained in the cell.<\/p>\nexecute\n<p>cloneAction<\/p>\n<p>getNode<\/p>\n<p>getNextPosition<\/p>\n"
                            }]
                          },
                          "constantdistancerandomwalk": {
                            "ownKey": "constantdistancerandomwalk",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/constantdistancerandomwalk",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/constantdistancerandomwalk"
                              },
                              "description": "",
                              "title": "ConstantDistanceRandomWalk",
                              "content": "<p>Moves for distance toward a uniformly random chosen direction at a constant  speed ,\nthen changes direction and walks another distance, and so on.<\/p><p>Automatically changes direction on impact with obstacles\nif the environment supports them.<\/p><init>\n<p>Moves for distance toward a uniformly random chosen direction at a constant  speed ,\nthen changes direction and walks another distance, and so on.<\/p><p>Automatically changes direction on impact with obstacles\nif the environment supports them.<\/p>\ncloneAction\n\n"
                            }]
                          },
                          "saperemovenodeagent": {
                            "ownKey": "saperemovenodeagent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/saperemovenodeagent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperemovenodeagent"
                              },
                              "description": "",
                              "title": "SAPEREMoveNodeAgent",
                              "content": "<p><init><\/p>\n<p>Creates a new SAPERE Local Agent stub. If you use this constructor, you must be sure that your agent does not modify any molecule (e.g. an agent that just moves a node).<\/p>\n<init>\n<p>Creates a new SAPERE Local Agent stub. Use this constructor if you agent modifies a molecule (locally!)<\/p>\ngetCurrentPosition\n\ngetNeighborhood\n\ngetPosition\n\ngetLocalNeighborhood\n\ngetEnvironment\n\nmove\n\n"
                            }]
                          },
                          "followatdistance": {
                            "ownKey": "followatdistance",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/followatdistance",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/followatdistance"
                              },
                              "description": "",
                              "title": "FollowAtDistance",
                              "content": "<p>Makes the  Node  follow a target defined in a  Molecule  with some speed,\nbut keeping a distance from it.<\/p><init>\n<p>Makes the  Node  follow a target defined in a  Molecule  with some speed,\nbut keeping a distance from it.<\/p>\ncloneAction\n\nexecute\n\ngetContext\n\n"
                            }]
                          },
                          "lsarandomneighboraction": {
                            "ownKey": "lsarandomneighboraction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/lsarandomneighboraction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/lsarandomneighboraction"
                              },
                              "description": "",
                              "title": "LsaRandomNeighborAction",
                              "content": "<p><init><\/p>\n<p>Builds a new action in a neighborhood. es: +<id,X,n> This class extend LsaAbstractAction.<\/p>\ncloneAction\n<p>This method allows to clone this action on a new node. It may result useful to support runtime creation of nodes with the same reaction programming, e.g. for morphogenesis.<\/p>\nsetSynthectics\n<p>Sets the synthetic variables.<\/p>\ntoString\n<p>execute<\/p>\n<p>Effectively executes this action.<\/p>\ngetContext\n<p>getEnvironment<\/p>\n<p>getRandomGenerator<\/p>\n"
                            }]
                          },
                          "gpstracewalker": {
                            "ownKey": "gpstracewalker",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/gpstracewalker",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/gpstracewalker"
                              },
                              "description": "",
                              "title": "GPSTraceWalker",
                              "content": "<p>A walker that follows a trace. The trace is mandatory.<\/p><init>\n\ncloneAction\n\n"
                            }]
                          },
                          "runprotelisprogram": {
                            "ownKey": "runprotelisprogram",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/runprotelisprogram",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/runprotelisprogram"
                              },
                              "description": "",
                              "title": "RunProtelisProgram",
                              "content": "<p><init><\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p><init><\/p>\n<p>hashCode<\/p>\n<p>equals<\/p>\n<p>toString<\/p>\n<p>getOutboundDependencies<\/p>\n<p>getRetentionTime<\/p>\n<p>asMolecule<\/p>\n<p>execute<\/p>\n<p>getContext<\/p>\n<p>cloneAction<\/p>\n<p>getEnvironment<\/p>\n<p>getExecutionContext<\/p>\n<p>getNode<\/p>\n<p>prepareForComputationalCycle<\/p>\n<p>Resets the computation status (used for dependency management).<\/p>\ngetRandomGenerator\n<p>isComputationalCycleComplete<\/p>\n"
                            }]
                          },
                          "removejunctionincell": {
                            "ownKey": "removejunctionincell",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/removejunctionincell",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/removejunctionincell"
                              },
                              "description": "",
                              "title": "RemoveJunctionInCell",
                              "content": "<p>Represent the action of removing a junction between the current node and a neighbor. This action only remove the junction reference inside this node, the neighbor totally ignore that a junction has been removed. This is a part of the junction removal process. See <code> RemoveJunctionInNeighbor <\/code> for the other part of the process<\/p><init>\n\ntoString\n\nexecute\n<p>If no target node is given DO NOTHING. The junction can not be removed.<\/p>\nexecute\n<p>Removes the junction that links the node where this action is executed and the target node.<\/p>\ncloneAction\n\ngetNode\n\n"
                            }]
                          },
                          "navigationstrategies": {
                            "ownKey": "navigationstrategies",
                            "childrenPages": {
                              "pursuing": {
                                "ownKey": "pursuing",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/pursuing",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/pursuing"
                                  },
                                  "description": "",
                                  "title": "Pursuing",
                                  "content": "<p>A  NavigationStrategy  allowing to pursue a known (static)  destination  without knowing any\npath leading there, this is also known as path searching.\nIn this context, knowing a destination means knowing its position, which, in turn, means\nknowing two things:<\/p><ul><li>the direction that connects the destination and the current position as the crow flies,<\/li><li>an estimation of the distance between the destination and the current position.\nIn order to reach the  destination  without a route to follow, the weighting system used\nin  Exploring  is extended so as to take into account the (estimated) suitability of each\ndoor to reach the provided  destination , see  suitabilityFactor .<\/li><\/ul>destination\n<p>The destination to pursue.<\/p>\n<init>\n<p>A  NavigationStrategy  allowing to pursue a known (static)  destination  without knowing any\npath leading there, this is also known as path searching.\nIn this context, knowing a destination means knowing its position, which, in turn, means\nknowing two things:<\/p><ul><li>the direction that connects the destination and the current position as the crow flies,<\/li><li>an estimation of the distance between the destination and the current position.\nIn order to reach the  destination  without a route to follow, the weighting system used\nin  Exploring  is extended so as to take into account the (estimated) suitability of each\ndoor to reach the provided  destination , see  suitabilityFactor .<\/li><\/ul>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\nweight\n<p>Assigns a weight to a visible door (= passage). This weighting system is derived from the one\nby <a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>. The  suitabilityFactor \nis added to the factors of super method (=  Exploring.weight ).<\/p>\nsuitabilityFactor\n<p>Takes into account the rank given to the passage when assessing its suitability to reach\nthe  destination  (see  computeDoorsRankings ). It is computed as 1 - 0.5^ rank . This is\nderived from <a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen's work<\/a>.<\/p>\ncomputeDoorsRankings\n<p>Assign an integer rank to each door in sight, a lower rank means the door is preferable to\nreach the  destination . This method allows the pedestrian to perform an educated guess of\nwhich door to take in order to get closer to the  destination . It works as follows:\nthe spatial structure of the  currentRoom  is assumed to be entirely perceived, this is\nthe only spatial information taken into account a part from the  destination  itself.\nThe shortest paths (represented as polygonal chains) connecting the doors of the current room\nand the  destination  are computed, the lengths of these polygonal chains are calculated\nunder the constraint that the room must not be traversed by them but has to be bypassed (the\npolygon chains must not overlap with  currentRoom ).\nTo do so, a graph composed by the doors' midpoints, the room vertices and the  destination \nis built, then the shortest path between each door and the  destination  is computed and\neach door is ranked consequently (the shorter the path, the lower the rank).<\/p>\n"
                                }]
                              },
                              "exploring": {
                                "ownKey": "exploring",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/exploring",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/exploring"
                                  },
                                  "description": "",
                                  "title": "Exploring",
                                  "content": "<p>A  NavigationStrategy  allowing to explore the environment.\nIn order to choose which direction to take, a weighting system is used: every time the\npedestrian enters a new room all the visible doors are weighted, the one with minimum\nweight is then crossed. The weighting system used here is derived from the one by\n<a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>, see  weight .<\/p>pedestrian\n<p>Shortcut to obtain the pedestrian.<\/p>\nenvironment\n<p>Shortcut to obtain the environment.<\/p>\ncomparator\n<p>The comparator used to determine which passage to cross, a nearest door heuristic\nis used when multiple passages have the same weight.<\/p>\ncongestionLevel\n<p>Area occupied by pedestrians / total area of this room. Falls in <a href=\"#\">0,1<\/a>.<\/p>\narea\n<p>A rough estimation of the area of a  ConvexPolygon .<\/p>\narea\n<p>A rough estimation of the area of a  Pedestrian .<\/p>\naction\n<p>The  NavigationAction  used to navigate the environment.<\/p>\n<init>\n<p>A  NavigationStrategy  allowing to explore the environment.\nIn order to choose which direction to take, a weighting system is used: every time the\npedestrian enters a new room all the visible doors are weighted, the one with minimum\nweight is then crossed. The weighting system used here is derived from the one by\n<a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>, see  weight .<\/p>\ndistanceToPedestrian\n<p>Computes the distance between the pedestrian and a visible passage.<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\nweight\n<p>Assigns a weight to a visible door (= passage). This weighting system is derived from the one\nby <a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>. By default, it comprises\nthree factors:  volatileMemoryFactor ,  congestionFactor  and  impasseFactor .<\/p>\nvolatileMemoryFactor\n<p>Takes into account the information stored in the pedestrian's volatile memory. It is computed\nas 2^v where v is the number of visits to  head  (= the area the edge being weighted leads to).\nLess visited rooms are preferred.<\/p>\ncongestionFactor\n<p>Takes into account the congestion of  head , it is assumed that the pedestrian can estimate the\ncongestion level of a neighboring room. It is computed as 2 *  head .congestionLevel + 0.5 (less\ncrowded rooms are preferred). This function was derived empirically, observing it produces the\ndesired behavior (i.e. allows to avoid congestion) in a simple scenario (see the \"congestion\navoidance\" test of this module).<\/p>\nimpasseFactor\n<p>Takes into account whereas the assessed edge leads to a known impasse or not, known impasses\nare given knownImpasseWeight (which is usually a high value, allowing to avoid them), otherwise\nthis factor assumes unitary value.<\/p>\nisKnownImpasse\n<p>Checks if the pedestrian knows that the area is an impasse (= an area with a single door).<\/p>\nExploring\n<p>A  NavigationStrategy  allowing to explore the environment.\nIn order to choose which direction to take, a weighting system is used: every time the\npedestrian enters a new room all the visible doors are weighted, the one with minimum\nweight is then crossed. The weighting system used here is derived from the one by\n<a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>, see  weight .<\/p>\n"
                                }]
                              },
                              "knowndestinationreaching": {
                                "ownKey": "knowndestinationreaching",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/knowndestinationreaching",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/knowndestinationreaching"
                                  },
                                  "description": "",
                                  "title": "KnownDestinationReaching",
                                  "content": "<p>A  NavigationStrategy  allowing to reach a known (static) destination (see  Pursuing ).\nThe client can specify a list of known destinations, the pedestrian will try to reach the\nclosest one for which a valid path leading there is known.\nThe difference between this behavior and  Pursuing  is that the latter assumes no route\nleading to the destination is known, whereas this behavior tries to exploit the pedestrian's\ncognitive map to obtain a route to follow.<\/p>route\n<p>The route to follow.<\/p>\n<init>\n<p>A  NavigationStrategy  allowing to reach a known (static) destination (see  Pursuing ).\nThe client can specify a list of known destinations, the pedestrian will try to reach the\nclosest one for which a valid path leading there is known.\nThe difference between this behavior and  Pursuing  is that the latter assumes no route\nleading to the destination is known, whereas this behavior tries to exploit the pedestrian's\ncognitive map to obtain a route to follow.<\/p>\nisReached\n<p>A  waypoint  is considered reached when inside  currentRoom  or in an adjacent room.<\/p>\n"
                                }]
                              },
                              "destinationreaching": {
                                "ownKey": "destinationreaching",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/destinationreaching",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/destinationreaching"
                                  },
                                  "description": "",
                                  "title": "DestinationReaching",
                                  "content": "<p>A  NavigationStrategy  allowing to reach a (static) destination.\nThe client can specify a list of knownDestinations (see  Pursuing ) and unknownDestinations (see\n GoalOrientedExploring ).\nThe pedestrian will try to reach the closest known destination for which a valid path leading there is\nknown, but in case another destination is found along the way (either known or unknown), the latter will\nbe approached instead of the chosen known destination. To put it in another way, this behavior mixes\n KnownDestinationReaching  and  GoalOrientedExploring .<\/p><init>\n<p>A  NavigationStrategy  allowing to reach a (static) destination.\nThe client can specify a list of knownDestinations (see  Pursuing ) and unknownDestinations (see\n GoalOrientedExploring ).\nThe pedestrian will try to reach the closest known destination for which a valid path leading there is\nknown, but in case another destination is found along the way (either known or unknown), the latter will\nbe approached instead of the chosen known destination. To put it in another way, this behavior mixes\n KnownDestinationReaching  and  GoalOrientedExploring .<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\n"
                                }]
                              },
                              "routefollowing": {
                                "ownKey": "routefollowing",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/routefollowing",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/routefollowing"
                                  },
                                  "description": "",
                                  "title": "RouteFollowing",
                                  "content": "<p>A  NavigationStrategy  allowing to follow a given  route .\nThe  route  consists of a list of positions (= waypoints) that may or may not be in sight of each\nother (i.e. the path leading from a waypoint to the next one may or may not be representable\nas a single segment), for this reason  Pursuing  behavior is used to reach each waypoint.\nIn this context, a waypoint is considered reached when it's inside the current room (not when the\npedestrian reach that exact position), apart from the last waypoint which is actually approached.\nCuts to the route are allowed (i.e. if the pedestrian finds a waypoint which is farther than the\nexpected next one, he/she skips all the waypoints in between).<\/p>route\n<p>The route to follow.<\/p>\n<init>\n<p>A  NavigationStrategy  allowing to follow a given  route .\nThe  route  consists of a list of positions (= waypoints) that may or may not be in sight of each\nother (i.e. the path leading from a waypoint to the next one may or may not be representable\nas a single segment), for this reason  Pursuing  behavior is used to reach each waypoint.\nIn this context, a waypoint is considered reached when it's inside the current room (not when the\npedestrian reach that exact position), apart from the last waypoint which is actually approached.\nCuts to the route are allowed (i.e. if the pedestrian finds a waypoint which is farther than the\nexpected next one, he/she skips all the waypoints in between).<\/p>\ninUnexpectedNewRoom\n<p>When in an unexpected room the pedestrian gets back to  previousRoom  so as to continue following the\nroute correctly.<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\nwaypointReached\n<p>Checks if a new waypoint has been reached and updates indexOfNextWaypoint accordingly.<\/p>\nisReached\n<p>Checks if the given  waypoint  is reached (as stated above, if it's inside  currentRoom ).<\/p>\n"
                                }]
                              },
                              "dynamicpursuing": {
                                "ownKey": "dynamicpursuing",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/dynamicpursuing",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/dynamicpursuing"
                                  },
                                  "description": "",
                                  "title": "DynamicPursuing",
                                  "content": "<p> Pursuing  strategy allowing to dynamically change  destination .<\/p>destination\n<p>The destination to pursue.<\/p>\n<init>\n<p> Pursuing  strategy allowing to dynamically change  destination .<\/p>\nsetDestination\n<p>Changes the destination of the strategy. If  voidVolatileMemory  is true, the pedestrian's\nvolatile memory is set to zero. This has two effects:<\/p><ul><li>known impasses remain stored (hence the pedestrian will keep avoiding them)<\/li><li>rooms visited while pursuing the previous destination won't be penalised (= won't be avoided)\nDefaults to false.<\/li><\/ul>\n"
                                }]
                              },
                              "goalorientedexploring": {
                                "ownKey": "goalorientedexploring",
                                "ownPages": [{
                                  "reference": {
                                    "path": "kotlindoc",
                                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                                    "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies/goalorientedexploring",
                                    "extension": "html",
                                    "usePrettyUrl": true,
                                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies/goalorientedexploring"
                                  },
                                  "description": "",
                                  "title": "GoalOrientedExploring",
                                  "content": "<p>A  NavigationStrategy  allowing to explore the environment looking for something specific whose position\nis unknown.\nThe client can specify a list of unknownDestinations: these can be recognized once they're in sight,\nbut the pedestrian doesn't know their position until that moment (think e.g. of exits in an evacuation\nscenario). More specifically, unknown destinations can be detected if located in a room adjacent to the\nroom the pedestrian is into. Once a destination is detected, the pedestrian will reach it and stop.<\/p><init>\n<p>A  NavigationStrategy  allowing to explore the environment looking for something specific whose position\nis unknown.\nThe client can specify a list of unknownDestinations: these can be recognized once they're in sight,\nbut the pedestrian doesn't know their position until that moment (think e.g. of exits in an evacuation\nscenario). More specifically, unknown destinations can be detected if located in a room adjacent to the\nroom the pedestrian is into. Once a destination is detected, the pedestrian will reach it and stop.<\/p>\ninNewRoom\n<p>This is called whenever the pedestrian enters a new room.<\/p>\nreachUnknownDestination\n<p>If one or more unknown destinations are inside  newRoom  (= the room the pedestrian is into), the closest\none is approached. Otherwise, if one or more destinations are in a room adjacent to the current one, the\nrelated doors are weighted using  weightExit  and the one with minimum weight is crossed.  orElse  is\nexecuted otherwise.<\/p>\nleadsToUnknownDestination\n\nweightExit\n<p>Assigns a weight to a door (= passage) leading to an unknown destination (e.g. an exit).\nBy default, the exit's distance and its congestion are considered.<\/p>\n"
                                }]
                              }
                            },
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/navigationstrategies",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/navigationstrategies"
                              },
                              "description": "",
                              "title": "it.unibo.alchemist.model.implementations.actions.navigationstrategies",
                              "content": "<p>DestinationReaching<\/p>\n<p>A  NavigationStrategy  allowing to reach a (static) destination.\nThe client can specify a list of knownDestinations (see  Pursuing ) and unknownDestinations (see\n GoalOrientedExploring ).\nThe pedestrian will try to reach the closest known destination for which a valid path leading there is\nknown, but in case another destination is found along the way (either known or unknown), the latter will\nbe approached instead of the chosen known destination. To put it in another way, this behavior mixes\n KnownDestinationReaching  and  GoalOrientedExploring .<\/p>\nDynamicPursuing\n<p> Pursuing  strategy allowing to dynamically change  destination .<\/p>\nExploring\n<p>A  NavigationStrategy  allowing to explore the environment.\nIn order to choose which direction to take, a weighting system is used: every time the\npedestrian enters a new room all the visible doors are weighted, the one with minimum\nweight is then crossed. The weighting system used here is derived from the one by\n<a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al.<\/a>, see  weight .<\/p>\nGoalOrientedExploring\n<p>A  NavigationStrategy  allowing to explore the environment looking for something specific whose position\nis unknown.\nThe client can specify a list of unknownDestinations: these can be recognized once they're in sight,\nbut the pedestrian doesn't know their position until that moment (think e.g. of exits in an evacuation\nscenario). More specifically, unknown destinations can be detected if located in a room adjacent to the\nroom the pedestrian is into. Once a destination is detected, the pedestrian will reach it and stop.<\/p>\nKnownDestinationReaching\n<p>A  NavigationStrategy  allowing to reach a known (static) destination (see  Pursuing ).\nThe client can specify a list of known destinations, the pedestrian will try to reach the\nclosest one for which a valid path leading there is known.\nThe difference between this behavior and  Pursuing  is that the latter assumes no route\nleading to the destination is known, whereas this behavior tries to exploit the pedestrian's\ncognitive map to obtain a route to follow.<\/p>\nPursuing\n<p>A  NavigationStrategy  allowing to pursue a known (static)  destination  without knowing any\npath leading there, this is also known as path searching.\nIn this context, knowing a destination means knowing its position, which, in turn, means\nknowing two things:<\/p><ul><li>the direction that connects the destination and the current position as the crow flies,<\/li><li>an estimation of the distance between the destination and the current position.\nIn order to reach the  destination  without a route to follow, the weighting system used\nin  Exploring  is extended so as to take into account the (estimated) suitability of each\ndoor to reach the provided  destination , see  suitabilityFactor .<\/li><\/ul>\nRouteFollowing\n<p>A  NavigationStrategy  allowing to follow a given  route .\nThe  route  consists of a list of positions (= waypoints) that may or may not be in sight of each\nother (i.e. the path leading from a waypoint to the next one may or may not be representable\nas a single segment), for this reason  Pursuing  behavior is used to reach each waypoint.\nIn this context, a waypoint is considered reached when it's inside the current room (not when the\npedestrian reach that exact position), apart from the last waypoint which is actually approached.\nCuts to the route are allowed (i.e. if the pedestrian finds a waypoint which is farther than the\nexpected next one, he/she skips all the waypoints in between).<\/p>\n"
                            }]
                          },
                          "spin": {
                            "ownKey": "spin",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/spin",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/spin"
                              },
                              "description": "",
                              "title": "Spin",
                              "content": "<p>Spins a node around itself at angularSpeedDegrees normalized according to the speed of the reaction.<\/p><init>\n<p>Spins a node around itself at angularSpeedDegrees normalized according to the speed of the reaction.<\/p>\ncloneAction\n\nexecute\n<p>Spins the node around itself.<\/p>\ngetContext\n\n"
                            }]
                          },
                          "removejunctioninneighbor": {
                            "ownKey": "removejunctioninneighbor",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/removejunctioninneighbor",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/removejunctioninneighbor"
                              },
                              "description": "",
                              "title": "RemoveJunctionInNeighbor",
                              "content": "<p>Represent the action of removing a junction between a neighbor and the current node. This action only remove the junction reference inside the neighbor node, the current one totally ignore that a junction has been removed. This is a part of the junction removal process. See <code> RemoveJunctionInCell <\/code> for the other part of the process.<\/p><init>\n\ntoString\n\nexecute\n<p>If no target node is given DO NOTHING. The junction can not be removed.<\/p>\nexecute\n\ncloneAction\n\ngetNode\n\n"
                            }]
                          },
                          "abstracteuclideanconfigurablemovenode": {
                            "ownKey": "abstracteuclideanconfigurablemovenode",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstracteuclideanconfigurablemovenode",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstracteuclideanconfigurablemovenode"
                              },
                              "description": "",
                              "title": "AbstractEuclideanConfigurableMoveNode",
                              "content": "<p>It's an  AbstractConfigurableMoveNode  in the Euclidean world, which provides a default  interpolatePositions \nthat is accurate with respect to the target given and the current maximum walking distance.<\/p><init>\n<p>It's an  AbstractConfigurableMoveNode  in the Euclidean world, which provides a default  interpolatePositions \nthat is accurate with respect to the target given and the current maximum walking distance.<\/p>\ninterpolatePositions\n\n"
                            }]
                          },
                          "abstractsteeringaction": {
                            "ownKey": "abstractsteeringaction",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/abstractsteeringaction",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/abstractsteeringaction"
                              },
                              "description": "",
                              "title": "AbstractSteeringAction",
                              "content": "<p>A  SteeringAction  in a vector space. The implementation of  nextPosition  is left to subclasses.<\/p>maxWalk\n<p>The maximum distance the pedestrian can walk, this is a length.<\/p>\nreaction\n<p>The reaction in which this action is executed.<\/p>\npedestrian\n<p>The owner of this action.<\/p>\n<init>\n<p>A  SteeringAction  in a vector space. The implementation of  nextPosition  is left to subclasses.<\/p>\ngetNextPosition\n\ngetNode\n\ncloneAction\n\ncloneAction\n\nrequireNodeTypeAndProduce\n\n"
                            }]
                          },
                          "saperemovelsatoagent": {
                            "ownKey": "saperemovelsatoagent",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/actions/saperemovelsatoagent",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/saperemovelsatoagent"
                              },
                              "description": "",
                              "title": "SAPEREMoveLSAToAgent",
                              "content": "<p>This agent matches a template, removes a single instance of it from the current node and moves the LSA to another node (specified at creation time). Please note that, since the destination could be anywhere in the system, this action has a GLOBAL <code> Context <\/code>, and thus may trigger a large number of updates, slowing down the whole simulation. Handle with care.<\/p><init>\n<p>This is the constructor that should be called from DSL. Dynamically computes the destination node if an id is given.<\/p>\n<init>\n\nexecute\n\ngetContext\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/actions",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.actions",
                          "content": "<p>AbstractGroupSteeringAction<\/p>\n<p>An abstract  GroupSteeringAction .<\/p>\nAbstractLayerAction\n<p>Abstract implementation of an action influenced by the concentration of a given molecule in the environment.<\/p>\nAbstractNavigationAction\n<p>An abstract  NavigationAction , taking care of properly moving the pedestrian in the\nenvironment while delegating the decision on where to move it to a  NavigationStrategy .<\/p>\nAbstractSteeringAction\n<p>A  SteeringAction  in a vector space. The implementation of  nextPosition  is left to subclasses.<\/p>\nAbstractSteeringActionWithTarget\n<p>A  SteeringActionWithTarget  in a vector space.<\/p>\nCognitiveAgentArrive\n<p>Move the agent towards a target position.\nIt is similar to  CognitiveAgentSeek  but attempts to arrive at the target position with a zero velocity.<\/p>\nCognitiveAgentAvoidLayer\n<p>Move the pedestrian towards positions of the environment with a low concentration of the target molecule.<\/p>\nCognitiveAgentCohesion\n<p>Move the agent towards the other members of his group.<\/p>\nCognitiveAgentCombineSteering\n<p>Combination of multiple steering actions.<\/p>\nCognitiveAgentExplore\n<p>A  NavigationAction  using  Exploring  navigation strategy.<\/p>\nCognitiveAgentFlee\n<p>Move the agent away from a target position. It's the opposite of  CognitiveAgentSeek .<\/p>\nCognitiveAgentFollowLayer\n<p>Move the pedestrian towards positions of the environment with a high concentration of the target molecule.<\/p>\nCognitiveAgentFollowRoute\n<p>A  NavigationAction  using  RouteFollowing  navigation strategy.<\/p>\nCognitiveAgentFollowScalarField\n<p>Moves the pedestrian where the given scalar field is higher.<\/p>\nCognitiveAgentGoalOrientedExplore\n<p>A  NavigationAction  using  GoalOrientedExploring  navigation strategy.<\/p>\nCognitiveAgentNavigationAction2D\n<p>Implementation of a  NavigationAction2D . This action accepts an  Euclidean2DEnvironmentWithGraph  whose graph\ncontains  ConvexPolygon al nodes and  Euclidean2DPassage s as edges.<\/p>\nCognitiveAgentObstacleAvoidance\n<p>Move the agent avoiding potential obstacles in its path.<\/p>\nCognitiveAgentPursue\n<p>A  NavigationAction  using  Pursuing  navigation strategy.<\/p>\nCognitiveAgentReachDestination\n<p>A  NavigationAction  using  DestinationReaching  navigation strategy.\nAccepts an array of coordinates representing the destinations and uses inferIsKnown to partition them into\nknown and unknown ones.<\/p>\nCognitiveAgentReachKnownDestination\n<p>A  NavigationAction  using  KnownDestinationReaching  navigation strategy.<\/p>\nCognitiveAgentSeek\n<p>Move the pedestrian towards the target position as fast as possible.<\/p>\nCognitiveAgentSeek2D\n<p> CognitiveAgentSeek  behavior in a bidimensional environment, delegated to  CognitiveAgentFollowScalarField \n(this means the pedestrian tries to overtake others on its path,\nin general its movements are more sophisticated than  CognitiveAgentSeek ).<\/p>\nCognitiveAgentSeparation\n<p>Move the agent away from the pedestrians near to him.<\/p>\nCognitiveAgentWander\n<p>Give the impression of a random walk through the environment targeting an ever changing pseudo-randomly point\nof a circumference at a given distance and with a given radius from the current pedestrian position.<\/p>\nAbstractEuclideanConfigurableMoveNode\n<p>It's an  AbstractConfigurableMoveNode  in the Euclidean world, which provides a default  interpolatePositions \nthat is accurate with respect to the target given and the current maximum walking distance.<\/p>\nConstantDistanceRandomWalk\n<p>Moves for distance toward a uniformly random chosen direction at a constant  speed ,\nthen changes direction and walks another distance, and so on.<\/p><p>Automatically changes direction on impact with obstacles\nif the environment supports them.<\/p>\nFollowAtDistance\n<p>Makes the  Node  follow a target defined in a  Molecule  with some speed,\nbut keeping a distance from it.<\/p>\nGenericRandomWalker\n<p>Chooses random targets in a direction extracted from  randomGenerator \nat a distance extracted from  distanceDistribution .\nMoves the node towards the targets at the given constant  speed . Changes target on collision.<\/p>\nHeadTowardRandomDirection\n<p>Changes the heading of node randomly.\nThe environment must support node heading, hence, be a  Physics2DEnvironment .<\/p>\nHeadTowardTarget\n<p>Reads the target's absolute coordinates from the target molecule\ncontained in node and sets the node's heading accordingly.<\/p>\nLevyWalk\n<p>Selects a target based on a random direction extracted from <a href=\"#\">rng<\/a>,\nand a random distance extracted from a <a href=\"#\">ParetoDistribution<\/a> of parameters scale and shape.\nMoves toward the targets at a constant  speed  and changes targets on collision.<\/p>\nSpin\n<p>Spins a node around itself at angularSpeedDegrees normalized according to the speed of the reaction.<\/p>\nToggleMolecule\n<p>Treats  molecule  as a switch:<\/p><ul><li>if it is present, then it's removed from node;<\/li><li>otherwise, it is inserted in node with the provided  concentration .<\/li><\/ul>\nToggleMoleculeRandomly\n<p>Treats  molecule  as a probabilistic switch:<\/p><ul><li>if it is present, then with probability odds it's removed from node;<\/li><li>otherwise, with probability odds it is inserted in node with the provided  concentration .<\/li><\/ul>\nCameraInjectVisibleNodeClosestToDistance\n<p>Given a list of  VisibleNode  associated to visionMolecule,\nit finds the closest to a point located at distance from node\nin the direction of node's heading,\nand injects its position in targetMolecule.<\/p><p>If there are no  VisibleNode s, targetMolecule will be removed from node.<\/p>\nCameraSee\n<p>Checks nodes in the environment and writes in outputMolecule\nthe list of  it.unibo.alchemist.model.interfaces.VisibleNode ,\ncontaining filterByMolecule.\n distance  and  angle  define the field of view.<\/p>\nAbstractConfigurableMoveNode\n<p>An abstract class that factorizes code for multiple different movements. With three strategies can be defined: the next target to be reached, the routing strategy to adopt, the speed to move at.<\/p>\nSetLocalMoleculeConcentration\n<p>AbstractActionOnSingleMolecule<\/p>\n<p>This class offers the basic structures to provide operations with numeric concentrations on a single molecule.<\/p>\nBrownianMove\n<p>Moves the node randomly.<\/p>\nAbstractAction\n<p>An abstract class facility with some generic methods implemented.<\/p>\nRemoveNode\n<p>Removes the current node from the environment.<\/p>\nAbstractLocalAction\n<p>MoveToTarget<\/p>\n<p>Movement towards a target defined as a concentration.<\/p>\nAbstractMoveNode\n<p>This action moves a node inside a given environment.<\/p>\nMoveForwardAndTeleport\n<p>Moves the node along the x axis up to coordinate <code> #getMaxX() <\/code>, with steps of size <code> #getDeltaX() <\/code>. Once <code> #getMaxX() <\/code> is reached, the nodes gets teleported back to <code> #getMinX() <\/code>. Somewhat, it mimics the movement a node would have in a cylindrical environment.<\/p>\nRemoveJunctionInCell\n<p>Represent the action of removing a junction between the current node and a neighbor. This action only remove the junction reference inside this node, the neighbor totally ignore that a junction has been removed. This is a part of the junction removal process. See <code> RemoveJunctionInNeighbor <\/code> for the other part of the process<\/p>\nRandomPolarization\n<p>CellTensionPolarization<\/p>\n<p>AddJunctionInNeighbor<\/p>\n<p>Represent the action of add a junction between a neighbor and the current node. This action only create the junction reference inside the neighbor, the current node totally ignore that a junction has been created. This is a part of the junction creation process. See <code> AddJunctionInCell <\/code> for the other part of the process<\/p>\nCellMove\n<p>AddJunctionInCell<\/p>\n<p>Represent the action of add a junction between the current node and a neighbor. This action only create the junction reference inside this node, the neighbor totally ignore that a junction has been created. This is a part of the junction creation process. See <code> AddJunctionInNeighbor <\/code> for the other part of the process<\/p>\nChangeBiomolConcentrationInNeighbor\n<p>ChangeBiomolConcentrationInCell<\/p>\n<p>RemoveJunctionInNeighbor<\/p>\n<p>Represent the action of removing a junction between a neighbor and the current node. This action only remove the junction reference inside the neighbor node, the current one totally ignore that a junction has been removed. This is a part of the junction removal process. See <code> RemoveJunctionInCell <\/code> for the other part of the process.<\/p>\nChemotacticPolarization\n<p>AbstractRandomizableAction<\/p>\n<p>AbstractNeighborAction<\/p>\n<p>Represents an action on a neighbor.<\/p>\nChangeBiomolConcentrationInEnv\n<p>Action implementing the changing of the concentration of a given biomolecule in environment.<\/p>\nRunProtelisProgram\n<p>SendToNeighbor<\/p>\n<p>SAPEREChemotaxis<\/p>\n<p>This class provides a chemotaxis implementation for SAPERE, namely, an agent able to move a molecule towards a specific node.<\/p>\nLsaAbstractAction\n<p>SAPEREAgent<\/p>\n<p>SAPEREWalkerRiseGradient<\/p>\n<p>SAPERENeighborAgent<\/p>\n<p>A SAPERE Agent that modifies something on neighboring nodes.<\/p>\nSAPERELocalAgent\n<p>A SAPERE Agent that does not do actions on neighbors.<\/p>\nSAPEREMoveNodeAgent\n<p>LsaStandardAction<\/p>\n<p>This action add LsaMolecule in a single node.<\/p>\nLsaChangeArgument\n<p>LsaAscendingAgent<\/p>\n<p>LsaRandomNeighborAction<\/p>\n<p>LsaCountNeighborsAction<\/p>\n<p>LsaAllNeighborsAction<\/p>\n<p>The execution involves all neighbours. The molecule can be different from a neighbor to the other, because some special Variable (#D) are specific for each node. This is why N molecules are instanced if there are N neighbours.<\/p>\nSAPEREMoveLSAToAgent\n<p>This agent matches a template, removes a single instance of it from the current node and moves the LSA to another node (specified at creation time). Please note that, since the destination could be anywhere in the system, this action has a GLOBAL <code> Context <\/code>, and thus may trigger a large number of updates, slowing down the whole simulation. Handle with care.<\/p>\nLsaAscendingGradientDist\n<p>SAPEREWalker<\/p>\n<p>MoveOnMap<\/p>\n<p>GPSTraceWalker<\/p>\n<p>A walker that follows a trace. The trace is mandatory.<\/p>\nTargetWalker\n<p>ReproduceGPSTrace<\/p>\n<p>MoveOnMapWithGPS<\/p>\n<p>basic action that follow a <code> GPSTrace <\/code>.<\/p>\nit.unibo.alchemist.model.implementations.actions.navigationstrategies\n<p>it.unibo.alchemist.model.implementations.actions.steeringstrategies<\/p>\n<p>it.unibo.alchemist.model.implementations.actions.physicalstrategies<\/p>\n<p>cartesianProduct<\/p>\n<p>Performs the cartesian product of two sequences.<\/p>\ntakePercentage\n<p>Takes the first  percentage  * size elements of the list.<\/p>\ntoPositions\n<p>Converts an array of numbers representing positions to an actual list of positions. E.g. the array <a href=\"#\">2,3,4,5<\/a> in\na bidimensional environment would be transformed into a list containing positions (2,3) and (4,5).<\/p>\n"
                        }]
                      },
                      "linkingrules": {
                        "ownKey": "linkingrules",
                        "childrenPages": {
                          "conditionalclosestn": {
                            "ownKey": "conditionalclosestn",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/conditionalclosestn",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/conditionalclosestn"
                              },
                              "description": "",
                              "title": "ConditionalClosestN",
                              "content": "<p>A <code> ClosestN <\/code> rule that also checks that a <code> Molecule <\/code> has a specific concentration before allowing the connection.<\/p><init>\n\n<init>\n\nnodeIsEnabled\n\n"
                            }]
                          },
                          "nolinks": {
                            "ownKey": "nolinks",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/nolinks",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/nolinks"
                              },
                              "description": "",
                              "title": "NoLinks",
                              "content": "<p>This rule guarantees that no links are created at all.<\/p><init>\n<p>This rule guarantees that no links are created at all.<\/p>\ncomputeNeighborhood\n\n"
                            }]
                          },
                          "fullyconnected": {
                            "ownKey": "fullyconnected",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/fullyconnected",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/fullyconnected"
                              },
                              "description": "",
                              "title": "FullyConnected",
                              "content": "<p>This rule connects each and every node to each and every other.<\/p><init>\n<p>This rule connects each and every node to each and every other.<\/p>\nisLocallyConsistent\n\ncomputeNeighborhood\n\n"
                            }]
                          },
                          "connectwithindistance": {
                            "ownKey": "connectwithindistance",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/connectwithindistance",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connectwithindistance"
                              },
                              "description": "",
                              "title": "ConnectWithinDistance",
                              "content": "<p>LinkingRule which connects nodes whose euclidean distance is shorter than a given radius.<\/p><init>\n\ngetRange\n\ncomputeNeighborhood\n<p>Subclasses may change the way a neighborhood is computed.<\/p>\n"
                            }]
                          },
                          "selectiveadaptiverange": {
                            "ownKey": "selectiveadaptiverange",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/selectiveadaptiverange",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/selectiveadaptiverange"
                              },
                              "description": "",
                              "title": "SelectiveAdaptiveRange",
                              "content": "<p>DEFAULT_MOLECULETYPE<\/p>\n<p>The default filter molecule.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\nconditionForRemoval\n<p>Acts as a filter. It is called to test if the nodes in the computed neighborhood (namely, those nodes within the communication range of the current node) should be removed or not, and must return true if the node should not be inserted in the neighborhood. This implementation checks that the actual distance between the nodes is shorter than the communication range of the neighbor.<\/p>\n"
                            }]
                          },
                          "combinedlinkingrule": {
                            "ownKey": "combinedlinkingrule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/combinedlinkingrule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/combinedlinkingrule"
                              },
                              "description": "",
                              "title": "CombinedLinkingRule",
                              "content": "<p>A meta-rule that combines multiple  subRules .\nIf any mandates a link, such link is created (union of all links).<\/p>subRules\n<p><init><\/p>\n<p>A meta-rule that combines multiple  subRules .\nIf any mandates a link, such link is created (union of all links).<\/p>\ncomputeNeighborhood\n<p>isLocallyConsistent<\/p>\n"
                            }]
                          },
                          "abstractlocallyconsistentlinkingrule": {
                            "ownKey": "abstractlocallyconsistentlinkingrule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/abstractlocallyconsistentlinkingrule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/abstractlocallyconsistentlinkingrule"
                              },
                              "description": "",
                              "title": "AbstractLocallyConsistentLinkingRule",
                              "content": "<p><init><\/p>\n<p>isLocallyConsistent<\/p>\n"
                            }]
                          },
                          "obstaclesbreakconnection": {
                            "ownKey": "obstaclesbreakconnection",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/obstaclesbreakconnection",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/obstaclesbreakconnection"
                              },
                              "description": "",
                              "title": "ObstaclesBreakConnection",
                              "content": "<p>Similar to <code> ConnectWithinDistance <\/code>, but if the environment has obstacles, the links are removed.<\/p><init>\n\ncomputeNeighborhood\n\n"
                            }]
                          },
                          "offsetgraphstreamlinkingrule": {
                            "ownKey": "offsetgraphstreamlinkingrule",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/offsetgraphstreamlinkingrule",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/offsetgraphstreamlinkingrule"
                              },
                              "description": "",
                              "title": "OffsetGraphStreamLinkingRule",
                              "content": "<p>A  LinkingRule  that statically connects nodes as they were configured by GraphStream.\nAn  offset  is used to determine the id of the environment's nodes when comparted to the one of the\nprovided  graph .<\/p>offset\n<p>graph<\/p>\n<p><init><\/p>\n<p>A  LinkingRule  that statically connects nodes as they were configured by GraphStream.\nAn  offset  is used to determine the id of the environment's nodes when comparted to the one of the\nprovided  graph .<\/p>\ncomputeNeighborhood\n<p>isLocallyConsistent<\/p>\n"
                            }]
                          },
                          "connecttoaccesspoint": {
                            "ownKey": "connecttoaccesspoint",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/connecttoaccesspoint",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connecttoaccesspoint"
                              },
                              "description": "",
                              "title": "ConnectToAccessPoint",
                              "content": "<p>accessPointId<\/p>\n<p>the id of the access point.<\/p>\n<init>\n\ncomputeNeighborhood\n\n"
                            }]
                          },
                          "connectionbeam": {
                            "ownKey": "connectionbeam",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/connectionbeam",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connectionbeam"
                              },
                              "description": "",
                              "title": "ConnectionBeam",
                              "content": "<p>Connects two nodes if, throwing a beam from one to the other, there exists at least one path entirely inside the beam that connects the two nodes. This rule is ideal for environments with obstacles, where the user wants some tolerance in connection breaking.<\/p><init>\n\ncomputeNeighborhood\n\n"
                            }]
                          },
                          "connectviaaccesspoint": {
                            "ownKey": "connectviaaccesspoint",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/connectviaaccesspoint",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connectviaaccesspoint"
                              },
                              "description": "",
                              "title": "ConnectViaAccessPoint",
                              "content": "<p>accessPointId<\/p>\n<p>the id of the access point.<\/p>\n<init>\n\ncomputeNeighborhood\n\n"
                            }]
                          },
                          "closestn": {
                            "ownKey": "closestn",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/closestn",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/closestn"
                              },
                              "description": "",
                              "title": "ClosestN",
                              "content": "<p>Non local-consistent rule that connect the closest N nodes together. Two nodes get connected if either one belongs to the set of the ten devices closest to the other.<\/p><init>\n\n<init>\n\n<init>\n\nnodesInRange\n\ngetRange\n<p>Gets the communication range of a node.<\/p>\ngetN\n\ncomputeNeighborhood\n\nsetRange\n<p>Sets a communication range for a node. Used for optimization purposes.<\/p>\nisLocallyConsistent\n\nnodeIsEnabled\n<p>This method always return true. Subclasses can override it.<\/p>\n"
                            }]
                          },
                          "linknodeswithinroutingrange": {
                            "ownKey": "linknodeswithinroutingrange",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/linknodeswithinroutingrange",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/linknodeswithinroutingrange"
                              },
                              "description": "",
                              "title": "LinkNodesWithinRoutingRange",
                              "content": "<p><init><\/p>\n<p>computeNeighborhood<\/p>\n"
                            }]
                          },
                          "adaptiverange": {
                            "ownKey": "adaptiverange",
                            "ownPages": [{
                              "reference": {
                                "path": "kotlindoc",
                                "baseUrl": "https://alchemistsimulator.github.io/latest",
                                "fileName": "it/unibo/alchemist/model/implementations/linkingrules/adaptiverange",
                                "extension": "html",
                                "usePrettyUrl": true,
                                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/adaptiverange"
                              },
                              "description": "",
                              "title": "AdaptiveRange",
                              "content": "<p>This linking rule dynamically searches for the best radius for each device, in such a way that it connects to a certain number of devices.<\/p>DEFAULT_ADJUSTMENT\n<p>Default adjustment.<\/p>\nDEFAULT_MAXRANGE\n<p>Default maximum range.<\/p>\nDEFAULT_MINRANGE\n<p>Default minimum range.<\/p>\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\n<init>\n\nconditionForRemoval\n<p>Acts as a filter. It is called to test if the nodes in the computed neighborhood (namely, those nodes within the communication range of the current node) should be removed or not, and must return true if the node should not be inserted in the neighborhood. This implementation checks that the actual distance between the nodes is shorter than the communication range of the neighbor.<\/p>\ncomputeNeighborhood\n\n"
                            }]
                          }
                        },
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc",
                            "baseUrl": "https://alchemistsimulator.github.io/latest",
                            "fileName": "it/unibo/alchemist/model/implementations/linkingrules",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules"
                          },
                          "description": "",
                          "title": "it.unibo.alchemist.model.implementations.linkingrules",
                          "content": "<p>ConnectToAccessPoint<\/p>\n<p>ConnectViaAccessPoint<\/p>\n<p>FullyConnected<\/p>\n<p>This rule connects each and every node to each and every other.<\/p>\nCombinedLinkingRule\n<p>A meta-rule that combines multiple  subRules .\nIf any mandates a link, such link is created (union of all links).<\/p>\nOffsetGraphStreamLinkingRule\n<p>A  LinkingRule  that statically connects nodes as they were configured by GraphStream.\nAn  offset  is used to determine the id of the environment's nodes when comparted to the one of the\nprovided  graph .<\/p>\nConnectionBeam\n<p>Connects two nodes if, throwing a beam from one to the other, there exists at least one path entirely inside the beam that connects the two nodes. This rule is ideal for environments with obstacles, where the user wants some tolerance in connection breaking.<\/p>\nAdaptiveRange\n<p>This linking rule dynamically searches for the best radius for each device, in such a way that it connects to a certain number of devices.<\/p>\nClosestN\n<p>Non local-consistent rule that connect the closest N nodes together. Two nodes get connected if either one belongs to the set of the ten devices closest to the other.<\/p>\nAbstractLocallyConsistentLinkingRule\n<p>ObstaclesBreakConnection<\/p>\n<p>Similar to <code> ConnectWithinDistance <\/code>, but if the environment has obstacles, the links are removed.<\/p>\nConditionalClosestN\n<p>A <code> ClosestN <\/code> rule that also checks that a <code> Molecule <\/code> has a specific concentration before allowing the connection.<\/p>\nConnectWithinDistance\n<p>LinkingRule which connects nodes whose euclidean distance is shorter than a given radius.<\/p>\nNoLinks\n<p>This rule guarantees that no links are created at all.<\/p>\nSelectiveAdaptiveRange\n<p>LinkNodesWithinRoutingRange<\/p>\n"
                        }]
                      }
                    }
                  },
                  "sapereincarnation": {
                    "ownKey": "sapereincarnation",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/model/sapereincarnation",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/sapereincarnation"
                      },
                      "description": "",
                      "title": "SAPEREIncarnation",
                      "content": "<p><init><\/p>\n<p>createNode<\/p>\n<p>createCondition<\/p>\n<p>createTimeDistribution<\/p>\n<p>toString<\/p>\n<p>createReaction<\/p>\n<p>createConcentration<\/p>\n<p>createAction<\/p>\n<p>createMolecule<\/p>\n<p>getProperty<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/model",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.model",
                  "content": "<p>BiochemistryIncarnation<\/p>\n<p>ProtelisIncarnation<\/p>\n<p>SAPEREIncarnation<\/p>\n<p>it.unibo.alchemist.model.cognitiveagents<\/p>\n<p>it.unibo.alchemist.model.implementations.actions<\/p>\n<p>it.unibo.alchemist.model.implementations.conditions<\/p>\n<p>it.unibo.alchemist.model.implementations.groups<\/p>\n<p>it.unibo.alchemist.model.implementations.nodes<\/p>\n<p>it.unibo.alchemist.model.implementations.reactions<\/p>\n<p>it.unibo.alchemist.model.interfaces<\/p>\n<p>it.unibo.alchemist.model.math<\/p>\n<p>it.unibo.alchemist.model.implementations.environments<\/p>\n<p>it.unibo.alchemist.model.implementations.geometry<\/p>\n<p>it.unibo.alchemist.model.implementations.movestrategies<\/p>\n<p>it.unibo.alchemist.model.implementations.layers<\/p>\n<p>it.unibo.alchemist.model.implementations.linkingrules<\/p>\n<p>it.unibo.alchemist.model.implementations.neighborhoods<\/p>\n<p>it.unibo.alchemist.model.implementations.terminators<\/p>\n<p>it.unibo.alchemist.model.implementations.timedistributions<\/p>\n<p>it.unibo.alchemist.model.smartcam<\/p>\n<p>it.unibo.alchemist.model.implementations.positions<\/p>\n<p>it.unibo.alchemist.model.implementations.obstacles<\/p>\n<p>it.unibo.alchemist.model.implementations.routes<\/p>\n<p>it.unibo.alchemist.model.implementations.times<\/p>\n<p>it.unibo.alchemist.model.implementations.molecules<\/p>\n<p>it.unibo.alchemist.model.implementations.concentrations<\/p>\n<p>randomAngle<\/p>\n<p>Generates a random value in 0..2π.<\/p>\nplus\n<p>Plus operator for  Time  and Double.<\/p>\nminus\n<p>Minus operator for  Time  and Double.<\/p>\n"
                }]
              },
              "protelis": {
                "ownKey": "protelis",
                "childrenPages": {
                  "alchemistnetworkmanager": {
                    "ownKey": "alchemistnetworkmanager",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/protelis/alchemistnetworkmanager",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/protelis/alchemistnetworkmanager"
                      },
                      "description": "",
                      "title": "AlchemistNetworkManager",
                      "content": "<p>Emulates a NetworkManager. This particular network manager does not send messages instantly. Instead, it records the last message to send, and only when <code> #simulateMessageArrival(double) <\/code> is called the transfer is actually done.<\/p><init>\n\n<init>\n\n<init>\n\nshareState\n\ngetDistancePacketLossDistribution\n\nsimulateMessageArrival\n<p>Simulates the arrival of the message to other nodes.<\/p>\ngetRetentionTime\n\ngetNeighborState\n\n"
                    }]
                  },
                  "alchemistexecutioncontext": {
                    "ownKey": "alchemistexecutioncontext",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc",
                        "baseUrl": "https://alchemistsimulator.github.io/latest",
                        "fileName": "it/unibo/alchemist/protelis/alchemistexecutioncontext",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/protelis/alchemistexecutioncontext"
                      },
                      "description": "",
                      "title": "AlchemistExecutionContext",
                      "content": "<p>USE_ROUTES_AS_DISTANCES<\/p>\n<p>Put this <code> Molecule <\/code> inside nodes that should compute distances using routes. It only makes sense in case the environment is a <code> MapEnvironment <\/code><\/p>\nAPPROXIMATE_NBR_RANGE\n<p>Put this <code> Molecule <\/code> inside nodes that should compute distances using routes approximating them. It only makes sense in case the environment is a <code> MapEnvironment <\/code><\/p>\n<init>\n\nhashCode\n\ngetEnvironmentAccess\n\nnextRandomDouble\n\nequals\n\ngetDeviceUID\n\ngetCurrentTime\n\ninstance\n\nroutingDistance\n<p>Computes the distance along a map. Requires a <code> MapEnvironment <\/code>.<\/p>\nroutingDistance\n<p>Computes the distance along a map. Requires a <code> MapEnvironment <\/code>.<\/p>\nroutingDistance\n<p>Computes the distance along a map. Requires a <code> MapEnvironment <\/code>.<\/p>\nroutingDistance\n<p>Computes the distance along a map. Requires a <code> MapEnvironment <\/code>.<\/p>\nnbrDelay\n\nnbrRange\n\ngetDevicePosition\n\ngetCoordinates\n\nnbrLag\n\nnbrVector\n\ndistanceTo\n<p>Computes the distance between two nodes, through <code> Environment#getDistanceBetweenNodes(Node, Node) <\/code>.<\/p>\ndistanceTo\n<p>Computes the distance between two nodes, through <code> Environment#getDistanceBetweenNodes(Node, Node) <\/code>.<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc",
                    "baseUrl": "https://alchemistsimulator.github.io/latest",
                    "fileName": "it/unibo/alchemist/protelis",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/protelis"
                  },
                  "description": "",
                  "title": "it.unibo.alchemist.protelis",
                  "content": "<p>AlchemistNetworkManager<\/p>\n<p>Emulates a NetworkManager. This particular network manager does not send messages instantly. Instead, it records the last message to send, and only when <code> #simulateMessageArrival(double) <\/code> is called the transfer is actually done.<\/p>\nAlchemistExecutionContext\n"
                }]
              }
            },
            "ownPages": [{
              "reference": {
                "path": "kotlindoc",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "it/unibo/alchemist",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist"
              },
              "description": "",
              "title": "it.unibo.alchemist",
              "content": "<p>ClassPathScanner<\/p>\n<p>An utility class providing support for loading arbitrary subclasses available in the classpath.<\/p>\nAlchemist\n<p>Starts Alchemist.<\/p>\nAlchemistExecutionOptions\n<p>Alchemist options provided by the command line.<\/p>\nSupportedIncarnations\n<p>This enum interfaces the generic components of the graphical interface with the specific incarnation details.<\/p>\nit.unibo.alchemist.core.implementations\n<p>it.unibo.alchemist.boundary<\/p>\n<p>it.unibo.alchemist.input<\/p>\n<p>it.unibo.alchemist.launch<\/p>\n<p>it.unibo.alchemist.wormhole.implementation<\/p>\n<p>it.unibo.alchemist.model<\/p>\n<p>it.unibo.alchemist.loader<\/p>\n<p>it.unibo.alchemist.cli<\/p>\n<p>it.unibo.alchemist.grid.util<\/p>\n<p>it.unibo.alchemist.grid.exceptions<\/p>\n<p>it.unibo.alchemist.grid.cluster<\/p>\n<p>it.unibo.alchemist.grid.simulation<\/p>\n<p>it.unibo.alchemist.grid.config<\/p>\n<p>it.unibo.alchemist.exceptions<\/p>\n<p>it.unibo.alchemist.biochemistrydsl<\/p>\n<p>it.unibo.alchemist.protelis<\/p>\n<p>it.unibo.alchemist.core.interfaces<\/p>\n<p>it.unibo.alchemist.utils<\/p>\n<p>it.unibo.alchemist.expressions.implementations<\/p>\n<p>it.unibo.alchemist.expressions.parser<\/p>\n<p>it.unibo.alchemist.expressions.interfaces<\/p>\n<p>syncRunLater<\/p>\n<p>Runs the given task on the FX thread and waits for the task to finish, returning any value the task returns.\nThrows an exception if the task takes more than a given amount of milliseconds.<\/p>\nsyncRunOnFXThread\n<p>Checks if the current thread is the FX Application thread and calls  syncRunLater  if so, otherwise runs the task.<\/p>\nrunOnFXThread\n<p>Checks if the current thread is the FX Application thread and calls <a href=\"#\">runLater<\/a> if so, otherwise runs the task.<\/p>\nunfold\n<p>The opposite of <a href=\"#\">fold<\/a>.<\/p>\ntoPosition\n<p>Tries to convert a concentration  T  into a valid position of type  P  descriptor.\nTypes are bound to the  environment  types.<\/p>\nmurmur3Hash32\n<p>Hashes a number of Anys with <a href=\"#\">Hashing.murmur3_32<\/a>.\nThe charset used for strings is <a href=\"#\">Charsets.UTF_16<\/a>.\nFor Iterable and <a href=\"#\">Sequence<\/a>, the elements are hashed rather than the Iterable or <a href=\"#\">Sequence<\/a> itself.\nIf the Iterable or <a href=\"#\">Sequence<\/a> contains a null element, it is skipped.<\/p>\nnextDouble\n<p>Generate a random double between the given bounds.<\/p>\nrangeFromUnordered\n<p>Creates a ClosedRange from a couple of unordered values.<\/p>\nfuzzyIn\n<p>Checks if a double value is fuzzy contained in a range.<\/p>\nshuffled\n<p><a href=\"https://bit.ly/33Z3xFu\">Fisher\u2013Yates shuffle algorithm<\/a>\nusing Apache random number generator.\nMore information <a href=\"https://en.wikipedia.org/wiki/Fisher-Yates_shuffle\">on Wikipedia<\/a>.<\/p>\ncoincidesWith\n<p>Checks whether two ranges coincide. It's a different way of checking if they're equals,\nwhich doesn't depend on their actual implementation. Note that the way you obtain a range\nmay influence the actual class used, and you can have two coincident ranges which don't\nresult equals because of different classes.<\/p>\ncontains\n<p>Checks whether the range contains the  other  one.\nThis method is faster than checking if the range contains both of the endpoints of  other .<\/p>\nintersects\n<p>Checks whether the range intersects the  other  one.<\/p>\nintersect\n<p>Finds the intersection between two ranges, the resulting range may feature a single value\n(if the ranges only share an endpoint) or can be null, if they don't intersect at all.<\/p>\nintersectsBoundsExcluded\n<p>Checks whether two ranges intersect, excluding their bounds (i.e., excluding both\nClosedRange.start and ClosedRange.endInclusive). This means false is returned in\ncase the ranges share a single endpoint.<\/p>\nminus\n<p>Performs a subtraction between ranges. The operation can produce an empty list (e.g. if\nthe current range is contained in the  other  one), a list featuring a single element,\nor a list featuring two elements (e.g. if the current range contains the  other  one).<\/p>\nsubtractAll\n<p>Subtracts all the given ranges from the current one. See  ClosedRange.minus .<\/p>\nfindExtremeCoordsOnX\n<p>Given a non empty list of points represented as vectors, this method finds the extreme coordinates\n(i.e. min and max coordinates) on the X-axis, these are used to create the returned ClosedRange.<\/p>\nfindExtremeCoordsOnY\n<p>Given a non empty list of points represented as vectors, this method finds the extreme coordinates\n(i.e. min and max coordinates) on the Y-axis, these are used to create the returned ClosedRange.<\/p>\n"
            }]
          }}
        }}
      }
    },
    "ownPages": [{
      "reference": {
        "path": "kotlindoc",
        "baseUrl": "https://alchemistsimulator.github.io/latest",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://alchemistsimulator.github.io/latest/kotlindoc"
      },
      "description": "",
      "title": "README",
      "content": "<h1 id=\"alchemist\"><a href=\"#alchemist\" id=\"alchemist\" class=\"anchor\"><\/a>Alchemist<\/h1>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/logo.svg\" alt=\"Alchemist logo\" /><\/p>\n<p>Alchemist is a simulator for pervasive, aggregate, and nature-inspired computing.\nAt the moment, the simulator features:<\/p>\n<ul>\n<li>Executing <a href=\"http://protelis.org\">Protelis<\/a> programs<\/li>\n<li>Executing <a href=\"https://scafi.github.io/\">Scafi<\/a> programs<\/li>\n<li>Executing biological simulations with chemical-like reactions<\/li>\n<li>Executing <a href=\"http://dx.doi.org/10.1016/j.pmcj.2014.12.002\">SAPERE<\/a> -like programs, written in a tuple based language resembling <a href=\"https://doi.org/10.1109%2Fmc.1986.1663305\">Linda<\/a><\/li>\n<li>Simulating bidimensional environments<\/li>\n<li>Simulating real-world maps, with support for navigation along roads, and for importing gpx format gps traces<\/li>\n<li>Simulating indoor environments by importing black and white images<\/li>\n<li>Simulating networks of smart cameras (similarly to <a href=\"https://doi.org/10.1109/SASOW.2013.11\">CamSim<\/a>, but with much better scaling)<\/li>\n<li>Simulating pedestrian with a cognitive model<\/li>\n<li>Creating batches and run with different value of parameters<\/li>\n<li>Run in grid computing environments<\/li>\n<\/ul>\n<p>Alchemist users should rely on the documentation available on <a href=\"http://alchemistsimulator.github.io/\">the official Alchemist website<\/a>.\nIf you are already there, well, this text is shared by the README.md file and the site front page,\nso you are on the right place, <strong>check the menu<\/strong> (should be on the left-hand side) to learn how to use the simulator.<\/p>\n<p>If you need access to features of the simulator which are still in development,\nplease refer to the <a href=\"http://alchemistsimulator.github.io/latest\">&quot;latest&quot; version of the website<\/a>.<\/p>\n<p>Alchemist is available on Maven Central. You can import all the components by importing the <code>it.unibo.alchemist:alchemist<\/code> artifact.<\/p>\n<h3 id=\"gradle\"><a href=\"#gradle\" id=\"gradle\" class=\"anchor\"><\/a>Gradle<\/h3>\n<p>You need to add the alchemist core dependency, plus the modules you need for your simulation.\nAdd this dependency to your build, substituting <code>ALCHEMIST_VERSION<\/code> with the version you want to use\n(change the scope appropriately if you need Alchemist only for runtime or testing).<\/p>\n<pre><code class=\"language-kotlin\">dependencies {\n    // Alchemist core dependency\n    implementation(&quot;it.unibo.alchemist:alchemist:ALCHEMIST_VERSION&quot;)\n    // Example incarnation\n    implementation(&quot;it.unibo.alchemist:alchemist-incarnation-protelis:ALCHEMIST_VERSION&quot;)\n    // Example additional module\n    implementation(&quot;it.unibo.alchemist:alchemist-cognitive-agents:ALCHEMIST_VERSION&quot;)\n}\n<\/code><\/pre>\n<h3 id=\"maven\"><a href=\"#maven\" id=\"maven\" class=\"anchor\"><\/a>Maven<\/h3>\n<p>Add this dependency to your build, substitute <code>ALCHEMIST_VERSION<\/code> with the version you want to use. If you do not need the whole Alchemist machinery but just a sub-part of it, you can restrict the set of imported artifacts by using as dependencies the modules you are actually in need of.<\/p>\n<pre><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;it.unibo.alchemist&lt;/groupId&gt;\n        &lt;artifactId&gt;alchemist&lt;/artifactId&gt;\n        &lt;version&gt;ALCHEMIST_VERSION&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;it.unibo.alchemist&lt;/groupId&gt;\n        &lt;artifactId&gt;alchemist-incarnation-protelis&lt;/artifactId&gt;\n        &lt;version&gt;ALCHEMIST_VERSION&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;it.unibo.alchemist&lt;/groupId&gt;\n        &lt;artifactId&gt;alchemist-cognitive-agents&lt;/artifactId&gt;\n        &lt;version&gt;ALCHEMIST_VERSION&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n<\/code><\/pre>\n<h2 id=\"developers\"><a href=\"#developers\" id=\"developers\" class=\"anchor\"><\/a>Developers<\/h2>\n<h3 id=\"status-badges\"><a href=\"#status-badges\" id=\"status-badges\" class=\"anchor\"><\/a>Status Badges<\/h3>\n<h4 id=\"stable-branch\"><a href=\"#stable-branch\" id=\"stable-branch\" class=\"anchor\"><\/a>Stable branch<\/h4>\n<h5 id=\"info\"><a href=\"#info\" id=\"info\" class=\"anchor\"><\/a>Info<\/h5>\n<p>master: <a href=\"https://travis-ci.org/AlchemistSimulator/Alchemist\"><img src=\"https://travis-ci.org/AlchemistSimulator/Alchemist.svg?branch=master\" alt=\"Build Status\" /><\/a><\/p>\n<p>develop: <a href=\"https://travis-ci.org/AlchemistSimulator/Alchemist\"><img src=\"https://travis-ci.org/AlchemistSimulator/Alchemist.svg?branch=develop\" alt=\"Build Status\" /><\/a><\/p>\n<p><a href=\"https://www.javadoc.io/doc/it.unibo.alchemist/alchemist\"><img src=\"https://www.javadoc.io/badge/it.unibo.alchemist/alchemist.svg\" alt=\"Javadocs\" /><\/a>\n<img src=\"https://img.shields.io/github/license/AlchemistSimulator/Alchemist\" alt=\"GitHub\" />\n<a href=\"https://bestpractices.coreinfrastructure.org/projects/TODO\"><img src=\"https://bestpractices.coreinfrastructure.org/projects/TODO/badge\" alt=\"CII Best Practices\" /><\/a>\n<img src=\"https://img.shields.io/github/languages/count/AlchemistSimulator/Alchemist\" alt=\"GitHub language count\" />\n<img src=\"https://img.shields.io/github/languages/top/AlchemistSimulator/Alchemist\" alt=\"GitHub top language\" />\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=ncloc\" alt=\"Lines of Code\" /><\/a>\n<img src=\"https://img.shields.io/github/languages/code-size/AlchemistSimulator/Alchemist\" alt=\"GitHub code size in bytes\" />\n<img src=\"https://img.shields.io/github/repo-size/AlchemistSimulator/Alchemist\" alt=\"GitHub repo size\" />\n<img src=\"https://img.shields.io/maven-central/v/it.unibo.alchemist/alchemist\" alt=\"Maven Central\" />\n<img src=\"https://img.shields.io/github/contributors/AlchemistSimulator/Alchemist\" alt=\"GitHub contributors\" /><\/p>\n<h5 id=\"quality\"><a href=\"#quality\" id=\"quality\" class=\"anchor\"><\/a>Quality<\/h5>\n<p><a href=\"https://ktlint.github.io/\"><img src=\"https://img.shields.io/badge/code%20style-%E2%9D%A4-FF4081.svg\" alt=\"ktlint\" /><\/a>\n<a href=\"https://www.codacy.com/app/Alchemist/Alchemist?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=AlchemistSimulator/Alchemist&amp;utm_campaign=Badge_Grade\"><img src=\"https://api.codacy.com/project/badge/Grade/c7304e8bd4044aa5955c6d5c844f39a4\" alt=\"Codacy Badge\" /><\/a>\n<img src=\"https://img.shields.io/codecov/c/github/AlchemistSimulator/Alchemist\" alt=\"Codecov\" />\n<img src=\"https://img.shields.io/codeclimate/maintainability-percentage/AlchemistSimulator/Alchemist\" alt=\"Code Climate maintainability\" />\n<img src=\"https://img.shields.io/codeclimate/issues/AlchemistSimulator/Alchemist\" alt=\"Code Climate maintainability\" />\n<img src=\"https://img.shields.io/codeclimate/tech-debt/AlchemistSimulator/Alchemist\" alt=\"Code Climate maintainability\" />\n<a href=\"https://www.codefactor.io/repository/github/alchemistsimulator/alchemist\"><img src=\"https://www.codefactor.io/repository/github/alchemistsimulator/alchemist/badge\" alt=\"CodeFactor\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=alert_status\" alt=\"Quality Gate Status\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=bugs\" alt=\"Bugs\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=code_smells\" alt=\"Code Smells\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=duplicated_lines_density\" alt=\"Duplicated Lines (%)\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=sqale_rating\" alt=\"Maintainability Rating\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=reliability_rating\" alt=\"Reliability Rating\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=security_rating\" alt=\"Security Rating\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=sqale_index\" alt=\"Technical Debt\" /><\/a>\n<a href=\"https://sonarcloud.io/dashboard?id=AlchemistSimulator_Alchemist\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=AlchemistSimulator_Alchemist&amp;metric=vulnerabilities\" alt=\"Vulnerabilities\" /><\/a><\/p>\n<h5 id=\"progress\"><a href=\"#progress\" id=\"progress\" class=\"anchor\"><\/a>Progress<\/h5>\n<p><img src=\"https://img.shields.io/github/issues/AlchemistSimulator/Alchemist\" alt=\"GitHub issues\" />\n<img src=\"https://img.shields.io/github/issues-closed/AlchemistSimulator/Alchemist\" alt=\"GitHub closed issues\" />\n<img src=\"https://img.shields.io/github/issues-pr/AlchemistSimulator/Alchemist\" alt=\"GitHub pull requests\" />\n<img src=\"https://img.shields.io/github/issues-pr-closed/AlchemistSimulator/Alchemist\" alt=\"GitHub closed pull requests\" />\n<img src=\"https://img.shields.io/github/commit-activity/y/AlchemistSimulator/Alchemist\" alt=\"GitHub commit activity\" />\n<img src=\"https://img.shields.io/github/commits-since/AlchemistSimulator/Alchemist/latest/develop\" alt=\"GitHub commits since latest release (by date)\" />\n<img src=\"https://img.shields.io/github/last-commit/AlchemistSimulator/Alchemist/develop\" alt=\"GitHub last commit\" /><\/p>\n<h3 id=\"javadocs\"><a href=\"#javadocs\" id=\"javadocs\" class=\"anchor\"><\/a>Javadocs<\/h3>\n<p>Javadocs are available for both <a href=\"http://alchemist-doc.surge.sh/\">the latest stable version<\/a> and <a href=\"http://alchemist-unstable-doc.surge.sh/\">the latest development snapshot<\/a>.\nIf you need to access the documentation for any older stable version, <a href=\"https://www.javadoc.io/doc/it.unibo.alchemist/alchemist/\">javadoc.io<\/a> is probably the right place to search in.<\/p>\n<h3 id=\"importing-the-project\"><a href=\"#importing-the-project\" id=\"importing-the-project\" class=\"anchor\"><\/a>Importing the project<\/h3>\n<p>The project is easiest to import in IntelliJ Idea.<\/p>\n<h4 id=\"recommended-configuration\"><a href=\"#recommended-configuration\" id=\"recommended-configuration\" class=\"anchor\"><\/a>Recommended configuration<\/h4>\n<p>Install the following plugins (use <kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>A<\/kbd>, then search for &quot;Plugins&quot;):<\/p>\n<ul>\n<li>From the main list:\n<ul>\n<li>Scala<\/li>\n<li>Kotlin<\/li>\n<\/ul>\n<\/li>\n<li>From &quot;Browse Repositories&quot;:\n<ul>\n<li><a href=\"https://plugins.jetbrains.com/plugin/7358-antlr-v4-grammar-plugin\">ANTLR v4 grammar plugin<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/1065-checkstyle-idea\">Checkstyle-IDEA<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/3847-findbugs-idea\">FindBugs-IDEA<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/1137-pmdplugin\">PMDPlugin<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4 id=\"importing-the-project-1\"><a href=\"#importing-the-project-1\" id=\"importing-the-project-1\" class=\"anchor\"><\/a>Importing the project<\/h4>\n<ol start=\"0\">\n<li>Windows user should perform an additional first step: before cloning the repository, make sure that the autocrlf feature of git is disabled, by issuing <code>git config --global core.autocrlf false<\/code>. If the step is not performed, git will automatically insert CRLF line endings, violating the project's Checkstyle rules (which are rather strict, and prevent the build from succeeding).<\/li>\n<li>Clone this repository in a folder of your preference using <code>git clone<\/code> appropriately<\/li>\n<li>Open IntellJ. If a project opens automatically, select &quot;Close project&quot;. You should be on the welcome screen of IntelliJ idea.<\/li>\n<li>Select &quot;Import Project&quot;<\/li>\n<li>Navigate your file system and find the folder where you cloned the repository. <strong>Do not select it<\/strong>. Open the folder, and you should find a lowercase <code>alchemist<\/code> folder. That is the correct project folder, not the outermost <code>Alchemist<\/code> folder (created by <code>git<\/code> in case you cloned without specifying a different folder name). Once the correct folder has been selected, click <kbd>Ok<\/kbd><\/li>\n<li>Select &quot;Import Project from external model&quot;<\/li>\n<li>Make sure &quot;Gradle&quot; is selected as external model tool<\/li>\n<li>Click <kbd>Finish<\/kbd><\/li>\n<li>If prompted to override any .idea file, try to answer <kbd>No<\/kbd>. It's possible that IntelliJ refuses to proceed, in which case click <kbd>Finish<\/kbd> again, then select <kbd>Yes<\/kbd>.<\/li>\n<li>A dialog stating that &quot;IntelliJ IDEA found a Gradle build script&quot; may appear, in such case answer <kbd>Import Gradle Project<\/kbd>.<\/li>\n<li>Wait for the IDE to import the project from Gradle. The process may take several minutes, due to the amount of dependencies. Should the synchronization fail, make sure that the IDE's Gradle is configured correctly:<\/li>\n<li>In 'Settings -&gt; Build, Execution, Deployment -&gt; Build Tools &gt; Gradle', for the option 'Use Gradle from' select 'gradle-wrapper.properties file'. Enabling auto-import is also recommended.<\/li>\n<li><strong>Important:<\/strong> Alchemist requires java 11+, so make sure the 'Gradle JVM' option points to such a version (if you don't have a JDK 11+ installed make sure to get one).<\/li>\n<li>Once imported, the project may still be unable to compile, due to missing sources in incarnation-biochemistry. This problem can be solved by opening the IntelliJ terminal (e.g. with <kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>A<\/kbd>, typing &quot;terminal&quot; and pressing <kbd>Enter<\/kbd>), and issue:<\/li>\n<\/ol>\n<ul>\n<li>On Unix: <code>./gradlew alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<li>On Windows: <code>gradlew.bat alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<\/ul>\n<h3 id=\"developing-the-project\"><a href=\"#developing-the-project\" id=\"developing-the-project\" class=\"anchor\"><\/a>Developing the project<\/h3>\n<p>Contributions to this project are welcome. Just some rules:<\/p>\n<ul>\n<li>We use <a href=\"https://github.com/nvie/gitflow\">git flow<\/a>, so if you write new features, please do so in a separate <code>feature-<\/code> branch.<\/li>\n<li>We recommend forking the project, developing your stuff, then contributing back via pull request directly from GitHub<\/li>\n<li>Commit often. Do not throw at me pull requests with a single giant commit adding or changing the whole world. Split it in multiple commits and request a merge to the mainline often.<\/li>\n<li>Stay in sync with the <code>develop<\/code> branch: pull often from <code>develop<\/code> (if the build passes), so that you don't diverge too much from the main development line.<\/li>\n<li>Do not introduce low quality code. All the new code must comply with the checker rules (that are quite strict) and must not introduce any other warning. Resolutions of existing warnings (if any is present) are very welcome instead.<\/li>\n<\/ul>\n<h4 id=\"building-the-project\"><a href=\"#building-the-project\" id=\"building-the-project\" class=\"anchor\"><\/a>Building the project<\/h4>\n<p>While developing, you can rely on IntelliJ to build the project, it will generally do a very good job.\nIf you want to generate the artifacts, you can rely on Gradle. Just point a terminal on the project's root and issue<\/p>\n<pre><code class=\"language-bash\">./gradlew build\n<\/code><\/pre>\n<p>This will trigger the creation of the artifacts the executions of the tests, the generation of the documentation and of the project reports.<\/p>\n<p><em><strong>NOTE THAT:<\/strong><\/em> Alchemist requires java 11+ to work, make sure to have a JDK version 11+ installed.<\/p>\n<h4 id=\"build-reports\"><a href=\"#build-reports\" id=\"build-reports\" class=\"anchor\"><\/a>Build reports<\/h4>\n<p>Every Alchemist build triggers the creation of a set of reports, that provide hints regarding the current status of quality of the code base. Such reports are available for both <a href=\"http://alchemist-reports.surge.sh/build/reports/buildDashboard/\">the latest stable<\/a> and <a href=\"http://alchemist-unstable-reports.surge.sh/build/reports/buildDashboard/\">the latest development<\/a> versions.<\/p>\n"
    }]
  }}
}