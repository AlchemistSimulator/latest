{
  "ownKey": "wiki",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "prepare": {
        "ownKey": "prepare",
        "childrenPages": {
          "requirements": {
            "ownKey": "requirements",
            "ownPages": [{
              "reference": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "requirements",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/requirements"
              },
              "next": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "quickstart",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/quickstart"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "prepare",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare"
              },
              "description": "",
              "title": "Requirements",
              "content": "<h2 id=\"requirements\"><a href=\"#requirements\" id=\"requirements\" class=\"anchor\"><\/a>Requirements<\/h2>\n<p>Alchemist requires java 11 or later,\nif you don't have a Java Development Kit version 11+ installed we may recommend you to install the version of AdoptOpenJDK,\nwhich can be found <a href=\"https://adoptopenjdk.net/index.html?variant=openjdk11&amp;jvmVariant=hotspot\">here<\/a>.<\/p>\n<p>If you prefer, you can install it via <a href=\"https://github.com/shyiko/jabba\">Jabba<\/a> - a cross-platform Java Version Manager.<\/p>\n<p>In the following, we will assume you have Java correctly installed and configured on your system:<\/p>\n<ul>\n<li>the <code>java -version<\/code> command should output a version 11 or above<\/li>\n<li>the <code>javac -version<\/code> command should output version 11 or above<\/li>\n<\/ul>\n<p>It's also a good idea to have <a href=\"https://git-scm.com/\"><code>git<\/code><\/a> installed on your PC and available:\nwe provide templates and examples via Git repositories,\nit makes it easier to import them.<\/p>\n<h3 id=\"next-step\"><a href=\"#next-step\" id=\"next-step\" class=\"anchor\"><\/a>Next step<\/h3>\n<p>There are two ways of running Alchemist:<\/p>\n<ul>\n<li><a href=\"run-gradle\">Via Gradle<\/a>: the recommended way, as it provides an easy way to import the simulator within an\nIDE and develop your simulation from there.<\/li>\n<li><a href=\"run-stand-alone\">Stand-alone<\/a>: an alternative that can be useful for quick demos of if you just need to run\nan existing simulation file.<\/li>\n<\/ul>\n"
            }]
          },
          "quickstart": {
            "ownKey": "quickstart",
            "ownPages": [{
              "reference": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "quickstart",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/quickstart"
              },
              "next": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-gradle",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/run-gradle"
              },
              "previous": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "requirements",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/requirements"
              },
              "description": "",
              "title": "Quick start",
              "content": "<p>You can either follow these instructions or those on the <code>README.md<\/code> file of the linked project, information is equivalent.<\/p>\n<h2 id=\"how-to-launch\"><a href=\"#how-to-launch\" id=\"how-to-launch\" class=\"anchor\"><\/a>How to launch<\/h2>\n<p>To run the example you can rely on the pre-configured Gradle build script. It will automatically download all the required libraries, set up the environment, and execute the simulator via command line for you.\nAs first step, use <code>git<\/code> to locally clone the repository linked above.\nIn order to launch, open a terminal and move to the project root folder, then on UNIX:<\/p>\n<pre><code class=\"language-bash\">./gradlew runAll\n<\/code><\/pre>\n<p>On Windows:<\/p>\n<pre><code>gradlew.bat runAll\n<\/code><\/pre>\n<p>Press P and you will see some pedestrians wandering around.\nFor further information about the gui, see the <a href=\"https://alchemistsimulator.github.io/latest/wiki/prepare/default-gui\">graphical interface shortcuts<\/a>.<\/p>\n<p>Note that the first launch will be rather slow, since Gradle will download all the required files.\nThey will get cached in the user's home folder (as per Gradle normal behavior).<\/p>\n<h2 id=\"importing-the-example-project-in-an-ide\"><a href=\"#importing-the-example-project-in-an-ide\" id=\"importing-the-example-project-in-an-ide\" class=\"anchor\"><\/a>Importing the example project in an IDE<\/h2>\n<p>Since Gradle is used to deal with the simulator configuration,\nany IDE supporting it should in principle be able to import it.\nWe recommend IntelliJ Idea, as to the best of our knowledge has the smoothest integration with Gradle.<\/p>\n<p>If you have IntelliJ Idea, just right click from your file manager on the <code>build.gradle.kts<\/code> file and open it with IntelliJ.\nThe IDE should warn that a Gradle project has been detected,\nand by confirming that this is correct it will self-configure appropriately.<\/p>\n<h3 id=\"project-organization\"><a href=\"#project-organization\" id=\"project-organization\" class=\"anchor\"><\/a>Project organization<\/h3>\n<p>You will see a <code>src/main<\/code> folder,\nwith subfolders divided by language.\nSimulations are in the <code>yaml<\/code> folder.<\/p>\n<h2 id=\"the-build-script\"><a href=\"#the-build-script\" id=\"the-build-script\" class=\"anchor\"><\/a>The build script<\/h2>\n<p>Let's explain how things work by looking at the.<\/p>\n<h3 id=\"importing-alchemist\"><a href=\"#importing-alchemist\" id=\"importing-alchemist\" class=\"anchor\"><\/a>Importing Alchemist<\/h3>\n<p>First of all, we need to add Alchemist as a dependency. Alchemist is available on Maven Central, we can import all the components by importing the <code>it.unibo.alchemist:alchemist<\/code> artifact. Thus, you will see something like this:<\/p>\n<pre><code class=\"language-kotlin\">repositories { mavenCentral() }\n\ndependencies {\n    implementation(&quot;it.unibo.alchemist:alchemist:SOME_ALCHEMIST_VERSION&quot;)\n}\n<\/code><\/pre>\n<p>With <code>SOME_ALCHEMIST_VERSION<\/code> replaced by the version used, nothing special actually.<\/p>\n<p>If you do not need the whole Alchemist machinery but just a sub-part of it, you can restrict the set of imported artifacts by using as dependencies the modules you are actually in need of.<\/p>\n<h3 id=\"detail-using-gradle-to-launch-alchemist-or-any-java-process\"><a href=\"#detail-using-gradle-to-launch-alchemist-or-any-java-process\" id=\"detail-using-gradle-to-launch-alchemist-or-any-java-process\" class=\"anchor\"><\/a>Detail: using Gradle to launch Alchemist (or any Java process...)<\/h3>\n<p>The following is a <code>runAlchemist<\/code> task, it is a simple gradle task responsible for launching the simulation.\nLet's dissect it:<\/p>\n<pre><code class=\"language-kotlin\">tasks.register&lt;JavaExec&gt;(&quot;runAlchemist&quot;) {\n    classpath = project.sourceSets.getByName(&quot;main&quot;).runtimeClasspath\n    main = &quot;it.unibo.alchemist.Alchemist&quot;\n    args = listOf(&quot;-y&quot;, &quot;src/main/yaml/$simulation.yml&quot;)\n}\n<\/code><\/pre>\n<p><a href=\"https://gradle.org\">Gradle<\/a> has a special task to run a Java class from the build script: <code>JavaExec<\/code>. We can create our custom task of type <code>JavaExec<\/code>, name it <code>runAlchemist<\/code> and configure it to launch our simulation. In order to make it work, we need to explicit two things:<\/p>\n<ul>\n<li>the Alchemist main class, which is <code>it.unibo.alchemist.Alchemist<\/code><\/li>\n<li>the classpath, or java won't be able to find all the classes needed<\/li>\n<\/ul>\n<p>This is what we do with the first three lines of code, and it is sufficient to successfully start Alchemist.\nNow, to make it run our simulation we can rely on the <a href=\"#command-line-interface\">command line interface<\/a>,\nto run a simulation we can use the <code>-y<\/code> option followed by the path to the simulation file.\nLet's suppose the <code>$simulation<\/code> variable contains the name of our simulation file,\nwhich is located in the <code>src/main/yaml/<\/code> folder,\nwhat we want to do is to run Alchemist with the following arguments:<\/p>\n<pre><code class=\"language-bash\">-y src/main/yaml/$simulation.yml\n<\/code><\/pre>\n<p>The last line of code specify these arguments.<\/p>\n<p>We recommend at first running alchemist with the <code>--help<\/code> option, which will display further information on the available commands.<\/p>\n"
            }]
          },
          "run-gradle": {
            "ownKey": "run-gradle",
            "ownPages": [{
              "reference": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-gradle",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/run-gradle"
              },
              "next": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-stand-alone",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/run-stand-alone"
              },
              "previous": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "quickstart",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/quickstart"
              },
              "description": "",
              "title": "Running Alchemist via Gradle",
              "content": "<p>In this section you will be given information about how to use the simulator via <a href=\"https://gradle.org\">Gradle<\/a>.<\/p>\n<p>To ease your life,\nwe prepared <a href=\"https://github.com/AlchemistSimulator/alchemist-primer\">here<\/a> a project showing how to use Alchemist via\n<a href=\"https://gradle.org\">Gradle<\/a> to run a simple simulation.\nLet's use it as a quick start.<\/p>\n<h2 id=\"how-to-import-the-primer-project\"><a href=\"#how-to-import-the-primer-project\" id=\"how-to-import-the-primer-project\" class=\"anchor\"><\/a>How to import the primer project<\/h2>\n<p>The easiest way to import the primer is via <a href=\"https://git-scm.com/\"><code>git<\/code><\/a>, by issuing on a terminal<\/p>\n<pre><code>git clone https://github.com/AlchemistSimulator/alchemist-primer.git alchemist-primer\ncd alchemist-primer\n<\/code><\/pre>\n<p>Alternatively, you can <a href=\"https://github.com/AlchemistSimulator/alchemist-primer/archive/refs/heads/master.zip\">download the primer projet as a compressed archive<\/a>,\nunpack it, and then open a terminal pointing into that directory.<\/p>\n<h2 id=\"how-to-launch\"><a href=\"#how-to-launch\" id=\"how-to-launch\" class=\"anchor\"><\/a>How to launch<\/h2>\n<p>To run the example you can rely on the pre-configured Gradle build script. It will automatically download all the required libraries, set up the environment, and execute the simulator via command line for you.\nAs first step, use <code>git<\/code> to locally clone the repository linked above.\nIn order to launch, open a terminal and move to the project root folder, then on UNIX:<\/p>\n<pre><code class=\"language-bash\">./gradlew runAll\n<\/code><\/pre>\n<p>On Windows:<\/p>\n<pre><code>gradlew.bat runAll\n<\/code><\/pre>\n<p>Press P and you should see things changing.\nFor further information about the graphical interface, see the <a href=\"default-gui.md\">this page<\/a>.<\/p>\n<h3 id=\"using-the-command-line-interface\"><a href=\"#using-the-command-line-interface\" id=\"using-the-command-line-interface\" class=\"anchor\"><\/a>Using the Command Line Interface<\/h3>\n<p>To make the simulator do something for you (for instance, to make it run your own simulation) you can rely on the <a href=\"quickstart.md#command-line-interface\">command line interface<\/a>. The most common case is you want to run your own simulation. To do so, you can rely on the <code>-y<\/code> option followed by the path to the simulation file. Alchemist simulations are contained in *.yml files, more information about how to write such simulations can be found <a href=\"../use/basics.md\">here<\/a>. Let's say you want to run Alchemist with the following arguments:<\/p>\n<pre><code class=\"language-bash\">-y path/to/your/simulation.yml\n<\/code><\/pre>\n<p>You can do so in a couple of ways, of course this applies to every option you may want to launch the simulator with. You can explicit such options via command line when you run your custom task, using the <code>--args<\/code> option. So you will have something like this:<\/p>\n<pre><code class=\"language-bash\">./gradlew runAlchemist --args='-y path/to/your/simulation.yml'\n<\/code><\/pre>\n<p>Otherwise, if your options never change, you can explicit them in the body of your custom task, by adding the following line of code:<\/p>\n<pre><code class=\"language-kotlin\">args = listOf(&quot;-y&quot;, &quot;path/to/your/simulation.yml&quot;)\n<\/code><\/pre>\n<p>The command line interface features several options, related to running simulations,\ndeciding how often and where to export data,\nhow to display the information,\nand so on.\nA list of the commands can be printed by passing <code>--help<\/code> as argument.<\/p>\n<h2 id=\"importing-the-project-into-an-ide\"><a href=\"#importing-the-project-into-an-ide\" id=\"importing-the-project-into-an-ide\" class=\"anchor\"><\/a>Importing the project into an IDE<\/h2>\n<p>Alchemist projects can be imported in several IDEs:\nas far as the development environment supports Gradle,\nthen it supports development of Alchemist projects.\nThe IDE we recommend for development is IntelliJ Idea,\nwhich (among those we tested out) has the better integration with Gradle.\nImporting the project in Idea is trivial:\njust open the folder containing the <code>build.gradle.kts<\/code> file with the IDE.\nDepending on the version and the IDE settings,\nit could import the project straight away or ask which import format to prefer:\npick &quot;Gradle&quot;.<\/p>\n<p>Once the project is ready, it can be developed as any other project.\nIntelliJ provides a syntax helper for YAML which is rather handy.\nSince the IDE can run gradle tasks, it is also possible to launch the simulator directly from the IDE.<\/p>\n<h2 id=\"project-organization\"><a href=\"#project-organization\" id=\"project-organization\" class=\"anchor\"><\/a>Project organization<\/h2>\n<p>You will see a <code>src/main<\/code> folder,\nwith subfolders divided by language.\nSimulations are in the <code>yaml<\/code> folder.\nTake a look: the files should be rather human-readable, although they will be clearer as we proceed.<\/p>\n<p>Now look at the <code>build.gradle.kts<\/code> script,\nthere is some magic deserving an explanation there.<\/p>\n<script\n  src=\"http://gist-it.appspot.com/https://github.com/AlchemistSimulator/alchemist-primer/raw/master/build.gradle.kts?footer=no\">\n<\/script>\n<p>First, we need to add Alchemist as a dependency.\nAlchemist is available on Maven Central (and on Bintray, which mirrors it),\nwe can import the base components by importing the <code>it.unibo.alchemist:alchemist:SOME_ALCHEMIST_VERSION<\/code> artifact\n(with <code>SOME_ALCHEMIST_VERSION<\/code> replaced by the version used).\nHowever, to simulate anything useful we also need at least one incarnation,\nand probably we also want to import other capabilities, such as visualization.<\/p>\n<p>So we got:<\/p>\n<script\n  src=\"http://gist-it.appspot.com/https://github.com/AlchemistSimulator/alchemist-primer/raw/master/build.gradle.kts?footer=no&slice=8:11\">\n<\/script>\n<script\n  src=\"http://gist-it.appspot.com/https://github.com/AlchemistSimulator/alchemist-primer/raw/master/build.gradle.kts?footer=no&slice=21:27\">\n<\/script>\n<p>If you see a <code>+<\/code>, it's a Gradle shorthand for &quot;the latest version you can find&quot;.\nIf you see a <code>_<\/code>, we are using a <a href=\"https://github.com/jmfayard/refreshVersions/\">Gradle plugin<\/a>\nwhich delegates the version choice to <a href=\"https://github.com/AlchemistSimulator/alchemist-primer/blob/master/versions.properties\">an external file<\/a>.<\/p>\n<p>Modules add capabilities to the simulator, and are documented in the remainder of the guide.<\/p>\n<h2 id=\"running-alchemist\"><a href=\"#running-alchemist\" id=\"running-alchemist\" class=\"anchor\"><\/a>Running Alchemist<\/h2>\n<p>When Gradle manages our dependencies,\nthe easiest way to run the simulator is writing a simple Gradle task launching it.\nLet's see how this can be done.\nFirstly, Gradle has a special task to run a Java class from the build script: <code>JavaExec<\/code>.\nWe can create our custom task of type <code>JavaExec<\/code> and configure it to launch Alchemist.\nLet's define our own:<\/p>\n<pre><code class=\"language-kotlin\">tasks.register&lt;JavaExec&gt;(&quot;runAlchemist&quot;) {\n    // run alchemist\n}\n<\/code><\/pre>\n<p>Now, in order to launch the simulator, we need to explicit two things:<\/p>\n<ul>\n<li>the Alchemist main class, which is <code>it.unibo.alchemist.Alchemist<\/code><\/li>\n<li>the classpath, or java won't be able to find all the classes needed<\/li>\n<\/ul>\n<p>You can do so by adding two lines of code:<\/p>\n<pre><code class=\"language-kotlin\">tasks.register&lt;JavaExec&gt;(&quot;runAlchemist&quot;) {\n    classpath = project.sourceSets.getByName(&quot;main&quot;).runtimeClasspath\n    main = &quot;it.unibo.alchemist.Alchemist&quot;\n}\n<\/code><\/pre>\n<p>This is sufficient to succesfully run the simulator. Open a terminal and move to the project root folder, then on UNIX:<\/p>\n<pre><code class=\"language-bash\">./gradlew runAlchemist\n<\/code><\/pre>\n<p>On Windows:<\/p>\n<pre><code>gradlew.bat runAlchemist\n<\/code><\/pre>\n<p>Note that the first launch will be rather slow, since Gradle will download all the required files.\nThey will get cached in the user's home folder (as per Gradle normal behavior),\nso subsequent executions will be way more agile.<\/p>\n<p>The task we configure in the primer is actually more complex.<\/p>\n<p>We first create a name for all the Alchemist-related tasks.\nThey will be pretty printed when the user runs <code>./gradlew tasks<\/code><\/p>\n<script\n  src=\"http://gist-it.appspot.com/https://github.com/AlchemistSimulator/alchemist-primer/raw/master/build.gradle.kts?footer=no&slice=31\">\n<\/script>\n<p>We configure a &quot;master&quot; task, that launches all other run tasks in sequence:<\/p>\n<script\n  src=\"http://gist-it.appspot.com/https://github.com/AlchemistSimulator/alchemist-primer/raw/master/build.gradle.kts?footer=no&slice=32:39\">\n<\/script>\n<p>Then we generate one task per <code>yml<\/code> file inside <code>src/main/yaml<\/code>.\nPlease look at the code comments to understand what they do,\nbut the core is just to tell Gradle which class to execute and which CLI options should be passed down.<\/p>\n<script\n  src=\"http://gist-it.appspot.com/https://github.com/AlchemistSimulator/alchemist-primer/raw/master/build.gradle.kts?footer=no&slice=39:0\">\n<\/script>\n"
            }]
          },
          "run-stand-alone": {
            "ownKey": "run-stand-alone",
            "ownPages": [{
              "reference": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-stand-alone",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/run-stand-alone"
              },
              "next": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "default-gui",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/default-gui"
              },
              "previous": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-gradle",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/run-gradle"
              },
              "description": "",
              "title": "Running Alchemist stand-alone",
              "content": "<p>Another way of running Alchemist is by using the redistributable jar file.\nHowever, using the simulator via <a href=\"https://gradle.org\">Gradle<\/a> is recommended.\nFor further information, see how to <a href=\"run-gradle\">Run Alchemist via Gradle<\/a>.<\/p>\n<p>Such jar file can be downloaded from the <a href=\"https://github.com/AlchemistSimulator/Alchemist/releases\">releases section on github<\/a>.<\/p>\n<p>If you got the redistributable, runnable Alchemist jar file, launching the simulator is straightforward. Open a terminal and move to the folder where the jar is located, then issue:<\/p>\n<pre><code class=\"language-bash\">java -jar alchemist-full-VERSION-all.jar\n<\/code><\/pre>\n<p>Remember to substitute <code>VERSION<\/code> with the Alchemist version you actually have downloaded.\nYou can still use alchemist in a modularized form using jars.\nIn this case, use <code>alchemist-VERSION-all.jar<\/code> and all the jars corresponding to the modules you need.\nPass them to the <code>java<\/code> command as classpath, e.g.:<\/p>\n<pre><code class=\"language-bash\">java -cp alchemist-VERSION-all.jar:alchemist-incarnation-protelis-VERSION-all.jar:alchemist-swingui-VERSION-all.jar it.unibo.alchemist.Alchemist --help\n<\/code><\/pre>\n<p>Under Windows, the separator is <code>;<\/code> in place of <code>:<\/code><\/p>\n<p>This command will print information on the available command line options.<\/p>\n"
            }]
          },
          "default-gui": {
            "ownKey": "default-gui",
            "ownPages": [{
              "reference": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "default-gui",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/default-gui"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "use",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use"
              },
              "previous": {
                "path": "wiki/prepare",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-stand-alone",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/run-stand-alone"
              },
              "description": "",
              "title": "Alchemist graphical interface",
              "content": "<p>The current, Swing-based graphical interface for Alchemist is being replaced by a new, JavaFX-based interface.\nThis page currently hosts minimal information on how to use such legacy GUI.<\/p>\n<h3 id=\"shortcuts\"><a href=\"#shortcuts\" id=\"shortcuts\" class=\"anchor\"><\/a>Shortcuts<\/h3>\n<table>\n<thead>\n<tr><th>Key binding<\/th><th>Active<\/th><th>Effect<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td><kbd>L<\/kbd><\/td><td>always<\/td><td>(En/Dis)ables the painting of links between nodes<\/td><\/tr>\n<tr><td><kbd>M<\/kbd><\/td><td>always<\/td><td>(En/Dis)ables the painting of a marker on the closest node<\/td><\/tr>\n<tr><td><kbd>Mouse pan<\/kbd><\/td><td>in normal mode<\/td><td>Moves around<\/td><\/tr>\n<tr><td><kbd>Mouse wheel<\/kbd><\/td><td>in normal mode<\/td><td>Zooms in/out<\/td><\/tr>\n<tr><td><kbd>Double click<\/kbd><\/td><td>in normal mode<\/td><td>Opens a frame with the closest node information<\/td><\/tr>\n<tr><td><kbd>Right click<\/kbd><\/td><td>in normal mode<\/td><td>Enters screen rotation mode<\/td><\/tr>\n<tr><td><kbd>P<\/kbd><\/td><td>always<\/td><td>Plays/pauses the simulation<\/td><\/tr>\n<tr><td><kbd>R<\/kbd><\/td><td>always<\/td><td>Enables the real-time mode<\/td><\/tr>\n<tr><td><kbd>Left arrow<\/kbd><\/td><td>always<\/td><td>Speeds the simulation down (more calls to the graphics)<\/td><\/tr>\n<tr><td><kbd>Right arrow<\/kbd><\/td><td>always<\/td><td>Speeds the simulation up (less calls to the graphics)<\/td><\/tr>\n<tr><td><kbd>S<\/kbd><\/td><td>always<\/td><td>Enters / exits the select mode (nodes can be selected with the mouse)<\/td><\/tr>\n<tr><td><kbd>O<\/kbd><\/td><td>in select mode<\/td><td>Selected nodes can be moved by drag and drop<\/td><\/tr>\n<tr><td><kbd>E<\/kbd><\/td><td>in select mode<\/td><td>Enters edit mode (to manually change node contents)<\/td><\/tr>\n<\/tbody>\n<\/table>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "prepare",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/prepare"
          },
          "next": {
            "path": "wiki/prepare",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "requirements",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/requirements"
          },
          "previous": {
            "path": "wiki/understand",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "metamodel",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/understand/metamodel"
          },
          "description": "",
          "title": "Prepare and run",
          "content": ""
        }]
      },
      "literature": {
        "ownKey": "literature",
        "childrenPages": {
          "maps": {
            "ownKey": "maps",
            "ownPages": [{
              "reference": {
                "path": "wiki/literature",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/literature/maps"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "develop",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/develop"
              },
              "previous": {
                "path": "wiki/literature",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/literature/scafi"
              },
              "description": "",
              "title": "On maps",
              "content": "<p>On maps<\/p>\n"
            }]
          },
          "scafi": {
            "ownKey": "scafi",
            "ownPages": [{
              "reference": {
                "path": "wiki/literature",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/literature/scafi"
              },
              "next": {
                "path": "wiki/literature",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/literature/maps"
              },
              "previous": {
                "path": "wiki/literature",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/literature/protelis"
              },
              "description": "",
              "title": "With Scafi",
              "content": "<p>With Scafi<\/p>\n"
            }]
          },
          "protelis": {
            "ownKey": "protelis",
            "ownPages": [{
              "reference": {
                "path": "wiki/literature",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/literature/protelis"
              },
              "next": {
                "path": "wiki/literature",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/literature/scafi"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "literature",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/literature"
              },
              "description": "",
              "title": "With Protelis",
              "content": "<p>With Protelis<\/p>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "literature",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/literature"
          },
          "next": {
            "path": "wiki/literature",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "protelis",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/literature/protelis"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "issues",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/issues"
          },
          "description": "",
          "title": "Examples from the literature",
          "content": ""
        }]
      },
      "license": {
        "ownKey": "license",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "license",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/license"
          },
          "previous": {
            "path": "wiki/develop",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "import",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/develop/import"
          },
          "description": "",
          "title": "License",
          "content": ""
        }]
      },
      "advanced": {
        "ownKey": "advanced",
        "childrenPages": {
          "maps": {
            "ownKey": "maps",
            "ownPages": [{
              "reference": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/maps"
              },
              "next": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "graphstream",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/graphstream"
              },
              "previous": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "indoor",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/indoor"
              },
              "description": "",
              "title": "Maps and GPS traces",
              "content": "<p>Alchemist is equipped with the ability to load and simulate on real-world maps.\nNavigation on maps can be done by using gps traces,\nby moving along roads (Alchemist relies on <a href=\"https://www.graphhopper.com/\">GraphHopper<\/a> to provide directions),\nby interpolating gps traces with on-the-road-movements,\nor by ignoring the map information on just move as you would in a continuous space.<\/p>\n<h2 id=\"setting-up-a-map-environment\"><a href=\"#setting-up-a-map-environment\" id=\"setting-up-a-map-environment\" class=\"anchor\"><\/a>Setting up a map environment<\/h2>\n<p>In order to run simulations on real world maps, an appropriate environment must be selected.<\/p>\n<p>Currently, the only environment supporting maps is <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/osmenvironment\">OSMEnvironment<\/a>.<\/p>\n<p>The only mandatory parameter is the <code>path<\/code> of the file with the map to be loaded. Accepts OSM maps of any format (xml, osm, pbf).\nIs possible define other optional parameter like:<\/p>\n<ol start=\"0\">\n<li><code>approximation: Int<\/code> -&gt; the amount of ciphers of the IEEE 754 encoded position that may be discarded when comparing two positions, allowing a quicker retrieval of the route between two position, since the cache may already contain a similar route which can be considered to be the same route, according to the level of precision determined by this value<\/li>\n<li><code>onStreets: Boolean<\/code> -&gt; if true, the nodes will be placed on the street nearest to the desired position<\/li>\n<li><code>onlyOnStreets: Boolean<\/code> -&gt; if true, the nodes which are too far from a street will be simply discarded. If false, they will be placed anyway, in the original position<\/li>\n<\/ol>\n<p>The following example shows how to configure a simulation that loads data from an Openstreetmap file\n(OSM, XML and PBF formats are supported) located in the classpath folder <code>maps<\/code>:<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: OSMEnvironment\n  parameters: [maps/foo.pbf]\n<\/code><\/pre>\n<h2 id=\"using-gps-traces-to-deploy-nodes\"><a href=\"#using-gps-traces-to-deploy-nodes\" id=\"using-gps-traces-to-deploy-nodes\" class=\"anchor\"><\/a>Using GPS traces to deploy nodes<\/h2>\n<p>GPS traces can be used to deploy nodes on a map.\nIn order to set the initial position of the nodes with the first position of the GPS traces,\nyou need to use the deployment <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/deployments/fromgpstrace\">FromGPSTrace<\/a>.\nThe deployment <code>FromGPSTrace<\/code> require the following parameters:<\/p>\n<ol start=\"0\">\n<li>number of nodes to deploy<\/li>\n<li>file with the GPS traces to use<\/li>\n<li>boolean that indicates if the list of GPS trace is cyclic.\nIf <code>true<\/code> and the GPS traces are less than the number of nodes to be deployed,\nthen the traces are cyclically re-used to deploy nodes.<\/li>\n<li>a <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api/gpstimealignment\">GPSTimeAlignment<\/a> to define how to align the time of all the GPS points of all GPS traces.\nThere are present several strategy in the package <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/gpsload/api\">it.unibo.alchemist.boundary.gpsload.api<\/a>\nand introduced in the following subsection.<\/li>\n<\/ol>\n<p>The following example places 1497 nodes with the first position of the GPS traces in the file <code>vcmuser.gpx<\/code>.\nThe list of GPS traces isn't cyclic.\nThe strategy to align time of all the GPS points is AlignTime\nin order to consider only the GPS points with attribute <code>time<\/code> greater than the specified one\n(in milliseconds from epoch).<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - in:\n      type: FromGPSTrace\n      parameters: [1497, &quot;vcmuser.gpx&quot;, false, &quot;AlignToTime&quot;, 1365922800, false, false]\n<\/code><\/pre>\n<h3 id=\"strategy-to-align-time-of-gps-trace\"><a href=\"#strategy-to-align-time-of-gps-trace\" id=\"strategy-to-align-time-of-gps-trace\" class=\"anchor\"><\/a>Strategy to align time of GPS trace<\/h3>\n<p>The strategies available to align time of GPS trace are the following:<\/p>\n<ol start=\"0\">\n<li>NoAlignment -&gt; No alignment is performed.<\/li>\n<li>AlignToFirstTrace -&gt; Aligns all traces at the start time of the first trace.\nIf you have two traces, the first trace start with time = 2 and second point with time = 5,\nthe second trace start with time = 4 and second point with time = 6,\nthe result will be:\n<ul>\n<li>first trace -&gt; start with time = 0 and second point with time = 3<\/li>\n<li>second trace -&gt; start with time = 2 and second point with time = 4<\/li>\n<\/ul>\n<\/li>\n<li>AlignToSimulationTime -&gt; Aligns all traces at the initial simulation time.\nIf you have two traces, the first trace start with time = 2 and second point with time = 5,\nthe second trace start with time = 4 and second point with time = 6,\nthe result will be:\n<ul>\n<li>first trace -&gt; start with time = 0 and second point with time = 3<\/li>\n<li>second trace -&gt; start with time = 0 and second point with time = 2<\/li>\n<\/ul>\n<\/li>\n<li>AlignToTime -&gt; Aligns the traces with the given time in seconds from Epoch.\nAll points before such time will be discarded. All points after the provided time will\nbe shifted back.\nIf you have two traces, the first trace start with time = 2 and second point with time = 5,\nthe second trace start with time = 4 and second point with time = 6, the given time is 3\nthe result will be:\n<ul>\n<li>first trace -&gt; first point discarded and second point with time = 2<\/li>\n<li>second trace -&gt; start with time = 1 and second point with time = 3<\/li>\n<\/ul>\n<\/li>\n<\/ol>\n<h2 id=\"navigation\"><a href=\"#navigation\" id=\"navigation\" class=\"anchor\"><\/a>Navigation<\/h2>\n<p>As previous say there are several behavior in order to move the nodes in a environment with real-word map:<\/p>\n<ol>\n<li>\n<p>movement ignoring map information. A node move directly from start position to destination position:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/no_map_information.png\" alt=\"No map information\" /><\/p>\n<\/li>\n<li>\n<p>movement by using map information. A node move from start position to destination position using\nintermediate position in order to follow streets and avoid obstacle (like building):<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/use_map_information.png\" alt=\"Use map information\" /><\/p>\n<\/li>\n<li>\n<p>movement by reproducing a GPS trace (action <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/reproducegpstrace\">ReproduceGPSTrace<\/a>).\nA node start to the first position of the GPS trace, than move to the next\nposition of the trace until arrive to the last. The movement from a position to another is direct with a straight line:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/reproduce_gps_trace.png\" alt=\"Reproduce GPS trace\" /><\/p>\n<\/li>\n<li>\n<p>movement by interpolating the GPS trace with street data (action <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/gpstracewalker\">GPSTraceWalker<\/a>).\nA node start to the first position of the GPS trace,\nthan move to the next position of the trace until arrive to the last. The movement from a position to another\nuse map information to define intermediate position in order to follow streets and avoid obstacle (like building):<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/interpolate_gps_trace_with_street_data.png\" alt=\"Interpolate GPS trace with street data\" /><\/p>\n<\/li>\n<\/ol>\n<p>Both the actions <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/reproducegpstrace\">ReproduceGPSTrace<\/a> and <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/actions/gpstracewalker\">GPSTraceWalker<\/a> require:\n0. the file with the GPS traces\n0. a boolean that indicate if the list of GPS trace is cyclic\n0. the strategy to align the attribute <code>time<\/code> of the GPS points of the GPS traces<\/p>\n<p>The following example show how it is possible define a program to follow GPS traces.<\/p>\n<pre><code class=\"language-yaml\">programs:\n  - time-distribution: 0.1\n  type: Event\n  actions:\n    - type: ReproduceGPSTrace\n      parameters: [&quot;/vcmuser.gpx&quot;, false, &quot;AlignToTime&quot;, 1365922800, false, false]\n<\/code><\/pre>\n"
            }]
          },
          "customization": {
            "ownKey": "customization",
            "ownPages": [{
              "reference": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "customization",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/customization"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "export",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export"
              },
              "previous": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "smartcam",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/smartcam"
              },
              "description": "",
              "title": "Writing custom components",
              "content": ""
            }]
          },
          "smartcam": {
            "ownKey": "smartcam",
            "ownPages": [{
              "reference": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "smartcam",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/smartcam"
              },
              "next": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "customization",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/customization"
              },
              "previous": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "cognitive-pedestrians",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/cognitive-pedestrians"
              },
              "description": "",
              "title": "With Smart Cameras",
              "content": "<h3 id=\"prerequisites\"><a href=\"#prerequisites\" id=\"prerequisites\" class=\"anchor\"><\/a>Prerequisites<\/h3>\n<p>This guide assumes you already know <a href=\"https://alchemistsimulator.github.io/latest/wiki/understand/metamodel\">the Alchemist metamodel<\/a> and how to write simulations in YAML.<\/p>\n<h3 id=\"smartcam\"><a href=\"#smartcam\" id=\"smartcam\" class=\"anchor\"><\/a>Smartcam<\/h3>\n<p>A smartcam is a camera able to detect objects of interest and to communicate with other smartcameras.\nIn many cases it is also assumed to be mounted on a drone as to be able to freely move around in the environment.\nIn Alchemist smartcams are simulated as <em>Nodes<\/em> equipped with specific <em>Reactions<\/em> defining their capabilities and behaviour.\nSingle capabilities are expressed as <em>Actions<\/em>.<\/p>\n<h4 id=\"vision\"><a href=\"#vision\" id=\"vision\" class=\"anchor\"><\/a>Vision<\/h4>\n<p>The most basic example of a camera is a <em>Node<\/em> containing a <em>Reaction<\/em> with the <em>CameraSee<\/em> action. Note: the <em>CameraSee<\/em> action currently\nonly works in 2D environments supporting euclidean geometry, for example <em>Continuous2DEnvironment<\/em> and <em>Rectangular2DEnvironment<\/em>.\nThe <em>CameraSee<\/em> action requires 3 parameters to be defined in this order: the distance of the field of view, its angle in degrees,\nand the name of the <em>Molecule<\/em> which will contain the ouput, namely a list of the nodes contained in the field of view which is updated\neach time the action is triggered. Optionally a fourth parameter can be defined in order to filter the output. Such parameter is expected to\nbe the name of a <em>Molecule<\/em> which has to be contained in a <em>Node<\/em> for it to be visible, e.g. if it is &quot;wanted&quot; then only nodes containing\na molecule named &quot;wanted&quot; will be seen.<\/p>\n<h4 id=\"movement\"><a href=\"#movement\" id=\"movement\" class=\"anchor\"><\/a>Movement<\/h4>\n<p>The ability to move can be defined using movement actions such as <em>MoveToTarget<\/em> or <em>FollowAtDistance<\/em>.\n<em>MoveToTarget<\/em> expects 2 parameters such as the name of the molecule containing the target's position and the movement speed.\n<em>FollowAtDistance<\/em> requires the name of the molecule containing the target's position, the distance to mantain from the target,\nand the movement speed.<\/p>\n<h4 id=\"rotation\"><a href=\"#rotation\" id=\"rotation\" class=\"anchor\"><\/a>Rotation<\/h4>\n<p>The action <em>HeadTowardTarget<\/em> can be used to instruct cameras to always face the specified target, it requires\n2 parameters such as the name of the molecule containing the target's position and the angular speed in degrees.\nThe <em>Spin<\/em> action only requires the angular speed and will make the camera spin around itself like a radar.<\/p>\n<h4 id=\"algorithm\"><a href=\"#algorithm\" id=\"algorithm\" class=\"anchor\"><\/a>Algorithm<\/h4>\n<p>Without defining an algorithm the cameras wouldn't do anything interesting. Algorithms can be definied in a moltitude of different\nways. Below there's an example of a basic algorithm defined only with <em>Reactions<\/em>, <em>Conditions<\/em> and <em>Actions<\/em>.\nIt is advisable to use real programming languages such as <a href=\"https://alchemistsimulator.github.io/latest/wiki/incarnations/protelis\">Protelis<\/a> to write more elaborate algorithms.\nIn this regard you'd want to use the protelis incarnation, make cameras be <em>ProtelisNode<\/em>, and to make sure\nthat the input and output molecules' names of the actions match the ones used by the protelis program.<\/p>\n<h3 id=\"complete-example-of-a-simulation\"><a href=\"#complete-example-of-a-simulation\" id=\"complete-example-of-a-simulation\" class=\"anchor\"><\/a>Complete example of a simulation<\/h3>\n<p>We start by writing a basic yaml configuration to place 20 potential targets and 10 cameras in a 400 x 400 rectangular environment:<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\ndeployments:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n<\/code><\/pre>\n<p>Then we give cameras the ability to see other nodes. The <em>CameraSee<\/em> action requires the distance and angle of the field of view. Each time it is triggered, it writes all the nodes seen in the molecule <em>vision<\/em>.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n  CameraFoVAngle: &amp;CameraFoVAngle\n    formula: 60\n  CameraFoVDistance: &amp;CameraFoVDistance\n    formula: 20\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\nprograms:\n  - &amp;Camera\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: CameraSee\n          parameters: [*CameraFoVDistance, *CameraFoVAngle, vision]\n\ndeployments:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n    programs:\n      - *Camera\n<\/code><\/pre>\n<p>In this example we make humans move randomly. We also want to randomly toggle a <em>wanted<\/em> molecule in them, as to have a way to mark interesting targets that needs to be followed by the cameras. Every 50 seconds each human has a 1% probability to become <em>wanted<\/em>.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  HumanSpeed: &amp;HumanSpeed\n    formula: 1\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n  CameraFoVAngle: &amp;CameraFoVAngle\n    formula: 60\n  CameraFoVDistance: &amp;CameraFoVDistance\n    formula: 20\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\nprograms:\n  - &amp;Human\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: ConstantDistanceRandomMove\n          parameters: [*HalfEnvironmentSize, *HumanSpeed]\n    - time-distribution: 0.02\n      type: ChemicalReaction\n      actions:\n        - type: RandomlyToggleMolecule\n          parameters: [wanted, true, 0.01]\n  - &amp;Camera\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: CameraSee\n          parameters: [*CameraFoVDistance, *CameraFoVAngle, vision]\n\ndeployments:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n    programs:\n      - *Human\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n    programs:\n      - *Camera\n<\/code><\/pre>\n<p>It is time for cameras to identify <em>wanted<\/em> targets so we add a <em>CameraInjectVisibleNodeClosestToDistance<\/em> action in order to select the closest node to the center of the field of view.\nWe also specify the <em>wanted<\/em> molecule in the <em>CameraSee<\/em> action in order to filter only the interesting nodes.\nThen, at the condition that a <em>target<\/em> is found, we want the cameras to start following it, so we add the actions <em>FollowAtDistance<\/em> and <em>HeadTowardTarget<\/em>.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  HumanSpeed: &amp;HumanSpeed\n    formula: 1\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n  CameraFoVAngle: &amp;CameraFoVAngle\n    formula: 60\n  CameraFoVDistance: &amp;CameraFoVDistance\n    formula: 20\n  CameraSpeed: &amp;CameraSpeed\n    formula: 1\n  CameraAngularSpeed: &amp;CameraAngularSpeed\n    formula: 3\n  CameraDistanceFromTarget: &amp;CameraDistanceFromTarget\n    formula: 2 * CameraFoVDistance / 3\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\nprograms:\n  - &amp;Human\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: ConstantDistanceRandomMove\n          parameters: [*HalfEnvironmentSize, *HumanSpeed]\n    - time-distribution: 0.02\n      type: ChemicalReaction\n      actions:\n        - type: RandomlyToggleMolecule\n          parameters: [wanted, true, 0.01]\n  - &amp;Camera\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: CameraSee\n          parameters: [*CameraFoVDistance, *CameraFoVAngle, vision, wanted]\n        - type: CameraInjectVisibleNodeClosestToDistance\n          parameters: [*CameraDistanceFromTarget, vision, target]\n    - time-distribution: 1\n      type: ChemicalReaction\n      conditions:\n        - type: ContainsMolecule\n          parameters: [target]\n      actions:\n        - type: HeadTowardTarget\n          parameters: [target, *CameraAngularSpeed]\n        - type: FollowAtDistance\n          parameters: [target, *CameraDistanceFromTarget, *CameraSpeed]\n\ndeployments:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n    programs:\n      - *Human\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n    programs:\n      - *Camera\n<\/code><\/pre>\n<p>To conclude, we want the cameras to explore randomly and spin when no targets are detected. For this purpose we add another reaction with a <em>Spin<\/em> and <em>ConstantDistanceRandomMove<\/em> and with an <em>NoOtherReactionCanExecute<\/em> condition which will be triggered when the conditions of the other reactions are not valid.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  HumanSpeed: &amp;HumanSpeed\n    formula: 1\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n  CameraFoVAngle: &amp;CameraFoVAngle\n    formula: 60\n  CameraFoVDistance: &amp;CameraFoVDistance\n    formula: 20\n  CameraSpeed: &amp;CameraSpeed\n    formula: 1\n  CameraAngularSpeed: &amp;CameraAngularSpeed\n    formula: 3\n  CameraDistanceFromTarget: &amp;CameraDistanceFromTarget\n    formula: 2 * CameraFoVDistance / 3\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\nprograms:\n  - &amp;Human\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: ConstantDistanceRandomMove\n          parameters: [*HalfEnvironmentSize, *HumanSpeed]\n    - time-distribution: 0.02\n      type: ChemicalReaction\n      actions:\n        - type: RandomlyToggleMolecule\n          parameters: [wanted, true, 0.01]\n  - &amp;Camera\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: CameraSee\n          parameters: [*CameraFoVDistance, *CameraFoVAngle, vision, wanted]\n        - type: CameraInjectVisibleNodeClosestToDistance\n          parameters: [*CameraDistanceFromTarget, vision, target]\n    - time-distribution: 1\n      type: ChemicalReaction\n      conditions:\n        - type: ContainsMolecule\n          parameters: [target]\n      actions:\n        - type: HeadTowardTarget\n          parameters: [target, *CameraAngularSpeed]\n        - type: FollowAtDistance\n          parameters: [target, *CameraDistanceFromTarget, *CameraSpeed]\n    - time-distribution: 1\n      type: ChemicalReaction\n      conditions:\n        - type: NoOtherReactionCanExecute\n          parameters:\n      actions:\n        - type: Spin\n          parameters: [*CameraAngularSpeed]\n        - type: ConstantDistanceRandomMove\n          parameters: [*HalfEnvironmentSize, *CameraSpeed]\n\ndeployments:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n    programs:\n      - *Human\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n    programs:\n      - *Camera\n<\/code><\/pre>\n<h3 id=\"further-references\"><a href=\"#further-references\" id=\"further-references\" class=\"anchor\"><\/a>Further references<\/h3>\n<p><a href=\"https://doi.org/10.1145/3131885.3131909\">Lukas Esterle, Peter R. Lewis<br />\nOnline Multi-object k-coverage with Mobile Smart Cameras<br />\nIn Proceedings of the International Conference on Distributed Smart Cameras (ICDSC). Nominated for best paper. 2017.<\/a><\/p>\n"
            }]
          },
          "indoor": {
            "ownKey": "indoor",
            "ownPages": [{
              "reference": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "indoor",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/indoor"
              },
              "next": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/maps"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "advanced",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced"
              },
              "description": "",
              "title": "Indoor environments",
              "content": "<p>In order to load map of indoor environment, you can use <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/imageenvironment\">ImageEnvironment<\/a>.<\/p>\n<p>ImageEnvironment loads the map as raster image from file, interpreting the black pixels as obstacles\n(wall-like areas not accessible to nodes). Color of pixels that represents obstacles can be set to\nevery color with relative constructor's parameter, black is default.<\/p>\n<p>By default, each pixel is considered as a 1x1 block.\nAs a consequence, a 1200x600 image with a vertical line of black pixels at coordinate 500 will be interpreted as a single\nobstacle of size 1x600 starting at coordinate (500, 0).\nIt is possible to scale up or down the size of the environment by acting on the zoom parameter of <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/imageenvironment\">ImageEnvironment<\/a>,\nas well as changing the initial coordinates.<\/p>\n<p>In this example the image with the map is in the classpath in the folder <code>images<\/code>. Using a network-model\nlike <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/obstaclesbreakconnection\">ObstaclesBreakConnection<\/a> the connections between nodes are created only if there\naren't obstacles between them. The nodes moves with a brownian move and never they moves across the walls.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: ImageEnvironment\n  parameters: [images/foo.png]\n  \n  network-model: { type: ObstaclesBreakConnection, parameters: [100] }\n  \n  program-pools:\n    - move: &amp;move\n      - time-distribution: { type: ExponentialTime, parameters: [1] }\n        type: Event\n        actions:\n          - { type: BrownianMove, parameters: [1] }\n  deployments:\n    - in: { type: Circle, parameters: [100, 700, 700, 300] }\n      programs: \n        - *move\n<\/code><\/pre>\n<p>The following image is a snapshot of the previous simulation. It is possible see how there aren't link\nbetween nodes across walls.<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/indoor_simulation.png\" alt=\"Simulation result\" /><\/p>\n"
            }]
          },
          "graphstream": {
            "ownKey": "graphstream",
            "ownPages": [{
              "reference": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "graphstream",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/graphstream"
              },
              "next": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "navigation-graphs",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/navigation-graphs"
              },
              "previous": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/maps"
              },
              "description": "",
              "title": "Graph-based deployments",
              "content": ""
            }]
          },
          "navigation-graphs": {
            "ownKey": "navigation-graphs",
            "ownPages": [{
              "reference": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "navigation-graphs",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/navigation-graphs"
              },
              "next": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "cognitive-pedestrians",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/cognitive-pedestrians"
              },
              "previous": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "graphstream",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/graphstream"
              },
              "description": "",
              "title": "Pathfinding and navigation meshes",
              "content": "<p>A <em>navigation graph<\/em> of an environment with obstacles is a graph whose nodes are convex shapes representing portions of the environment which are traversable by agents (namely, walkable areas), and edges represent connections between them. The image below shows a bidimensional environment with obstacles on the left and the associated navigation graph on the right (nodes are painted blue, edges are represented as line segments connecting the centroid of a node to the associated crossing, which is painted green).<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/navigation-graph.jpeg\" alt=\"navigation graph\" /><\/p>\n<p>Navigation graphs are mainly used for navigation purposes (e.g. in pathfinding algorithms): the advantage of decomposing the environment into convex regions is that agents can freely walk around within a convex region, as it is guaranteed that no obstacle will be found (remember that a shape is convex when no line segment between any two points on its boundary ever goes outside the shape).<\/p>\n<p>Alchemist is capable of generating navigation graphs of bidimensional environments featuring euclidean geometry and double precision coordinates. Before diving into the topic, please be aware that the algorithm implemented in Alchemist for the generation of navigation graphs:<\/p>\n<ul>\n<li>Does not guarantee the coverage of 100% of the walkable area (as the image above shows).<\/li>\n<li>Is only capable to detect axis-aligned crossings.<\/li>\n<li>Is only capable to deal with convex polygonal obstacles. Concave ones can be decomposed into convex meshes, whereas for curves bounding boxes can be used, eventually arbitrarily-oriented minimum bounding boxes.<\/li>\n<\/ul>\n<h3 id=\"navigator\"><a href=\"#navigator\" id=\"navigator\" class=\"anchor\"><\/a>NaviGator<\/h3>\n<p>The algorithm implemented in Alchemist is called NaviGator (Navigation Graphs generAtor), here's a brief description of how it operates: firstly, a certain number of seeds is planted in the environment. Each seed is a square-shaped region of unitary side that will grow maintaining a convex shape. Secondly, planted seeds are extended until possible (i.e. until they are in contact with an obstacle or another seed on each side). Finally, crossings are found between the grown seeds. NaviGator is derived from the <a href=\"https://www.researchgate.net/profile/G_Youngblood/publication/220978343_Automatically-generated_Convex_Region_Decomposition_for_Real-time_Spatial_Agent_Navigation_in_Virtual_Worlds/links/54510d020cf24884d886f643/Automatically-generated-Convex-Region-Decomposition-for-Real-time-Spatial-Agent-Navigation-in-Virtual-Worlds.pdf\">DEACCON algorithm<\/a> for the generation of navigation meshes.<\/p>\n<h3 id=\"generating-navigation-graphs-from-images\"><a href=\"#generating-navigation-graphs-from-images\" id=\"generating-navigation-graphs-from-images\" class=\"anchor\"><\/a>Generating navigation graphs from images<\/h3>\n<p>If your environment is codified as an image (such as the planimetry showed above), generating a navigation graph is straight-forward. All you have to do is mark the areas of the environment where to plant initial seeds in blue (RGB #0000FF). In the image below you can see the generation of the navigation graph showed on the top of the page. The blue regions in the original image indicate where to plant initial seeds. These are then grown and crossings are found between them.<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/navigation-graph-generation.jpeg\" alt=\"navigation graph generation\" /><\/p>\n<p>Once you have your image ready for the generation of the navigation graph, you can exploit the <code>ImageEnvironmentWithGraph<\/code> class to produce it for you. This will read your image, extract the positions you marked blue and pass them to the NaviGator algorithm. Assuming you already know <a href=\"../use/basics.md\">how to write simulations in YAML<\/a>, instancing an <code>ImageEnvironmentWithGraph<\/code> in a simulation file is straight-forward:<\/p>\n<pre><code class=\"language-yaml\">environment:\n  type: ImageEnvironmentWithGraph\n  parameters: [path/to/image.png, 1.0]\n<\/code><\/pre>\n<p>The second parameter is the zoom level. As you may see in the API documentation, the <code>ImageEnvironmentWithGraph<\/code> class exposes a method that will allow you to obtain the generated graph.<\/p>\n<h4 id=\"drawing-navigation-graphs\"><a href=\"#drawing-navigation-graphs\" id=\"drawing-navigation-graphs\" class=\"anchor\"><\/a>Drawing navigation graphs<\/h4>\n<p>A simple effect capable to draw the navigation graph of an <code>ImageEnvironmentWithGraph<\/code> in the gui is available as well. Its name is <code>DrawNavigationGraph<\/code>, you can just select it from the available effects in the gui to have your graph drawn.<\/p>\n<h3 id=\"using-navigator\"><a href=\"#using-navigator\" id=\"using-navigator\" class=\"anchor\"><\/a>Using NaviGator<\/h3>\n<p>If your environment is not codified as an image, you can still generate a navigation graph by directly using the NaviGator algorithm. This is contained in the <code>NaviGator.kt<\/code> file whose only public function is <code>generateNavigationGraph<\/code>. Let us look at its signature:<\/p>\n<pre><code class=\"language-kotlin\">fun generateNavigationGraph(\n    origin: Euclidean2DPosition = Euclidean2DPosition(0.0, 0.0),\n    width: Double,\n    height: Double,\n    obstacles: Collection&lt;Shape&gt;,\n    rooms: Collection&lt;Euclidean2DPosition&gt;,\n    unity: Double = 1.0\n): Euclidean2DNavigationGraph\n<\/code><\/pre>\n<p>Here's a brief description of each parameter:<\/p>\n<ul>\n<li><code>origin<\/code>: the origin of the environment, defaults to (0,0).<\/li>\n<li><code>width<\/code>: the width of the environment (only positive).<\/li>\n<li><code>height<\/code>: the height of the environment (only positive).<\/li>\n<li><code>obstacles<\/code>: the obstacles of the environment (only convex polygonal obstacles are supported).<\/li>\n<li><code>rooms<\/code>: a collection of positions where to plant initial seeds. In indoor environments, these positions are usually located inside rooms (and corridors), hence the name of the parameter.<\/li>\n<li><code>unity<\/code>: the quantity considered to be a unit in the environment (defaults to 1.0 because this algorithm works best with environments featuring integer coordinates). In the growing phase, each side of each seed will be advanced of a quantity equal to unity iteratively, hence the smaller this value is the slower the algorithm will be.<\/li>\n<\/ul>\n"
            }]
          },
          "cognitive-pedestrians": {
            "ownKey": "cognitive-pedestrians",
            "ownPages": [{
              "reference": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "cognitive-pedestrians",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/cognitive-pedestrians"
              },
              "next": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "smartcam",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/smartcam"
              },
              "previous": {
                "path": "wiki/advanced",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "navigation-graphs",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/navigation-graphs"
              },
              "description": "",
              "title": "Cognitive Pedestrians",
              "content": "<p>Alchemist is capable of simulating the movement of pedestrians with sophisticated cognitive capabilities:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/no-knowledge.gif\" alt=\"demo\" /><\/p>\n<p>The animation above shows an adult male with no previous knowledge of the environment trying to reach the destination marked green.<\/p>\n<h3 id=\"prerequisites\"><a href=\"#prerequisites\" id=\"prerequisites\" class=\"anchor\"><\/a>Prerequisites<\/h3>\n<p>This guide assumes you already know\n<a href=\"https://alchemistsimulator.github.io/latest/wiki/understand/metamodel\">the Alchemist metamodel<\/a>,\n<a href=\"https://alchemistsimulator.github.io/latest/wiki/use/basics\">how to write simulations<\/a>,\nand <a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/navigation-graphs\">how to generate a navigation graph<\/a>.<\/p>\n<h3 id=\"types-of-pedestrian\"><a href=\"#types-of-pedestrian\" id=\"types-of-pedestrian\" class=\"anchor\"><\/a>Types of pedestrian<\/h3>\n<p>There are three basic types of pedestrian, each representing a more sophisticated version of the previous one. These are derived from the work of <a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">van der Wal et al<\/a>.<\/p>\n<h4 id=\"homogeneous-pedestrian\"><a href=\"#homogeneous-pedestrian\" id=\"homogeneous-pedestrian\" class=\"anchor\"><\/a>Homogeneous Pedestrian<\/h4>\n<p>Homogeneous pedestrians are <em>Nodes<\/em> with no peculiar characteristic each other.<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Circle\n    parameters: [100, 0, 0, 20]\n    nodes:\n      type: HomogeneousPedestrian2D\n<\/code><\/pre>\n<h4 id=\"heterogeneous-pedestrian\"><a href=\"#heterogeneous-pedestrian\" id=\"heterogeneous-pedestrian\" class=\"anchor\"><\/a>Heterogeneous Pedestrian<\/h4>\n<p>Heterogeneous pedestrians have an age and a gender, based on which their speed, compliance and social attitudes are computed.\nThe age groups available are: <em>child<\/em>, <em>adult<\/em>, <em>elderly<\/em>; alternatively you can specify the exact age. The genders available are: <em>male<\/em>, <em>female<\/em>.<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Circle\n    parameters: [50, 0, 0, 20]\n    nodes:\n      type: HeterogeneousPedestrian2D\n      parameters: [&quot;elderly&quot;, &quot;female&quot;]\n  - type: Circle\n    parameters: [50, 0, 0, 20]\n    nodes:\n      type: HeterogeneousPedestrian2D\n      parameters: [&quot;child&quot;, &quot;male&quot;]\n<\/code><\/pre>\n<h4 id=\"cognitive-pedestrian\"><a href=\"#cognitive-pedestrian\" id=\"cognitive-pedestrian\" class=\"anchor\"><\/a>Cognitive Pedestrian<\/h4>\n<p>Cognitive pedestrians are heterogeneous pedestrians with cognitive capabilities. They have an emotional state and are able to influence and be influenced by others with the same capabilities. As an example, cognitive pedestrians can perceive fear via social contagion (e.g. seeing other people fleeing may cause them flee as well despite they haven't directly seen the danger).<\/p>\n<pre><code class=\"language-yaml\">_reactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [1.0]\n    type: CognitiveBehavior\n\ndeployments:\n  - type: Circle\n    parameters: [50, 0, 0, 20]\n    nodes:\n      type: CognitivePedestrian2D\n      parameters: [&quot;adult&quot;, &quot;male&quot;]\n    programs:\n      - *behavior\n  - type: Circle\n    parameters: [50, 0, 0, 20]\n    nodes:\n      type: CognitivePedestrian2D\n      parameters: [&quot;adult&quot;, &quot;female&quot;]\n    programs:\n      - *behavior\n<\/code><\/pre>\n<h3 id=\"orienting-pedestrians\"><a href=\"#orienting-pedestrians\" id=\"orienting-pedestrians\" class=\"anchor\"><\/a>Orienting pedestrians<\/h3>\n<p>As shown in the animation on the top of the page, pedestrians can be equipped with different knowledge degrees of the environment. To do so, a particular type of pedestrian called orienting pedestrian is required: this is derived from the work of <a href=\"https://www.tandfonline.com/doi/full/10.1080/23249935.2018.1432717\">Andresen et al<\/a>. There are two available types of orienting pedestrian, described below.<\/p>\n<h4 id=\"homogeneous-orienting-pedestrian\"><a href=\"#homogeneous-orienting-pedestrian\" id=\"homogeneous-orienting-pedestrian\" class=\"anchor\"><\/a>Homogeneous orienting pedestrian<\/h4>\n<p>These are homogeneous pedestrians that can be equipped with a given knowledge degree of the environment. Such quantity is a <code>Double<\/code> value in [0,1] describing the percentage of environment the pedestrian is familiar with prior to the start of the simulation (thus it does not take into account the knowledge the pedestrian will gain during it). Note that despite their name (&quot;homogeneous&quot;), knowledge degrees of different homogeneous orienting pedestrians may differ, and even pedestrians with the same knowledge degree can be different as each one can be familiar with different portions of the environment. Be also aware that orienting pedestrians can only be placed in an <code>EnvironmentWithGraph<\/code>, which is a type of environment providing a navigation graph (see <a href=\"navigation-graphs.md\">how to generate navigation graphs<\/a>).<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Point\n    parameters: [15, 15]\n    nodes:\n      type: HomogeneousOrientingPedestrian2D\n      parameters: [0.5]\n<\/code><\/pre>\n<h4 id=\"cognitive-orienting-pedestrian\"><a href=\"#cognitive-orienting-pedestrian\" id=\"cognitive-orienting-pedestrian\" class=\"anchor\"><\/a>Cognitive orienting pedestrian<\/h4>\n<p>As you may guess, these are cognitive pedestrians equipable with a given knowledge degree of the environment. Cognitive orienting pedestrians can be instanced providing their knowledge degree as first parameter.<\/p>\n<pre><code class=\"language-yaml\">_reactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [1.0]\n    type: CognitiveBehavior\n\ndeployments:\n  - type: Point\n    parameters: [0, 0]\n    nodes:\n      type: CognitiveOrientingPedestrian2D\n      parameters: [0.5, &quot;adult&quot;, &quot;male&quot;]\n    programs:\n      - *behavior\n<\/code><\/pre>\n<h3 id=\"groups\"><a href=\"#groups\" id=\"groups\" class=\"anchor\"><\/a>Groups<\/h3>\n<p>It is likely that a pedestrian doesn't move on its own, but there is a group consisting of multiple people\nwhich are related each other and whose behaviors are strictly dependant on that structure.\nThe only way you can currently assign a group to a pedestrian is by creating it as a variable and passing it\nas a parameter when the <em>Nodes<\/em> created are of pedestrian type. If you don't specify any group in this phase,\nautomatically a new group of type Alone is assigned.<\/p>\n<p>The following simulation example loads two groups of homogeneous pedestrians representing friends around the center of the scene, one having 10 members and the other 15.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  group1: &amp;group1\n    formula: it.unibo.alchemist.model.implementations.groups.Friends&lt;Any&gt;()\n    language: kotlin\n  group2: &amp;group2\n    formula: it.unibo.alchemist.model.implementations.groups.Friends&lt;Any&gt;()\n    language: kotlin\n\ndeployments:\n  - type: Circle\n    parameters: [10, 0, 0, 20]\n    nodes:\n      type: HomogeneousPedestrian2D\n      parameters: [*group1]\n  - type: Circle\n    parameters: [15, 0, 0, 20]\n    nodes:\n      type: HomogeneousPedestrian2D\n      parameters: [*group2]\n<\/code><\/pre>\n<h3 id=\"steering-actions\"><a href=\"#steering-actions\" id=\"steering-actions\" class=\"anchor\"><\/a>Steering Actions<\/h3>\n<p>Steering actions are <em>Actions<\/em> whose purpose is moving a node inside an environment. There are quite a lot of these actions, but they can be divided into two categories:<\/p>\n<ul>\n<li>those inspired to <a href=\"http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.16.8035\">Reynold's steering behaviors<\/a>, which operate in a greedy fashion, i.e. performing only local choices;<\/li>\n<li>those inspired to the work of <a href=\"https://www.tandfonline.com/doi/full/10.1080/23249935.2018.1432717\">Andresen et al<\/a>, also called <code>NavigationAction<\/code>s, which exploit the spatial information available to orienting pedestrians in order to navigate the environment consciously (e.g. without getting stuck in U-shaped obstacles). Note that these actions <em>do not<\/em> assume that pedestrians have global knowledge of the environment, on the contrary only the spatial information available to a pedestrian is used to move it (which can be little or nothing).<\/li>\n<\/ul>\n<p>For a complete overview of the available actions refer to the api documentation. The creation of complex movements can be accomplished by combining different steering actions together. The only way currently available to do so is by using some <em>SteeringBehavior<\/em> extending <em>Reaction<\/em>, which can recognize, across all the actions specified, the steering ones to trait them in a separate way.<\/p>\n<p>In this simulation 50 people wander around the environment and if they are approaching an obstacle they avoid it.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nenvironment:\n  type: ImageEnvironment\n  parameters: [...]\n\n_reactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [3.0]\n    type: PrioritySteering\n    actions:\n      - type: HeadTowardRandomDirection\n      - type: CognitiveAgentWander\n        parameters: [6, 4]\n      - type: CognitiveAgentObstacleAvoidance\n        parameters: [4]\n\ndeployments:\n  - type: Circle\n    parameters: [50, 0, 0, 25]\n    nodes:\n      type: HomogeneousPedestrian2D\n<\/code><\/pre>\n<h3 id=\"steering-strategies\"><a href=\"#steering-strategies\" id=\"steering-strategies\" class=\"anchor\"><\/a>Steering Strategies<\/h3>\n<p>In order to decide the logic according to which the different steering actions must be combined,\nthe concept of steering strategy has been introduced and related to it different reactions are available to be used\nwith the aim of computing the desired route for the pedestrians.\nIf you want a pedestrian to execute a single steering action at a time, <em>PrioritySteering<\/em> is a reaction\nwhich gives relevance only to the steering action whose target point is the nearest to the current pedestrian position.\nIf you want a pedestrian to execute a movement considering multiple actions at a time, <em>BlendedSteering<\/em> weights them\nconsidering their target distance to the current pedestrian position.\nThere is no limit to the number of steering actions which can be used together but some messy compositions\ncan result in unpredictable behaviors, so pay attention.<\/p>\n<p>In the example below a pedestrian reaches a point of interest, avoiding in the meantime to approach another position.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nenvironment:\n  type: Continuous2DEnvironment\n\n_reactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [1.0]\n    type: CognitiveAgentBlendedSteering\n    actions:\n      - type: CognitiveAgentSeek\n        parameters: [1000, 500]\n      - type: CognitiveAgentFlee\n        parameters: [500, -500]\n\ndeployments:\n  - type: Point\n    parameters: [0, 0]\n    nodes:\n      type: HomogeneousPedestrian2D\n    programs:\n      - *behavior\n<\/code><\/pre>\n<h3 id=\"evacuation-scenarios\"><a href=\"#evacuation-scenarios\" id=\"evacuation-scenarios\" class=\"anchor\"><\/a>Evacuation Scenarios<\/h3>\n<p>Pedestrians can be loaded in any kind of <em>Environment<\/em> but it is recommended to use <em>PhysicsEnvironments<\/em> since they\nhave properties such as non-overlapping shapes which are advisable to be taken into consideration\nwhen working with a crowd.\nTo specify the existence of a potential danger or a significative zone in general inside the environment you can use <em>Layers<\/em>.\nEach layer is associated to a <em>Molecule<\/em> different from the one of all the others.\nYou must specify to any cognitive pedestrian the <em>Molecule<\/em> representing danger in the <em>Environment<\/em>,\notherwise it won't have the ability to recognize the presence of it.<\/p>\n<p>In the following example 100 adult females with cognitive capabilities get away from a zone in the environment where\nthere is a potential danger.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  danger: &amp;danger\n    formula: &quot;\\&quot;danger\\&quot;&quot;\n\nenvironment:\n  type: Continuous2DEnvironment\n\nlayers:\n  - type: BidimensionalGaussianLayer\n    molecule: *danger\n    parameters: [0.0, 0.0, 20.0, 15.0]\n\n_reactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [1.0]\n    type: PrioritySteering\n    actions:\n      - type: CognitiveAgentCognitiveAgentAvoidLayer\n        parameters: [*danger]\n\ndeployments:\n  - type: Circle\n    parameters: [100, 0, 0, 50]\n    nodes:\n      type: CognitivePedestrian2D\n      parameters: [&quot;adult&quot;, &quot;female&quot;, *danger]\n    programs:\n      - *behavior\n<\/code><\/pre>\n<h3 id=\"navigation-system\"><a href=\"#navigation-system\" id=\"navigation-system\" class=\"anchor\"><\/a>Navigation system<\/h3>\n<p>Each time a pedestrian enters a new room (= environment's area), all the visible doors are weighted, the one with minimum weight is then crossed. The weighting system used in Alchemist is derived from the one by <a href=\"https://doi.org/10.1080/23249935.2018.1432717\">Andresen et al<\/a>, here's a brief description of the factors included, these are multiplied to get the final weight.<\/p>\n<table>\n<thead>\n<tr><th>Name<\/th><th>Description<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>volatileMemoryFactor<\/td><td>Takes into account the information stored in the pedestrian's volatile memory (= a map pairing each room with the number of visits, models the ability to remember areas of the environment already visited since the start of the simulation). It is computed as 2^v where v is the number of visits to the area the edge being weighted leads to (in other words, less visited rooms are preferred).<\/td><\/tr>\n<tr><td>congestionFactor<\/td><td>Takes into account the congestion of the area the edge being weighted leads to (it is assumed that the pedestrian can estimate the congestion level of a neighboring room). It is computed as density of the area + 1, so as to have a value in [1,2] (less crowded rooms are preferred).<\/td><\/tr>\n<tr><td>impasseFactor<\/td><td>Takes into account whereas a door leads to a known impasse or not, known impasses are given <em>knownImpasseWeight<\/em> (see hardcoded parameters below), otherwise this factor assumes unitary value.<\/td><\/tr>\n<tr><td>suitabilityFactor<\/td><td>This factor is used when the pedestrian is moving towards a target: each door is given an integer rank indicating its suitability in order to reach the target (ranks are computed taking into account the target and the door locations, as well as the geometry of the current room). The factor for each door is computed as 1-0.5^rank.<\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"hardcoded-parameters\"><a href=\"#hardcoded-parameters\" id=\"hardcoded-parameters\" class=\"anchor\"><\/a>Hardcoded parameters<\/h3>\n<p>Here's a list of all the hardcoded parameters.<\/p>\n<table>\n<thead>\n<tr><th>Name<\/th><th>Value<\/th><th>Description<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>knownImpasseWeight<\/td><td>10<\/td><td>Weight assigned to known impasses (= areas with a single door). It's usually a high value, allowing to avoid them.<\/td><\/tr>\n<tr><td>toleranceAngle<\/td><td>45 degrees<\/td><td>Used by <code>SinglePrevalent<\/code> steering strategy (see its api documentation), such strategy linearly combines multiple steering actions (= multiple forces) assuming one of them is prevalent. Weights for the linear combination are determined so that the resulting force forms with the prevalent one an angle smaller than or equal to the tolerance angle. The prevalent force usually wants to move the pedestrian consciously, whereas other forces are more &quot;greedy&quot;. The purpose of the tolerance angle is allowing to steer the pedestrian towards the target defined by the prevalent force, while using a trajectory which takes into account other urges as well.<\/td><\/tr>\n<tr><td>alpha<\/td><td>0.5<\/td><td>Used by <code>SinglePrevalent<\/code> steering strategy (see its api documentation), an exponential smoothing with this alpha is applied to the resulting force in order to reduce oscillatory movements.<\/td><\/tr>\n<tr><td>maxWalkRatio<\/td><td>0.3<\/td><td>Used by <code>SinglePrevalent<\/code> steering strategy (see its api documentation). When the pedestrian is subject to contrasting forces the resulting one may be small in magnitude, hence a lower bound for such quantity is set to (maximum distance walkable by the pedestrian) * (this parameter) so as to avoid extremely slow movements.<\/td><\/tr>\n<tr><td>delta<\/td><td>0.05<\/td><td>Used by <code>SinglePrevalent<\/code> steering strategy (see its api documentation). The weight assigned to disturbing forces is set to 1 and then iteratively decreased by delta until the resulting force satisfies the required conditions (see the api). This is similar to a gradient descent.<\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"physical-pedestrians\"><a href=\"#physical-pedestrians\" id=\"physical-pedestrians\" class=\"anchor\"><\/a>Physical pedestrians<\/h3>\n<p>So far we didn't mention physical interactions between pedestrians. Guess what? Physical pedestrians are capable of pushing and bumping into each other. Similarly to Orienting Pedestrians, we have <code>HomogeneousPhysicalPedestrian2D<\/code> and <code>CognitivePhysicalPedestrian2D<\/code>. Whatsmore, you can have a physical pedestrian capable of orienting as well: there are <code>HomogeneousOrientingPhysicalPedestrian2D<\/code> and <code>CognitiveOrientingPhysicalPedestrian2D<\/code>. Physical pedestrians don't require any additional parameter upon creation, hence the constructors showed above can be used to instance them.<\/p>\n<p>Physical pedestrians are inspired to <a href=\"https://bit.ly/3e3C7Tb\">the work of Pelechano et al<\/a>. Note that this features are at an early stage, things might not work as expected.<\/p>\n<h3 id=\"physical-steering-strategies\"><a href=\"#physical-steering-strategies\" id=\"physical-steering-strategies\" class=\"anchor\"><\/a>Physical steering strategies<\/h3>\n<p>In order to work properly, physical pedestrians should be equipped with physical steering strategies. Such strategies define how steering actions (which are intentional) are combined with physical forces (which are mostly unintentional). At present, only <code>BlendedSteeringWithPhysics<\/code> and <code>NavigationPrioritisedSteeringWithPhysics<\/code> are available. For further information, see the api. Here's a simple code for loading a <code>HomogeneousPhysicalPedestrian<\/code> with <code>Seek<\/code> and <code>Flee<\/code> steering actions:<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nenvironment:\n  type: Continuous2DEnvironment\n\n_reactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [1.0]\n    type: BlendedSteeringWithPhysics\n    actions:\n      - type: CognitiveAgentSeek\n        parameters: [1000, 500]\n      - type: CognitiveAgentFlee\n        parameters: [500, -500]\n\ndeployments:\n  - type: Point\n    parameters: [0, 0]\n    nodes:\n      type: HomogeneousPhysicalPedestrian2D\n    programs:\n      - *behavior\n<\/code><\/pre>\n<h3 id=\"further-references\"><a href=\"#further-references\" id=\"further-references\" class=\"anchor\"><\/a>Further references<\/h3>\n<p><a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">C. Natalie van der Wal, Daniel Formolo, Mark A. Robinson, Michael Minkov, Tibor Bosse<br />\nSimulating Crowd Evacuation with Socio-Cultural, Cognitive, and Emotional Elements<br />\nTransactions on Computational Collective Intelligence XXVII. 2017.<\/a><\/p>\n<p><a href=\"http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.16.8035\">Craig W. Reynolds<br />\nSteering Behaviors for Autonomous Characters. 1999.<\/a><\/p>\n<p><a href=\"https://www.tandfonline.com/doi/full/10.1080/23249935.2018.1432717\">Erik Andresen, Mohcine Chraibi &amp; Armin Seyfried<br />\nA representation of partial spatial knowledge: a cognitive map approach for evacuation simulations<\/a><\/p>\n<p><a href=\"https://repository.upenn.edu/cgi/viewcontent.cgi?article=1223&amp;context=hms\">Nuria Pelechano, Jan M. Allbeck, Norman I. Badler<br />\nControlling Individual Agents in High-Density Crowd Simulation<\/a><\/p>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "advanced",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/advanced"
          },
          "next": {
            "path": "wiki/advanced",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "indoor",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/indoor"
          },
          "previous": {
            "path": "wiki/incarnations",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "scafi",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/scafi"
          },
          "description": "",
          "title": "Advanced components",
          "content": ""
        }]
      },
      "use": {
        "ownKey": "use",
        "childrenPages": {
          "basics": {
            "ownKey": "basics",
            "ownPages": [{
              "reference": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "basics",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/basics"
              },
              "next": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "dry",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/dry"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "use",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use"
              },
              "description": "",
              "title": "Basics of an Alchemist simulation",
              "content": "<p>As a first step, we recommend learning the YAML basics.\nThe language is so simple and human readable that there is probably no better way to learn it than to read it directly.\nMy suggestion is to use the tutorial &quot;<a href=\"https://learnxinyminutes.com/docs/yaml/\">Learn X in Y minutes where X = YAML<\/a>&quot;,\nit should provide a good YAML guide (surely sufficient to follow the tutorial).<\/p>\n<p>Alchemist expects a YAML map as input. In the following section, we'll discuss which keys it expects.\nOf course, users are free to use all the YAML features (e.g. anchors and merge keys)\nto organize their code and reduce duplication.<\/p>\n<h2 id=\"choosing-an-incarnation\"><a href=\"#choosing-an-incarnation\" id=\"choosing-an-incarnation\" class=\"anchor\"><\/a>Choosing an incarnation<\/h2>\n<p>The <code>incarnation<\/code> key is mandatory.\nActually, it's the only mandatory key.\nThe YAML parser expects a string value.\nSuch string will be used to get the most similarly named incarnation, namely the subclass of Incarnation whose simple\nname is closest to the string.<\/p>\n<p><strong>Examples<\/strong><\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: protelis\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: biochemistry\n<\/code><\/pre>\n<p><em>Note:<\/em> this is also the most minimal valid alchemist specification<\/p>\n<h2 id=\"loading-arbitrary-java-classes-with-the-typeparameters-syntax\"><a href=\"#loading-arbitrary-java-classes-with-the-typeparameters-syntax\" id=\"loading-arbitrary-java-classes-with-the-typeparameters-syntax\" class=\"anchor\"><\/a>Loading arbitrary Java classes with the <code>type<\/code>/<code>parameters<\/code> syntax<\/h2>\n<p>Alchemist YAML lets the user control which actual Java classes should be\nloaded inside a simulation, and which constructor should be used to do so.\nAlmost every entity of an Alchemist simulation can be instanced through arbitrary Java classes implementing the required interfaces.\nWhen the alchemist parser encounters a map providing the keys <code>type<\/code> and <code>parameters<\/code>, it tries to resolve the\nvalue of the value associated to <code>type<\/code> to a class name, then tries to create the object by\nsearching a constructor compatible with the parameters known by the context plus those provided in <code>parameters<\/code>.<\/p>\n<p><strong>Class name resolution<\/strong><\/p>\n<p>The value associated with <code>type<\/code> must be a string representing a valid Java identifier.\nIf the value contains one or more <code>.<\/code> characters, then it will be interpreted as a fully qualified name.\nIf no such character is included, then it will be interpreted as a simple name.\nMultiple classes with a common supertype and the same simple name may conflict, in which case the simulator raises an error.<\/p>\n<p><strong>Object instancing<\/strong><\/p>\n<p>If the class gets loaded correctly, then its constructors get sorted based on the number and type of parameters.\nThe system tries to build an object with all the available constructors until one of them provides an instanced object,\nin an order that considers both the current context (namely, the entities that have already been instanced) and the\nvalue of <code>parameters<\/code>.<\/p>\n<p>For instance, imagine that you are trying to build an instance of a <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/reaction\">Reaction<\/a>, whose only constructor requires an\n<a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environment\">Environment<\/a>, a <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/node\">Node<\/a>, an <code>int<\/code> and a <code>String<\/code>.\nIn this case, an Environment and a Node must have already been created\n(or the simulation loading process would have failed already).\nAs a consequence, the first two parameters are automatically inferred by the current context and passed to the constructor.\nThe other two parameters can not be inferred this way;\ninstead, the value associated to <code>parameters<\/code> is used to extract the proper values (if possible).\nIn this case, this would have been a valid <code>parameters<\/code> entry:<\/p>\n<pre><code class=\"language-yaml\">type: my.package.MyCustomReaction\nparameters: [4, foo]\n<\/code><\/pre>\n<p>As you can easily infer, the value of <code>parameters<\/code> must be a YAML list.<\/p>\n<p>Don't despair if the class loading system is still unclear: it will become clearer with the examples in the forthcoming sections.<\/p>\n<h2 id=\"setting-up-the-environment\"><a href=\"#setting-up-the-environment\" id=\"setting-up-the-environment\" class=\"anchor\"><\/a>Setting up the environment<\/h2>\n<p>The <code>environment<\/code> key is used to load the <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environment\">Environment<\/a> implementation.\nIt is optional and it defaults to a <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments/continuous2denvironment\">continuous bidimensional space<\/a>.<\/p>\n<h3 id=\"examples\"><a href=\"#examples\" id=\"examples\" class=\"anchor\"><\/a>Examples<\/h3>\n<p>The following simulations are equivalent, and load the default environment (which is incarnation independent, here\n<code>protelis<\/code> is picked, but it works for any other incarnation as well):<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: Continuous2DEnvironment\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: it.unibo.alchemist.model.implementations.environments.Continuous2DEnvironment\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: Continuous2DEnvironment\n  parameters: []\n<\/code><\/pre>\n<p>Alchemist supports\n<a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/maps\">real world maps<\/a>\nand\n<a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/indoor\">indoor environments with obstacles<\/a>.<\/p>\n<p>Of course, in case you have a custom <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environment\">Environment<\/a> implementation,\nyou can load it using the <code>type<\/code>/<code>parameters<\/code> syntax.<\/p>\n<p>The environments shipped with the distribution can be found in the package\n<a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/environments\">it.unibo.alchemist.model.implementations.environments<\/a>.<\/p>\n<h2 id=\"deploying-nodes\"><a href=\"#deploying-nodes\" id=\"deploying-nodes\" class=\"anchor\"><\/a>Deploying nodes<\/h2>\n<p>Once the environment is set up, it is time to populate it with nodes.\nThe <code>deployments<\/code> section lists the node locations at the beginning of the simulation.\nEach deployment type extends the interface <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/deployments/deployment\">Deployment<\/a>.<\/p>\n<h3 id=\"deploying-on-specific-positions\"><a href=\"#deploying-on-specific-positions\" id=\"deploying-on-specific-positions\" class=\"anchor\"><\/a>Deploying on specific positions<\/h3>\n<p>The following example places a single node in the (0, 0) <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/deployments/point\">Point<\/a>.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\ndeployments:\n  type: Point\n  parameters: [0, 0]\n<\/code><\/pre>\n<p>Multiple nodes can be set up by listing them in YAML list, or in a YAML map,\nor in an arbitrarily nested combination of the two.<\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere # The incarnation is always mandatory\nnetwork-model:\n  type: ConnectWithinDistance # Loads a class with this name implementing LinkingRule\n  parameters: [2] # Connection radius (parameter of a ConnectWithinDistance's constructor)\ndeployments:\n  - type: Point # Loads a class with this name implementing Deployment\n    parameters: [0, 0] # Coordinates\n  - { type: Point, parameters: [0.5, 0.85] }\n  - { type: Point, parameters: [-0.5, 0.85] }\n<\/code><\/pre>\n<p>The Alchemist loading system is smart enough to search for deployments recursively.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\ndeployments:\n  the_bottom_point:\n    type: Point\n    parameters: [0, 0]\n  the_top_points:\n    - type: Point\n      parameters: [0.5, 0.85]\n    - type: Point\n      parameters: [-0.5, 0.85]\n<\/code><\/pre>\n<p>If multiple nodes are to be deployed with the same contents and program in multiple arbitrarily picked locations,\na dedicated Deployment with arbitrary positions is present:<\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\ndeployments:\n  type: SpecificPositions\n  parameters: [[0,1],[2,2],[3,4]]\n<\/code><\/pre>\n<h3 id=\"deploying-a-grid-of-nodes\"><a href=\"#deploying-a-grid-of-nodes\" id=\"deploying-a-grid-of-nodes\" class=\"anchor\"><\/a>Deploying a grid of nodes<\/h3>\n<p>Here instead nodes are located in a <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/deployments/grid\">Grid<\/a> centered in (0, 0), with nodes distanced of 0.25 both\nhorizontally and vertically.<\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\ndeployments:\n  type: Grid\n  parameters: [-5, -5, 5, 5, 0.25, 0.25]\n<\/code><\/pre>\n<p>Often however, symmetric structures may induce corner behaviors in self-organising systems,\nand real-world &quot;grid&quot; deployments are not usually geometrically perfect.\nIt is easy in Alchemist to create a perturbed grid, for instance in the following example nodes' positions\nare not exactly in the grid, but randomly perturbed (±0.1 distance units).<\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\ndeployments:\n  type: Grid\n  parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n<\/code><\/pre>\n<h3 id=\"deploying-nodes-randomly-inside-a-shape\"><a href=\"#deploying-nodes-randomly-inside-a-shape\" id=\"deploying-nodes-randomly-inside-a-shape\" class=\"anchor\"><\/a>Deploying nodes randomly inside a shape<\/h3>\n<p>Sometimes it is useful to deploy a bunch of nodes randomly inside some area marked by a shape.\nCircles and polygons are first-class citizens,\nbut of course users may create their own deployments by implementing <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/deployments/deployment\">Deployment<\/a>.<\/p>\n<p>This example places 10000 nodes randomly in a <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/circle\">Circle<\/a> with center in (0, 0) and radius 10.<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Circle\n    parameters: [10000, 0, 0, 10]\n<\/code><\/pre>\n<h3 id=\"customizing-the-node-type\"><a href=\"#customizing-the-node-type\" id=\"customizing-the-node-type\" class=\"anchor\"><\/a>Customizing the node type<\/h3>\n<p>In order to specify a particular node implementation you want to put inside the environment you can use the <code>nodes<\/code> key\nfollowed by the name of the class and the parameters required to build it.<\/p>\n<p>100 <code>MyCustomNodeImpl<\/code> nodes, whose constructor needs only the environment, placed in a circle with center in (0, 0) and\nradius 20.<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Circle\n    parameters: [100, 0, 0, 20]\n    nodes:\n      type: MyCustomNodeImpl\n      parameters: []\n<\/code><\/pre>\n<p>The empty parameters section can be omitted (as per custom class loading mechanism):<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Circle\n    parameters: [100, 0, 0, 20]\n    nodes:\n      type: MyCustomNodeImpl\n<\/code><\/pre>\n<h3 id=\"customizing-the-nodes-content\"><a href=\"#customizing-the-nodes-content\" id=\"customizing-the-nodes-content\" class=\"anchor\"><\/a>Customizing the nodes content<\/h3>\n<p>It is possible to set the content of the nodes in a deployment.\nNode contents are defined in terms of molecules and their corresponding concentration.\nAs such, they depend on the specific incarnation in use.<\/p>\n<p>In the following example, we inject in all the nodes of a <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/deployments/grid\">Grid<\/a> deployment a molecule called <code>foo<\/code>  with\nconcentration <code>1<\/code>.\nAs stated before, it would only make sense if the incarnation supports integer concentrations and it's able to produce\na valid molecule from the <code>&quot;foo&quot;<\/code> String.<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Grid\n    parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n    contents:\n      - molecule: foo\n        concentration: 1\n<\/code><\/pre>\n<p>Multiple contents can be listed, e.g.,\nif we want to also have a molecule named <code>bar<\/code> with value <code>0<\/code> along with <code>foo<\/code>,\nwe can just add another entry to the list:<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Grid\n    parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n    contents:\n      - molecule: foo\n        concentration: 1\n      - molecule: bar\n        concentration: 0\n<\/code><\/pre>\n<p>Molecules can be injected selectively inside a given <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/shape\">Shape<\/a>.\nTo do so, you can a filter with the <code>in keyword<\/code>.\nIn the following example, only the nodes inside the <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/loader/shapes/rectangle\">Rectangle<\/a> area contain\nthe <code>source<\/code> molecule.<\/p>\n<pre><code class=\"language-yaml\">deployments:\n  - type: Grid\n    parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n    contents:\n      - in:\n          type: Rectangle\n          parameters: [-6, -6, 2, 2]\n        molecule: source\n        concentration: true\n<\/code><\/pre>\n<h2 id=\"defining-the-network\"><a href=\"#defining-the-network\" id=\"defining-the-network\" class=\"anchor\"><\/a>Defining the network<\/h2>\n<p>The <code>network-model<\/code> key is used to load the implementation of <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/linkingrule\">LinkingRule<\/a> to be used in the simulation,\nwhich determines the neighborhood of every node.\nThe key is optional, but defaults to <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/nolinks\">NoLinks<\/a>, so if unspecified nodes in the environment don't get\nconnected.\nOmitting such key is equivalent to writing any of the following:<\/p>\n<pre><code class=\"language-yaml\">network-model:\n  type: NoLinks\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">network-model:\n  type: it.unibo.alchemist.model.implementations.linkingrules.NoLinks\n  parameters: []\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">network-model:\n  type: NoLinks\n  parameters: []\n<\/code><\/pre>\n<p>If no fully qualified linking rule name is provided for class loading, Alchemist uses the package\n<a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules\">it.unibo.alchemist.model.implementations.linkingrules<\/a> to search for the class.<\/p>\n<h3 id=\"linking-nodes-based-on-distance\"><a href=\"#linking-nodes-based-on-distance\" id=\"linking-nodes-based-on-distance\" class=\"anchor\"><\/a>Linking nodes based on distance<\/h3>\n<p>One of the most common ways of linking nodes is to connect those which are close enough to each other. To do so, you can\nuse the class <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/linkingrules/connectwithindistance\">ConnectWithinDistance<\/a>, passing a parameter representing the maximum connection distance.\nNote that such distance depends on the environment: while the definition of distance is straightforward for euclidean\nspaces, it's not so for <a href=\"https://en.wikipedia.org/wiki/Riemannian_geometry\">Riemannian manifolds<\/a>, which is a fancy\nname to define geometries such as the one typical of a urban map (you can roughly interpret it as a euclidean space\n&quot;with holes&quot;).\nFor instance, in case of environments using <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/geoposition\">GeoPosition<\/a>, the distance is computed in meters, so the\ndistance between <code>[44.133254, 12.237770]<\/code> and <code>[44.146680, 12.258627]<\/code> is about <code>2240<\/code> (meters).<\/p>\n<pre><code class=\"language-yaml\">network-model:\n  type: ConnectWithinDistance\n  # Link together all the nodes closer than 100 according to the distance function\n  parameters: [100]\n<\/code><\/pre>\n<h2 id=\"writing-behaviors-reactions\"><a href=\"#writing-behaviors-reactions\" id=\"writing-behaviors-reactions\" class=\"anchor\"><\/a>Writing behaviors (Reactions)<\/h2>\n<p>Nodes can be programmed using reactions.\nReaction are usually highly dependent on the specific incarnation.<\/p>\n<pre><code class=\"language-yaml\"># Variable representing the program to be executed\ngradient: &amp;gradient\n  - time-distribution: 1\n    # Make sure that the program folder is part of the project classpath\n    program: program:package:distanceTo\n  - program: send\ndeployments:\n  - type: Grid\n    parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n    programs:\n      # Reference to the &quot;gradient&quot; list of programs. This program is executed in all\n      # the grid nodes\n      - *gradient\n<\/code><\/pre>\n<h3 id=\"triggers\"><a href=\"#triggers\" id=\"triggers\" class=\"anchor\"><\/a>Triggers<\/h3>\n<pre><code class=\"language-yaml\">pools:\n  - pool:\n      - time-distribution:\n          type: Trigger\n          parameters: [0] # the param is the time step\n      type: Event\n      actions:\n        - type: MyActionType\n          parameters: [...] #\n<\/code><\/pre>\n<h2 id=\"layers\"><a href=\"#layers\" id=\"layers\" class=\"anchor\"><\/a>Layers<\/h2>\n<p>It is possible to define overlays (layers) of data that can be sensed everywhere in the environment.\nLayers can be used to model physical properties, such as pollution, light, temperature, and so on.\nConversely than readings from nodes' contents, layers have no dependency optimization.\nThis implies that reactions that read values from layers should have special care in defining their <code>context<\/code> appropriately<\/p>\n<p>In order to create layer, the programmer must define the type of the layer, a molecule that will be used as identifier,\nand possibly the parameters needed for intializing the type of layer you have chosen, as per the <a href=\"#loading-arbitrary-java-classes-with-the-typeparameters-syntax\"><code>type/parameter<\/code> syntax<\/a>.<\/p>\n<p>The following example exemplifies the syntax for initializing two <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/layers/bidimensionalgaussianlayer\">BidimensionalGaussianLayer<\/a>:<\/p>\n<pre><code class=\"language-yaml\">layers:\n  - type: BidimensionalGaussianLayer\n    molecule: foo\n    parameters: [0.0, 0.0, 2.0, 5.0]\n  - type: BidimensionalGaussianLayer\n    molecule: bar\n    parameters: [0.0, 0.0, 5.0, 10.0]\n<\/code><\/pre>\n<h2 id=\"terminating-the-simulation-if-a-condition-is-met\"><a href=\"#terminating-the-simulation-if-a-condition-is-met\" id=\"terminating-the-simulation-if-a-condition-is-met\" class=\"anchor\"><\/a>Terminating the simulation if a condition is met<\/h2>\n<p>Alchemist supports the possibility to write termination conditions for any simulation.\nTermination conditions are checked after every event, and, if met, cause the immediate termination of a simulation.\nTermination conditions are expected to be found in the <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/terminators\">it.unibo.alchemist.model.implementations.terminators<\/a> package.<\/p>\n<p>To load them, use the <code>terminators<\/code> keyword.\nMultiple terminators are allowed, the first terminator matching causes the termination of the simulation (they are in and).<\/p>\n<p>Here is an example:<\/p>\n<pre><code class=\"language-yaml\">terminate:\n  # Defines a new terminator which every 100 simulation steps for the environment to remain equal for the 10 subsequent\n  # simulation steps. If no change is detected, then the simulation is intended as concluded.\n  - type: StableForSteps\n    parameters: [100, 10]\n<\/code><\/pre>\n<h3 id=\"terminating-the-simulation-after-some-time\"><a href=\"#terminating-the-simulation-after-some-time\" id=\"terminating-the-simulation-after-some-time\" class=\"anchor\"><\/a>Terminating the simulation after some time<\/h3>\n<p>One of the simplest terminators availables allows for declaring a simulation completed when a certain simulated time is reached.\nIn the following example, it is used in conjunction with a number of variables, showing how it's possible to use such\nvariables to produce batches of simulations terminating at different times.<\/p>\n<pre><code class=\"language-yaml\">variables:\n  stabilizationTime:\n    type: ArbitraryVariable\n    parameters: [10, [0, 1, 10, 100, 1000]]\n  simulationEnd: &amp;simulationEnd\n    formula: 150 + stabilizationTime\nterminate:\n  - type: AfterTime\n    parameters: [*simulationEnd]\n<\/code><\/pre>\n<h3 id=\"terminating-the-simulation-if-the-environment-is-not-changing\"><a href=\"#terminating-the-simulation-if-the-environment-is-not-changing\" id=\"terminating-the-simulation-if-the-environment-is-not-changing\" class=\"anchor\"><\/a>Terminating the simulation if the environment is not changing<\/h3>\n<p>A terminator is provided for terminating when a simulation is &quot;stable&quot; (nothing changes in terms of positions and nodes' content).\nThe class implementing it is <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/terminators/stableforsteps\">StableForSteps<\/a>.\nThe following code snippet exemplifies its usage:<\/p>\n<pre><code class=\"language-yaml\">terminate:\n  # Defines a new terminator which every 100 simulation steps for the environment to remain equal for the 10 subsequent\n  # simulation steps. If no change is detected, then the simulation is intended as concluded.\n  - type: StableForSteps\n    parameters: [100, 10]\n<\/code><\/pre>\n<h2 id=\"controlling-the-reproducibility\"><a href=\"#controlling-the-reproducibility\" id=\"controlling-the-reproducibility\" class=\"anchor\"><\/a>Controlling the reproducibility<\/h2>\n<p>Alchemist simulations can be reproduced by feeding them the same random number generator.\nThis assumption is true as far as the custom component in use:<\/p>\n<ul>\n<li>do not use any other random generators but the one provided by the simulation framework (all the standard components are guaranteed to do so);<\/li>\n<li>do not iterate over collections with no predicible iteration order (i.e., <code>Set<\/code> and <code>Map<\/code>) containing elements (or\nkeys) whose <code>hashCode()<\/code> has not been overridden to return the same value regardless of the specific JVM in use;<\/li>\n<li>do not run operations in parallel.<\/li>\n<\/ul>\n<p>The <code>seeds<\/code> section may contain two optional values: <code>scenario<\/code> and <code>simulation<\/code>.\nThe former is the seed of the pseudo-random generator used during the creation of the simulation, e.g. for deploying\nnodes in random arrangements.\nThe latter is the seed of the pseudo-random generator used during the simulation, e.g. for computing time distributions\nor generating random positions.\nA typical example in which one may want to have different values, is to keep the same random deployment of devices in\nsome scenario but allow events to happen with different timings.<\/p>\n<p>A typical <code>seed<\/code> section may look like:<\/p>\n<pre><code class=\"language-yaml\">seeds:\n  scenario: 0\n  simulation: 1\n<\/code><\/pre>\n<p>Usually, in batches, you wan to run multiple runs per experiment, varying the simulation seed, in order to get more\nreliable data (and appropriate error bars).\nAs per any other value, variables can be feeded as random generator seeds.\nIn the following example, 100 simulations are generated with different seeds (both for environment configuration and\nsimulation execution)<\/p>\n<pre><code class=\"language-yaml\">variables:\n  random: &amp;random\n    min: 0\n    max: 9\n    step: 1\n    default: 0\nseeds:\n  # reference to the `random` variable\n  scenario: *random\n  simulation: *random\n<\/code><\/pre>\n"
            }]
          },
          "coordination-2021-tutorial": {
            "ownKey": "coordination-2021-tutorial",
            "ownPages": [{
              "reference": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "coordination-2021-tutorial",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/coordination-2021-tutorial"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "incarnations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations"
              },
              "previous": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "dry",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/dry"
              },
              "description": "",
              "title": "Tutorial from Coordination 2021",
              "content": "<p><a href=\"http://www.discotec.org/2021/coordination.html\">Coordination 2021<\/a>\n(one of the three conferences of <a href=\"https://www.discotec.org/2021/\">DisCoTec 2021<\/a>)\nis about to host an Alchemist tutorial.\nIn this page, we show an up to date version the examples that are presented in the tutorial paper.\nSnapshots are from the Java Swing GUI module that was the main UI at the time the tutorial was written,\nand may or may not reflect the current graphical appearance of the examples\n(which can be configured in any case).\nFurther details on the examples are available in the tutorial paper.<\/p>\n<h2 id=\"three-connected-devices\"><a href=\"#three-connected-devices\" id=\"three-connected-devices\" class=\"anchor\"><\/a>Three connected devices<\/h2>\n<p>In this simple example, we simply deploy three nodes in a bidimensional space.<\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere # The incarnation is always mandatory\nnetwork-model:\n  type: ConnectWithinDistance # Loads a class with this name implementing LinkingRule\n  parameters: [2] # Connection radius (parameter of a ConnectWithinDistance's constructor)\ndeployments:\n  - type: Point # Loads a class with this name implementing Deployment\n    parameters: [0, 0] # Coordinates\n  - { type: Point, parameters: [0.5, 0.85] }\n  - { type: Point, parameters: [-0.5, 0.85] }\n<\/code><\/pre>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/3nodes.png\" alt=\"Dodgeball\" /><\/p>\n<h2 id=\"a-grid-of-devices-playing-dodgeball\"><a href=\"#a-grid-of-devices-playing-dodgeball\" id=\"a-grid-of-devices-playing-dodgeball\" class=\"anchor\"><\/a>A grid of devices playing dodgeball<\/h2>\n<p>In this example we create a grid of devices\nand make them play dodgeball. The program to be injected is rather simple:\nsome nodes node will begin the simulation with a ball, and their goal will be to\nthrow it to a random neighbor; whichever node gets hit takes a point, updates\nits score, and throws the ball again. This program is easy to write in a network\nof programmable tuple spaces, hence we write the following specification using\nthe SAPERE incarnation.<\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\nnetwork-model: { type: ConnectWithinDistance, parameters: [0.5] }\ndeployments:\n  type: Grid\n  parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1] # A perturbed grid of devices\n  contents:\n    - molecule: &quot;{hit, 0}&quot; # Everywhere, no one has been hit\n    - in: { type: Rectangle, parameters: [-0.5, -0.5, 1, 1] } # Inside this shape...\n      molecule: ball # ...every node has a ball\n  programs:\n    - time-distribution: 1 # This is a frequency, time distribution type is left to the incarnation\n      # 'program' specs are passed down to the incarnation for being interpreted as reactions\n      program: &quot;{ball} {hit, N} --&gt; {hit, N + 1} {launching}&quot; # If hit, count the hit\n    - program: &quot;{launching} --&gt; +{ball}&quot; # As soon as possible, throw the ball to a neighbor\n<\/code><\/pre>\n<p>Snapshots of the simulation of the \u201cdodgeball\u201d example follow.\nDevices with a ball are depicted in black. All other devices\u2019 color hue depends on the\nhit count, shifting from red (zero hits) towards blue.<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/dodgeball00.png\" alt=\"Dodgeball\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/dodgeball01.png\" alt=\"Dodgeball\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/dodgeball02.png\" alt=\"Dodgeball\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/dodgeball03.png\" alt=\"Dodgeball\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/dodgeball04.png\" alt=\"Dodgeball\" /><\/p>\n<h2 id=\"a-gradient-on-a-grid-of-devices\"><a href=\"#a-gradient-on-a-grid-of-devices\" id=\"a-gradient-on-a-grid-of-devices\" class=\"anchor\"><\/a>A gradient on a grid of devices<\/h2>\n<p>In this example, we implement with the SAPERE incarnation a very simple\nspecification of a gradient, a pattern that is considered to be the basis of many\nother patterns.<\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\nnetwork-model: { type: ConnectWithinDistance, parameters: [0.5] }\ndeployments:\n  type: Grid\n  parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n  contents:\n    in: { type: Rectangle, parameters: [-0.5, -0.5, 1, 1] }\n    molecule: source # Here is the source of the gradient\n  programs:\n    - time-distribution: 0.1 # Exponential with λ=0.1\n      # If there is a source, then the gradient is zero.\n      program: &quot;{source} --&gt; {source} {gradient, 0}&quot;\n    - time-distribution: 1 # Exponential distribution with λ=1\n      # Send all neighbors your gradient value plus one\n      program: &quot;{gradient, N} --&gt; {gradient, N} *{gradient, N+1}&quot;\n      # In case of multiple gradients, take the shortest\n    - program: &quot;{gradient, N}{gradient, def: N2&gt;=N} --&gt; {gradient, N}&quot;\n    - time-distribution: 0.1\n      program: &quot;{gradient, N} --&gt; {gradient, N + 1}&quot; # Aging process\n    - program: &quot;{gradient, def: N &gt; 30} --&gt;&quot; # Death process\n<\/code><\/pre>\n<p>Here are some snapshots of the simulation of the \u201cgradient\u201d example.\nSource devices have a central black dot. Devices\u2019 color hue depends on the gradient\nvalue, shifting from red (low) towards blue (high).<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/gradient00.png\" alt=\"Gradient\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/gradient01.png\" alt=\"Gradient\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/gradient02.png\" alt=\"Gradient\" /><\/p>\n<h2 id=\"arbitrary-network-graphs\"><a href=\"#arbitrary-network-graphs\" id=\"arbitrary-network-graphs\" class=\"anchor\"><\/a>Arbitrary network graphs<\/h2>\n<p>This example showcases some complex deployments made possible by Alchemist via <a href=\"https://graphstream-project.org/\">Graphstream<\/a><\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\nnetwork-model: { type: ConnectWithinDistance, parameters: [0.5] }\ndeployments:\n  - { type: GraphStreamDeployment, parameters: [300, -30, 0, 0.8, Lobster, [5, 15]] }\n  - { type: GraphStreamDeployment, parameters: [300, 0, 0, 2, BananaTree, 10] }\n  - { type: GraphStreamDeployment, parameters: [300, 30, 0, PreferentialAttachment] }\n<\/code><\/pre>\n<p>The example creates a single environment with three advanced deployments. From left to right: a\nLobster graph, a banana tree, and a scale-free network with preferential attachment.<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/graphstream.png\" alt=\"Gradient\" /><\/p>\n<h2 id=\"node-mobility-and-indoor-environments\"><a href=\"#node-mobility-and-indoor-environments\" id=\"node-mobility-and-indoor-environments\" class=\"anchor\"><\/a>Node mobility and indoor environments<\/h2>\n<p>many interesting scenarios the simulator targets\nrequire mobility and a richer environment. In the following example, we show\na group of mobile devices estimating the distance from a point of interest (the\naltar) while moving within a church, whose planimetry has been taken from\nan existing building.\nSince the gradient is propagated in a network of mobile devices, we use a Protelis implementation of the\nadaptive Bellman-Ford algorithm from <a href=\"https://doi.org/10.1109/FAS-W.2017.116\">the Protelis-lang library<\/a>.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment: { type: ImageEnvironment, parameters: [chiaravalle.png, 0.1] }\nnetwork-model: { type: ObstaclesBreakConnection, parameters: [50] }\ndeployments:\n  type: Rectangle\n  parameters: [300, 62, 15, 95, 200]\n  programs:\n    - time-distribution: 1\n      program: &gt;\n        import protelis:coord:spreading\n        let source = [110, 325]\n        let vector = self.getCoordinates() - source\n        let distance = hypot(vector.get(0), vector.get(1))\n        distanceTo(distance &lt; 50)\n    - program: send # Actual network message delivery\n    - type: Event\n      time-distribution: 1\n      actions: { type: LevyWalk, parameters: [1.4] }\n<\/code><\/pre>\n<p>In the following snapshots, mobile devices progressively explore the location, while measuring the distance from a point of interest\nvia gradient (red nodes are closer to the point of interest; purple ones are farther).<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/chiaravalle00.png\" alt=\"Mobility in indoor environments\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/chiaravalle01.png\" alt=\"Mobility in indoor environments\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/chiaravalle02.png\" alt=\"Mobility in indoor environments\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/chiaravalle03.png\" alt=\"Mobility in indoor environments\" /><\/p>\n<h2 id=\"real-world-maps-and-gps-traces\"><a href=\"#real-world-maps-and-gps-traces\" id=\"real-world-maps-and-gps-traces\" class=\"anchor\"><\/a>Real-world maps and GPS traces<\/h2>\n<p>The simulator can\nload data from OpenStreetMap exports, navigate devices towards a destination\nalong streets by relying on GraphHopper8 or by using GPS traces in GPX format,\nor even using the navigation system to interpolate sparse GPS traces, thus\npreventing nodes from taking impossible paths. In the following simple\nscenario buoys are deployed in the Venice lagoon and move Brownianly.<\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\nenvironment: { type: OSMEnvironment }\nnetwork-model: { type: ConnectWithinDistance, parameters: [1000] }\n_venice_lagoon: &amp;lagoon\n  [[45.2038121, 12.2504425], [45.2207426, 12.2641754], [45.2381516, 12.2806549],\n   [45.2570053, 12.2895813], [45.276336, 12.2957611], [45.3029049, 12.2991943],\n   [45.3212544, 12.3046875], [45.331875, 12.3040009], [45.3453893, 12.3040009],\n   [45.3502151, 12.3156738], [45.3622776, 12.3232269], [45.3719259, 12.3300934],\n   [45.3830193, 12.3348999], [45.395557, 12.3445129], [45.3998964, 12.3300934],\n   [45.4018249, 12.3136139], [45.4105023, 12.3122406], [45.4167685, 12.311554],\n   [45.4278531, 12.3012543], [45.4408627, 12.2902679], [45.4355628, 12.2772217],\n   [45.4206242, 12.2703552], [45.3994143, 12.2744751], [45.3738553, 12.2676086],\n   [45.3579354, 12.2614288], [45.3429763, 12.2497559], [45.3198059, 12.2408295],\n   [45.2975921, 12.2346497], [45.2802014, 12.2408295], [45.257972, 12.233963],\n   [45.2038121, 12.2504425]]\ndeployments:\n  type: Polygon\n  parameters: [500, *lagoon]\n  programs:\n    - time-distribution: 10\n      type: Event\n      actions: { type: BrownianMove, parameters: [0.0005]}\n<\/code><\/pre>\n<p>The following snapshots depict the simulation in execution.<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/venice.png\" alt=\"Venice\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/coordination2021/venice2.png\" alt=\"Venice\" /><\/p>\n<h2 id=\"in-depth-analysis-of-simulated-scenarios\"><a href=\"#in-depth-analysis-of-simulated-scenarios\" id=\"in-depth-analysis-of-simulated-scenarios\" class=\"anchor\"><\/a>In-depth analysis of simulated scenarios<\/h2>\n<p>Debugging a simulation requires the ability to reproduce the same behavior multiple times: an unexpected behavior requiring investigation may happen\nfar into the simulation, or in corner conditions encountered by chance.\nRandomness is controlled by setting the random generator seeds separately for the deployments and the simulation execution, allowing\nfor running different simulations on the same random deployment. Seeds are\nset at the top level of the simulation specification.<\/p>\n<p>Alchemist provides first-class support for executing multiple simulations with\nvarying conditions. Variables can be listed in the variables section of the simulation descriptor.\nEvery variable has a default value and a way to generate\nother values. When a batch execution is requested, the cartesian product of all\npossible values for the selected variables is produced, the default values are used\nfor non-selected variables, and then for each entry, a simulation is prepared and\nthen executed (execution can be and usually is performed in parallel).<\/p>\n<p>Moreover, to favor reusability and\napply the DRY principle, the simulator allows defining variables whose values\npossibly depend on values of other variables. Their values can be expressed in\nany JSR22310 -compatible language (thereby including Scala, Kotlin, JavaScript,\nRuby, Python, and Groovy), using Groovy as default.<\/p>\n<p>Finally, the simulator provides tools for exporting data automatically. An\nexport section on the simulation file instructs which data is considered interest-\ning, and should be thus exported with the selected sampling frequency. Data can\nbe exported separately for each node, or can be aggregated on the fly using any\nunivariate statistic function (e.g., mean, sum, product, percentile, median...).\nThe treatment of missing or non-finite values can be specified as well. Results\nare exported in comma-separated values files, easily importable in a variety of\ndata analysis tools.<\/p>\n<p>The following snippet showcases the aforementioned features by enriching\nthe example of a gradient in an indoor environment presented previously with:<\/p>\n<ol>\n<li>variables for the pedestrian walking speed, pedestrian count, and random seed;<\/li>\n<li>constants to ease the configuration of the simulation;<\/li>\n<li>a Kotlin resource search expressed as a variable;<\/li>\n<li>controlled reproducibility by controlling random seeds;<\/li>\n<li>export of generated data (time and several statistics on the gradient).<\/li>\n<\/ol>\n<pre><code class=\"language-yaml\">incarnation: protelis\nvariables:\n  zoom: &amp;zoom\n    formula: 0.1 # Must be a valid Groovy snippet\n  image_name: { formula: &quot;'chiaravalle.png'&quot; }\n  image_path: &amp;image_path\n    language: kotlin # Pick whatever JSR223 language you like and add it to the classpath\n    formula: &gt; # The following is pure Kotlin code. other variables can be referenced!\n      import java.io.File\n      File(&quot;../..&quot;).walkTopDown().find { image_name in it.name }?.absolutePath ?: image_name\n  # Linear free variable\n  walking_speed: &amp;walk-speed { default: 1.4, min: 1, max: 2, step: 0.1 }\n  seed: &amp;seed { default: 0, min: 0, max: 99, step: 1 } # 100 samples\n  scenario_seed: &amp;scenario_seed { formula: (seed + 31) * seed } # Variable-dependent\n  people_count: &amp;people_count\n    type: GeometricVariable # A variable scanning a space with geometric segmentation\n    parameters: [300, 50, 500, 9] # default 300, minimum 50, maximum 100, 9 samples\nseeds: { simulation: *seed, scenario: *scenario_seed}\nexport:\n  - time\n  - molecule: &quot;default_module:default_program&quot;\n    aggregators: [mean, max, min, variance, median] # From Apache's UnivariateStatistic\n    value-filter: onlyfinite # discards NaN and Infinity\nenvironment: { type: ImageEnvironment, parameters: [*image_path, *zoom] }\nnetwork-model: { type: ObstaclesBreakConnection, parameters: [50] }\ndeployments:\n  type: Rectangle\n  parameters: [*people_count, 62, 15, 95, 200]\n  programs:\n    - time-distribution: 1\n      program: &gt;\n        import protelis:coord:spreading\n        let source = [110, 325]\n        let vector = self.getCoordinates() - source\n        let distance = hypot(vector.get(0), vector.get(1))\n        distanceTo(distance &lt; 50)\n    - program: send\n    - { type: Event, time-distribution: 1, actions: { type: LevyWalk, parameters: [*walk-speed] } }\n<\/code><\/pre>\n"
            }]
          },
          "yaml-variables": {
            "ownKey": "yaml-variables",
            "ownPages": [{
              "reference": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "yaml-variables",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/yaml-variables"
              },
              "next": {
                "path": "wiki/export",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "export",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export/export"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "export",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export"
              },
              "description": "",
              "title": "Using variables",
              "content": "<p>Using variables<\/p>\n"
            }]
          },
          "dry": {
            "ownKey": "dry",
            "ownPages": [{
              "reference": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "dry",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/dry"
              },
              "next": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "coordination-2021-tutorial",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/coordination-2021-tutorial"
              },
              "previous": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "basics",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/basics"
              },
              "description": "",
              "title": "Don't repeat yourself",
              "content": "<p>Don't repeat yourself<\/p>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "use",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/use"
          },
          "next": {
            "path": "wiki/use",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "basics",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/use/basics"
          },
          "previous": {
            "path": "wiki/prepare",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "default-gui",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/prepare/default-gui"
          },
          "description": "",
          "title": "Writing simulations",
          "content": "<p>The following sections will explain the basics of a simulation specification in Alchemist.<\/p>\n"
        }]
      },
      "superquick": {
        "ownKey": "superquick",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "superquick",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/superquick"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "understand",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/understand"
          },
          "description": "",
          "title": "SUPER-QUICK Start",
          "content": "<p>You need:<\/p>\n<ul>\n<li>A terminal, bash compatible preferred<\/li>\n<li><a href=\"https://adoptopenjdk.net/\">Java 11+<\/a> installed and working<\/li>\n<li><a href=\"https://git-scm.com/\">Git<\/a> installed and working<\/li>\n<\/ul>\n<p>Open the terminal and follow these steps<\/p>\n<ol>\n<li><code>git clone https://github.com/AlchemistSimulator/alchemist-primer<\/code><\/li>\n<li><code>cd alchemist-primer<\/code><\/li>\n<li>Launch depending on your terminal:<\/li>\n<\/ol>\n<ul>\n<li>Bash compatible (Linux, MacOS X, Git Bash, Cygwin): <code>./gradlew runAll<\/code><\/li>\n<li>Windows native (cmd.exe, Powershell): <code>gradlew.bat runAll<\/code><\/li>\n<\/ul>\n<ol start=\"4\">\n<li>Wait for the simulator components to be downloaded (about five minutes on a reasonable connection)<\/li>\n<li>A GUI pops up<\/li>\n<li>Press the <code>P<\/code> button to start the simlation. Other relevant buttons are described <a href=\"use/default-gui\">here<\/a><\/li>\n<\/ol>\n<p>Something went <strong>wrong<\/strong> along the line?\n<a href=\"https://github.com/AlchemistSimulator/Alchemist/issues/new/choose\">Open an issue<\/a> and we'll get back to you.<\/p>\n<p>Too quick, works but you wonder why?\n<a href=\"https://alchemistsimulator.github.io/latest/wiki/understand/metamodel\">Take your time with the docs<\/a>,\nso that maybe you also understand what's going on.<\/p>\n"
        }]
      },
      "understand": {
        "ownKey": "understand",
        "childrenPages": {"metamodel": {
          "ownKey": "metamodel",
          "ownPages": [{
            "reference": {
              "path": "wiki/understand",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "metamodel",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/understand/metamodel"
            },
            "next": {
              "path": "wiki",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "prepare",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/prepare"
            },
            "previous": {
              "path": "wiki",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "understand",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/understand"
            },
            "description": "",
            "title": "The Alchemist Simulator metamodel",
            "content": "<h2 id=\"the-world-of-alchemist\"><a href=\"#the-world-of-alchemist\" id=\"the-world-of-alchemist\" class=\"anchor\"><\/a>The world of Alchemist<\/h2>\n<p>The first step to take in order to use the simulator, is to answer the question<\/p>\n<blockquote>\n<p>what does Alchemist simulate?<\/p>\n<\/blockquote>\n<h3 id=\"the-model\"><a href=\"#the-model\" id=\"the-model\" class=\"anchor\"><\/a>The model<\/h3>\n<p>The world of Alchemist is composed of the following entities:<\/p>\n<ul>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/molecule\">Molecule<\/a><\/strong>\n<ul>\n<li>The name of a data item<\/li>\n<li>If Alchemist were an imperative programming language, a <em>molecule<\/em> would be the concept of <em>variable name<\/em><\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/concentration\">Concentration<\/a><\/strong>\n<ul>\n<li>The value associated to a particular <em>molecule<\/em><\/li>\n<li>If Alchemist were an imperative programming language, a <em>concentration<\/em> would be the concept of <em>value associated to a variable<\/em><\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/node\">Node<\/a><\/strong>\n<ul>\n<li>A container of <em>molecules<\/em> and <em>reactions<\/em>, living inside an <em>environment<\/em><\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environment\">Environment<\/a><\/strong>\n<ul>\n<li>The Alchemist abstration for the space. It is a container for <em>nodes<\/em>, and it is able to tell:\n<ol>\n<li>Where the nodes are in the space - i.e. their <em>position<\/em><\/li>\n<li>The distance between two <em>nodes<\/em><\/li>\n<li>Optionally, support for moving <em>nodes<\/em><\/li>\n<\/ol>\n<\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/linkingrule\">Linking rule<\/a><\/strong>\n<ul>\n<li>A function of the current status of the environment that associates to each <em>node<\/em> a <em>neighborhood<\/em><\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/neighborhood\">Neighborhood<\/a><\/strong>\n<ul>\n<li>An entity composed by a <em>node<\/em> (centre) and a set of <em>nodes<\/em> (neighbors)<\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/reaction\">Reaction<\/a><\/strong>\n<ul>\n<li>Any event that can change the status of the <em><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/environment\">environment<\/a><\/em><\/li>\n<li>Each <em>node<\/em> has a possibly empty set of <em>reactions<\/em><\/li>\n<li>Each reaction is defined by a possibly empty list of <em>conditions<\/em>, one or more <em>actions<\/em> and a <em><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/timedistribution\">time distribution<\/a><\/em><\/li>\n<li>The frequency at which it happens depends on:\n<ol>\n<li>A static &quot;rate&quot; parameter<\/li>\n<li>The value of each <em>condition<\/em><\/li>\n<li>A &quot;rate equation&quot;, that combines the static rate and the value of conditions, giving back an &quot;instantaneous rate&quot;<\/li>\n<li>A <em>time distribution<\/em><\/li>\n<\/ol>\n<\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/condition\">Condition<\/a><\/strong>\n<ul>\n<li>A function that takes the current <em>environment<\/em> as input and outputs a boolean and a number<\/li>\n<li>If the <em>condition<\/em> does not hold (i.e. its current output is <code>false<\/code>), the <em>reaction<\/em> to which it is associated cannot run<\/li>\n<li>The outputed number may or may not influence the <em>reaction<\/em> speed (i.e. the average number of times the <em>reaction<\/em> &quot;happens&quot; per time unit), depending on the <em>reaction<\/em> and its <em>time distribution<\/em>.<\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/action\">Action<\/a><\/strong>\n<ul>\n<li>Models a change in the environment.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>The following image is a visualization of such model:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/simulator/model.svg\" alt=\"Alchemist model\" /><\/p>\n<p>The behavior of the system is described in terms of reactions. As such, here's a pictorial representation of a reaction:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/simulator/reaction.svg\" alt=\"Alchemist reaction\" /><\/p>\n<h3 id=\"incarnations\"><a href=\"#incarnations\" id=\"incarnations\" class=\"anchor\"><\/a>Incarnations<\/h3>\n<p>As you can see, names are given after classical chemistry terms.\nThis is mostly for historical reasons: Alchemist has been initially conceived as a chemical-oriented multi-compartment\nstochastic simulation engine, able to support compartment (node) mobility while still retaining high performance.<\/p>\n<p>However, Alchemist is not limited to that. The key of its extensibility is in the very loose interpretation of\n<strong>molecule<\/strong> and <strong>concentration<\/strong>. These two terms have a very precise definition in chemistry, but in Alchemist they\nare respectively<\/p>\n<ol>\n<li>a generic identifier, and<\/li>\n<li>a piece of data of some <strong>type<\/strong><\/li>\n<\/ol>\n<p>An <strong>incarnation<\/strong> of Alchemist includes a <strong>type<\/strong> definition of <strong>concentration<\/strong>,\nand possibly a set of specific conditions, actions and (rarely) environments and reactions that operate on such types.\nIn other words, an incarnation is a concrete instance of the Alchemist meta-model.\nIn addition, a proper <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/incarnation\">Alchemist incarnation<\/a> must also define:<\/p>\n<ul>\n<li>Means for translating strings into named entities (molecules)<\/li>\n<li>Means for obtaining a number when given a node, a molecule and a string representing a property<\/li>\n<li>Means for building incarnation-specific model entities given an appropriate context and a parameter String<\/li>\n<\/ul>\n<p>These functionalities are required in order to support a uniform access to different incarnations.<\/p>\n<p>Different Incarnations can model completely different universes.\nFor instance, if the concentration is defined as a positive integer and proper actions and conditions are provided,\nAlchemist becomes a stochastic simulator for chemistry featuring interconnected and mobile compartments.<\/p>\n<p>The standalone distribution comes with:<\/p>\n<ul>\n<li><a href=\"http://protelis.org\">Protelis Incarnation<\/a><\/li>\n<li><a href=\"http://dx.doi.org/10.1016/j.pmcj.2014.12.002\">SAPERE Incarnation<\/a><\/li>\n<li><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/biochemistryincarnation\">Biochemistry Incarnation<\/a><\/li>\n<li><a href=\"https://scafi.github.io/\">Scafi incarnation<\/a><\/li>\n<\/ul>\n<p>More details on how to use each of the included incarnations will be provided after this introductory chapter.<\/p>\n<h2 id=\"the-tool\"><a href=\"#the-tool\" id=\"the-tool\" class=\"anchor\"><\/a>The tool<\/h2>\n<p>The core part of the tool is the incarnation-agnostic simulation engine.\nIts current implementation is based on <a href=\"http://dx.doi.org/10.1021/jp993732q\">Gibson and Bruck's Next Reaction<\/a>,\nextended to support addition and removal of reactions, and improved using input and output contexts for reactions,\nin order to prune the dependency graph as much as possible.\nMore details on that are demanded to <a href=\"http://dx.doi.org/10.1057/jos.2012.27\">this scientific paper on Journal of Simulation<\/a>.<\/p>\n<p>The engine's entry point is the <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/core/interfaces/simulation\">Simulation<\/a>.\nIt is equipped with support for commands like play, pause and stop, and can be equipped with an <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/boundary/interfaces/outputmonitor\">OutputMonitor<\/a>.\nThe output monitor can be a graphical interface, a logger or any kind of environment inspector.<\/p>\n"
          }]
        }},
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "understand",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/understand"
          },
          "next": {
            "path": "wiki/understand",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "metamodel",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/understand/metamodel"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "superquick",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/superquick"
          },
          "description": "",
          "title": "Understand the simulator",
          "content": "<p>In the following sections, we will present the meta-model of Alchemist, namely, what the simulator is able to simulate.<\/p>\n"
        }]
      },
      "incarnations": {
        "ownKey": "incarnations",
        "childrenPages": {
          "biochemistry": {
            "ownKey": "biochemistry",
            "ownPages": [{
              "reference": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "biochemistry",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/biochemistry"
              },
              "next": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/protelis"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "incarnations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations"
              },
              "description": "",
              "title": "Alchemist biochemistry incarnation",
              "content": "<p>Biochemistry is an incarnation of Alchemist developed to provide support for biochemical reactions that take place inside a biological cell or a group of those surrounded by a common environment.<\/p>\n<h3 id=\"the-biochemistry-incarnation\"><a href=\"#the-biochemistry-incarnation\" id=\"the-biochemistry-incarnation\" class=\"anchor\"><\/a>The Biochemistry Incarnation<\/h3>\n<p>The Biochemistry incarnation provides a way to:<\/p>\n<ul>\n<li>Manage the creation, destruction and relocation of a molecule (which can be either a simple atom or a complex protein) inside a cell or from a cell to another<\/li>\n<li>Create junctions between cells using a specified amount of molecules. The junctions are modeled in a general way, but with a simple use of actions and conditions it will be possible to create tight junctions, anchoring junctions, gap junctions and even customized one<\/li>\n<li>Move a cell inside its environment in different ways, handling collisions between two ore more of them in a simplistic but effective way<\/li>\n<\/ul>\n<h3 id=\"how-to-run-a-simulation\"><a href=\"#how-to-run-a-simulation\" id=\"how-to-run-a-simulation\" class=\"anchor\"><\/a>How To Run A Simulation<\/h3>\n<p>As first step, it is required to add this line of code in order to notice Alchemist to use the Biochemistry Incarnation:<\/p>\n<pre><code class=\"language-yaml\">incarnation: biochemistry\n<\/code><\/pre>\n<h2 id=\"the-biochemistry-dsl\"><a href=\"#the-biochemistry-dsl\" id=\"the-biochemistry-dsl\" class=\"anchor\"><\/a>The Biochemistry DSL<\/h2>\n<p>Biochemistry programs are encapsulated inside the YAML configuration file with a simple and human-readable syntax.\nThose simple reactions can be written in the section <code>programs<\/code> of the configuration file, as value of the <code>program<\/code> key:<\/p>\n<pre><code class=\"language-yaml\">programs:\n  -\n    - time-distribution: 1\n      program: &quot;[ATP] --&gt; [ADP] + [P]&quot;\n<\/code><\/pre>\n<h3 id=\"reactions\"><a href=\"#reactions\" id=\"reactions\" class=\"anchor\"><\/a>Reactions<\/h3>\n<p>A reaction rule can be set using the symbol <code>--&gt;<\/code> according to chemistry equations, and placing both the molecules and the actions inside two square brackets (ex. <code>[OH]<\/code>, <code>[H2O]<\/code>, <code>[BrownianMove(0.1)]<\/code>)<\/p>\n<p>The following line, so, represents a basic chemical reaction that happens inside a cell: <code>[H] + [OH] --&gt; [H2O]<\/code><\/p>\n<p>However, reactions can also take place outside the cell itself. Biological cells, indeed, can swap molecules with its neighbour or the surrounding environment, and this is possible in Alchemist too, using the keywords: <code>in cell<\/code>, <code>in neighbour<\/code> and <code>in env<\/code>.<\/p>\n<p>The reaction <code>[A in env] --&gt; [A in cell]<\/code> moves the molecule A from the environement inside the cell.<\/p>\n<p>If the location is not explicit, it is assumed the molecule to be inside the cell.<\/p>\n<h3 id=\"junctions\"><a href=\"#junctions\" id=\"junctions\" class=\"anchor\"><\/a>Junctions<\/h3>\n<p>A junction can be created just with a neighbor of the programmed cell.<\/p>\n<p>The way to create it is with the syntax <code>[X] + [Y in neighbor] --&gt; [junction X-Y]<\/code>, which means that when this reaction happens a junction using the molecule <code>X<\/code> from the cell and the molecule <code>Y<\/code> from the neighbor will be created.<\/p>\n<p>The junction can also be destroyed using the syntax <code>[junction X-Y] --&gt; []<\/code>, causing the reintroduction of the molecule <code>X<\/code> inside the cell and the molecule <code>Y<\/code> inside the neighbor.<\/p>\n<p>Also, the junction will be automatically removed if, because of their movement, the cells will stop being in a neighborhood.<\/p>\n<h3 id=\"custom-conditions\"><a href=\"#custom-conditions\" id=\"custom-conditions\" class=\"anchor\"><\/a>Custom Conditions<\/h3>\n<p>Any custom condition must be placed after the reaction products following an <code>if<\/code> clause.<\/p>\n<p>For example, to create a molecule if the cell has at least three neighbor you would write:<\/p>\n<p><code>[] --&gt; [X] if NumberOfNeighborsGreaterThan(5)<\/code><\/p>\n<h3 id=\"movement\"><a href=\"#movement\" id=\"movement\" class=\"anchor\"><\/a>Movement<\/h3>\n<p>A movement can be performed in the same way of a reaction, using the function as it is a product of the reaction itself.<\/p>\n<p>This program constantly moves a cell without any other condition:<\/p>\n<p><code>[] --&gt; [BrownianMove(0.1)]<\/code><\/p>\n<h3 id=\"collisions\"><a href=\"#collisions\" id=\"collisions\" class=\"anchor\"><\/a>Collisions<\/h3>\n<p>The Biochemistry Incarnation supports cell collisions and deformations too.<\/p>\n<p>In order to do that, however, you must set this environment:<\/p>\n<pre><code class=\"language-yaml\">environment:\n  type: BioRect2DEnvironmentNoOverlap\n<\/code><\/pre>\n<p>Then, when creating the cells, you must use these specific implementations:<\/p>\n<pre><code class=\"language-yaml\">nodes:\n  type: CircularDeformableCellImpl\n  parameters: [max-radius, rigidity]\n<\/code><\/pre>\n<p>The minimum radius of the cell is so that <code>min-radius = rigidity * max-radius<\/code> and the two parameters are used to compute collisions and impacts between the cells.<\/p>\n"
            }]
          },
          "scafi": {
            "ownKey": "scafi",
            "ownPages": [{
              "reference": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/scafi"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "advanced",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/advanced"
              },
              "previous": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "sapere",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/sapere"
              },
              "description": "",
              "title": "Alchemist ScaFi incarnation",
              "content": "<p>ScaFi (Scala Fields) is a Scala-based library and framework for Aggregate Programming.\nIt implements a variant of the Higher-Order Field Calculus (HOFC) operational semantics,\nwhich is made available as a usable domain-specific language (DSL),\nand provides a platform and API for simulating and executing Aggregate Computing systems and applications.<\/p>\n<h2 id=\"how-to-use-scafi-with-alchemist\"><a href=\"#how-to-use-scafi-with-alchemist\" id=\"how-to-use-scafi-with-alchemist\" class=\"anchor\"><\/a>How to use ScaFi with Alchemist<\/h2>\n<p>For more details about ScaFi please read the\ndocumentation in the <a href=\"https://scafi.github.io/docs/\">official site<\/a>\nwhere you can find a description of how to integrate ScaFi toolkit\nwith Alchemist. Furthermore, the following two repositories are a great resource to experiment\nrapidly with both:<\/p>\n<ul>\n<li>https://bitbucket.org/gaudrito/alchemist-example/src/master/<\/li>\n<li>https://github.com/scafi/learning-scafi-alchemist<\/li>\n<\/ul>\n"
            }]
          },
          "protelis": {
            "ownKey": "protelis",
            "ownPages": [{
              "reference": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/protelis"
              },
              "next": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "sapere",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/sapere"
              },
              "previous": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "biochemistry",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/biochemistry"
              },
              "description": "",
              "title": "Alchemist Protelis incarnation",
              "content": "<p>[Protelis][Protelis], from the Latin word figuratively meaning &quot;regarding a team&quot;, is a language targeting the aggregate of devices rather than the single one.\nIt has been developed on the solid foundation of [Field Calculus][Field Calculus], a theoretical model of aggregate programming, and it is written and interoperable with Java.<\/p>\n<h3 id=\"learning-protelis\"><a href=\"#learning-protelis\" id=\"learning-protelis\" class=\"anchor\"><\/a>Learning Protelis<\/h3>\n<p>The language and all the machinery of Protelis are out of the scope of this tutorial. However, we warmly recommend to read [this paper][protelis paper] first, and then to deepen your knowledge of Protelis by reading the resources available in [the official Protelis website][Protelis].<\/p>\n"
            }]
          },
          "sapere": {
            "ownKey": "sapere",
            "ownPages": [{
              "reference": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "sapere",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/sapere"
              },
              "next": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/scafi"
              },
              "previous": {
                "path": "wiki/incarnations",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/protelis"
              },
              "description": "",
              "title": "Alchemist SAPERE incarnation",
              "content": "<p>The SAPERE incarnation for Alchemist was the first stable incarnation produced for the simulator.\nIt was developed in the context of the <a href=\"http://archive.ph/umlcC\">SAPERE EU project<\/a>.<\/p>\n<p>At the core of <a href=\"https://doi.org/10.1016/j.pmcj.2014.12.002\">SAPERE<\/a> was the concept of <em>Live Semantic Annotation<\/em> (LSA),\nnamely a description of a resource (sensor, service, actuator...) always mapping the current resource status\n(somewhat a prelude to the currently famous <a href=\"http://archive.ph/YR1v9\">digital twin<\/a> concept).<\/p>\n<p>These annotations evolve following so-called <em>Eco-Laws<\/em>,\nmimicking the complex behaviours of natural ecosystems.<\/p>\n<p>The SAPERE approach fostered subsequent approaches, such as <a href=\"https://doi.org/10.1109/MC.2015.261\">aggregate computing<\/a>.<\/p>\n<h2 id=\"live-semantic-annotations\"><a href=\"#live-semantic-annotations\" id=\"live-semantic-annotations\" class=\"anchor\"><\/a>Live Semantic Annotations<\/h2>\n<p>An LSA as modeled in Alchemist is a tuple of values.\nThese tuples can be injected in nodes as data items.\nFrom the point of view of <a href=\"https://alchemistsimulator.github.io/latest/wiki/understand/metamodel\">the Alchemist metamodel<\/a>,\nthe concept of <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/molecule\">Molecule<\/a> is mapped to <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/molecules/lsamolecule\">LSA<\/a>.\nAs a consequence, LSAs can be inserted in nodes.\nFor instance, the following code creates an irregular grid of devices,\nof which those located around the center of such grid contain the tuple <code>{ token }<\/code>:<\/p>\n<script src=\"https://gist-it.appspot.com/github/AlchemistSimulator/SAPERE-incarnation-tutorial/blob/master/src/main/yaml/05-content.yml\"><\/script>\n<p>The relevant part here is <code>molecule: token<\/code>.\nIf we wanted to inject the tuple <code>{ foo, 1, bar, 2 }<\/code>, we could have written <code>molecule: foo, 1, bar, 2<\/code>.<\/p>\n<h3 id=\"ground-lsa-syntax\"><a href=\"#ground-lsa-syntax\" id=\"ground-lsa-syntax\" class=\"anchor\"><\/a>Ground LSA syntax<\/h3>\n<pre><code>GroundLSA ::= GroundArgument (',' GroundArgument)*\nGroundArgument ::= Number | Atom | Set\nAtom ::= [a-z]([a-z]|[A-Z]|[0-9])*\nNumber ::= [0-9]+('.'[0-9]*)\nSet ::= '[' ((Atom | Number)';')* ']'\n<\/code><\/pre>\n<p>LSAs, similarly to Prolog terms, support <a href=\"http://archive.ph/oLSpq\">unification and substitution<\/a>:\nit is possible to create tuple templates,\nmatch them against sets of ground tuples,\nand obtain a matching ground tuple as result.<\/p>\n<p>A tuple argument is considered a variable if it begins with an uppercase letter.\nAdditionally, it is possible to discard some matches by expressing constraints on values.<\/p>\n<h3 id=\"lsa-syntax\"><a href=\"#lsa-syntax\" id=\"lsa-syntax\" class=\"anchor\"><\/a>LSA Syntax<\/h3>\n<pre><code>LSA ::= '{' GroundLSA | TemplateLSA '}'\nTemplateLSA ::= Argument (',' Argument)*\nArgument ::= GroundArgument | Variable | Constraint\nVariable ::= [A-Z]([a-z]|[A-Z]|[0-9])*\nConstraint ::= 'def:' Variable Operation\nOperation ::= ('&gt;'|'&gt;'|'='|'!=') Number | 'add ' Variable | 'del ' Variable\n<\/code><\/pre>\n<h2 id=\"eco-laws\"><a href=\"#eco-laws\" id=\"eco-laws\" class=\"anchor\"><\/a>Eco-Laws<\/h2>\n<p>Tuple matching is used to define <em><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/reactions/saperereaction\">Eco-Laws<\/a><\/em>.\nAn Eco-Law is a rewriting rule very similar in concept to chemical reactions:\nelements on the left-hand side of the reaction are removed from the container,\nelements on the right hand side are inserted instead.<\/p>\n<p>The following program matches LSAs with two arguments, the former must be <code>foo<\/code>,\nthe latter a number greater than <code>30<\/code>, and produces in a new tuple having as first element <code>bar<\/code> and as second\nthe opposite of the matched number:<\/p>\n<p><code>{ foo, def: N &gt; 30 } --&gt; { bar, -N }<\/code><\/p>\n<p>Nodes can be programmed with Eco-Laws as follows:<\/p>\n<script src=\"https://gist-it.appspot.com/github/AlchemistSimulator/SAPERE-incarnation-tutorial/blob/master/src/main/yaml/06-send.yml\"><\/script>\n<h3 id=\"sharing\"><a href=\"#sharing\" id=\"sharing\" class=\"anchor\"><\/a>Sharing<\/h3>\n<p>Eco-Laws can be programmed to send LSAs to neighbors, as well as to look into neighboring nodes for getting LSAs.\nIn order to do so, the LSA template in the Eco-Law must be preceded by a neighbor operator, either <code>+<\/code> or <code>*<\/code>.<\/p>\n<p><code>+<\/code> means <em>in a neighbor<\/em>:\nif used on the left hand side,\nit considers the condition satisfied if at least one neighbor has at least one LSA matching the provided template;\nif used on the right hand side,\nsends the LSA to one random neighbor.<\/p>\n<p><code>*<\/code> means <em>in all neighbors<\/em>:\nif used on the left hand side,\nit considers the condition satisfied if all neighbors have at least one LSA matching the provided template;\nif used on the right hand side,\nsends a copy of the LSA to all neighbors.<\/p>\n<p>The following code exemplifies a diffusion program:\nwhen <code>{ token }<\/code> is present locally, it is copied into neighboring nodes once per second;\nand as soon as two copies of <code>{ token }<\/code> are present, one gets removed.<\/p>\n<script src=\"https://gist-it.appspot.com/github/AlchemistSimulator/SAPERE-incarnation-tutorial/blob/master/src/main/yaml/09-diffuse.yml\"><\/script>\n<h3 id=\"eco-laws-syntax\"><a href=\"#eco-laws-syntax\" id=\"eco-laws-syntax\" class=\"anchor\"><\/a>Eco-Laws syntax<\/h3>\n<h3 id=\"rates\"><a href=\"#rates\" id=\"rates\" class=\"anchor\"><\/a>Rates<\/h3>\n<p>The time distribution with which reactions should get scheduled can be controlled by thinkering with the yaml specification\nas per every reaction in Alchemist.\nIf no <a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/interfaces/timedistribution\">time distribution<\/a> is specified,\nthe Eco-Law is assumed to run &quot;as soon as possible&quot; (ASAP).<\/p>\n<p>This may lead to unwanted behaviour.\nFor instance, programming a single node with:\n<code>--&gt; { foo }<\/code>\nwill cause the simulation to schedule a reaction producing <code>{ foo }<\/code> at time zero,\nand at each execution the time will remain zero:\nthe simulator will be producing copies over copies of the tuple,\nnever advancing in time (Alchemist is a discrete event simulator),\nand possibly going on until the JVM memory limit is reached.<\/p>\n<p>If a number is specified as time distribution, using the <code>time-distribution<\/code> key,\nthen it will be interpreted as the <a href=\"https://en.wikipedia.org/wiki/Markov_chain\">Markovian rate<\/a>\nof an <a href=\"https://en.wikipedia.org/wiki/Exponential_distribution\">exponentially distributed time<\/a>.<\/p>\n<p><a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions\">Other distributions<\/a> can be used leveraging the <code>type<\/code>/<code>parameters<\/code> syntax.<\/p>\n<p>In the following example, two Eco-Laws are configured, and one of them is bound to an\n<a href=\"https://alchemistsimulator.github.io/latest/kotlindoc/it/unibo/alchemist/model/implementations/timedistributions/exponentialtime\">exponentially distributed time<\/a> with rate 1, namely, such reaction,\nwhen executable (the left hand LSAs have local matches), will execute at an average of once per second\n(with a variance of 1 s²).<\/p>\n<script src=\"https://gist-it.appspot.com/github/AlchemistSimulator/SAPERE-incarnation-tutorial/blob/master/src/main/yaml/06-send.yml\"><\/script>\n<h2 id=\"tutorial-and-exercises\"><a href=\"#tutorial-and-exercises\" id=\"tutorial-and-exercises\" class=\"anchor\"><\/a>Tutorial and exercises<\/h2>\n<p>To better grasp details of the incarnation, we recommend looking at the examples available on\n<a href=\"https://github.com/AlchemistSimulator/SAPERE-incarnation-tutorial\">the Alchemist SAPERE Incarnation tutorial on GitHub<\/a>.<\/p>\n<p>Besides examples with growing complexity,\nthere are a number of proposed exercises that should help you getting acquainted with the SAPERE way of writing self-organizing behaviors.<\/p>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "incarnations",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations"
          },
          "next": {
            "path": "wiki/incarnations",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "biochemistry",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/incarnations/biochemistry"
          },
          "previous": {
            "path": "wiki/use",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "coordination-2021-tutorial",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/use/coordination-2021-tutorial"
          },
          "description": "",
          "title": "Incarnations in detail",
          "content": ""
        }]
      },
      "develop": {
        "ownKey": "develop",
        "childrenPages": {"import": {
          "ownKey": "import",
          "ownPages": [{
            "reference": {
              "path": "wiki/develop",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "import",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/develop/import"
            },
            "next": {
              "path": "wiki",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "license",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/license"
            },
            "previous": {
              "path": "wiki",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "develop",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/develop"
            },
            "description": "",
            "title": "Requirements and installation",
            "content": "<h2 id=\"requirements\"><a href=\"#requirements\" id=\"requirements\" class=\"anchor\"><\/a>Requirements<\/h2>\n<p>Alchemist requires java 11 or later, if you don't have a Java Development Kit version 11+ installed we may recommend you to install the version of AdoptOpenJDK, which can be found <a href=\"https://adoptopenjdk.net/index.html?variant=openjdk11&amp;jvmVariant=hotspot\">here<\/a>. If you prefer, you can install it via <a href=\"https://github.com/shyiko/jabba\">Jabba<\/a> - a cross-platform Java Version Manager.<\/p>\n<p>For further information, the JDKs and environments tested <a href=\"https://travis-ci.org/AlchemistSimulator/Alchemist\">here<\/a> are those for which executing Alchemist is supported.<\/p>\n<h2 id=\"importing-alchemist\"><a href=\"#importing-alchemist\" id=\"importing-alchemist\" class=\"anchor\"><\/a>Importing Alchemist<\/h2>\n<p>In this section you will be given information about how to import the Alchemist project in <a href=\"https://www.jetbrains.com/idea/\">IntelliJ IDEA<\/a> and <a href=\"https://www.eclipse.org/eclipseide/\">Eclipse<\/a>.<\/p>\n<h3 id=\"importing-in-intellij\"><a href=\"#importing-in-intellij\" id=\"importing-in-intellij\" class=\"anchor\"><\/a>Importing in IntelliJ<\/h3>\n<h4 id=\"recommended-configuration\"><a href=\"#recommended-configuration\" id=\"recommended-configuration\" class=\"anchor\"><\/a>Recommended configuration<\/h4>\n<p>Install the following plugins (use <kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>A<\/kbd>, then search for &quot;Plugins&quot;):<\/p>\n<ul>\n<li>From the main list:\n<ul>\n<li>Scala<\/li>\n<li>Kotlin<\/li>\n<\/ul>\n<\/li>\n<li>From &quot;Browse Repositories&quot;:\n<ul>\n<li><a href=\"https://plugins.jetbrains.com/plugin/7358-antlr-v4-grammar-plugin\">ANTLR v4 grammar plugin<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/1065-checkstyle-idea\">Checkstyle-IDEA<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/3847-findbugs-idea\">FindBugs-IDEA<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/1137-pmdplugin\">PMDPlugin<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4 id=\"import-procedure\"><a href=\"#import-procedure\" id=\"import-procedure\" class=\"anchor\"><\/a>Import procedure<\/h4>\n<ol start=\"0\">\n<li>Windows user should perform an additional first step: before cloning the repository, make sure that the autocrlf feature of git is disabled, by issuing <code>git config --global core.autocrlf false<\/code>. If the step is not performed, git will automatically insert CRLF line endings, violating the project's Checkstyle rules (which are rather strict, and prevent the build from succeeding).<\/li>\n<li>Clone this repository in a folder of your preference using <code>git clone<\/code> appropriately<\/li>\n<li>Open IntellJ. If a project opens automatically, select &quot;Close project&quot;. You should be on the welcome screen of IntelliJ idea.<\/li>\n<li>Select &quot;Import Project&quot;<\/li>\n<li>Navigate your file system and find the folder where you cloned the repository. <strong>Do not select it<\/strong>. Open the folder, and you should find a lowercase <code>alchemist<\/code> folder. That is the correct project folder, not the outermost <code>Alchemist<\/code> folder (created by <code>git<\/code> in case you cloned without specifying a different folder name). Once the correct folder has been selected, click <kbd>Ok<\/kbd><\/li>\n<li>Select &quot;Import Project from external model&quot;<\/li>\n<li>Make sure &quot;Gradle&quot; is selected as external model tool<\/li>\n<li>Click <kbd>Finish<\/kbd><\/li>\n<li>If prompted to override any .idea file, try to answer <kbd>No<\/kbd>. It's possible that IntelliJ refuses to proceed, in which case click <kbd>Finish<\/kbd> again, then select <kbd>Yes<\/kbd>.<\/li>\n<li>A dialog stating that &quot;IntelliJ IDEA found a Gradle build script&quot; may appear, in such case answer <kbd>Import Gradle Project<\/kbd>.<\/li>\n<li>Wait for the IDE to import the project from Gradle. The process may take several minutes, due to the amount of dependencies. Should the synchronization fail, make sure that the IDE's Gradle is configured correctly:<\/li>\n<li>In 'Settings -&gt; Build, Execution, Deployment -&gt; Build Tools &gt; Gradle', for the option 'Use Gradle from' select 'gradle-wrapper.properties file'. Enabling auto-import is also recommended.<\/li>\n<li><strong>Important:<\/strong> Alchemist requires java 11+, so make sure the 'Gradle JVM' option points to such a version (if you don't have a JDK 11+ installed make sure to get one).<\/li>\n<li>Once imported, the project may still be unable to compile, due to missing sources in incarnation-biochemistry. This problem can be solved by opening the IntelliJ terminal (e.g. with <kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>A<\/kbd>, typing &quot;terminal&quot; and pressing <kbd>Enter<\/kbd>), and issue:<\/li>\n<\/ol>\n<ul>\n<li>On Unix: <code>./gradlew alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<li>On Windows: <code>gradlew.bat alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<\/ul>\n<h3 id=\"importing-in-eclipse\"><a href=\"#importing-in-eclipse\" id=\"importing-in-eclipse\" class=\"anchor\"><\/a>Importing in Eclipse<\/h3>\n<h4 id=\"recommended-configuration-1\"><a href=\"#recommended-configuration-1\" id=\"recommended-configuration-1\" class=\"anchor\"><\/a>Recommended configuration<\/h4>\n<ul>\n<li>Download [the latest Eclipse for Java][eclipse]. For a smooth import, Gradle Buildship is needed (starting from Eclipse Mars.1, it is included by default)\n<ul>\n<li>Arch Linux users can use the package <code>eclipse-java<\/code><\/li>\n<li>Ubuntu-based Linux users can install it using <a href=\"https://wiki.ubuntu.com/ubuntu-make\">ubuntu-make<\/a>:\n<pre><code class=\"language-bash\">sudo apt-add-repository ppa:ubuntu-desktop/ubuntu-make\nsudo apt-get update\nsudo apt-get install ubuntu-make\numake ide eclipse \n<\/code><\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>Install the Scala interpreter:\n<ul>\n<li>Arch Linux users can use the package <code>scala<\/code><\/li>\n<li>Ubuntu-based Linux users can use the package scala:\n<pre><code class=\"language-bash\">sudo apt-get update\nsudo apt-get install scala\n<\/code><\/pre>\n<\/li>\n<li>Users of other OS can follow the <a href=\"https://www.scala-lang.org/download/install.html\">official installation guide<\/a><\/li>\n<\/ul>\n<\/li>\n<li>Install the required eclipse plugins:\n<ul>\n<li>In Eclipse, click &quot;Help&quot; -&gt; &quot;Eclipse Marketplace...&quot;<\/li>\n<li>In the search field enter &quot;findbugs&quot;, then press Enter<\/li>\n<li>One of the retrieved entries should be &quot;FindBugs Eclipse Plugin&quot;, click Install<\/li>\n<li>Click &quot;&lt; Install More&quot;<\/li>\n<li>In the search field enter &quot;checkstyle&quot;, then press Enter<\/li>\n<li>One of the retrieved entries should be &quot;Checkstyle Plug-in&quot; with a written icon whose text is &quot;eclipse-cs&quot;, click Install<\/li>\n<li>Click &quot;&lt; Install More&quot;<\/li>\n<li>In the search field enter &quot;xtext&quot;, then press Enter<\/li>\n<li>One of the retrieved entries should be &quot;Eclipse Xtext&quot;, click Install<\/li>\n<li>Click &quot;&lt; Install More&quot;<\/li>\n<li>In the search field enter &quot;scala&quot;, then press Enter<\/li>\n<li>One of the retrieved entries should be &quot;Scala IDE 4.2.x&quot;, click Install<\/li>\n<li>Click &quot;Install Now &gt;&quot;<\/li>\n<li>Wait for Eclipse to resolve all the features<\/li>\n<li>Click &quot;Confirm &gt;&quot;<\/li>\n<li>Follow the instructions, accept the license, wait for Eclipse to download and install the product, accept the installation and restart the IDE<\/li>\n<li>When restarted, click &quot;Help&quot; -&gt; &quot;Install New Software...&quot;<\/li>\n<li>Click &quot;Add...&quot;<\/li>\n<li>In &quot;Location&quot; field, enter <code>https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/<\/code><\/li>\n<li>The &quot;Name&quot; field is not mandatory (suggested: &quot;PMD&quot;)<\/li>\n<li>Click OK.<\/li>\n<li>If not already selected, in &quot;Work with:&quot; dropdown menu choose the just added update site<\/li>\n<li>Select &quot;PMD for Eclipse 4&quot; and click next<\/li>\n<li>Follow the instructions, accept the license, wait for Eclipse to download and install the product, accept the installation and restart the IDE.<\/li>\n<\/ul>\n<\/li>\n<li>Set the line delimiter to LF (only for Windows users)\n<ul>\n<li>In Eclipse, click window -&gt; preferences<\/li>\n<li>In the search form enter &quot;encoding&quot;, then press Enter<\/li>\n<li>Go to General -&gt; Workspace<\/li>\n<li>In the section &quot;New text file line delimiter&quot; check &quot;Other&quot; and choose Unix<\/li>\n<li>Apply<\/li>\n<\/ul>\n<\/li>\n<li>Use space instead of tabs\n<ul>\n<li>In Eclipse, click window -&gt; preferences<\/li>\n<li>Go to General -&gt; Editors -&gt; Text Editors<\/li>\n<li>Check &quot;insert spaces for tabs&quot; option.<\/li>\n<li>Apply.<\/li>\n<li>Go to Java -&gt; Code style -&gt; Formatter<\/li>\n<li>Click Edit button<\/li>\n<li>In Indentation tab, under &quot;General Settings&quot;, set &quot;tab policy&quot; to &quot;Spaces only&quot;<\/li>\n<li>Apply (you should probably rename the formatter settings).<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4 id=\"import-procedure-1\"><a href=\"#import-procedure-1\" id=\"import-procedure-1\" class=\"anchor\"><\/a>Import Procedure<\/h4>\n<ul>\n<li>\n<p>Install git on your system, if you haven't yet<\/p>\n<\/li>\n<li>\n<p>Pull up a terminal, and <code>cd<\/code> to the folder where you want the project to be cloned (presumably, your Eclipse workspace)<\/p>\n<\/li>\n<li>\n<p>Clone the project with <code>git clone git@github.com:AlchemistSimulator/alchemist.git<\/code><\/p>\n<ul>\n<li>If you are a Windows user, you might find easier to import via HTTPS: <code>git clone https://github.com/AlchemistSimulator/Alchemist.git<\/code><\/li>\n<li>If the cloning ends with <code>Permission denied (publickey)<\/code> error, please, follow <a href=\"https://help.github.com/articles/error-permission-denied-publickey/\">this<\/a> guide.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p>In terminal type <code>git branch<\/code>. This shows you all the branches. If you only have the master branch type <code>git branch -a<\/code> to see local and remote branches. For add a remote branch to your local repository type <code>git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;<\/code>. For switch between branches use <code>git checkout &lt;branch-name&gt;<\/code>.<\/p>\n<\/li>\n<li>\n<p>Open Eclipse<\/p>\n<\/li>\n<li>\n<p>Click File -&gt; Import -&gt; Gradle -&gt; Gradle Project -&gt; Next<\/p>\n<\/li>\n<li>\n<p>Select the project root directory, namely, the <code>alchemist<\/code> folder located inside the folder where you have cloned the repository. Do not point to the folder containing this <code>README.md<\/code> file, but to the <code>alchemist<\/code> folder on the same level.<\/p>\n<\/li>\n<li>\n<p>Next<\/p>\n<\/li>\n<li>\n<p>Make sure that &quot;Gradle wrapper (recommended)&quot; is selected<\/p>\n<\/li>\n<li>\n<p>Next<\/p>\n<\/li>\n<li>\n<p>Wait for Eclipse to scan the project, then make sure that the Gradle project structure can be expanded, and contains an external <code>alchemist<\/code> project and many <code>alchemist-*<\/code> subprojects. If it does not, you have pointed to the wrong folder while importing, go back and select the correct one.<\/p>\n<\/li>\n<li>\n<p>Finish<\/p>\n<\/li>\n<li>\n<p>When asked about the existing Eclipse configuration, select &quot;Keep&quot; (so that all the default development options are imported)<\/p>\n<\/li>\n<li>\n<p>The projects will appear in your projects list.<\/p>\n<\/li>\n<li>\n<p>Checkstyle, PMD and FindBugs should be pre-configured.<\/p>\n<\/li>\n<li>\n<p>If you have errors in <code>alchemist-incarnation-biochemistry<\/code> project open a terminal in alchemist folder (do not point to the folder containing this <code>README.md<\/code> file, but to the <code>alchemist<\/code> folder on the same level) and run:<\/p>\n<ul>\n<li>If you are a Linux or Mac user <code>./gradlew alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<li>If you are a Windows user: <code>gradlew.bat alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<\/ul>\n<p>Go to Eclipse, right click on <code>alchemist-incarnation-biochemistry<\/code> project -&gt; Refresh<\/p>\n<\/li>\n<li>\n<p>If you have errors in <code>alchemist-projectview<\/code> project, make sure Eclipse Xtext plugin is correctly installed<\/p>\n<\/li>\n<\/ul>\n"
          }]
        }},
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "develop",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/develop"
          },
          "next": {
            "path": "wiki/develop",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "import",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/develop/import"
          },
          "previous": {
            "path": "wiki/literature",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "maps",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/literature/maps"
          },
          "description": "",
          "title": "Develop",
          "content": ""
        }]
      },
      "export": {
        "ownKey": "export",
        "childrenPages": {
          "grid": {
            "ownKey": "grid",
            "ownPages": [{
              "reference": {
                "path": "wiki/export",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "grid",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export/grid"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "issues",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/issues"
              },
              "previous": {
                "path": "wiki/export",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "batch",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export/batch"
              },
              "description": "",
              "title": "Grid computing support",
              "content": "<p>Grid computing support<\/p>\n"
            }]
          },
          "batch": {
            "ownKey": "batch",
            "ownPages": [{
              "reference": {
                "path": "wiki/export",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "batch",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export/batch"
              },
              "next": {
                "path": "wiki/export",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "grid",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export/grid"
              },
              "previous": {
                "path": "wiki/export",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "export",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export/export"
              },
              "description": "",
              "title": "Executing batches",
              "content": "<p>Executing batches<\/p>\n"
            }]
          },
          "export": {
            "ownKey": "export",
            "ownPages": [{
              "reference": {
                "path": "wiki/export",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "export",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export/export"
              },
              "next": {
                "path": "wiki/export",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "batch",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/export/batch"
              },
              "previous": {
                "path": "wiki/use",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "yaml-variables",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/use/yaml-variables"
              },
              "description": "",
              "title": "Exporting data",
              "content": "<h2 id=\"defining-exported-data\"><a href=\"#defining-exported-data\" id=\"defining-exported-data\" class=\"anchor\"><\/a>Defining exported data<\/h2>\n<p>Data expected as output can be exported by telling Alchemist what to log, and by passing to the executable information\non where to export.<\/p>\n<p>The <code>export<\/code> section lists which simulation values are exported into the <code>folder<\/code> specified with the <code>-e path/to/folder<\/code>\nargument.<\/p>\n<h3 id=\"aggregating-data\"><a href=\"#aggregating-data\" id=\"aggregating-data\" class=\"anchor\"><\/a>Aggregating data<\/h3>\n<p>Data aggregators are statistically univariate.\nValid aggregation functions must extend <a href=\"http://commons.apache.org/proper/commons-math/javadocs/api-3.4/org/apache/commons/math3/stat/descriptive/AbstractStorelessUnivariateStatistic.html\">AbstractStorelessUnivariateStatistic<\/a>.<\/p>\n<p><strong>Examples<\/strong><\/p>\n<pre><code class=\"language-yaml\">export:\n  # Time step of the simulation\n  - time\n  # Number of nodes involved in the simulation\n  - number-of-nodes\n  # Molecule representing an aggregated value\n  - molecule: danger\n    aggregators: [sum]\n<\/code><\/pre>\n<h3 id=\"filtering-unwanted-values\"><a href=\"#filtering-unwanted-values\" id=\"filtering-unwanted-values\" class=\"anchor\"><\/a>Filtering unwanted values<\/h3>\n<p>TODO<\/p>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "export",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/export"
          },
          "next": {
            "path": "wiki/use",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "yaml-variables",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/use/yaml-variables"
          },
          "previous": {
            "path": "wiki/advanced",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "customization",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/advanced/customization"
          },
          "description": "",
          "title": "Data export and batches",
          "content": ""
        }]
      },
      "issues": {
        "ownKey": "issues",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "issues",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/issues"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "literature",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/literature"
          },
          "previous": {
            "path": "wiki/export",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "grid",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/export/grid"
          },
          "description": "",
          "title": "Known issues: troubleshooting",
          "content": "<p>A list of known issues which we are aiming to resolve is tracked <a href=\"https://github.com/AlchemistSimulator/Alchemist/issues\">on the Alchemist Github issue tracker<\/a>.\nOf course, contributions are welcome.<\/p>\n<p>Other issues you may experience are listed below.\nIf you run into other issues yourself, please report them.<\/p>\n<h3 id=\"graphical-glitches-on-the-swing-graphical-interface\"><a href=\"#graphical-glitches-on-the-swing-graphical-interface\" id=\"graphical-glitches-on-the-swing-graphical-interface\" class=\"anchor\"><\/a>Graphical glitches on the Swing graphical interface<\/h3>\n<h4 id=\"problem-description\"><a href=\"#problem-description\" id=\"problem-description\" class=\"anchor\"><\/a>Problem description<\/h4>\n<p>Under some combination of hardware and drivers, the Swing interface may render uncorrectly.\nThis is due to Alchemist using OpenGL as rendering backend for Swing, in order to increase performance.<\/p>\n<p>Examples of graphical glitches are the following:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/issues/vbox-glitch-1.png\" alt=\"Graphical glitch example\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/issues/vbox-glitch-2.png\" alt=\"Graphical glitch example\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/issues/vbox-glitch-3.png\" alt=\"Graphical glitch example\" /><\/p>\n<p>The issue has been reproduced on:<\/p>\n<ul>\n<li>Virtualbox-virtualized Ubuntu installation<\/li>\n<li>Old AMD APU for notebooks with open source radeon driver<\/li>\n<\/ul>\n<h4 id=\"solution\"><a href=\"#solution\" id=\"solution\" class=\"anchor\"><\/a>Solution<\/h4>\n<p>In case you are using a virtualized environment, if you can do so, switch to the &quot;bare metal&quot; operating system.\nOtherwise, you can try to disable Swing OpenGL support by <a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/customization\">writing a custom component<\/a>\nwhich sets Swing non-accelerated mode, by invoking the following Java code:<\/p>\n<pre><code class=\"language-java\">System.setProperty(&quot;sun.java2d.opengl&quot;,&quot;false&quot;);\n<\/code><\/pre>\n"
        }]
      }
    },
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "https://alchemistsimulator.github.io/latest",
        "fileName": "wiki",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://alchemistsimulator.github.io/latest/wiki"
      },
      "description": "",
      "title": "Wiki",
      "content": "<html>\n <head><\/head>\n <body>\n  <h1 id=\"alchemist-simulator-user-guide\"><a href=\"#alchemist-simulator-user-guide\" id=\"alchemist-simulator-user-guide\" class=\"anchor\"><\/a>Alchemist simulator user guide<\/h1> \n  <ul> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/superquick\">I AM IN A HURRY BE QUICK<\/a><\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/understand\"><\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/understand/metamodel\">The metamodel<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/prepare\"><\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/prepare/requirements\">Requirements<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/prepare/quickstart\">Quick start<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/prepare/run-gradle\">Running Alchemist via Gradle<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/prepare/run-stand-alone\">Running Alchemist stand-alone<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/prepare/default-gui\">Graphical interface<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/use\"><\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/use/basics\"><\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/use/dry\">Don't repeat yourself<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/use/coordination-2021-tutorial\"><\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/incarnations\"><\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/incarnations/biochemistry\">Biochemistry<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/incarnations/protelis\">Protelis<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/incarnations/sapere\">SAPERE<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/incarnations/scafi\">Scafi<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced\"><\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/indoor\">Indoor environments<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/maps\">Maps and GPS traces<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/graphstream\"><\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/navigation-graphs\">Pathfinding<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/cognitive-pedestrians\">Cognitive Pedestrians<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/smartcam\">Smart Cameras<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/advanced/customization\">Writing custom components<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/export\"><\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/use/yaml-variables\">Using variables<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/export/export\">Exporting data<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/export/batch\">Executing batches<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/export/grid\">Grid computing support<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/issues\">Troubleshooting and known issues<\/a><\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/literature\"><\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/literature/protelis\">With Protelis<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/literature/scafi\">With Scafi<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/literature/maps\">On maps<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/develop\"><\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/develop/import\">Import in a IDE<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/license\"><\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
    }]
  }}
}