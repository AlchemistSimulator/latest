{
  "ownKey": "wiki",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "license": {
        "ownKey": "license",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "license",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/license"
          },
          "previous": {
            "path": "wiki/examples",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "maps",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/examples/maps"
          },
          "description": "",
          "title": "License",
          "content": ""
        }]
      },
      "simulator": {
        "ownKey": "simulator",
        "childrenPages": {"metamodel": {
          "ownKey": "metamodel",
          "ownPages": [{
            "reference": {
              "path": "wiki/simulator",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "metamodel",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/simulator/metamodel"
            },
            "next": {
              "path": "wiki",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "usage",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/usage"
            },
            "previous": {
              "path": "wiki",
              "baseUrl": "https://alchemistsimulator.github.io/latest",
              "fileName": "simulator",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://alchemistsimulator.github.io/latest/wiki/simulator"
            },
            "description": "",
            "title": "The Alchemist Simulator metamodel",
            "content": "<h2 id=\"the-world-of-alchemist\">The world of Alchemist<\/h2>\n<p>The first step to take in order to use the simulator, is to answer the question<\/p>\n<blockquote>\n<p>what does Alchemist simulate?<\/p>\n<\/blockquote>\n<h3 id=\"the-model\">The model<\/h3>\n<p>The world of Alchemist is composed of the following entities:<\/p>\n<ul>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Molecule\">Molecule<\/a><\/strong>\n<ul>\n<li>The name of a data item<\/li>\n<li>If Alchemist were an imperative programming language, a <em>molecule<\/em> would be the concept of <em>variable name<\/em><\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Concentration\">Concentration<\/a><\/strong>\n<ul>\n<li>The value associated to a particular <em>molecule<\/em><\/li>\n<li>If Alchemist were an imperative programming language, a <em>concentration<\/em> would be the concept of <em>value associated to a variable<\/em><\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Node\">Node<\/a><\/strong>\n<ul>\n<li>A container of <em>molecules<\/em> and <em>reactions<\/em>, living inside an <em>environment<\/em><\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Environment\">Environment<\/a><\/strong>\n<ul>\n<li>The Alchemist abstration for the space. It is a container for <em>nodes<\/em>, and it is able to tell:\n<ol>\n<li>Where the nodes are in the space - i.e. their <em>position<\/em><\/li>\n<li>The distance between two <em>nodes<\/em><\/li>\n<li>Optionally, support for moving <em>nodes<\/em><\/li>\n<\/ol>\n<\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/LinkingRule\">Linking rule<\/a><\/strong>\n<ul>\n<li>A function of the current status of the environment that associates to each <em>node<\/em> a <em>neighborhood<\/em><\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Neighborhood\">Neighborhood<\/a><\/strong>\n<ul>\n<li>An entity composed by a <em>node<\/em> (centre) and a set of <em>nodes<\/em> (neighbors)<\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Reaction\">Reaction<\/a><\/strong>\n<ul>\n<li>Any event that can change the status of the <em>environment<\/em><\/li>\n<li>Each <em>node<\/em> has a possibly empty set of <em>reactions<\/em><\/li>\n<li>Each reaction is defined by a possibly empty list of <em>conditions<\/em>, one or more <em>actions<\/em> and a <em><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/TimeDistribution\">time distribution<\/a><\/em><\/li>\n<li>The frequency at which it happens depends on:\n<ol>\n<li>A static &quot;rate&quot; parameter<\/li>\n<li>The value of each <em>condition<\/em><\/li>\n<li>A &quot;rate equation&quot;, that combines the static rate and the value of conditions, giving back an &quot;instantaneous rate&quot;<\/li>\n<li>A <em>time distribution<\/em><\/li>\n<\/ol>\n<\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Condition\">Condition<\/a><\/strong>\n<ul>\n<li>A function that takes the current <em>environment<\/em> as input and outputs a boolean and a number<\/li>\n<li>If the <em>condition<\/em> does not hold (i.e. its current output is <code>false<\/code>), the <em>reaction<\/em> to which it is associated cannot run<\/li>\n<li>The outputed number may or may not influence the <em>reaction<\/em> speed (i.e. the average number of times the <em>reaction<\/em> &quot;happens&quot; per time unit), depending on the <em>reaction<\/em> and its <em>time distribution<\/em>.<\/li>\n<\/ul>\n<\/li>\n<li><strong><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Action\">Action<\/a><\/strong>\n<ul>\n<li>Models a change in the environment.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>The following image is a visualization of such model:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/simulator/model.png\" alt=\"Alchemist model\" /><\/p>\n<p>The behavior of the system is described in terms of reactions. As such, here's a pictorial representation of a reaction:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/simulator/reaction.png\" alt=\"Alchemist reaction\" /><\/p>\n<h3 id=\"incarnations\">Incarnations<\/h3>\n<p>As you can see, names are given after classical chemistry terms.\nThis is mostly for historical reasons: Alchemist has been initially conceived as a chemical-oriented multi-compartment\nstochastic simulation engine, able to support compartment (node) mobility while still retaining high performance.<\/p>\n<p>However, Alchemist is not limited to that. The key of its extensibility is in the very loose interpretation of\n<strong>molecule<\/strong> and <strong>concentration<\/strong>. These two terms have a very precise definition in chemistry, but in Alchemist they\nare respectively<\/p>\n<ol>\n<li>a generic identifier, and<\/li>\n<li>a piece of data of some <strong>type<\/strong><\/li>\n<\/ol>\n<p>An <strong>incarnation<\/strong> of Alchemist includes a <strong>type<\/strong> definition of <strong>concentration<\/strong>,\nand possibly a set of specific conditions, actions and (rarely) environments and reactions that operate on such types.\nIn other words, an incarnation is a concrete instance of the Alchemist meta-model.\nIn addition, a proper <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Incarnation\">Alchemist incarnation<\/a> must also define:<\/p>\n<ul>\n<li>Means for translating strings into named entities (molecules)<\/li>\n<li>Means for obtaining a number when given a node, a molecule and a string representing a property<\/li>\n<li>Means for building incarnation-specific model entities given an appropriate context and a parameter String<\/li>\n<\/ul>\n<p>These functionalities are required in order to support a uniform access to different incarnations.<\/p>\n<p>Different Incarnations can model completely different universes.\nFor instance, if the concentration is defined as a positive integer and proper actions and conditions are provided,\nAlchemist becomes a stochastic simulator for chemistry featuring interconnected and mobile compartments.<\/p>\n<p>The standalone distribution comes with:<\/p>\n<ul>\n<li><a href=\"http://protelis.org\">Protelis Incarnation<\/a><\/li>\n<li><a href=\"http://dx.doi.org/10.1016/j.pmcj.2014.12.002\">SAPERE Incarnation<\/a><\/li>\n<li><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/BiochemistryIncarnation\">Biochemistry Incarnation<\/a><\/li>\n<li><a href=\"https://scafi.github.io/\">Scafi incarnation<\/a><\/li>\n<\/ul>\n<p>More details on how to use each of the included incarnations will be provided after this introductory chapter.<\/p>\n<h2 id=\"the-tool\">The tool<\/h2>\n<p>The core part of the tool is the incarnation-agnostic simulation engine.\nIts current implementation is based on <a href=\"http://dx.doi.org/10.1021/jp993732q\">Gibson and Bruck's Next Reaction<\/a>,\nextended to support addition and removal of reactions, and improved using input and output contexts for reactions,\nin order to prune the dependency graph as much as possible.\nMore details on that are demanded to <a href=\"http://dx.doi.org/10.1057/jos.2012.27\">this scientific paper on Journal of Simulation<\/a>.<\/p>\n<p>The engine's entry point is the <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/core/interfaces/Simulation\">Simulation<\/a>.\nIt is equipped with support for commands like play, pause and stop, and can be equipped with an <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/boundary/interfaces/OutputMonitor\">OutputMonitor<\/a>.\nThe output monitor can be a graphical interface, a logger or any kind of environment inspector.<\/p>\n"
          }]
        }},
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "simulator",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/simulator"
          },
          "next": {
            "path": "wiki/simulator",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "metamodel",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/simulator/metamodel"
          },
          "description": "",
          "title": "Understanding Alchemist",
          "content": "<p>Understanding Alchemist<\/p>\n"
        }]
      },
      "examples": {
        "ownKey": "examples",
        "childrenPages": {
          "maps": {
            "ownKey": "maps",
            "ownPages": [{
              "reference": {
                "path": "wiki/examples",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples/maps"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "license",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/license"
              },
              "previous": {
                "path": "wiki/examples",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples/scafi"
              },
              "description": "",
              "title": "On maps",
              "content": "<p>On maps<\/p>\n"
            }]
          },
          "scafi": {
            "ownKey": "scafi",
            "ownPages": [{
              "reference": {
                "path": "wiki/examples",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples/scafi"
              },
              "next": {
                "path": "wiki/examples",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples/maps"
              },
              "previous": {
                "path": "wiki/examples",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples/protelis"
              },
              "description": "",
              "title": "With Scafi",
              "content": "<p>With Scafi<\/p>\n"
            }]
          },
          "protelis": {
            "ownKey": "protelis",
            "ownPages": [{
              "reference": {
                "path": "wiki/examples",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples/protelis"
              },
              "next": {
                "path": "wiki/examples",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples/scafi"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "examples",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples"
              },
              "description": "",
              "title": "With Protelis",
              "content": "<p>With Protelis<\/p>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "examples",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/examples"
          },
          "next": {
            "path": "wiki/examples",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "protelis",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/examples/protelis"
          },
          "previous": {
            "path": "wiki/usage",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "issues",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/usage/issues"
          },
          "description": "",
          "title": "Simulation examples",
          "content": "<p>Simulation examples<\/p>\n"
        }]
      },
      "usage": {
        "ownKey": "usage",
        "childrenPages": {
          "quickstart": {
            "ownKey": "quickstart",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "quickstart",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/quickstart"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-gradle",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/run-gradle"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "installation",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/installation"
              },
              "description": "",
              "title": "Quick start",
              "content": "<p>You can find <a href=\"https://github.com/paagamelo/Alchemist-quickstart\">here<\/a> a project showing how to use Alchemist via <a href=\"https://gradle.org\">Gradle<\/a> to run a simple simulation. Let's use it as a quick start to have you hit the ground running.<\/p>\n<p>You can either follow these instructions or those on the <code>README.md<\/code> file of the linked project, information is equivalent.<\/p>\n<h2 id=\"how-to-launch\">How to launch<\/h2>\n<p>To run the example you can rely on the pre-configured Gradle build script. It will automatically download all the required libraries, set up the environment, and execute the simulator via command line for you.\nAs first step, use <code>git<\/code> to locally clone the repository linked above.\nIn order to launch, open a terminal and move to the project root folder, then on UNIX:<\/p>\n<pre><code class=\"language-bash\">./gradlew runAlchemist\n<\/code><\/pre>\n<p>On Windows:<\/p>\n<pre><code>gradlew.bat runAlchemist\n<\/code><\/pre>\n<p>Press P and you will see some pedestrians wandering around. For further information about the gui, see the <a href=\"gui.md\">graphical interface shortcuts<\/a>.<\/p>\n<p>Note that the first launch will be rather slow, since Gradle will download all the required files. They will get cached in the user's home folder (as per Gradle normal behavior).<\/p>\n<h2 id=\"the-build-script\">The build script<\/h2>\n<p>Let's explain how things work by looking at the <code>build.gradle<\/code> script.<\/p>\n<h3 id=\"importing-alchemist\">Importing Alchemist<\/h3>\n<p>First of all, we need to add Alchemist as a dependency. Alchemist is available on Maven Central, we can import all the components by importing the <code>it.unibo.alchemist:alchemist<\/code> artifact. Thus, you will see something like this:<\/p>\n<pre><code class=\"language-kotlin\">repositories { mavenCentral() }\n\ndependencies {\n    implementation(&quot;it.unibo.alchemist:alchemist:SOME_ALCHEMIST_VERSION&quot;)\n}\n<\/code><\/pre>\n<p>With <code>SOME_ALCHEMIST_VERSION<\/code> replaced by the version used, nothing special actually.<\/p>\n<p>If you do not need the whole Alchemist machinery but just a sub-part of it, you can restrict the set of imported artifacts by using as dependencies the modules you are actually in need of.<\/p>\n<h3 id=\"running-alchemist\">Running Alchemist<\/h3>\n<p>Now, let's look at the <code>runAlchemist<\/code> task, it is a simple gradle task responsible for launching the simulation. Let's dissect it:<\/p>\n<pre><code class=\"language-kotlin\">tasks.register&lt;JavaExec&gt;(&quot;runAlchemist&quot;) {\n    classpath = project.sourceSets.getByName(&quot;main&quot;).runtimeClasspath\n    main = &quot;it.unibo.alchemist.Alchemist&quot;\n    args = listOf(&quot;-y&quot;, &quot;src/main/yaml/$simulation.yml&quot;)\n}\n<\/code><\/pre>\n<p><a href=\"https://gradle.org\">Gradle<\/a> has a special task to run a Java class from the build script: <code>JavaExec<\/code>. We can create our custom task of type <code>JavaExec<\/code>, name it <code>runAlchemist<\/code> and configure it to launch our simulation. In order to make it work, we need to explicit two things:<\/p>\n<ul>\n<li>the Alchemist main class, which is <code>it.unibo.alchemist.Alchemist<\/code><\/li>\n<li>the classpath, or java won't be able to find all the classes needed<\/li>\n<\/ul>\n<p>This is what we do with the first three lines of code, and it is sufficient to successfully start Alchemist. Now, to make it run our simulation we can rely on the <a href=\"#command-line-interface\">command line interface<\/a>, to run a simulation we can use the <code>-y<\/code> option followed by the path to the simulation file. Alchemist simulations are contained in *.yml files, more information about how to write such simulations can be found <a href=\"https://alchemistsimulator.github.io/wiki/usage/yaml/\">here<\/a>. Let's suppose the <code>$simulation<\/code> variable contains the name of our simulation file, which is located in the <code>src/main/yaml/<\/code> folder, what we want to do is to run Alchemist with the following arguments:<\/p>\n<pre><code class=\"language-bash\">-y src/main/yaml/$simulation.yml\n<\/code><\/pre>\n<p>The last line of code specify these arguments.<\/p>\n<p>Ok, that's it. You should be able to use Alchemist via Gradle in your own project now, or at least have a clue.<\/p>\n<h2 id=\"command-line-interface\">Command line interface<\/h2>\n<p>The CLI supports the following options<\/p>\n<table>\n<thead>\n<tr><th>Option<\/th><th>Effect<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>-b,--batch<\/td><td>Runs in batch mode. If one or more -var parameters are specified, multiple simulation runs will be executed in parallel with all the combinations of values.<\/td><\/tr>\n<tr><td>-bmk,--benchmark &lt;file&gt;<\/td><td>Performs a benchmark with the provided simulation, measuring the total execution time. Saves result in given file.<\/td><\/tr>\n<tr><td>-cc,--comment-char<\/td><td>Sets the char that will be used to mark a data file line as commented. Defaults to #. (To be implemented)<\/td><\/tr>\n<tr><td>-d,--distributed &lt;file&gt;<\/td><td>Distribute simulations in computer grid<\/td><\/tr>\n<tr><td>-e,--export &lt;file&gt;<\/td><td>Exports the results onto a file<\/td><\/tr>\n<tr><td>-g,--effect-stack &lt;file&gt;<\/td><td>Loads an effect stack from file. Does nothing if in headless mode (because --batch and/or --headless are enabled)<\/td><\/tr>\n<tr><td>-h,--help<\/td><td>Print this help and quits the program<\/td><\/tr>\n<tr><td>-hl,--headless<\/td><td>Disable the graphical interface (automatic in batch mode)<\/td><\/tr>\n<tr><td>-i,--interval &lt;interval&gt;<\/td><td>Used when exporting data. Specifies how much simulated time units should pass between two samplings. Defaults to 1.<\/td><\/tr>\n<tr><td>-p,--parallelism &lt;arg&gt;<\/td><td>Sets how many threads will be used in batch mode (default to the number of cores of your CPU).<\/td><\/tr>\n<tr><td>-q,--quiet<\/td><td>Quiet mode: print only error-level informations.<\/td><\/tr>\n<tr><td>-qq,--quiet-quiet<\/td><td>Super quiet mode: the simulator does not log anything. Go cry somewhere else if something goes wrong and you have no clue what.<\/td><\/tr>\n<tr><td>-s,--serv &lt;Ignite note configuration file&gt;<\/td><td>Start Ignite cluster node on local machine<\/td><\/tr>\n<tr><td>-t,--end-time &lt;Time&gt;<\/td><td>The simulation will be concluded at the specified time. Defaults to infinity.<\/td><\/tr>\n<tr><td>-v,--verbose<\/td><td>Verbose mode: prints info-level informations. Slows the simulator down.<\/td><\/tr>\n<tr><td>-var,--variable &lt;var1 var2 ... varN&gt;<\/td><td>Used with -b. If the specified variable exists in the Alchemist YAML file, it is added to the pool of  variables. Be wary: complexity quickly grows with the number of variables.<\/td><\/tr>\n<tr><td>-vv,--vverbose<\/td><td>Very verbose mode: prints debug-level informations. Slows the simulator down. A lot.<\/td><\/tr>\n<tr><td>-vvv,--vvverbose<\/td><td>Very very verbose mode: prints trace-level informations. Slows the simulator down. An awful lot.<\/td><\/tr>\n<tr><td>-y,--yaml &lt;file&gt;<\/td><td>Load the specified Alchemist YAML file<\/td><\/tr>\n<\/tbody>\n<\/table>\n"
            }]
          },
          "maps": {
            "ownKey": "maps",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/maps"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "export",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/export"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "smartcam",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/smartcam"
              },
              "description": "",
              "title": "Maps and GPS traces",
              "content": "<p>Alchemist is equipped with the ability to load and simulate on real-world maps.\nNavigation on maps can be done by using gps traces,\nby moving along roads (Alchemist relies on <a href=\"https://www.graphhopper.com/\">GraphHopper<\/a> to provide directions),\nby interpolating gps traces with on-the-road-movements,\nor by ignoring the map information on just move as you would in a continuous space.<\/p>\n<h2 id=\"setting-up-a-map-environment\">Setting up a map environment<\/h2>\n<p>In order to run simulations on real world maps, an appropriate environment must be selected.<\/p>\n<p>Currently, the only environment supporting maps is <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/environments/OSMEnvironment\">OSMEnvironment<\/a>.<\/p>\n<p>The only mandatory parameter is the <code>path<\/code> of the file with the map to be loaded. Accepts OSM maps of any format (xml, osm, pbf).\nIs possible define other optional parameter like:<\/p>\n<ol start=\"0\">\n<li><code>approximation: Int<\/code> -&gt; the amount of ciphers of the IEEE 754 encoded position that may be discarded when comparing two positions, allowing a quicker retrieval of the route between two position, since the cache may already contain a similar route which can be considered to be the same route, according to the level of precision determined by this value<\/li>\n<li><code>onStreets: Boolean<\/code> -&gt; if true, the nodes will be placed on the street nearest to the desired position<\/li>\n<li><code>onlyOnStreets: Boolean<\/code> -&gt; if true, the nodes which are too far from a street will be simply discarded. If false, they will be placed anyway, in the original position<\/li>\n<\/ol>\n<p>The following example shows how to configure a simulation that loads data from an Openstreetmap file\n(OSM, XML and PBF formats are supported) located in the classpath folder <code>maps<\/code>:<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: OSMEnvironment\n  parameters: [maps/foo.pbf]\n<\/code><\/pre>\n<h2 id=\"using-gps-traces-to-displace-nodes\">Using GPS traces to displace nodes<\/h2>\n<p>GPS traces can be used to displace nodes on a map.\nIn order to set the initial position of the nodes with the first position of the GPS traces,\nyou need to use the displacement <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/loader/displacements/FromGPSTrace\">FromGPSTrace<\/a>.\nThe displacement <code>FromGPSTrace<\/code> require the following parameters:<\/p>\n<ol start=\"0\">\n<li>number of nodes to displace<\/li>\n<li>file with the GPS traces to use<\/li>\n<li>boolean that indicates if the list of GPS trace is cyclic.\nIf <code>true<\/code> and the GPS traces are less than the number of nodes to be displaced,\nthen the traces are cyclically re-used to displace nodes.<\/li>\n<li>a <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/boundary/gpsload/api/GPSTimeAlignment\">GPSTimeAlignment<\/a> to define how to align the time of all the GPS points of all GPS traces.\nThere are present several strategy in the package <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/boundary/gpsload/api\">it.unibo.alchemist.boundary.gpsload.api<\/a>\nand introduced in the following subsection.<\/li>\n<\/ol>\n<p>The following example places 1497 nodes with the first position of the GPS traces in the file <code>vcmuser.gpx<\/code>.\nThe list of GPS traces isn't cyclic.\nThe strategy to align time of all the GPS points is AlignTime\nin order to consider only the GPS points with attribute <code>time<\/code> greater than the specified one\n(in milliseconds from epoch).<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: FromGPSTrace\n      parameters: [1497, &quot;vcmuser.gpx&quot;, false, &quot;AlignToTime&quot;, 1365922800, false, false]\n<\/code><\/pre>\n<h3 id=\"strategy-to-align-time-of-gps-trace\">Strategy to align time of GPS trace<\/h3>\n<p>The strategies available to align time of GPS trace are the following:<\/p>\n<ol start=\"0\">\n<li>NoAlignment -&gt; No alignment is performed.<\/li>\n<li>AlignToFirstTrace -&gt; Aligns all traces at the start time of the first trace.\nIf you have two traces, the first trace start with time = 2 and second point with time = 5,\nthe second trace start with time = 4 and second point with time = 6,\nthe result will be:\n<ul>\n<li>first trace -&gt; start with time = 0 and second point with time = 3<\/li>\n<li>second trace -&gt; start with time = 2 and second point with time = 4<\/li>\n<\/ul>\n<\/li>\n<li>AlignToSimulationTime -&gt; Aligns all traces at the initial simulation time.\nIf you have two traces, the first trace start with time = 2 and second point with time = 5,\nthe second trace start with time = 4 and second point with time = 6,\nthe result will be:\n<ul>\n<li>first trace -&gt; start with time = 0 and second point with time = 3<\/li>\n<li>second trace -&gt; start with time = 0 and second point with time = 2<\/li>\n<\/ul>\n<\/li>\n<li>AlignToTime -&gt; Aligns the traces with the given time in seconds from Epoch.\nAll points before such time will be discarded. All points after the provided time will\nbe shifted back.\nIf you have two traces, the first trace start with time = 2 and second point with time = 5,\nthe second trace start with time = 4 and second point with time = 6, the given time is 3\nthe result will be:\n<ul>\n<li>first trace -&gt; first point discarded and second point with time = 2<\/li>\n<li>second trace -&gt; start with time = 1 and second point with time = 3<\/li>\n<\/ul>\n<\/li>\n<\/ol>\n<h2 id=\"navigation\">Navigation<\/h2>\n<p>As previous say there are several behavior in order to move the nodes in a environment with real-word map:<\/p>\n<ol start=\"0\">\n<li>movement ignoring map information. A node move directly from start position to destination position:\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/no_map_information.png\" alt=\"No map information\" /><\/li>\n<li>movement by using map information. A node move from start position to destination position using\nintermediate position in order to follow streets and avoid obstacle (like building):\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/use_map_information.png\" alt=\"Use map information\" /><\/li>\n<li>movement by reproducing a GPS trace (action <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/actions/ReproduceGPSTrace\">ReproduceGPSTrace<\/a>).\nA node start to the first position of the GPS trace, than move to the next\nposition of the trace until arrive to the last. The movement from a position to another is direct with a straight line:\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/reproduce_gps_trace.png\" alt=\"Reproduce GPS trace\" /><\/li>\n<li>movement by interpolating the GPS trace with street data (action <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/actions/GPSTraceWalker\">GPSTraceWalker<\/a>).\nA node start to the first position of the GPS trace,\nthan move to the next position of the trace until arrive to the last. The movement from a position to another\nuse map information to define intermediate position in order to follow streets and avoid obstacle (like building):\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/interpolate_gps_trace_with_street_data.png\" alt=\"Interpolate GPS trace with street data\" /><\/li>\n<\/ol>\n<p>Both the actions <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/actions/ReproduceGPSTrace\">ReproduceGPSTrace<\/a> and <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/actions/GPSTraceWalker\">GPSTraceWalker<\/a> require:\n0. the file with the GPS traces\n0. a boolean that indicate if the list of GPS trace is cyclic\n0. the strategy to align the attribute <code>time<\/code> of the GPS points of the GPS traces<\/p>\n<p>The following example show how it is possible define a program to follow GPS traces.<\/p>\n<pre><code class=\"language-yaml\">programs:\n  - time-distribution: 0.1\n  type: Event\n  actions:\n    - type: ReproduceGPSTrace\n      parameters: [&quot;/vcmuser.gpx&quot;, false, &quot;AlignToTime&quot;, 1365922800, false, false]\n<\/code><\/pre>\n"
            }]
          },
          "run-gradle": {
            "ownKey": "run-gradle",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-gradle",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/run-gradle"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-stand-alone",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/run-stand-alone"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "quickstart",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/quickstart"
              },
              "description": "",
              "title": "Running Alchemist via Gradle",
              "content": "<p>In this section you will be given information about how to use the simulator via <a href=\"https://gradle.org\">Gradle<\/a>. If you already practiced with the <a href=\"quickstart.md\">quick start<\/a> you may find this information repetitive.<\/p>\n<h2 id=\"adding-alchemist-dependency\">Adding Alchemist dependency<\/h2>\n<p>First of all, you need to add Alchemist dependency to your Gradle build. Alchemist is available on Maven Central, you can import all the components by importing the <code>it.unibo.alchemist:alchemist<\/code> artifact. Do so by writing:<\/p>\n<pre><code class=\"language-kotlin\">repositories { mavenCentral() }\n\ndependencies {\n    implementation(&quot;it.unibo.alchemist:alchemist:ALCHEMIST_VERSION&quot;)\n}\n<\/code><\/pre>\n<p>Remember to substite <code>ALCHEMIST_VERSION<\/code> with the version you want to use (change the scope appropriately if you need Alchemist only for runtime or testing).<\/p>\n<p>If you do not need the whole Alchemist machinery but just a sub-part of it, you can restrict the set of imported artifacts by using as dependencies the modules you are actually in need of.<\/p>\n<h2 id=\"running-alchemist\">Running Alchemist<\/h2>\n<p>One easy way to run Alchemist via Gradle is by writing a simple Gradle task responsible for launching the simulator. Let's see how this can be done. Firstly, Gradle has a special task to run a Java class from the build script: <code>JavaExec<\/code>. We can create our custom task of type <code>JavaExec<\/code> and configure it to launch Alchemist. Let's define our task:<\/p>\n<pre><code class=\"language-kotlin\">tasks.register&lt;JavaExec&gt;(&quot;runAlchemist&quot;) {\n    // run alchemist\n}\n<\/code><\/pre>\n<p>Now, in order to launch the simulator, we need to explicit two things:<\/p>\n<ul>\n<li>the Alchemist main class, which is <code>it.unibo.alchemist.Alchemist<\/code><\/li>\n<li>the classpath, or java won't be able to find all the classes needed<\/li>\n<\/ul>\n<p>You can do so by adding two lines of code:<\/p>\n<pre><code class=\"language-kotlin\">tasks.register&lt;JavaExec&gt;(&quot;runAlchemist&quot;) {\n    classpath = project.sourceSets.getByName(&quot;main&quot;).runtimeClasspath\n    main = &quot;it.unibo.alchemist.Alchemist&quot;\n}\n<\/code><\/pre>\n<p>This is sufficient to succesfully run the simulator. Open a terminal and move to the project root folder, then on UNIX:<\/p>\n<pre><code class=\"language-bash\">./gradlew runAlchemist\n<\/code><\/pre>\n<p>On Windows:<\/p>\n<pre><code>gradlew.bat runAlchemist\n<\/code><\/pre>\n<p>Note that the first launch will be rather slow, since Gradle will download all the required files. They will get cached in the user's home folder (as per Gradle normal behavior).<\/p>\n<h3 id=\"using-the-command-line-interface\">Using the Command Line Interface<\/h3>\n<p>To make the simulator do something for you (for instance, to make it run your own simulation) you can rely on the <a href=\"quickstart.md#command-line-interface\">command line interface<\/a>. The most common case is you want to run your own simulation. To do so, you can rely on the <code>-y<\/code> option followed by the path to the simulation file. Alchemist simulations are contained in *.yml files, more information about how to write such simulations can be found <a href=\"yaml.md\">here<\/a>. Let's say you want to run Alchemist with the following arguments:<\/p>\n<pre><code class=\"language-bash\">-y path/to/your/simulation.yml\n<\/code><\/pre>\n<p>You can do so in a couple of ways, of course this applies to every option you may want to launch the simulator with. You can explicit such options via command line when you run your custom task, using the <code>--args<\/code> option. So you will have something like this:<\/p>\n<pre><code class=\"language-bash\">./gradlew runAlchemist --args='-y path/to/your/simulation.yml'\n<\/code><\/pre>\n<p>Otherwise, if your options never change, you can explicit them in the body of your custom task, by adding the following line of code:<\/p>\n<pre><code class=\"language-kotlin\">args = listOf(&quot;-y&quot;, &quot;path/to/your/simulation.yml&quot;)\n<\/code><\/pre>\n<p>Ok, that's it. You should be able to use Alchemist via Gradle in your own project now, or at least have a clue.<\/p>\n"
            }]
          },
          "customization": {
            "ownKey": "customization",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "customization",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/customization"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "faq",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/faq"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "grid",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/grid"
              },
              "description": "",
              "title": "Writing custom components",
              "content": ""
            }]
          },
          "batch": {
            "ownKey": "batch",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "batch",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/batch"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "grid",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/grid"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "export",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/export"
              },
              "description": "",
              "title": "Executing batches",
              "content": "<p>Executing batches<\/p>\n"
            }]
          },
          "cognitive-agents": {
            "ownKey": "cognitive-agents",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "cognitive-agents",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/cognitive-agents"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "smartcam",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/smartcam"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "indoor",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/indoor"
              },
              "description": "",
              "title": "Using Cognitive Agents",
              "content": "<h3 id=\"prerequisites\">Prerequisites<\/h3>\n<p>This guide assumes you already know <a href=\"https://alchemistsimulator.github.io/latest/wiki/simulator/metamodel\">the Alchemist metamodel<\/a> and <a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/yaml\">how to write simulations in YAML<\/a>.<\/p>\n<h3 id=\"cognitive-agent\">Cognitive Agent<\/h3>\n<p>A cognitive agent is a pedestrian inside the simulation who has an emotional state thanks to it is able\nto influence and to be influenced by the other people with the same capabilities in the environment.<\/p>\n<h3 id=\"types-of-agent\">Types of Agent<\/h3>\n<p>The characteristics of the agents loadable in a simulation can be chosen from three available types,\neach representing a more refined version of the previous one.<\/p>\n<h4 id=\"homogeneous-pedestrian\">Homogeneous Pedestrian<\/h4>\n<p>Homogeneous pedestrians are a particular type of <em>Node<\/em> which have no peculiar characteristic each other.\nIt is the most common type of agent which can be load in a simulation.<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: Circle\n      parameters: [100, 0, 0, 20]\n    nodes:\n      type: HomogeneousPedestrian2D\n<\/code><\/pre>\n<h4 id=\"heterogeneous-pedestrian\">Heterogeneous Pedestrian<\/h4>\n<p>Heterogeneous pedestrians are <em>Nodes<\/em> who have a given sex and gender, based on which their speed, compliance\nand social attitudes are computed.\nThe kinds of age which can be used are: <em>child<\/em>, <em>adult<\/em>, <em>elderly<\/em>; alternatively you can specify the exact age as a number.\nThe kinds of sex available are: <em>male<\/em>, <em>female<\/em>.<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: Circle\n      parameters: [50, 0, 0, 20]\n    nodes:\n      type: HeterogeneousPedestrian2D\n      parameters: [&quot;elderly&quot;, &quot;female&quot;]\n  - in:\n      type: Circle\n      parameters: [50, 0, 0, 20]\n    nodes:\n      type: HeterogeneousPedestrian2D\n      parameters: [&quot;child&quot;, &quot;male&quot;]\n<\/code><\/pre>\n<h4 id=\"cognitive-pedestrian\">Cognitive Pedestrian<\/h4>\n<p>A cognitive pedestrian is the most refined type of agent currently present in Alchemist. It is an heterogeneous pedestrian\nwith cognitive capabilities.\nFor instance, cognitive pedestrians can perceive fear, not just directly but by contagion (seeing other people fleeing may make them flee as well).<\/p>\n<pre><code class=\"language-yaml\">reactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [1.0]\n    type: CognitiveBehavior\n\ndisplacements:\n  - in:\n      type: Circle\n      parameters: [50, 0, 0, 20]\n    nodes:\n      type: CognitivePedestrian2D\n      parameters: [&quot;adult&quot;, &quot;male&quot;]\n    programs:\n      - *behavior\n  - in:\n      type: Circle\n      parameters: [50, 0, 0, 20]\n    nodes:\n      type: CognitivePedestrian2D\n      parameters: [&quot;adult&quot;, &quot;female&quot;]\n    programs:\n      - *behavior\n<\/code><\/pre>\n<h3 id=\"groups\">Groups<\/h3>\n<p>It is likely that a pedestrian doesn't move on its own, but there is a group consisting of multiple people\nwhich are related each other and whose behaviors are strictly dependant on that structure.\nThe only way you can currently assign a group to a pedestrian is by creating it as a variable and passing it\nas a parameter when the <em>Nodes<\/em> created are of pedestrian type. If you don't specify any group in this phase,\nautomatically a new group of type Alone is assigned.<\/p>\n<p>The following simulation example loads two groups of homogeneous pedestrians representing friends around the center of the scene, one having 10 members and the other 15.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  group1: &amp;group1\n    formula: it.unibo.alchemist.model.implementations.groups.Friends&lt;Any&gt;()\n    language: kotlin\n  group2: &amp;group2\n    formula: it.unibo.alchemist.model.implementations.groups.Friends&lt;Any&gt;()\n    language: kotlin\n\ndisplacements:\n  - in:\n      type: Circle\n      parameters: [10, 0, 0, 20]\n    nodes:\n      type: HomogeneousPedestrian2D\n      parameters: [*group1]\n  - in:\n      type: Circle\n      parameters: [15, 0, 0, 20]\n    nodes:\n      type: HomogeneousPedestrian2D\n      parameters: [*group2]\n<\/code><\/pre>\n<h3 id=\"steering-actions\">Steering Actions<\/h3>\n<p>A pedestrian that doesn't move is not a pedestrian. The need of <em>Actions<\/em> which can make it move in a realistic way\ninside the environment lead to the creation of particular behaviors such as <em>Flee<\/em>, <em>Wander<\/em>, <em>FollowFlowField<\/em>, <em>ObstacleAvoidance<\/em>... <br />\nAs a potential part of a group, there must exist also some attitudes typical of this sort of formation such as <em>Cohesion<\/em> and <em>Separation<\/em>.\nThe creation of complex movements can be accomplished by combining different steering actions together. <br />\nThe only way currently available to do so, it is to use some <em>SteeringBehavior<\/em> extending <em>Reaction<\/em>, which can recognize, across all the actions specified, the steering ones\nto trait them in a separate way.<\/p>\n<p>In this simulation 50 people wander around the environment and if they are approaching an obstacle they avoid it.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nenvironment:\n  type: ImageEnvironment\n  parameters: [...]\n\nreactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [3.0]\n    type: PrioritySteering\n    actions:\n      - type: RandomRotate\n      - type: Wander\n        parameters: [6, 4]\n      - type: ObstacleAvoidance\n        parameters: [4]\n\ndisplacements:\n  - in:\n      type: Circle\n      parameters: [50, 0, 0, 25]\n    nodes:\n      type: HomogeneousPedestrian2D\n<\/code><\/pre>\n<h3 id=\"steering-strategies\">Steering Strategies<\/h3>\n<p>In order to decide the logic according to which the different steering actions must be combined,\nthe concept of steering strategy has been introduced and related to it different reactions are available to be used\nwith the aim of computing the desired route for the pedestrians.\nIf you want a pedestrian to execute a single steering action at a time, <em>PrioritySteering<\/em> is a reaction\nwhich gives relevance only to the steering action whose target point is the nearest to the current pedestrian position.\nIf you want a pedestrian to execute a movement considering multiple actions at a time, <em>BlendedSteering<\/em> weights them\nconsidering their target distance to the current pedestrian position.\nThere is no limit to the number of steering actions which can be used together but some messy compositions\ncan result in unpredictable behaviors, so pay attention.<\/p>\n<p>In the example below a pedestrian reaches a point of interest, avoiding in the meantime to approach another position.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nenvironment:\n  type: Continuous2DEnvironment\n\nreactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [1.0]\n    type: BlendedSteering\n    actions:\n      - type: Seek\n        parameters: [1000, 500]\n      - type: Flee\n        parameters: [500, -500]\n\ndisplacements:\n  - in:\n      type: Point\n      parameters: [0, 0]\n    nodes:\n      type: HomogeneousPedestrian2D\n    programs:\n      - *behavior\n<\/code><\/pre>\n<h3 id=\"evacuation-scenarios\">Evacuation Scenarios<\/h3>\n<p>Pedestrians can be loaded in any kind of <em>Environment<\/em> but it is recommended to use <em>PhysicsEnvironments<\/em> since they\nhave properties such as non-overlapping shapes which are advisable to be taken into consideration\nwhen working with a crowd.\nTo specify the existence of a potential danger or a significative zone in general inside the environment you can use <em>Layers<\/em>.\nEach layer is associated to a <em>Molecule<\/em> different from the one of all the others.\nYou must specify to any cognitive pedestrian the <em>Molecule<\/em> representing danger in the <em>Environment<\/em>,\notherwise it won't have the ability to recognize the presence of it.<\/p>\n<p>In the following example 100 adult females with cognitive capabilities get away from a zone in the environment where\nthere is a potential danger.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  danger: &amp;danger\n    formula: &quot;\\&quot;danger\\&quot;&quot;\n\nenvironment:\n  type: Continuous2DEnvironment\n\nlayers:\n  - type: BidimensionalGaussianLayer\n    molecule: *danger\n    parameters: [0.0, 0.0, 20.0, 15.0]\n\nreactions: &amp;behavior\n  - time-distribution:\n      type: DiracComb\n      parameters: [1.0]\n    type: PrioritySteering\n    actions:\n      - type: AvoidFlowField\n        parameters: [*danger]\n\ndisplacements:\n  - in:\n      type: Circle\n      parameters: [100, 0, 0, 50]\n    nodes:\n      type: CognitivePedestrian2D\n      parameters: [&quot;adult&quot;, &quot;female&quot;, *danger]\n    programs:\n      - *behavior\n<\/code><\/pre>\n<h3 id=\"further-references\">Further references<\/h3>\n<p><a href=\"https://doi.org/10.1007/978-3-319-70647-4_11\">C. Natalie van der Wal, Daniel Formolo, Mark A. Robinson, Michael Minkov, Tibor Bosse<br />\nSimulating Crowd Evacuation with Socio-Cultural, Cognitive, and Emotional Elements<br />\nTransactions on Computational Collective Intelligence XXVII. 2017.<\/a><\/p>\n<p><a href=\"http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.16.8035\">Craig W. Reynolds<br />\nSteering Behaviors for Autonomous Characters. 1999.<\/a><\/p>\n"
            }]
          },
          "run-stand-alone": {
            "ownKey": "run-stand-alone",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-stand-alone",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/run-stand-alone"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "yaml",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/yaml"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-gradle",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/run-gradle"
              },
              "description": "",
              "title": "Running Alchemist stand-alone",
              "content": "<p>Another way of running Alchemist is by using the redistributable jar file. However, using the simulator via <a href=\"https://gradle.org\">Gradle<\/a> is recommended. For further information, see how to <a href=\"run-gradle.md\">Run Alchemist via Gradle<\/a>.<\/p>\n<p>Such jar file can be downloaded from the <a href=\"https://github.com/AlchemistSimulator/Alchemist/releases\">releases section on github<\/a>.<\/p>\n<h2 id=\"running-alchemist\">Running Alchemist<\/h2>\n<p>If you got the redistributable, runnable Alchemist jar file, launching the simulator is straightforward. Open a terminal and move to the folder where the jar is located, then issue:<\/p>\n<pre><code class=\"language-bash\">java -jar alchemist-redist-VERSION.jar\n<\/code><\/pre>\n<p>Remember to substitute <code>VERSION<\/code> with the Alchemist version you actually have downloaded.<\/p>\n<h3 id=\"using-the-command-line-interface\">Using the Command Line Interface<\/h3>\n<p>To make the simulator do something for you (for instance, to make it run your own simulation) you can rely on the <a href=\"quickstart.md#command-line-interface\">command line interface<\/a>. Try to run the simulator with <code>-h<\/code> or <code>--help<\/code> option in order to get a list of the supported options:<\/p>\n<pre><code class=\"language-bash\">java -jar alchemist-redist-VERSION.jar -h\n<\/code><\/pre>\n<p>The most common case is you want to run your own simulation. To do so, you can rely on the <code>-y<\/code> option followed by the path to the simulation file. Alchemist simulations are contained in *.yml files, more information about how to write such simulations can be found <a href=\"yaml.md\">here<\/a>. So a typical command would be:<\/p>\n<pre><code class=\"language-bash\">java -jar alchemist-redist-VERSION.jar -y path/to/your/simulation.yml\n<\/code><\/pre>\n<h2 id=\"how-to-export-the-jar\">How to export the jar<\/h2>\n<p>Alchemist executable jar files can be generated at need, let's see how. As first step, use git to locally clone the <a href=\"https://github.com/AlchemistSimulator/Alchemist\">Alchemist repository<\/a>. Then, to generate the jar file you can rely on the <code>fatJar<\/code> gradle task. To run the task, point a terminal on the alchemist project's root, then on UNIX:<\/p>\n<pre><code class=\"language-bash\">./gradlew fatJar\n<\/code><\/pre>\n<p>On Windows:<\/p>\n<pre><code>gradlew.bat fatJar\n<\/code><\/pre>\n<p>As a result, an <code>alchemist-redist-{version}.jar<\/code> file will be generated in <code>build/libs/<\/code>. You can use it as described above.<\/p>\n"
            }]
          },
          "issues": {
            "ownKey": "issues",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "issues",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/issues"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "examples",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/examples"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "faq",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/faq"
              },
              "description": "",
              "title": "Troubleshooting and known issues",
              "content": "<p>A list of known issues which we are aiming to resolve is tracked <a href=\"https://github.com/AlchemistSimulator/Alchemist/issues\">on the Alchemist Github issue tracker<\/a>.\nOf course, contributions are welcome.<\/p>\n<p>Other issues you may experience are listed below.\nIf you run into other issues yourself, please report them.<\/p>\n<h3 id=\"graphical-glitches-on-the-swing-graphical-interface\">Graphical glitches on the Swing graphical interface<\/h3>\n<h4 id=\"problem-description\">Problem description<\/h4>\n<p>Under some combination of hardware and drivers, the Swing interface may render uncorrectly.\nThis is due to Alchemist using OpenGL as rendering backend for Swing, in order to increase performance.<\/p>\n<p>Examples of graphical glitches are the following:<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/issues/vbox-glitch-1.png\" alt=\"Graphical glitch example\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/issues/vbox-glitch-2.png\" alt=\"Graphical glitch example\" />\n<img src=\"https://alchemistsimulator.github.io/latest/assets/media/issues/vbox-glitch-3.png\" alt=\"Graphical glitch example\" /><\/p>\n<p>The issue has been reproduced on:<\/p>\n<ul>\n<li>Virtualbox-virtualized Ubuntu installation<\/li>\n<li>Old AMD APU for notebooks with open source radeon driver<\/li>\n<\/ul>\n<h4 id=\"solution\">Solution<\/h4>\n<p>In case you are using a virtualized environment, if you can do so, switch to the &quot;bare metal&quot; operating system.\nOtherwise, you can try to disable Swing OpenGL support by <a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/customization\">writing a custom component<\/a>\nwhich sets Swing non-accelerated mode, by invoking the following Java code:<\/p>\n<pre><code class=\"language-java\">System.setProperty(&quot;sun.java2d.opengl&quot;,&quot;false&quot;);\n<\/code><\/pre>\n<h3 id=\"writing-simulations\">Writing simulations<\/h3>\n<h4 id=\"use-of-formula-based-vars-as-the-basis-for-other-vars\">Use of formula-based vars as the basis for other vars<\/h4>\n<h4 id=\"can-i-use-formula-based-variables-for-other-variables\">Can I use formula-based variables for other variables?<\/h4>\n<p>Problem<\/p>\n<pre><code class=\"language-yaml\">variables:\n  episodes: &amp;episodes\n    formula: 5\n  episode: &amp;episode\n    min: 0\n    max: *episodes\n    step: 1\n    default: 0\n  learn: &amp;learn\n    formula: 'episode==episodes'\n<\/code><\/pre>\n<p>Error: <code>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Unable to convert {formula=5, name=episodes} to class java.lang.Number<\/code><\/p>\n<p>Solution<\/p>\n<pre><code class=\"language-yaml\">episodes: &amp;episodes 5\n\nvariables:\n  episodes:\n    formula: *episodes\n  episode: &amp;episode\n    min: 0\n    max: *episodes\n    step: 1\n    default: 0\n  learn: &amp;learn\n    formula: 'episode==episodes'\n<\/code><\/pre>\n"
            }]
          },
          "grid": {
            "ownKey": "grid",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "grid",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/grid"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "customization",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/customization"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "batch",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/batch"
              },
              "description": "",
              "title": "Grid computing support",
              "content": "<p>Grid computing support<\/p>\n"
            }]
          },
          "installation": {
            "ownKey": "installation",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "installation",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/installation"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "quickstart",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/quickstart"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "usage",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage"
              },
              "description": "",
              "title": "Requirements and installation",
              "content": "<p>Alchemist requires java 11+, if you don't have a Java Development Kit version 11+ installed we may recommend you to install the version of AdoptOpenJDK, which can be found <a href=\"https://adoptopenjdk.net/index.html?variant=openjdk11&amp;jvmVariant=hotspot\">here<\/a>. If you prefer, you can install it via <a href=\"https://github.com/shyiko/jabba\">Jabba<\/a> - a cross-platform Java Version Manager.<\/p>\n<p>For further information, the JDKs and environments tested <a href=\"https://travis-ci.org/AlchemistSimulator/Alchemist\">here<\/a> are those for which executing Alchemist is supported.<\/p>\n<h2 id=\"importing-alchemist\">Importing Alchemist<\/h2>\n<p>In this section you will be given information about how to import the Alchemist project in <a href=\"https://www.jetbrains.com/idea/\">IntelliJ IDEA<\/a> and <a href=\"https://www.eclipse.org/eclipseide/\">Eclipse<\/a>.<\/p>\n<h3 id=\"importing-in-intellij\">Importing in IntelliJ<\/h3>\n<h4 id=\"recommended-configuration\">Recommended configuration<\/h4>\n<p>Install the following plugins (use <kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>A<\/kbd>, then search for &quot;Plugins&quot;):<\/p>\n<ul>\n<li>From the main list:\n<ul>\n<li>Scala<\/li>\n<li>Kotlin<\/li>\n<\/ul>\n<\/li>\n<li>From &quot;Browse Repositories&quot;:\n<ul>\n<li><a href=\"https://plugins.jetbrains.com/plugin/7358-antlr-v4-grammar-plugin\">ANTLR v4 grammar plugin<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/1065-checkstyle-idea\">Checkstyle-IDEA<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/3847-findbugs-idea\">FindBugs-IDEA<\/a><\/li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/1137-pmdplugin\">PMDPlugin<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4 id=\"import-procedure\">Import procedure<\/h4>\n<ol start=\"0\">\n<li>Windows user should perform an additional first step: before cloning the repository, make sure that the autocrlf feature of git is disabled, by issuing <code>git config --global core.autocrlf false<\/code>. If the step is not performed, git will automatically insert CRLF line endings, violating the project's Checkstyle rules (which are rather strict, and prevent the build from succeeding).<\/li>\n<li>Clone this repository in a folder of your preference using <code>git clone<\/code> appropriately<\/li>\n<li>Open IntellJ. If a project opens automatically, select &quot;Close project&quot;. You should be on the welcome screen of IntelliJ idea, with an aspect similar to this image: <img src=\"https://www.jetbrains.com/help/img/idea/2018.2/ideaWelcomeScreen.png\" alt=\"IntelliJ Welcome Screen\" /><\/li>\n<li>Select &quot;Import Project&quot;<\/li>\n<li>Navigate your file system and find the folder where you cloned the repository. <strong>Do not select it<\/strong>. Open the folder, and you should find a lowercase <code>alchemist<\/code> folder. That is the correct project folder, not the outermost <code>Alchemist<\/code> folder (created by <code>git<\/code> in case you cloned without specifying a different folder name). Once the correct folder has been selected, click <kbd>Ok<\/kbd><\/li>\n<li>Select &quot;Import Project from external model&quot;<\/li>\n<li>Make sure &quot;Gradle&quot; is selected as external model tool<\/li>\n<li>Click <kbd>Finish<\/kbd><\/li>\n<li>If prompted to override any .idea file, try to answer <kbd>No<\/kbd>. It's possible that IntelliJ refuses to proceed, in which case click <kbd>Finish<\/kbd> again, then select <kbd>Yes<\/kbd>.<\/li>\n<li>A dialog stating that &quot;IntelliJ IDEA found a Gradle build script&quot; may appear, in such case answer <kbd>Import Gradle Project<\/kbd>.<\/li>\n<li>Wait for the IDE to import the project from Gradle. The process may take several minutes, due to the amount of dependencies. Should the synchronization fail, make sure that the IDE's Gradle is configured correctly:<\/li>\n<li>In 'Settings -&gt; Build, Execution, Deployment -&gt; Build Tools &gt; Gradle', for the option 'Use Gradle from' select 'gradle-wrapper.properties file'. Enabling auto-import is also recommended.<\/li>\n<li><strong>Important:<\/strong> Alchemist requires java 11+, so make sure the 'Gradle JVM' option points to such a version (if you don't have a JDK 11+ installed make sure to get one).<\/li>\n<li>Once imported, the project may still be unable to compile, due to missing sources in incarnation-biochemistry. This problem can be solved by opening the IntelliJ terminal (e.g. with <kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>A<\/kbd>, typing &quot;terminal&quot; and pressing <kbd>Enter<\/kbd>), and issue:<\/li>\n<\/ol>\n<ul>\n<li>*On Unix: * <code>./gradlew alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<li>*On Windows: * <code>gradlew.bat alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<\/ul>\n<h3 id=\"importing-in-eclipse\">Importing in Eclipse<\/h3>\n<h4 id=\"recommended-configuration-1\">Recommended configuration<\/h4>\n<ul>\n<li>Download [the latest Eclipse for Java][eclipse]. For a smooth import, Gradle Buildship is needed (starting from Eclipse Mars.1, it is included by default)\n<ul>\n<li>Arch Linux users can use the package <code>eclipse-java<\/code><\/li>\n<li>Ubuntu-based Linux users can install it using <a href=\"https://wiki.ubuntu.com/ubuntu-make\">ubuntu-make<\/a>:\n<pre><code class=\"language-bash\">sudo apt-add-repository ppa:ubuntu-desktop/ubuntu-make\nsudo apt-get update\nsudo apt-get install ubuntu-make\numake ide eclipse \n<\/code><\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>Install the Scala interpreter:\n<ul>\n<li>Arch Linux users can use the package <code>scala<\/code><\/li>\n<li>Ubuntu-based Linux users can use the package scala:\n<pre><code class=\"language-bash\">sudo apt-get update\nsudo apt-get install scala\n<\/code><\/pre>\n<\/li>\n<li>Users of other OS can follow the <a href=\"https://www.scala-lang.org/download/install.html\">official installation guide<\/a><\/li>\n<\/ul>\n<\/li>\n<li>Install the required eclipse plugins:\n<ul>\n<li>In Eclipse, click &quot;Help&quot; -&gt; &quot;Eclipse Marketplace...&quot;<\/li>\n<li>In the search field enter &quot;findbugs&quot;, then press Enter<\/li>\n<li>One of the retrieved entries should be &quot;FindBugs Eclipse Plugin&quot;, click Install<\/li>\n<li>Click &quot;&lt; Install More&quot;<\/li>\n<li>In the search field enter &quot;checkstyle&quot;, then press Enter<\/li>\n<li>One of the retrieved entries should be &quot;Checkstyle Plug-in&quot; with a written icon whose text is &quot;eclipse-cs&quot;, click Install<\/li>\n<li>Click &quot;&lt; Install More&quot;<\/li>\n<li>In the search field enter &quot;xtext&quot;, then press Enter<\/li>\n<li>One of the retrieved entries should be &quot;Eclipse Xtext&quot;, click Install<\/li>\n<li>Click &quot;&lt; Install More&quot;<\/li>\n<li>In the search field enter &quot;scala&quot;, then press Enter<\/li>\n<li>One of the retrieved entries should be &quot;Scala IDE 4.2.x&quot;, click Install<\/li>\n<li>Click &quot;Install Now &gt;&quot;<\/li>\n<li>Wait for Eclipse to resolve all the features<\/li>\n<li>Click &quot;Confirm &gt;&quot;<\/li>\n<li>Follow the instructions, accept the license, wait for Eclipse to download and install the product, accept the installation and restart the IDE<\/li>\n<li>When restarted, click &quot;Help&quot; -&gt; &quot;Install New Software...&quot;<\/li>\n<li>Click &quot;Add...&quot;<\/li>\n<li>In &quot;Location&quot; field, enter <code>https://dl.bintray.com/pmd/pmd-eclipse-plugin/updates/<\/code><\/li>\n<li>The &quot;Name&quot; field is not mandatory (suggested: &quot;PMD&quot;)<\/li>\n<li>Click OK.<\/li>\n<li>If not already selected, in &quot;Work with:&quot; dropdown menu choose the just added update site<\/li>\n<li>Select &quot;PMD for Eclipse 4&quot; and click next<\/li>\n<li>Follow the instructions, accept the license, wait for Eclipse to download and install the product, accept the installation and restart the IDE.<\/li>\n<\/ul>\n<\/li>\n<li>Set the line delimiter to LF (only for Windows users)\n<ul>\n<li>In Eclipse, click window -&gt; preferences<\/li>\n<li>In the search form enter &quot;encoding&quot;, then press Enter<\/li>\n<li>Go to General -&gt; Workspace<\/li>\n<li>In the section &quot;New text file line delimiter&quot; check &quot;Other&quot; and choose Unix<\/li>\n<li>Apply<\/li>\n<\/ul>\n<\/li>\n<li>Use space instead of tabs\n<ul>\n<li>In Eclipse, click window -&gt; preferences<\/li>\n<li>Go to General -&gt; Editors -&gt; Text Editors<\/li>\n<li>Check &quot;insert spaces for tabs&quot; option.<\/li>\n<li>Apply.<\/li>\n<li>Go to Java -&gt; Code style -&gt; Formatter<\/li>\n<li>Click Edit button<\/li>\n<li>In Indentation tab, under &quot;General Settings&quot;, set &quot;tab policy&quot; to &quot;Spaces only&quot;<\/li>\n<li>Apply (you should probably rename the formatter settings).<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4 id=\"import-procedure-1\">Import Procedure<\/h4>\n<ul>\n<li>\n<p>Install git on your system, if you haven't yet<\/p>\n<\/li>\n<li>\n<p>Pull up a terminal, and <code>cd<\/code> to the folder where you want the project to be cloned (presumably, your Eclipse workspace)<\/p>\n<\/li>\n<li>\n<p>Clone the project with <code>git clone git@github.com:AlchemistSimulator/alchemist.git<\/code><\/p>\n<ul>\n<li>If you are a Windows user, you might find easier to import via HTTPS: <code>git clone https://github.com/AlchemistSimulator/Alchemist.git<\/code><\/li>\n<li>If the cloning ends with <code>Permission denied (publickey)<\/code> error, please, follow <a href=\"https://help.github.com/articles/error-permission-denied-publickey/\">this<\/a> guide.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p>In terminal type <code>git branch<\/code>. This shows you all the branches. If you only have the master branch type <code>git branch -a<\/code> to see local and remote branches. For add a remote branch to your local repository type <code>git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;<\/code>. For switch between branches use <code>git checkout &lt;branch-name&gt;<\/code>.<\/p>\n<\/li>\n<li>\n<p>Open Eclipse<\/p>\n<\/li>\n<li>\n<p>Click File -&gt; Import -&gt; Gradle -&gt; Gradle Project -&gt; Next<\/p>\n<\/li>\n<li>\n<p>Select the project root directory, namely, the <code>alchemist<\/code> folder located inside the folder where you have cloned the repository. Do not point to the folder containing this <code>README.md<\/code> file, but to the <code>alchemist<\/code> folder on the same level.<\/p>\n<\/li>\n<li>\n<p>Next<\/p>\n<\/li>\n<li>\n<p>Make sure that &quot;Gradle wrapper (recommended)&quot; is selected<\/p>\n<\/li>\n<li>\n<p>Next<\/p>\n<\/li>\n<li>\n<p>Wait for Eclipse to scan the project, then make sure that the Gradle project structure can be expanded, and contains an external <code>alchemist<\/code> project and many <code>alchemist-*<\/code> subprojects. If it does not, you have pointed to the wrong folder while importing, go back and select the correct one.<\/p>\n<\/li>\n<li>\n<p>Finish<\/p>\n<\/li>\n<li>\n<p>When asked about the existing Eclipse configuration, select &quot;Keep&quot; (so that all the default development options are imported)<\/p>\n<\/li>\n<li>\n<p>The projects will appear in your projects list.<\/p>\n<\/li>\n<li>\n<p>Checkstyle, PMD and FindBugs should be pre-configured.<\/p>\n<\/li>\n<li>\n<p>If you have errors in <code>alchemist-incarnation-biochemistry<\/code> project open a terminal in alchemist folder (do not point to the folder containing this <code>README.md<\/code> file, but to the <code>alchemist<\/code> folder on the same level) and run:<\/p>\n<ul>\n<li>If you are a Linux or Mac user <code>./gradlew alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<li>If you are a Windows user: <code>gradlew.bat alchemist-incarnation-biochemistry:generateGrammarSource<\/code><\/li>\n<\/ul>\n<p>Go to Eclipse, right click on <code>alchemist-incarnation-biochemistry<\/code> project -&gt; Refresh<\/p>\n<\/li>\n<li>\n<p>If you have errors in <code>alchemist-projectview<\/code> project, make sure Eclipse Xtext plugin is correctly installed<\/p>\n<\/li>\n<\/ul>\n"
            }]
          },
          "biochemistry": {
            "ownKey": "biochemistry",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "biochemistry",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/biochemistry"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/protelis"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "gui",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/gui"
              },
              "description": "",
              "title": "Alchemist biochemistry incarnation",
              "content": "<p>Biochemistry is an incarnation of Alchemist developed to provide support for biochemical reactions that take place inside a biological cell or a group of those surrounded by a common environment.<\/p>\n<h3 id=\"the-biochemistry-incarnation\">The Biochemistry Incarnation<\/h3>\n<p>The Biochemistry incarnation provides a way to:<\/p>\n<ul>\n<li>Manage the creation, destruction and relocation of a molecule (which can be either a simple atom or a complex protein) inside a cell or from a cell to another<\/li>\n<li>Create junctions between cells using a specified amount of molecules. The junctions are modeled in a general way, but with a simple use of actions and conditions it will be possible to create tight junctions, anchoring junctions, gap junctions and even customized one<\/li>\n<li>Move a cell inside its environment in different ways, handling collisions between two ore more of them in a simplistic but effective way<\/li>\n<\/ul>\n<h3 id=\"how-to-run-a-simulation\">How To Run A Simulation<\/h3>\n<p>As first step, it is required to add this line of code in order to notice Alchemist to use the Biochemistry Incarnation:<\/p>\n<pre><code class=\"language-yaml\">incarnation: biochemistry\n<\/code><\/pre>\n<h2 id=\"the-biochemistry-dsl\">The Biochemistry DSL<\/h2>\n<p>Biochemistry programs are encapsulated inside the YAML configuration file with a simple and human-readable syntax.\nThose simple reactions can be written in the section <code>programs<\/code> of the configuration file, as value of the <code>program<\/code> key:<\/p>\n<pre><code class=\"language-yaml\">programs:\n  -\n    - time-distribution: 1\n      program: &quot;[ATP] --&gt; [ADP] + [P]&quot;\n<\/code><\/pre>\n<h3 id=\"reactions\">Reactions<\/h3>\n<p>A reaction rule can be set using the symbol <code>--&gt;<\/code> according to chemistry equations, and placing both the molecules and the actions inside two square brackets (ex. <code>[OH]<\/code>, <code>[H2O]<\/code>, <code>[BrownianMove(0.1)]<\/code>)<\/p>\n<p>The following line, so, represents a basic chemical reaction that happens inside a cell: <code>[H] + [OH] --&gt; [H2O]<\/code><\/p>\n<p>However, reactions can also take place outside the cell itself. Biological cells, indeed, can swap molecules with its neighbour or the surrounding environment, and this is possible in Alchemist too, using the keywords: <code>in cell<\/code>, <code>in neighbour<\/code> and <code>in env<\/code>.<\/p>\n<p>The reaction <code>[A in env] --&gt; [A in cell]<\/code> moves the molecule A from the environement inside the cell.<\/p>\n<p>If the location is not explicit, it is assumed the molecule to be inside the cell.<\/p>\n<h3 id=\"junctions\">Junctions<\/h3>\n<p>A junction can be created just with a neighbor of the programmed cell.<\/p>\n<p>The way to create it is with the syntax <code>[X] + [Y in neighbor] --&gt; [junction X-Y]<\/code>, which means that when this reaction happens a junction using the molecule <code>X<\/code> from the cell and the molecule <code>Y<\/code> from the neighbor will be created.<\/p>\n<p>The junction can also be destroyed using the syntax <code>[junction X-Y] --&gt; []<\/code>, causing the reintroduction of the molecule <code>X<\/code> inside the cell and the molecule <code>Y<\/code> inside the neighbor.<\/p>\n<p>Also, the junction will be automatically removed if, because of their movement, the cells will stop being in a neighborhood.<\/p>\n<h3 id=\"custom-conditions\">Custom Conditions<\/h3>\n<p>Any custom condition must be placed after the reaction products following an <code>if<\/code> clause.<\/p>\n<p>For example, to create a molecule if the cell has at least three neighbor you would write:<\/p>\n<p><code>[] --&gt; [X] if NumberOfNeighborsGreaterThan(5)<\/code><\/p>\n<h3 id=\"movement\">Movement<\/h3>\n<p>A movement can be performed in the same way of a reaction, using the function as it is a product of the reaction itself.<\/p>\n<p>This program constantly moves a cell without any other condition:<\/p>\n<p><code>[] --&gt; [BrownianMove(0.1)]<\/code><\/p>\n<h3 id=\"collisions\">Collisions<\/h3>\n<p>The Biochemistry Incarnation supports cell collisions and deformations too.<\/p>\n<p>In order to do that, however, you must set this environment:<\/p>\n<pre><code class=\"language-yaml\">environment:\n  type: BioRect2DEnvironmentNoOverlap\n<\/code><\/pre>\n<p>Then, when creating the cells, you must use these specific implementations:<\/p>\n<pre><code class=\"language-yaml\">nodes:\n  type: CircularDeformableCellImpl\n  parameters: [max-radius, rigidity]\n<\/code><\/pre>\n<p>The minimum radius of the cell is so that <code>min-radius = rigidity * max-radius<\/code> and the two parameters are used to compute collisions and impacts between the cells.<\/p>\n"
            }]
          },
          "scafi": {
            "ownKey": "scafi",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/scafi"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "indoor",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/indoor"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "sapere",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/sapere"
              },
              "description": "",
              "title": "Scafi",
              "content": "<p>Scafi<\/p>\n"
            }]
          },
          "smartcam": {
            "ownKey": "smartcam",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "smartcam",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/smartcam"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/maps"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "cognitive-agents",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/cognitive-agents"
              },
              "description": "",
              "title": "With Smart Cameras",
              "content": "<h3 id=\"prerequisites\">Prerequisites<\/h3>\n<p>This guide assumes you already know <a href=\"https://alchemistsimulator.github.io/latest/wiki/simulator/metamodel\">the Alchemist metamodel<\/a> and <a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/yaml\">how to write simulations in YAML<\/a>.<\/p>\n<h3 id=\"smartcam\">Smartcam<\/h3>\n<p>A smartcam is a camera able to detect objects of interest and to communicate with other smartcameras.\nIn many cases it is also assumed to be mounted on a drone as to be able to freely move around in the environment.\nIn Alchemist smartcams are simulated as <em>Nodes<\/em> equipped with specific <em>Reactions<\/em> defining their capabilities and behaviour.\nSingle capabilities are expressed as <em>Actions<\/em>.<\/p>\n<h4 id=\"vision\">Vision<\/h4>\n<p>The most basic example of a camera is a <em>Node<\/em> containing a <em>Reaction<\/em> with the <em>See<\/em> action. Note: the <em>See<\/em> action currently\nonly works in 2D environments supporting euclidean geometry, for example <em>Continuous2DEnvironment<\/em> and <em>Rectangular2DEnvironment<\/em>.\nThe <em>See<\/em> action requires 3 parameters to be defined in this order: the distance of the field of view, its angle in degrees,\nand the name of the <em>Molecule<\/em> which will contain the ouput, namely a list of the nodes contained in the field of view which is updated\neach time the action is triggered. Optionally a fourth parameter can be defined in order to filter the output. Such parameter is expected to\nbe the name of a <em>Molecule<\/em> which has to be contained in a <em>Node<\/em> for it to be visible, e.g. if it is &quot;wanted&quot; then only nodes containing\na molecule named &quot;wanted&quot; will be seen.<\/p>\n<h4 id=\"movement\">Movement<\/h4>\n<p>The ability to move can be defined using movement actions such as <em>MoveToTarget<\/em> or <em>FollowAtDistance<\/em>.\n<em>MoveToTarget<\/em> expects 2 parameters such as the name of the molecule containing the target's position and the movement speed.\n<em>FollowAtDistance<\/em> requires the name of the molecule containing the target's position, the distance to mantain from the target,\nand the movement speed.<\/p>\n<h4 id=\"rotation\">Rotation<\/h4>\n<p>The action <em>HeadTowardTarget<\/em> can be used to instruct cameras to always face the specified target, it requires\n2 parameters such as the name of the molecule containing the target's position and the angular speed in degrees.\nThe <em>Spin<\/em> action only requires the angular speed and will make the camera spin around itself like a radar.<\/p>\n<h4 id=\"algorithm\">Algorithm<\/h4>\n<p>Without defining an algorithm the cameras wouldn't do anything interesting. Algorithms can be definied in a moltitude of different\nways. Below there's an example of a basic algorithm defined only with <em>Reactions<\/em>, <em>Conditions<\/em> and <em>Actions<\/em>.\nIt is advisable to use real programming languages such as <a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/protelis\">Protelis<\/a> to write more elaborate algorithms.\nIn this regard you'd want to use the protelis incarnation, make cameras be <em>ProtelisNode<\/em>, and to make sure\nthat the input and output molecules' names of the actions match the ones used by the protelis program.<\/p>\n<h3 id=\"complete-example-of-a-simulation\">Complete example of a simulation<\/h3>\n<p>We start by writing a basic yaml configuration to place 20 potential targets and 10 cameras in a 400 x 400 rectangular environment:<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\ndisplacements:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n<\/code><\/pre>\n<p>Then we give cameras the ability to see other nodes. The <em>See<\/em> action requires the distance and angle of the field of view. Each time it is triggered, it writes all the nodes seen in the molecule <em>vision<\/em>.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n  CameraFoVAngle: &amp;CameraFoVAngle\n    formula: 60\n  CameraFoVDistance: &amp;CameraFoVDistance\n    formula: 20\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\nprograms:\n  - &amp;Camera\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: See\n          parameters: [*CameraFoVDistance, *CameraFoVAngle, vision]\n\ndisplacements:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n    programs:\n      - *Camera\n<\/code><\/pre>\n<p>In this example we make humans move randomly. We also want to randomly toggle a <em>wanted<\/em> molecule in them, as to have a way to mark interesting targets that needs to be followed by the cameras. Every 50 seconds each human has a 1% probability to become <em>wanted<\/em>.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  HumanSpeed: &amp;HumanSpeed\n    formula: 1\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n  CameraFoVAngle: &amp;CameraFoVAngle\n    formula: 60\n  CameraFoVDistance: &amp;CameraFoVDistance\n    formula: 20\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\nprograms:\n  - &amp;Human\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: ZigZagMove\n          parameters: [*HalfEnvironmentSize, *HumanSpeed]\n    - time-distribution: 0.02\n      type: ChemicalReaction\n      actions:\n        - type: RandomlyToggleMolecule\n          parameters: [wanted, true, 0.01]\n  - &amp;Camera\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: See\n          parameters: [*CameraFoVDistance, *CameraFoVAngle, vision]\n\ndisplacements:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n    programs:\n      - *Human\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n    programs:\n      - *Camera\n<\/code><\/pre>\n<p>It is time for cameras to identify <em>wanted<\/em> targets so we add a <em>ExtractClosestVisibleNodeAtDistance<\/em> action in order to select the closest node to the center of the field of view.\nWe also specify the <em>wanted<\/em> molecule in the <em>See<\/em> action in order to filter only the interesting nodes.\nThen, at the condition that a <em>target<\/em> is found, we want the cameras to start following it, so we add the actions <em>FollowAtDistance<\/em> and <em>HeadTowardTarget<\/em>.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  HumanSpeed: &amp;HumanSpeed\n    formula: 1\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n  CameraFoVAngle: &amp;CameraFoVAngle\n    formula: 60\n  CameraFoVDistance: &amp;CameraFoVDistance\n    formula: 20\n  CameraSpeed: &amp;CameraSpeed\n    formula: 1\n  CameraAngularSpeed: &amp;CameraAngularSpeed\n    formula: 3\n  CameraDistanceFromTarget: &amp;CameraDistanceFromTarget\n    formula: 2 * CameraFoVDistance / 3\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\nprograms:\n  - &amp;Human\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: ZigZagMove\n          parameters: [*HalfEnvironmentSize, *HumanSpeed]\n    - time-distribution: 0.02\n      type: ChemicalReaction\n      actions:\n        - type: RandomlyToggleMolecule\n          parameters: [wanted, true, 0.01]\n  - &amp;Camera\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: See\n          parameters: [*CameraFoVDistance, *CameraFoVAngle, vision, wanted]\n        - type: ExtractClosestVisibleNodeAtDistance\n          parameters: [*CameraDistanceFromTarget, vision, target]\n    - time-distribution: 1\n      type: ChemicalReaction\n      conditions:\n        - type: ContainsMolecule\n          parameters: [target]\n      actions:\n        - type: HeadTowardTarget\n          parameters: [target, *CameraAngularSpeed]\n        - type: FollowAtDistance\n          parameters: [target, *CameraDistanceFromTarget, *CameraSpeed]\n\ndisplacements:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n    programs:\n      - *Human\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n    programs:\n      - *Camera\n<\/code><\/pre>\n<p>To conclude, we want the cameras to explore randomly and spin when no targets are detected. For this purpose we add another reaction with a <em>Spin<\/em> and <em>ZigZagMove<\/em> and with an <em>Else<\/em> condition which will be triggered when the conditions of the other reactions are not valid.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n\nvariables:\n  HumanSpeed: &amp;HumanSpeed\n    formula: 1\n  NumHumans: &amp;NumHumans\n    formula: 20\n  NumCameras: &amp;NumCameras\n    formula: 10\n  EnvironmentSize: &amp;EnvironmentSize\n    formula: 400\n  HalfEnvironmentSize: &amp;HalfEnvironmentSize\n    formula: EnvironmentSize / 2\n  EnvironmentOrigin: &amp;EnvironmentOrigin\n    formula: -HalfEnvironmentSize\n  CameraFoVAngle: &amp;CameraFoVAngle\n    formula: 60\n  CameraFoVDistance: &amp;CameraFoVDistance\n    formula: 20\n  CameraSpeed: &amp;CameraSpeed\n    formula: 1\n  CameraAngularSpeed: &amp;CameraAngularSpeed\n    formula: 3\n  CameraDistanceFromTarget: &amp;CameraDistanceFromTarget\n    formula: 2 * CameraFoVDistance / 3\n\nenvironment:\n  type: Rectangular2DEnvironment\n  parameters: [*EnvironmentSize, *EnvironmentSize]\n\nprograms:\n  - &amp;Human\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: ZigZagMove\n          parameters: [*HalfEnvironmentSize, *HumanSpeed]\n    - time-distribution: 0.02\n      type: ChemicalReaction\n      actions:\n        - type: RandomlyToggleMolecule\n          parameters: [wanted, true, 0.01]\n  - &amp;Camera\n    - time-distribution: 1\n      type: ChemicalReaction\n      actions:\n        - type: See\n          parameters: [*CameraFoVDistance, *CameraFoVAngle, vision, wanted]\n        - type: ExtractClosestVisibleNodeAtDistance\n          parameters: [*CameraDistanceFromTarget, vision, target]\n    - time-distribution: 1\n      type: ChemicalReaction\n      conditions:\n        - type: ContainsMolecule\n          parameters: [target]\n      actions:\n        - type: HeadTowardTarget\n          parameters: [target, *CameraAngularSpeed]\n        - type: FollowAtDistance\n          parameters: [target, *CameraDistanceFromTarget, *CameraSpeed]\n    - time-distribution: 1\n      type: ChemicalReaction\n      conditions:\n        - type: Else\n          parameters:\n      actions:\n        - type: Spin\n          parameters: [*CameraAngularSpeed]\n        - type: ZigZagMove\n          parameters: [*HalfEnvironmentSize, *CameraSpeed]\n\ndisplacements:\n  - in: # possible targets\n      type: Rectangle\n      parameters: [*NumHumans, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: CircleNode\n      parameters: [1]\n    programs:\n      - *Human\n  - in: # cameras\n      type: Rectangle\n      parameters: [*NumCameras, *EnvironmentOrigin, *EnvironmentOrigin, *EnvironmentSize, *EnvironmentSize]\n    nodes:\n      type: ProtelisNode\n    programs:\n      - *Camera\n<\/code><\/pre>\n<h3 id=\"further-references\">Further references<\/h3>\n<p><a href=\"https://doi.org/10.1145/3131885.3131909\">Lukas Esterle, Peter R. Lewis<br />\nOnline Multi-object k-coverage with Mobile Smart Cameras<br />\nIn Proceedings of the International Conference on Distributed Smart Cameras (ICDSC). Nominated for best paper. 2017.<\/a><\/p>\n"
            }]
          },
          "faq": {
            "ownKey": "faq",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "faq",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/faq"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "issues",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/issues"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "customization",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/customization"
              },
              "description": "",
              "title": "Frequently Asked Questions",
              "content": "<h5 id=\"where-does-alchemist-find-stuff\">Where does Alchemist find stuff?<\/h5>\n<p>It uses <strong>default packages<\/strong>; e.g., for actions, it is <strong><code>it.unibo.alchemist.model.implementations.actions<\/code><\/strong>.\nIf you need to provide a type in the YAML and use another package, you must provide the FQCNs.<\/p>\n"
            }]
          },
          "indoor": {
            "ownKey": "indoor",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "indoor",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/indoor"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "cognitive-agents",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/cognitive-agents"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/scafi"
              },
              "description": "",
              "title": "Simulation of indoor environments",
              "content": "<p>In order to load map of indoor environment, you can use <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/environments/ImageEnvironment\">ImageEnvironment<\/a>.<\/p>\n<p>ImageEnvironment loads the map as raster image from file, interpreting the black pixels as obstacles\n(wall-like areas not accessible to nodes). Color of pixels that represents obstacles can be set to\nevery color with relative constructor's parameter, black color is only the default.<\/p>\n<p>In this example the image with the map is in the classpath in the folder <code>images<\/code>. Using a network-model\nlike <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/linkingrules/ObstaclesBreakConnection\">ObstaclesBreakConnection<\/a> the connections between nodes are created only if there\naren't obstacles between them. The nodes moves with a brownian move and never they moves across the walls.<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: ImageEnvironment\n  parameters: [images/foo.png]\n  \n  network-model: { type: ObstaclesBreakConnection, parameters: [100] }\n  \n  program-pools:\n    - move: &amp;move\n      - time-distribution: { type: ExponentialTime, parameters: [1] }\n        type: Event\n        actions:\n          - { type: BrownianMove, parameters: [1] }\n  displacements:\n    - in: { type: Circle, parameters: [100, 700, 700, 300] }\n      programs: \n        - *move\n<\/code><\/pre>\n<p>The following image is a snapshot of the previous simulation. It is possible see how there aren't link\nbetween nodes across walls.<\/p>\n<p><img src=\"https://alchemistsimulator.github.io/latest/assets/media/usage/indoor_simulation.png\" alt=\"Simulation result\" /><\/p>\n"
            }]
          },
          "gui": {
            "ownKey": "gui",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "gui",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/gui"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "biochemistry",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/biochemistry"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "yaml",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/yaml"
              },
              "description": "",
              "title": "Alchemist graphical interface",
              "content": "<p>The current, Swing-based graphical interface for Alchemist is being replaced by a new, JavaFX-based interface.\nThis page currently hosts minimal information on how to use such legacy GUI.<\/p>\n<h3 id=\"shortcuts\">Shortcuts<\/h3>\n<table>\n<thead>\n<tr><th>Key binding<\/th><th>Active<\/th><th>Effect<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td><kbd>L<\/kbd><\/td><td>always<\/td><td>(En/Dis)ables the painting of links between nodes<\/td><\/tr>\n<tr><td><kbd>M<\/kbd><\/td><td>always<\/td><td>(En/Dis)ables the painting of a marker on the closest node<\/td><\/tr>\n<tr><td><kbd>Mouse pan<\/kbd><\/td><td>in normal mode<\/td><td>Moves around<\/td><\/tr>\n<tr><td><kbd>Mouse wheel<\/kbd><\/td><td>in normal mode<\/td><td>Zooms in/out<\/td><\/tr>\n<tr><td><kbd>Double click<\/kbd><\/td><td>in normal mode<\/td><td>Opens a frame with the closest node information<\/td><\/tr>\n<tr><td><kbd>Right click<\/kbd><\/td><td>in normal mode<\/td><td>Enters screen rotation mode<\/td><\/tr>\n<tr><td><kbd>P<\/kbd><\/td><td>always<\/td><td>Plays/pauses the simulation<\/td><\/tr>\n<tr><td><kbd>R<\/kbd><\/td><td>always<\/td><td>Enables the real-time mode<\/td><\/tr>\n<tr><td><kbd>Left arrow<\/kbd><\/td><td>always<\/td><td>Speeds the simulation down (more calls to the graphics)<\/td><\/tr>\n<tr><td><kbd>Right arrow<\/kbd><\/td><td>always<\/td><td>Speeds the simulation up (less calls to the graphics)<\/td><\/tr>\n<tr><td><kbd>S<\/kbd><\/td><td>always<\/td><td>Enters / exits the select mode (nodes can be selected with the mouse)<\/td><\/tr>\n<tr><td><kbd>O<\/kbd><\/td><td>in select mode<\/td><td>Selected nodes can be moved by drag and drop<\/td><\/tr>\n<tr><td><kbd>E<\/kbd><\/td><td>in select mode<\/td><td>Enters edit mode (to manually change node contents)<\/td><\/tr>\n<\/tbody>\n<\/table>\n"
            }]
          },
          "export": {
            "ownKey": "export",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "export",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/export"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "batch",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/batch"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "maps",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/maps"
              },
              "description": "",
              "title": "Exporting data",
              "content": "<h2 id=\"defining-exported-data\">Defining exported data<\/h2>\n<p>Data expected as output can be exported by telling Alchemist what to log, and by passing to the executable information\non where to export.<\/p>\n<p>The <code>export<\/code> section lists which simulation values are exported into the <code>folder<\/code> specified with the <code>-e path/to/folder<\/code>\nargument.<\/p>\n<h3 id=\"aggregating-data\">Aggregating data<\/h3>\n<p>Data aggregators are statistically univariate.\nValid aggregation functions must extend <a href=\"http://commons.apache.org/proper/commons-math/javadocs/api-3.4/org/apache/commons/math3/stat/descriptive/AbstractStorelessUnivariateStatistic.html\">AbstractStorelessUnivariateStatistic<\/a>.<\/p>\n<p><strong>Examples<\/strong><\/p>\n<pre><code class=\"language-yaml\">export:\n  # Time step of the simulation\n  - time\n  # Number of nodes involved in the simulation\n  - number-of-nodes\n  # Molecule representing an aggregated value\n  - molecule: danger\n    aggregators: [sum]\n<\/code><\/pre>\n<h3 id=\"filtering-unwanted-values\">Filtering unwanted values<\/h3>\n<p>TODO<\/p>\n"
            }]
          },
          "protelis": {
            "ownKey": "protelis",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/protelis"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "sapere",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/sapere"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "biochemistry",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/biochemistry"
              },
              "description": "",
              "title": "Alchemist Protelis incarnation",
              "content": "<p>[Protelis][Protelis], from the Latin word figuratively meaning &quot;regarding a team&quot;, is a language targeting the aggregate of devices rather than the single one.\nIt has been developed on the solid foundation of [Field Calculus][Field Calculus], a theoretical model of aggregate programming, and it is written and interoperable with Java.<\/p>\n<h3 id=\"learning-protelis\">Learning Protelis<\/h3>\n<p>The language and all the machinery of Protelis are out of the scope of this tutorial. However, we warmly recommend to read [this paper][protelis paper] first, and then to deepen your knowledge of Protelis by reading the resources available in [the official Protelis website][Protelis].<\/p>\n"
            }]
          },
          "sapere": {
            "ownKey": "sapere",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "sapere",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/sapere"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "scafi",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/scafi"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "protelis",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/protelis"
              },
              "description": "",
              "title": "Alchemist SAPERE incarnation",
              "content": "<p>The SAPERE incarnation for Alchemist was the first stable incarnation produced for the simulator.\nIt was developed in the context of the <a href=\"http://archive.ph/umlcC\">SAPERE EU project<\/a>.<\/p>\n<p>At the core of <a href=\"https://doi.org/10.1016/j.pmcj.2014.12.002\">SAPERE<\/a> was the concept of <em>Live Semantic Annotation<\/em> (LSA),\nnamely a description of a resource (sensor, service, actuator...) always mapping the current resource status\n(somewhat a prelude to the currently famous <a href=\"http://archive.ph/YR1v9\">digital twin<\/a> concept).<\/p>\n<p>These annotations evolve following so-called <em>Eco-Laws<\/em>,\nmimicking the complex behaviours of natural ecosystems.<\/p>\n<p>The SAPERE approach fostered subsequent approaches, such as <a href=\"https://doi.org/10.1109/MC.2015.261\">aggregate computing<\/a>.<\/p>\n<h2 id=\"live-semantic-annotations\">Live Semantic Annotations<\/h2>\n<p>An LSA as modeled in Alchemist is a tuple of values.\nThese tuples can be injected in nodes as data items.\nFrom the point of view of <a href=\"https://alchemistsimulator.github.io/latest/wiki/simulator/metamodel\">the Alchemist metamodel<\/a>,\nthe concept of <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/Molecule\">Molecule<\/a> is mapped to <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/molecules/LsaMolecule\">LSA<\/a>.\nAs a consequence, LSAs can be inserted in nodes.\nFor instance, the following code creates an irregular grid of devices,\nof which those located around the center of such grid contain the tuple <code>{ token }<\/code>:<\/p>\n<script src=\"https://gist-it.appspot.com/github/AlchemistSimulator/SAPERE-incarnation-tutorial/blob/master/src/main/yaml/05-content.yml\"><\/script>\n<p>The relevant part here is <code>molecule: token<\/code>.\nIf we wanted to inject the tuple <code>{ foo, 1, bar, 2 }<\/code>, we could have written <code>molecule: foo, 1, bar, 2<\/code>.<\/p>\n<h3 id=\"ground-lsa-syntax\">Ground LSA syntax<\/h3>\n<pre><code>GroundLSA ::= GroundArgument (',' GroundArgument)*\nGroundArgument ::= Number | Atom | Set\nAtom ::= [a-z]([a-z]|[A-Z]|[0-9])*\nNumber ::= [0-9]+('.'[0-9]*)\nSet ::= '[' ((Atom | Number)';')* ']'\n<\/code><\/pre>\n<p>LSAs, similarly to Prolog terms, support <a href=\"http://archive.ph/oLSpq\">unification and substitution<\/a>:\nit is possible to create tuple templates,\nmatch them against sets of ground tuples,\nand obtain a matching ground tuple as result.<\/p>\n<p>A tuple argument is considered a variable if it begins with an uppercase letter.\nAdditionally, it is possible to discard some matches by expressing constraints on values.<\/p>\n<h3 id=\"lsa-syntax\">LSA Syntax<\/h3>\n<pre><code>LSA ::= '{' GroundLSA | TemplateLSA '}'\nTemplateLSA ::= Argument (',' Argument)*\nArgument ::= GroundArgument | Variable | Constraint\nVariable ::= [A-Z]([a-z]|[A-Z]|[0-9])*\nConstraint ::= 'def:' Variable Operation\nOperation ::= ('&gt;'|'&gt;'|'='|'!=') Number | 'add ' Variable | 'del ' Variable\n<\/code><\/pre>\n<h2 id=\"eco-laws\">Eco-Laws<\/h2>\n<p>Tuple matching is used to define <em><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/reactions/SAPEREReaction\">Eco-Laws<\/a><\/em>.\nAn Eco-Law is a rewriting rule very similar in concept to chemical reactions:\nelements on the left-hand side of the reaction are removed from the container,\nelements on the right hand side are inserted instead.<\/p>\n<p>The following program matches LSAs with two arguments, the former must be <code>foo<\/code>,\nthe latter a number greater than <code>30<\/code>, and produces in a new tuple having as first element <code>bar<\/code> and as second\nthe opposite of the matched number:<\/p>\n<p><code>{ foo, def: N &gt; 30 } --&gt; { bar, -N }<\/code><\/p>\n<p>Nodes can be programmed with Eco-Laws as follows:<\/p>\n<script src=\"https://gist-it.appspot.com/github/AlchemistSimulator/SAPERE-incarnation-tutorial/blob/master/src/main/yaml/06-send.yml\"><\/script>\n<h3 id=\"sharing\">Sharing<\/h3>\n<p>Eco-Laws can be programmed to send LSAs to neighbors, as well as to look into neighboring nodes for getting LSAs.\nIn order to do so, the LSA template in the Eco-Law must be preceded by a neighbor operator, either <code>+<\/code> or <code>*<\/code>.<\/p>\n<p><code>+<\/code> means <em>in a neighbor<\/em>:\nif used on the left hand side,\nit considers the condition satisfied if at least one neighbor has at least one LSA matching the provided template;\nif used on the right hand side,\nsends the LSA to one random neighbor.<\/p>\n<p><code>*<\/code> means <em>in all neighbors<\/em>:\nif used on the left hand side,\nit considers the condition satisfied if all neighbors have at least one LSA matching the provided template;\nif used on the right hand side,\nsends a copy of the LSA to all neighbors.<\/p>\n<p>The following code exemplifies a diffusion program:\nwhen <code>{ token }<\/code> is present locally, it is copied into neighboring nodes once per second;\nand as soon as two copies of <code>{ token }<\/code> are present, one gets removed.<\/p>\n<script src=\"https://gist-it.appspot.com/github/AlchemistSimulator/SAPERE-incarnation-tutorial/blob/master/src/main/yaml/09-diffuse.yml\"><\/script>\n<h3 id=\"eco-laws-syntax\">Eco-Laws syntax<\/h3>\n<h3 id=\"rates\">Rates<\/h3>\n<p>The time distribution with which reactions should get scheduled can be controlled by thinkering with the yaml specification\nas per every reaction in Alchemist.\nIf no <a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/interfaces/TimeDistribution\">time distribution<\/a> is specified,\nthe Eco-Law is assumed to run &quot;as soon as possible&quot; (ASAP).<\/p>\n<p>This may lead to unwanted behaviour.\nFor instance, programming a single node with:\n<code>--&gt; { foo }<\/code>\nwill cause the simulation to schedule a reaction producing <code>{ foo }<\/code> at time zero,\nand at each execution the time will remain zero:\nthe simulator will be producing copies over copies of the tuple,\nnever advancing in time (Alchemist is a discrete event simulator),\nand possibly going on until the JVM memory limit is reached.<\/p>\n<p>If a number is specified as time distribution, using the <code>time-distribution<\/code> key,\nthen it will be interpreted as the <a href=\"https://en.wikipedia.org/wiki/Markov_chain\">Markovian rate<\/a>\nof an <a href=\"https://en.wikipedia.org/wiki/Exponential_distribution\">exponentially distributed time<\/a>.<\/p>\n<p><a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/timedistributions\">Other distributions<\/a> can be used leveraging the <code>type<\/code>/<code>parameters<\/code> syntax.<\/p>\n<p>In the following example, two Eco-Laws are configured, and one of them is bound to an\n<a href=\"https://alchemistsimulator.github.io/latest/it/unibo/alchemist/model/implementations/timedistributions/ExponentialTime\">exponentially distributed time<\/a> with rate 1, namely, such reaction,\nwhen executable (the left hand LSAs have local matches), will execute at an average of once per second\n(with a variance of 1 s²).<\/p>\n<script src=\"https://gist-it.appspot.com/github/AlchemistSimulator/SAPERE-incarnation-tutorial/blob/master/src/main/yaml/06-send.yml\"><\/script>\n<h2 id=\"tutorial-and-exercises\">Tutorial and exercises<\/h2>\n<p>To better grasp details of the incarnation, we recommend looking at the examples available on\n<a href=\"https://github.com/AlchemistSimulator/SAPERE-incarnation-tutorial\">the Alchemist SAPERE Incarnation tutorial on GitHub<\/a>.<\/p>\n<p>Besides examples with growing complexity,\nthere are a number of proposed exercises that should help you getting acquainted with the SAPERE way of writing self-organizing behaviors.<\/p>\n"
            }]
          },
          "yaml": {
            "ownKey": "yaml",
            "ownPages": [{
              "reference": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "yaml",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/yaml"
              },
              "next": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "gui",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/gui"
              },
              "previous": {
                "path": "wiki/usage",
                "baseUrl": "https://alchemistsimulator.github.io/latest",
                "fileName": "run-stand-alone",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://alchemistsimulator.github.io/latest/wiki/usage/run-stand-alone"
              },
              "description": "",
              "title": "Writing Alchemist simulations",
              "content": "<p>As a first step, we recommend learning the YAML basics.\nThe language is so simple and human readable that there is probably no better way to learn it than to read it directly.\nMy suggestion is to use the tutorial &quot;<a href=\"https://learnxinyminutes.com/docs/yaml/\">Learn X in Y minutes where X = YAML<\/a>&quot;,\nit should provide a good YAML guide (surely sufficient to follow the tutorial).<\/p>\n<p>Alchemist expects a YAML map as input. In the following section, we'll discuss which keys it expects.\nOf course, users are free to use all the YAML features (e.g. anchors) to organize their code and reduce duplication.<\/p>\n<h2 id=\"choosing-an-incarnation\">Choosing an incarnation<\/h2>\n<p>The <code>incarnation<\/code> key is mandatory.\nActually, it's the only mandatory key.\nThe YAML parser expects a string value.\nSuch string will be used to get the most similarly named incarnation, namely the subclass of Incarnation whose simple\nname is closest to the string.<\/p>\n<p><strong>Examples<\/strong><\/p>\n<pre><code class=\"language-yaml\">incarnation: sapere\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: protelis\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: biochemistry\n<\/code><\/pre>\n<p><em>Note:<\/em> this is also the most minimal valid alchemist specification<\/p>\n<h2 id=\"loading-arbitrary-java-classes-with-the-typeparameters-syntax\">Loading arbitrary Java classes with the <code>type<\/code>/<code>parameters<\/code> syntax<\/h2>\n<p>One important aspect of the Alchemist YAML is the ability to let the user control which actual Java classes should be\nloaded inside a simulation, and which constructor should be used to do so.\nAlmost every entity of an Alchemist simulation can be instanced using arbitrary Java classes that implement the required\ninterfaces.\nWhen the alchemist YAML parser encounters a YAML Map providing the keys <code>type<\/code> and <code>parameters<\/code>, it tries to resolve the\nvalue of the value associated to <code>type<\/code> to a class name, then tries to create the object by calling the constructor with\nparameters most suited to the value of <code>parameters<\/code>.<\/p>\n<p><strong>Class name resolution<\/strong><\/p>\n<p>The value associated with <code>type<\/code> must be a string representing a valid Java identifier.\nIf the value contains one or more <code>.<\/code> characters, then it will be interpreted as a fully qualified name.\nIf no such character is included, then <em>the default package for the desired alchemist entity will be prefixed<\/em>.\nAlchemist won't ever attempt to load a class situated in the default package (so don't put your classes there, it's a\nbad practice anyway).<\/p>\n<p><strong>Object instancing<\/strong><\/p>\n<p>If the class gets loaded correctly (meaning if a class is present in the classpath with the fully qualified name,\nwhether it was passed or guessed by Alchemist), then its constructors get sorted based on the number and type of\nparameters.\nThe system tries to build an object with all the available constructors until one of them provides an instanced object,\nin an order that considers both the current context (namely, the entities that have already been instanced) and the\nvalue of <code>parameters<\/code>.<\/p>\n<p>For instance, imagine that you are trying to build an instance of a {{ anchor('Reaction') }}, whose only constructor requires an\n{{ anchor('Environment') }}, a {{ anchor('Node') }}, an <code>int<\/code> and a <code>String<\/code>.\nIn this case, an Environment and a Node must have already been created (or the YAML loader won't be at this point).\nAs a consequence, the first two parameters are automatically inferred by the current context and passed to the constructor.\nThe other two parameters can not be inferred this way; instead, the value associated to <code>parameters<\/code> is used to extract the proper values (if possible).\nIn this case, this would have been a valid <code>parameters<\/code> entry:<\/p>\n<pre><code class=\"language-yaml\">type: my.package.MyCustomReaction\nparameters: [4, foo]\n<\/code><\/pre>\n<p>As you can easily infer, the value of <code>parameters<\/code> must be a YAML list.<\/p>\n<p>Don't despair if the class loading system is still unclear: it is used pervasively and it will become clearer with the examples in the next sections.<\/p>\n<h2 id=\"setting-up-the-environment\">Setting up the environment<\/h2>\n<p>The <code>environment<\/code> key is used to load the {{ anchor('Environment') }} implementation.\nIt is optional and it defaults to a {{ anchor('continuous bidimensional space', 'Continuous2DEnvironment') }}.\nIf no fully qualified environment name is provided for class loading, Alchemist uses the package\n{{ anchor('it.unibo.alchemist.model.implementations.environments') }} to search for the class.<\/p>\n<h3 id=\"examples\">Examples<\/h3>\n<p>The following simulations are equivalent, and load the default environment (which is incarnation independent, here\n<code>protelis<\/code> is picked, but it works for any other incarnation as well):<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: Continuous2DEnvironment\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: it.unibo.alchemist.model.implementations.environments.Continuous2DEnvironment\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: Continuous2DEnvironment\n  parameters: []\n<\/code><\/pre>\n<p>{{ anchor('OSMEnvironment') }} allows for running simulations over real world maps. The following simulation\nloads data from an Openstreetmap file (OSM, XML and PBF formats are supported) located in the classpath in the folder\n<code>maps<\/code>:<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: OSMEnvironment\n  parameters: [maps/foo.pbf]\n<\/code><\/pre>\n<p>{{ anchor('ImageEnvironment') }} loads data from a black and white raster image file (in this example, located in the\nclasspath in the folder <code>images<\/code>), interpreting the black pixels as obstacles (areas that cannot be accessed by nodes):<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: ImageEnvironment\n  parameters: [images/foo.png]\n<\/code><\/pre>\n<p>Finally, if you write your own custom class named <code>my.package.FooEnv<\/code> implementing {{ anchor('Environment') }}, whose\nconstructor requires a String and a double, you can use it in the simulator by writing, for instance:<\/p>\n<pre><code class=\"language-yaml\">incarnation: protelis\nenvironment:\n  type: my.package.FooEnv\n  parameters: [bar, 2.2]\n<\/code><\/pre>\n<p>The environments shipped with the distribution can be found in the package\n{{ anchor('it.unibo.alchemist.model.implementations.environments') }}.<\/p>\n<h2 id=\"declaring-variables\">Declaring variables<\/h2>\n<p>The <code>variables<\/code> section lists variable simulation values.\nA variable defines some kind of value that can be referenced in the simulation file.<\/p>\n<p>There are two kinds of variables: free and dependent variables.\nThe difference is that variables of the latter kind can always be computed given the values of all the other variables.<\/p>\n<h3 id=\"free-variables\">Free variables<\/h3>\n<p>Free variables define a set of values and a default.\nThe value set is used to define the batch matrix, i.e., if the variable is selected for a batch, all its value are\nincluded in the cartesian product that determines which simulations are to be executed.\nIf the simulation is not executed as batch, then the default value is used<\/p>\n<h4 id=\"linear-variables\">Linear variables<\/h4>\n<h4 id=\"geometric-variables\">Geometric variables<\/h4>\n<h4 id=\"arbitrary-valued-variables\">Arbitrary-valued variables<\/h4>\n<pre><code class=\"language-yaml\">variables:\n  myvar: &amp;myvar\n    type: ArbitraryVariable\n    parameters: [&quot;defaultValue&quot;, [&quot;value1&quot;,&quot;value2&quot;,&quot;value3&quot;]]\n<\/code><\/pre>\n<h3 id=\"dependent-variables\">Dependent variables<\/h3>\n<p>Some variables are combination of free parameters.\nLet's suppose that we want to deploy on a circle, but for some reason (e.g. because it is required by the constructor of some action) we need to compute and have available radius and perimeter.\nWe don't need to control both of them: the perimeter can be computed.\nAlchemist provides support for performing computation over variables.\nLet's first define our radius.\nWe want it to be a free variable, ranging geometrically from 0.1 to 10 in nine steps, and defaulting to 1.<\/p>\n<pre><code class=\"language-yaml\">variables:\n  radius: &amp;radius\n    type: GeometricVariable\n    parameters: [1, 0.1, 10, 9]\n<\/code><\/pre>\n<p>Now we want to compute the diameter.\nWe can do so by using the <code>formula<\/code> syntax:<\/p>\n<pre><code class=\"language-yaml\">variables:\n  radius: &amp;radius\n    type: GeometricVariable\n    parameters: [1, 0.1, 10, 9]\n  diameter: &amp;diam\n    formula: Math.PI * 2 * radius\n<\/code><\/pre>\n<p>How does it work?\nAlchemist feeds the formula String to an interpreter and takes the result of the interpretation.\nBy default, <a href=\"https://groovy-lang.org/\">Groovy<\/a> is used as language to interpret the formula, but other languages can be used.<\/p>\n<p>Variables can be defined in any order.\nAlchemist figures out the dependencies automatically, as far as there are no cyclic dependencies (e.g. variable <code>a<\/code> requires <code>b<\/code>, and <code>b<\/code> requires <code>a<\/code>).\nPlease note that the simulator variable dependency resolution system is not designed to solve mathematical systems,\nso even though the problem has a well formed mathematical solution the actual variable resolution may fail;\ne.g. if <code>a<\/code> is defined as <code>2 * b + 1<\/code>, and <code>b<\/code> is defined as <code>4 - a<\/code>, the system <strong>won't<\/strong> bind <code>a<\/code> to <code>3<\/code> and <code>b<\/code> to <code>1<\/code>,\nbut will simply fail complaining about circular dependencies.<\/p>\n<h3 id=\"using-different-languages\">Using different languages<\/h3>\n<p>In order to use a language different than Groovy, the user may specify it explicitly by using the <code>language<\/code> keyword.\nFor example, Scala can be used:<\/p>\n<pre><code class=\"language-yaml\">variables:\n  radius: &amp;radius\n    type: GeometricVariable\n    parameters: [1, 0.1, 10, 9]\n  diameter: &amp;diam\n    formula: Math.PI * 2 * radius\n    language: scala\n<\/code><\/pre>\n<p>Or Kotlin:<\/p>\n<pre><code class=\"language-yaml\">variables:\n  radius: &amp;radius\n    type: GeometricVariable\n    parameters: [1, 0.1, 10, 9]\n  diameter: &amp;diam\n    formula: listOf(Math.PI, 2.0, 0.3).fold(1.0) { a, b -&gt; a * b  }\n    language: kotlin\n<\/code><\/pre>\n<p>The system is <a href=\"http://archive.fo/PGdk8\">JSR-233<\/a>-compatible, as such, every language with a valid JSR-233 implementation could be used.\nThe only requirement for the language to be available is the availability in the runtime classpath of a JSR-233 compatible version of the desired language.\nIf Alchemist is being used (as recommended) in conjunction with Gradle, and you want to embed your favorite JSR-233 compatible scripting language, you should have a dependency declaration similar to:<\/p>\n<pre><code class=\"language-kotlin\">dependencies {\n    ...\n    runtimeOnly(&quot;my.favorite.scripting.language:supporting-jsr233:0.1.0&quot;)\n    ...\n}\n<\/code><\/pre>\n<p>For instance, Alchemist supports Kotlin and Groovy natively by simply providing in its <code>build.gradle.kts<\/code> something similar to:<\/p>\n<pre><code class=\"language-kotlin\">dependencies {\n    ...\n    runtimeOnly(&quot;org.codehaus.groovy:groovy-jsr223:2.5.7&quot;)\n    runtimeOnly(&quot;org.jetbrains.kotlin:kotlin-scripting-jsr223-embeddable:1.3.40&quot;)\n    runtimeOnly(&quot;org.jetbrains.kotlin:kotlin-script-runtime:1.3.40&quot;)\n    runtimeOnly(&quot;org.jetbrains.kotlin:kotlin-script-util:1.3.40&quot;)}\n    ...\n<\/code><\/pre>\n<p>Alchemist provides a number of ready-to use interpreters. Besides Groovy (used by default) it includes:<\/p>\n<ul>\n<li><a href=\"https://www.scala-lang.org/\">Scala<\/a><\/li>\n<li><a href=\"https://kotlinlang.org/\">Kotlin<\/a><\/li>\n<\/ul>\n<p>Moreover, several implementations of the Java Virtual Machine feature internal interpreters for\n<a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMAScript<\/a>/\n<a href=\"https://en.wikipedia.org/wiki/JavaScript\">Javascript<\/a>.\nIn case they are provided, such engines can be used without any additional effort.\nJavascript used to be the default for Alchemist, but it has been replaced by Groovy since\n<a href=\"https://openjdk.java.net/jeps/335\">Nashorn, the interpreter embedded in OpenJDK, is deprecated<\/a>.<\/p>\n<h4 id=\"multiline-programs\">Multiline programs<\/h4>\n<p>Sometimes data manipulation can get tricky and trivial scripting may no longer be enough.\nIn such cases, and especially with modern languages that allow for a reduced usage of cerimonial semicolons (such as Kotlin and Scala), it can be useful to write multiline programs.\nThis can be achieved in YAML by using the pipe <code>|<\/code> operator, as exemplified in the following snippet:<\/p>\n<pre><code class=\"language-yaml\">variables:\n  a:\n    formula: 22 + 1\n    language: kt\n  test:\n    formula: |\n      import com.google.common.reflect.TypeToken\n      import com.google.gson.Gson\n      Gson().fromJson&lt;Map&lt;String, List&lt;List&lt;List&lt;Double&gt;&gt;&gt;&gt;&gt;(\n          ClassLoader.getSystemResourceAsStream(&quot;explorable-area.json&quot;)?.reader(),\n          object: TypeToken&lt;Map&lt;String, List&lt;List&lt;List&lt;Double&gt;&gt;&gt;&gt;&gt;() {}.type\n      )\n      .get(&quot;coordinates&quot;)!!\n      .first()\n      .map { Pair(it.last(), it.first()) }\n    language: kotlin\n<\/code><\/pre>\n<p>If the string begins with a <code>|<\/code>, its contents preserve newlines, thus allowing for multiline scripts of arbitrary complexity.<\/p>\n<h4 id=\"known-issues\">Known issues<\/h4>\n<p>Alchemist exploit JSR-233's variable binding system to let the scripts use variables defined elsewhere.\nNot all languages support this system properly.\nIn particular, Kotlin does not (yet) support variable injection and requires a workaround.\nIn order for a script to access a variable named <code>myVar<\/code>, the programmer should write instead <code>bindings[&quot;myVar&quot;]<\/code>.\nThe issue is being tracked as <a href=\"https://youtrack.jetbrains.com/issue/KT-15125\">KT-15125<\/a>.\nOnce it gets solved (if ever), and as soon as Alchemist incorporates the version of Kotlin including the fix,\nthe workaround will no longer be necessary.<\/p>\n<h3 id=\"using-variables\">Using variables<\/h3>\n<h2 id=\"controlling-the-reproducibility\">Controlling the reproducibility<\/h2>\n<p>Alchemist simulations can be reproduced by feeding them the same random number generator.\nThis assumption is true as far as the custom component in use:<\/p>\n<ul>\n<li>do not use any other random generator but the one provided by the simulation framework<\/li>\n<li>do not iterate over collections with no predicible iteration order (i.e., <code>Set<\/code> and <code>Map<\/code>) containing elements (or\nkeys) whose <code>hashCode()<\/code> has not been overridden to return the same value regardless of the specific JVM in use.<\/li>\n<li>do not run operations in parallel<\/li>\n<\/ul>\n<p>The <code>seeds<\/code> section may contain two optional values: <code>scenario<\/code> and <code>simulation<\/code>.\nThe former is the seed of the pseudo-random generator used during the creation of the simulation, e.g. for displacing\nnodes in random arrangements.\nThe latter is the seed of the pseudo-random generator used during the simulation, e.g. for computing time distributions\nor generating random positions.\nA typical example in which one may want to have different values, is to keep the same random displacement of devices in\nsome scenario but allow events to happen with different timings.<\/p>\n<p>A typical <code>seed<\/code> section may look like:<\/p>\n<pre><code class=\"language-yaml\">seeds:\n  scenario: 0\n  simulation: 1\n<\/code><\/pre>\n<p>Usually, in batches, you wan to run multiple runs per experiment, varying the simulation seed, in order to get more\nreliable data (and appropriate error bars).\nAs per any other value, variables can be feeded as random generator seeds.\nIn the following example, 100 simulations are generated with different seeds (both for environment configuration and\nsimulation execution)<\/p>\n<pre><code class=\"language-yaml\">variables:\n  random: &amp;random\n    min: 0\n    max: 9\n    step: 1\n    default: 0\nseeds:\n  # reference to the `random` variable\n  scenario: *random\n  simulation: *random\n<\/code><\/pre>\n<h2 id=\"defining-the-network\">Defining the network<\/h2>\n<p>The <code>network-model<\/code> key is used to load the implementation of {{ anchor('LinkingRule') }} to be used in the simulation,\nwhich determines the neighborhood of every node.\nThe key is optional, but defaults to {{ anchor('NoLinks') }}, so if unspecified nodes in the environment don't get\nconnected.\nOmitting such key is equivalent to writing any of the following:<\/p>\n<pre><code class=\"language-yaml\">network-model:\n  type: NoLinks\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">network-model:\n  type: it.unibo.alchemist.model.implementations.linkingrules.NoLinks\n  parameters: []\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">network-model:\n  type: NoLinks\n  parameters: []\n<\/code><\/pre>\n<p>If no fully qualified linking rule name is provided for class loading, Alchemist uses the package\n{{ anchor('it.unibo.alchemist.model.implementations.linkingrules') }} to search for the class.<\/p>\n<h3 id=\"linking-nodes-based-on-distance\">Linking nodes based on distance<\/h3>\n<p>One of the most common ways of linking nodes is to connect those which are close enough to each other. To do so, you can\nuse the class {{ anchor('ConnectWithinDistance') }}, passing a parameter representing the maximum connection distance.\nNote that such distance depends on the environment: while the definition of distance is straightforward for euclidean\nspaces, it's not so for <a href=\"https://en.wikipedia.org/wiki/Riemannian_geometry\">Riemannian manifolds<\/a>, which is a fancy\nname to define geometries such as the one typical of a urban map (you can roughly interpret it as a euclidean space\n&quot;with holes&quot;).\nFor instance, in case of environments using {{ anchor('GeoPosition') }}, the distance is computed in meters, so the\ndistance between <code>[44.133254, 12.237770]<\/code> and <code>[44.146680, 12.258627]<\/code> is about <code>2240<\/code> (meters).<\/p>\n<pre><code class=\"language-yaml\">network-model:\n  type: ConnectWithinDistance\n  # Link together all the nodes closer than 100 according to the distance function\n  parameters: [100]\n<\/code><\/pre>\n<h2 id=\"displacing-nodes\">Displacing nodes<\/h2>\n<p>The <code>displacements<\/code> section lists the node locations at the beginning of the simulation.\nEach displacement type extends the interface {{ anchor('Displacement') }}. If no fully qualified displacement name is\nprovided for class loading,\nAlchemist uses the package {{ anchor('it.unibo.alchemist.loader.displacements') }} to search for the class.\nThe YAML key associated to displacements is <code>in<\/code>.<\/p>\n<h3 id=\"displacing-on-specific-positions\">Displacing on specific positions<\/h3>\n<p>The following example places a single node in the (0, 0) {{ anchor('Point') }}.<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  # &quot;in&quot; entries, where each entry defines a group of nodes\n  - in:\n      type: Point\n      # Using a constructor taking (x,y) coordinates\n      parameters: [0, 0]\n<\/code><\/pre>\n<h3 id=\"displacing-multiple-nodes-on-specific-positions\">Displacing multiple nodes on specific positions<\/h3>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: SpecificPositions\n      parameters: [[0,1],[2,2],[3,4]]\n<\/code><\/pre>\n<h3 id=\"displacing-multiple-nodes-at-once\">Displacing multiple nodes at once<\/h3>\n<p>This example places 10000 nodes randomly in a {{ anchor('Circle') }} with center in (0, 0) and radius 10.<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: Circle\n      parameters: [10000, 0, 0, 10]\n<\/code><\/pre>\n<p>Here instead nodes are located in a {{ anchor('Grid') }} centered in (0, 0), with nodes distanced of 0.25 both\nhorizontally and vertically, and whose position is not exact but randomly perturbed (±0.1 distance units).<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: Grid\n      parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n<\/code><\/pre>\n<h3 id=\"customizing-the-node-type\">Customizing the node type<\/h3>\n<p>In order to specify a particular node implementation you want to put inside the environment you can use the <code>nodes<\/code> key\nfollowed by the name of the class and the parameters required to build it.<\/p>\n<p>100 <code>MyCustomNodeImpl<\/code> nodes, whose constructor needs only the environment, placed in a circle with center in (0, 0) and\nradius 20.<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: Circle\n      parameters: [100, 0, 0, 20]\n    nodes:\n      type: MyCustomNodeImpl\n      parameters: []\n<\/code><\/pre>\n<p>The empty parameters section can be omitted (as per custom class loading mechanism):<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: Circle\n      parameters: [100, 0, 0, 20]\n    nodes:\n      type: MyCustomNodeImpl\n<\/code><\/pre>\n<h3 id=\"customizing-the-nodes-content\">Customizing the nodes content<\/h3>\n<p>It is possible to set the content of the nodes inside a given region. Only the nodes inside the {{ anchor('Rectangle') }} area contain\nthe <code>source<\/code> and <code>randomSensor<\/code> molecules (global variables).<\/p>\n<pre><code class=\"language-yaml\">displacements:\n  - in:\n      type: Grid\n      parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n    contents:\n      - in:\n          type: Rectangle\n          parameters: [-6, -6, 2, 2]\n        molecule: source\n        concentration: true\n      - molecule: randomSensor\n        concentration: &gt;\n          import java.lang.Math.random\n          random() * pi\n<\/code><\/pre>\n<h2 id=\"writing-behaviors-reactions\">Writing behaviors (Reactions)<\/h2>\n<p>TODO!<\/p>\n<p>Nodes can be programmed using reactions.<\/p>\n<pre><code class=\"language-yaml\"># Variable representing the program to be executed\ngradient: &amp;gradient\n  - time-distribution: 1\n    # Make sure that the program folder is part of the project classpath\n    program: program:package:distanceTo\n  - program: send\ndisplacements:\n  - in:\n      type: Grid\n      parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]\n    programs:\n      # Reference to the &quot;gradient&quot; list of programs. This program is executed in all\n      # the grid nodes\n      - *gradient\n<\/code><\/pre>\n<h3 id=\"triggers\">Triggers<\/h3>\n<pre><code class=\"language-yaml\">pools:\n  - pool:\n      - time-distribution:\n          type: Trigger\n          parameters: [0] # the param is the time step\n      type: Event\n      actions:\n        - type: MyActionType\n          parameters: [...] #\n<\/code><\/pre>\n<h2 id=\"writing-layers\">Writing layers<\/h2>\n<p>It is possible to define overlays (layers) of data that can be sensed everywhere in the environment.\nLayers can be used to model physical properties, such as pollution, light, temperature, and so on.\nConversely than readings from nodes' contents, layers have no dependency optimization.\nThis implies that reactions that read values from layers should have special care in defining their <code>context<\/code> appropriately<\/p>\n<p>In order to create layer, the programmer must define the type of the layer, a molecule that will be used as identifier,\nand possibly the parameters needed for intializing the type of layer you have chosen, as per the <a href=\"#loading-arbitrary-java-classes-with-the-typeparameters-syntax\"><code>type/parameter<\/code> syntax<\/a>.<\/p>\n<p>The following example exemplifies the syntax for initializing two {{ anchor('BidimensionalGaussianLayer') }}:<\/p>\n<pre><code class=\"language-yaml\">layers:\n  - type: BidimensionalGaussianLayer\n    molecule: foo\n    parameters: [0.0, 0.0, 2.0, 5.0]\n  - type: BidimensionalGaussianLayer\n    molecule: bar\n    parameters: [0.0, 0.0, 5.0, 10.0]\n<\/code><\/pre>\n<h2 id=\"terminating-the-simulation-if-a-condition-is-met\">Terminating the simulation if a condition is met<\/h2>\n<p>Alchemist supports the possibility to write termination conditions for any simulation.\nTermination conditions are checked after every event, and, if met, cause the immediate termination of a simulation.\nTermination conditions are expected to be found in the {{ anchor('it.unibo.alchemist.model.implementations.terminators') }} package.<\/p>\n<p>To load them, use the <code>terminators<\/code> keyword.\nMultiple terminators are allowed, the first terminator matching causes the termination of the simulation (they are in and).<\/p>\n<p>Here is an example:<\/p>\n<pre><code class=\"language-yaml\">terminate:\n  # Defines a new terminator which every 100 simulation steps for the environment to remain equal for the 10 subsequent\n  # simulation steps. If no change is detected, then the simulation is intended as concluded.\n  - type: StableForSteps\n    parameters: [100, 10]\n<\/code><\/pre>\n<h3 id=\"terminating-the-simulation-if-the-environment-is-not-changing\">Terminating the simulation if the environment is not changing<\/h3>\n<p>A terminator is provided for terminating when a simulation is &quot;stable&quot; (nothing changes in terms of positions and nodes' content).\nThe class implementing it is {{ anchor('StableForSteps')) }}.\nThe following code snippet exemplifies its usage:<\/p>\n<pre><code class=\"language-yaml\">terminate:\n  # Defines a new terminator which every 100 simulation steps for the environment to remain equal for the 10 subsequent\n  # simulation steps. If no change is detected, then the simulation is intended as concluded.\n  - type: StableForSteps\n    parameters: [100, 10]\n<\/code><\/pre>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "usage",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/usage"
          },
          "next": {
            "path": "wiki/usage",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "installation",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/usage/installation"
          },
          "previous": {
            "path": "wiki/simulator",
            "baseUrl": "https://alchemistsimulator.github.io/latest",
            "fileName": "metamodel",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://alchemistsimulator.github.io/latest/wiki/simulator/metamodel"
          },
          "description": "",
          "title": "Using Alchemist",
          "content": "<p>Using Alchemist<\/p>\n"
        }]
      }
    },
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "https://alchemistsimulator.github.io/latest",
        "fileName": "wiki",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://alchemistsimulator.github.io/latest/wiki"
      },
      "description": "",
      "title": "Wiki",
      "content": "<html>\n <head><\/head>\n <body>\n  <h1 id=\"alchemist-simulator-user-guide\">Alchemist simulator user guide<\/h1> \n  <ul> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/simulator\">Understanding Alchemist<\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/simulator/metamodel\">The metamodel<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage\">Using Alchemist<\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/installation\">Requirements and installation<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/quickstart\">Quick start<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/run-gradle\">Running Alchemist via Gradle<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/run-stand-alone\">Running Alchemist stand-alone<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/yaml\">How to write simulations<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/gui\">Graphical interface<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/biochemistry\">Biology and Biochemistry<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/protelis\">Protelis<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/sapere\">SAPERE<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/scafi\">Scafi<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/indoor\">Indoor environments<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/cognitive-agents\">Cognitive Agents<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/smartcam\">Smart Cameras<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/maps\">Maps and GPS traces<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/export\">Exporting data<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/batch\">Executing batches<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/grid\">Grid computing support<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/customization\">Writing custom components<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/faq\">Frequently Asked Questions<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/usage/issues\">Troubleshooting and known issues<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/examples\">Simulation examples<\/a> \n    <ul> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/examples/protelis\">With Protelis<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/examples/scafi\">With Scafi<\/a><\/li> \n     <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/examples/maps\">On maps<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://alchemistsimulator.github.io/latest/wiki/license\">License<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
    }]
  }}
}